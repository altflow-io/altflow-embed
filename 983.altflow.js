"use strict";(self.webpackChunkaltflow_ui=self.webpackChunkaltflow_ui||[]).push([[983],{983:(e,t,n)=>{n.r(t),n.d(t,{default:()=>sn});var r=n(4572),l=n(5861),a=n(885),o=n(4687),i=n.n(o),u=n(6908),c=n(5974),s=n(120),d=n(1647),p=n(2982),m=n(6482),v=n(2530),f=n(30),y=n(5305),b=n(1189),g=n(1388),h=n(9894),E=n(1702);function Z(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Z(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Z(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var w=function(e,t,n){var r,l=Array.isArray(t)?t:[t],a=n&&n("".concat(null==e?void 0:e.parent))||void 0,o=null==l?void 0:l.find((function(e){var t,n;return null!=e&&null!==(t=e.value)&&void 0!==t&&t.and?!(null==e||null===(n=e.value)||void 0===n||!n.and)||void 0:(null==e?void 0:e.value)===a}));return o?null!=o&&null!==(r=o.value)&&void 0!==r&&r.and?O(e,o,n):k(o,a):{hide:!0}},O=function(e,t,n){var l;return!1===t.value.and.every((function(r){if(null==r||!r.key){var l=n&&n("".concat(e.parent))||void 0;return!1===k({type:t.type,value:r.value},l).hide}var a=n&&n("".concat(e._metadata.key,".").concat(r.key))||void 0;return!1===k({type:t.type,value:r.value},a).hide}))?{hide:!0}:(l={},(0,r.Z)(l,t.type,!0),(0,r.Z)(l,"props",x({},t.props)),l)},k=function(e,t){var n,l;if(null===e)return{hide:!0};var a="".concat(e.value)==="".concat(t);if(!a&&"hide"===e.type)return{hide:!1};if(!a&&"show"===e.type)return{hide:!0};switch(e.type){case"disabled":return n={},(0,r.Z)(n,e.type,a),(0,r.Z)(n,"props",x({},e.props)),n;case"show":return{hide:!a,props:x({},e.props)};default:return l={},(0,r.Z)(l,e.type,!0),(0,r.Z)(l,"props",x({},e.props)),l}},j=n(7294),P=n(7536),S=n(7462),C=n(6804),D=n(8790),F=n(2949),T=n(4917),V=n(599),A=n(3483),R=n(2853),I=n(7888),M=n(7546),L=n(8904),q=n(8037),z=n(2283),N=n(6569),W=n(9960),_=n(4744),B=n(4825),H=n(2856),U=n(1746),G=n(7619),Y=n(9116),K=n(7856),J=n.n(K),Q=function(e){try{return J().sanitize(e)}catch(t){return e}},X=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];try{var n,r,l;return Q(null==e||null===(n=e.split("\n"))||void 0===n||null===(r=n.map((function(e){return t?Q(e):e})))||void 0===r||null===(l=r.join("<br/>"))||void 0===l?void 0:l.toString())}catch(t){return Q(e)}},$=function(e){try{return Number(e)}catch(t){return console.error("textToNumber - failed to convert value: ".concat(e," to number"),t),0}},ee=function(e){var t,n,r,l=e.label,o=e.altField,i=e.controlledField,u=(e.getValues,e.setValue,e.error),c=e.condition,s=(0,j.useState)((n=o.component,r=i.value,"range"===n?r&&Array.isArray(r)?null==r?void 0:r.map(Number):[0,0]:$(r))),d=(0,a.Z)(s,2),m=d[0],v=d[1],f=function(){try{var e,t,n,r,l,a,i=(0,p.Z)((null==o||null===(e=o.choices)||void 0===e?void 0:e.sort((function(e,t){var n,r;return Number(null!==(n=null==e?void 0:e.value)&&void 0!==n?n:0)-Number(null!==(r=null==t?void 0:t.value)&&void 0!==r?r:0)})))||[]),u=null!==(t=null!==(n=null==i||null===(r=i[0])||void 0===r?void 0:r.value)&&void 0!==n?n:null==i?void 0:i[0])&&void 0!==t?t:0,c=null==i?void 0:i.pop();return{min:$(u),max:$(null!==(l=null!==(a=null==c?void 0:c.value)&&void 0!==a?a:c)&&void 0!==l?l:0)}}catch(e){return console.error("component::slider - failed to get range min, max, returning default 0, 100",e),{min:0,max:100}}}(),y=f.min,b=f.max;return j.createElement(j.Fragment,null,j.createElement(T.Z,null,l),j.createElement(I.Z,(0,S.Z)({component:"div",sx:{width:"95%",display:"flex",justifySelf:"center",mx:"auto"}},i,null==c?void 0:c.props),j.createElement(Y.ZP,(0,S.Z)({getAriaLabel:function(){return"".concat(o.component)}},i,{value:m,onChange:function(e,t){v(t),i.onChange(t)},step:null,min:y,max:b,marks:null===(t=o.choices)||void 0===t?void 0:t.map((function(e){return{value:$(null==e?void 0:e.value),label:null==e?void 0:e.display}})),valueLabelDisplay:"off"})),j.createElement(R.Z,null,o.sub||""),u&&j.createElement(R.Z,null,u||"")))},te=n(2004),ne=function(e){var t=e.label,n=e.altField,r=e.controlledField;return e.getValues,e.setValue,e.error,e.condition,j.createElement(j.Fragment,null,j.createElement(T.Z,{sx:{display:"flex",alignItems:"center"}},t,j.createElement(D.Z,{title:null!=n&&n.required?"You must watch the video before moving on":"This video is optional to watch",placement:"right",sx:{ml:"4px"}},j.createElement(C.Z,{fontSize:"inherit"}))),j.createElement(R.Z,null,n.sub||""),j.createElement(s.Z,{component:"div",className:"video-player-wrapper",sx:{minWidth:{sm:"100%",md:"unset"},height:{sm:"300px",md:"420px"}}},j.createElement(te.Z,{url:n.watch,controls:!0,loop:!1,width:"100%",height:"100%",onEnded:function(){try{var e,t;(null==n||null===(e=n.props)||void 0===e?void 0:e.onEnded)&&(null==n||null===(t=n.props)||void 0===t||t.onEnded()),r.onChange("completed")}catch(e){console.log("error in video onEnded",e)}}})))},re=function(e){var t,n=e.altField,r=e.controlledField,l=e.condition,o=e.label,i=(0,j.useState)(r.value||[]),u=(0,a.Z)(i,2),c=u[0],s=u[1];return j.createElement(j.Fragment,null,j.createElement(I.Z,(0,S.Z)({component:"fieldset",variant:"outlined"},l),j.createElement(M.Z,{component:"legend"},o),null==n||null===(t=n.choices)||void 0===t?void 0:t.map((function(e,t){return j.createElement(q.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,control:j.createElement(W.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:c.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,p.Z)(c),[t]):c.filter((function(e){return e!==t}));r.onChange(n.length>0?n:void 0),s(n)},value:null==e?void 0:e.value}),label:null==e?void 0:e.display})})),j.createElement(R.Z,null,n.sub)))},le=n(9794),ae=n(5591),oe=n(8227),ie=n(9316),ue=n(130),ce=n(3896),se=n(9031);function de(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?de(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):de(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var me=function(e){var t,n,r=e.label,l=e.altField,o=e.controlledField,i=e.getValues,u=e.setValue,c=e.error,m=e.condition,v=(0,j.useState)(""),f=(0,a.Z)(v,2),y=f[0],b=f[1],h=function(e){var t;null!==(t=i(l.key))&&void 0!==t&&t.includes(y.trim())||""===y||(u(l.key,[].concat((0,p.Z)(null==o?void 0:o.value),[y.trim()]),{shouldTouch:!0,shouldValidate:!0,shouldDirty:!0}),b(""),e.target.value="")};return j.createElement(s.Z,{key:l.key},j.createElement(d.Z,{variant:"body1",component:"span"},r),j.createElement(R.Z,null,l.sub||""," Friendly Reminder: Be sure to press Enter/Return or Tab when you are done writing!"),j.createElement(oe.ZP,(0,S.Z)({required:!0,type:"text",sx:pe({flex:1,height:"2em",fontSize:"16px",width:"100%"},se.VH)},l.props,{placeholder:"Type your answer choice and then press Enter/Return or Tab to save",inputProps:{"aria-label":l.label}},null==m?void 0:m.props,{value:y,onKeyDown:function(e){["Enter","Tab"].includes(e.key)&&(e.preventDefault(),h(e))},onChange:function(e){b(e.target.value)},endAdornment:(null==y?void 0:y.length)<1&&c?j.createElement(ie.Z,{position:"end"},j.createElement(le.Z,{color:"error"})):(null==y?void 0:y.length)>0&&j.createElement(ie.Z,{position:"end"},j.createElement(ue.Z,{onClick:h,size:"small",color:"primary"},j.createElement(ae.Z,null))),color:c?"error":"primary"})),j.createElement(ce.Z,{sx:{display:"flex",justifyContent:"center",flexWrap:"wrap",listStyle:"none",p:.5,m:0,maxHeight:"200px",overflowX:"scroll"},component:"ul"},null===(t=(null==o?void 0:o.value)||[])||void 0===t||null===(n=t.map((function(e,t){return j.createElement(g.ZP,{key:"index-".concat(t,"-").concat(e)},j.createElement(A.Z,{label:e,onDelete:function(){var t,n=null===(t=o.value)||void 0===t?void 0:t.filter((function(t){return t!==e}));o.onChange(n.length?n:"")}}))})))||void 0===n?void 0:n.reverse()))},ve=(0,j.createContext)({uploads:{}}),fe=n(463),ye=n(9250),be=n(6388),ge=n.n(be);function he(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?he(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):he(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ze=function(e,t){var n=t("".concat(null==e?void 0:e.parent))||void 0,r=(null==e?void 0:e.condition)&&e.parent&&w(e,(null==e?void 0:e.condition)||null,t);return null!=r&&r.hide||null!=e&&e.parent&&void 0===n?null:Ee(Ee({},e),{},{props:Ee(Ee({},(null==e?void 0:e.props)||void 0),(null==r?void 0:r.props)||void 0)})},xe="create-flow",we="alt-last-field",Oe=function(e){var t;return(null===(t=e.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g))||void 0===t?void 0:t.join("-").toLowerCase())||e},ke={0:{fields:{name:{props:{}},slug:{props:{disabled:!0,hidden:!0}}}}};function je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?je(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Se=ge().create({baseURL:"".concat("https://r5us0tfix4.execute-api.us-east-1.amazonaws.com/prod/"),timeout:6e4});Se.interceptors.response.use((function(e){var t,n,r;return null!==(t=e.config.url)&&void 0!==t&&t.includes("/flows/".concat(xe))?(console.log("inside create-flow intercept"),e.data=Pe(Pe({},e.data),{},{sections:null===(n=e.data)||void 0===n||null===(r=n.sections)||void 0===r?void 0:r.map((function(e,t){var n;return null!==(n=ke)&&void 0!==n&&n[t]?Pe(Pe({},e),{},{fields:e.fields.map((function(e){var n,r,l=null===(n=ke)||void 0===n||null===(r=n[t])||void 0===r?void 0:r.fields;return null!=l&&l[e.key]?Pe(Pe({},e),null==l?void 0:l[e.key]):e}))}):e}))}),e):e}),(function(e){return Promise.reject(e)}));const Ce=Se;function De(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?De(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):De(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Te=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,o){var u,c,s,d,p,m,v;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return d=function(){return d=(0,l.Z)(i().mark((function e(){var l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ce.get("flows/".concat(t,"/upload?fileType=").concat(r,"&type=").concat(n));case 2:return l=e.sent,a=l.data,e.abrupt("return",a);case 5:case"end":return e.stop()}}),e)}))),d.apply(this,arguments)},s=function(){return d.apply(this,arguments)},e.next=4,s();case 4:return p=e.sent,m=null===(u=Object.keys(p.fields||{}))||void 0===u||null===(c=u.filter((function(e){return e.startsWith("x-amz-meta-")})))||void 0===c?void 0:c.reduce((function(e,t){return e[t]=p.fields[t],e}),{}),(v=new FormData).append("Content-Type",r),Object.entries(p.fields).forEach((function(e){var t=(0,a.Z)(e,2),n=t[0],r=t[1];v.append(n,r)})),v.append("file",o),e.next=12,ge().post(p.url,v,{headers:Fe({"Content-Type":"multipart/form-data"},m)});case 12:return e.abrupt("return","".concat(p.url,"/").concat(p.filePath));case 13:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}();function Ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ve(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Re={display:"flex",flexDirection:"row",flexWrap:"wrap",marginTop:16},Ie={display:"inline-flex",borderRadius:2,border:"1px solid #eaeaea",marginBottom:8,marginRight:8,height:100,padding:4,boxSizing:"border-box"},Me={display:"flex",minWidth:0,overflow:"hidden"},Le={display:"block",width:"auto",height:"100%"},qe={borderColor:"#2196f3"},ze={borderColor:"#00e676"},Ne={borderColor:"#ff1744"},We={image:{"image/*":[]},all:{"image/*":[],"application/pdf":[".pdf"]}},_e=function(e){var t,n=e.altField,o=e.type,u=e.fileType,c=(0,ye.UO)().slug,s=(0,j.useContext)(ve),d=(0,j.useState)(n.defaultValue?[{name:n.defaultValue,preview:n.defaultValue}]:[]),p=(0,a.Z)(d,2),m=p[0],v=p[1],f=(0,fe.uI)({accept:We[u],maxFiles:1,onDrop:(t=(0,l.Z)(i().mark((function e(t){var l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return l=null==t?void 0:t[0],e.next=3,Te(c,o,l.type,l);case 3:a=e.sent,s.uploads=Ae(Ae({},s.uploads),{},(0,r.Z)({},n.key,a)),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,a,{shouldDirty:!0})),v(t.map((function(e){return Object.assign(e,{preview:URL.createObjectURL(e)})})));case 7:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})}),b=f.getRootProps,g=f.open,h=f.getInputProps,E=f.isFocused,Z=f.isDragAccept,x=f.isDragReject,w=f.fileRejections,O=(0,j.useMemo)((function(){return Ae(Ae(Ae(Ae({},{flex:1,display:"flex",flexDirection:"column",alignItems:"center",padding:"20px",borderWidth:2,borderRadius:"18px",borderColor:"#eeeeee",borderStyle:"dashed",backgroundColor:"#fafafa",color:"#bdbdbd",outline:"none",transition:"border .24s ease-in-out"}),E?qe:{}),Z?ze:{}),x?Ne:{})}),[E,Z,x]);(0,j.useEffect)((function(){return function(){return m.forEach((function(e){return URL.revokeObjectURL(e.preview)}))}}),[]);var k=m.map((function(e){return j.createElement("div",{style:Ie,key:e.name},j.createElement("div",{style:Me},j.createElement("img",{src:e.preview,style:Le,onLoad:function(){URL.revokeObjectURL(e.preview)},onError:function(e){return e.currentTarget.src=""}})))}));return j.createElement(j.Fragment,null,j.createElement("div",{className:"container"},(null==m?void 0:m.length)<1&&j.createElement("div",b({style:O}),j.createElement("input",h()),j.createElement("p",null,"Drag file here or"),j.createElement(y.Z,{size:"small",variant:"outlined","aria-label":"upload",onClick:g},"Select file")),j.createElement("aside",{style:Re},k)),null==w?void 0:w.map((function(e){var t=e.file,n=e.errors;return j.createElement("li",{key:t.path},t.path,j.createElement("ul",null,n.map((function(e){return j.createElement("li",{key:e.code},e.message)}))))})),m.length>0&&j.createElement(y.Z,{size:"small",color:"error",variant:"outlined","aria-label":"delete",onClick:function(){null==m||m.forEach((function(e){return URL.revokeObjectURL(e.preview)})),v([]),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,"",{shouldDirty:!0}))}},"Delete"))},Be=n(2784),He=n(5613),Ue={display:"unset",border:"1px solid black",borderRadius:"18px",ml:"0",my:1,p:2,textAlign:"center"},Ge=function(e){var t,n,r=e.altField,l=e.controlledField,o=e.condition,i=e.label,u=(0,j.useState)(l.value),c=(0,a.Z)(u,2),s=c[0],d=c[1];return j.createElement(j.Fragment,null,r.multiple?j.createElement(I.Z,(0,S.Z)({component:"div",variant:"outlined"},o),j.createElement(M.Z,{component:"legend"},i),null==r||null===(t=r.choices)||void 0===t?void 0:t.map((function(e,t){return j.createElement(q.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Ue,control:j.createElement(Be.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},j.createElement(W.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:s.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,p.Z)(s),[t]):s.filter((function(e){return e!==t}));l.onChange(n),d(n)},value:null==e?void 0:e.value}),j.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),j.createElement(He.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})}))):j.createElement(I.Z,(0,S.Z)({component:"div",variant:"outlined"},l,null==o?void 0:o.props),j.createElement(M.Z,{component:"legend"},i),j.createElement(L.Z,{value:l.value},null==r||null===(n=r.choices)||void 0===n?void 0:n.map((function(e,t){return j.createElement(q.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Ue,control:j.createElement(Be.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},j.createElement(z.Z,{value:null==e?void 0:e.value}),j.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),j.createElement(He.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})})))))},Ye=n(9062),Ke=n(4373),Je=n(8877),Qe=n.n(Je),Xe=function(e){var t=e.altField,n=e.label,r=(0,j.useState)(null),l=(0,a.Z)(r,2),o=l[0],i=l[1];return(0,j.useEffect)((function(){null==o||o.fromDataURL(t.defaultValue)}),[o]),j.createElement(j.Fragment,null,j.createElement(T.Z,{id:"".concat(t.key,"-label"),sx:{display:"flex",alignItems:"center"}},n,j.createElement(D.Z,{title:"This is a signature pad, start drawing within the box",placement:"right",sx:{ml:"4px"}},j.createElement(C.Z,{fontSize:"inherit"})),j.createElement("br",null)),j.createElement(R.Z,null,t.sub||""),j.createElement(s.Z,{id:"signature-box",sx:{textAlign:"center"},style:{border:"1px dotted black",borderRadius:"4px",padding:"4px"}},j.createElement(Qe(),{ref:function(e){i(e)},onEnd:function(){if(null!=o&&o.isEmpty())throw Error("Signature not signed");try{var e=null==o?void 0:o.getTrimmedCanvas().toDataURL();(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,e))}catch(e){console.log("signature-canvas error",e)}},clearOnResize:!1,penColor:"black",canvasProps:{height:450,className:"altflow-signature-canvas",style:{width:"100%"}}}),j.createElement(Ke.Z,null),j.createElement(y.Z,{size:"small",variant:"outlined","aria-label":"clear signature canvas",fullWidth:!0,onClick:function(){null==o||o.clear(),(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,null))},startIcon:j.createElement(Ye.Z,null),sx:{mt:"4px"}},"Clear")))},$e=n(9208),et=n.n($e);function tt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tt(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var rt={fullWidth:!0},lt=n(56),at=n(4683),ot=n(1008),it=n(5504),ut=n(1374),ct=n(1399),st=n(8370),dt=n(5873),pt=n(2079),mt=n(6496),vt=n(6898),ft=n(3204),yt=n(311),bt=function(e,t,n,r,l){var a,o,i=t("".concat(null==e?void 0:e.parent))||void 0,u=(null==e?void 0:e.condition)&&e.parent&&w(e,(null==e?void 0:e.condition)||null,t);if(null!=u&&u.hide)return null;if(null!=e&&e.parent&&void 0===i)return null;var c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3?arguments[3]:void 0,l=function(e){try{return"string"==typeof e?e:JSON.stringify(e)}catch(t){return e}};switch(e){case"toggle":return null!=t&&t;case"checkbox":case"picture-selection":case"autocomplete":case"select":return n?void 0!==t&&t?Array.isArray(t)&&t.length<1?[]:Array.isArray(t)?t:[t]:[]:null!=t?t:"";case"radio":case"video":case"signature":return null!=t?t:"";default:return r?l(t):t||""}}(e.component,e.defaultValue,null!==(a=null==e?void 0:e.multiple)&&void 0!==a&&a,"json"===(null==e?void 0:e.format)||!1);return j.createElement(j.Fragment,null,"header"!==e.component?j.createElement(P.Qr,{key:e.key,name:e.key,control:r,rules:{required:null!==(o=null==e?void 0:e.required)&&void 0!==o&&o},defaultValue:c,render:function(r){var a=r.field;return j.createElement(s.Z,{sx:{pb:1}},function(e){var t,n,r,l,a=e.altField,o=e.controlledField,i=e.getValues,u=e.setValue,c=e.condition,p=e.errors,m=Oe(a.key),v=j.createElement(j.Fragment,null,a.label,null!=a&&a.required?"*":"",null!=a&&a.tip?j.createElement(D.Z,{title:null==a?void 0:a.tip,placement:"right",sx:{ml:"4px"}},j.createElement(C.Z,{fontSize:"inherit"})):null,!0===a.multiple&&j.createElement(D.Z,{title:"You can choose multiple options",placement:"right",sx:{ml:"4px"}},j.createElement(C.Z,{fontSize:"inherit"}))),f=et()(p,a.key,null)||null;if(null!=a&&null!==(t=a.props)&&void 0!==t&&t.hidden)return j.createElement(F.Z,(0,S.Z)({error:(null===(l=Object.keys(f||{}))||void 0===l?void 0:l.length)>0},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,rt,{style:{display:"none"}}));switch(a.component){case"autocomplete":var y;return j.createElement(j.Fragment,null,j.createElement(T.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),j.createElement(V.Z,(0,S.Z)({disablePortal:!0,options:a.choices,getOptionLabel:function(e){var t;return null!==(t=null==e?void 0:e.display)&&void 0!==t?t:e},isOptionEqualToValue:function(e,t){return e.value===t},key:m,multiple:null!==(y=null==a?void 0:a.multiple)&&void 0!==y&&y,renderTags:function(e,t){return null==e?void 0:e.map((function(e,n){return j.createElement(A.Z,(0,S.Z)({variant:"outlined",label:e},t({index:n})))}))},renderInput:function(e){return j.createElement(F.Z,e)},onChange:function(e,t){t?o.onChange(Array.isArray(t)?null==t?void 0:t.map((function(e){return null==e?void 0:e.value})):null==t?void 0:t.value):o.onChange("")},value:a.defaultValue},null==c?void 0:c.props,a.props,rt)),j.createElement(R.Z,null,a.sub||""));case"date":return j.createElement(H._,{dateAdapter:G.H},j.createElement(T.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),j.createElement(U.M,(0,S.Z)({inputFormat:"MM-dd-yyyy"},o,{renderInput:function(e){return j.createElement(F.Z,(0,S.Z)({},e,{error:f,label:"MM-dd-yyyy"},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,rt))}})));case"input":return"date"===(null==a?void 0:a.type)?j.createElement(H._,{dateAdapter:G.H},j.createElement(T.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),j.createElement(U.M,(0,S.Z)({inputFormat:"MM-dd-yyyy"},o,{renderInput:function(e){var t;return j.createElement(F.Z,(0,S.Z)({},e,{error:(null===(t=Object.keys(f||{}))||void 0===t?void 0:t.length)>0,label:"MM-dd-yyyy"},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,rt))}}))):j.createElement(j.Fragment,null,j.createElement(T.Z,{id:"".concat(m,"-label")},v),j.createElement(F.Z,(0,S.Z)({error:(null===(n=Object.keys(f||{}))||void 0===n?void 0:n.length)>0},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,rt)));case"textarea":return j.createElement(j.Fragment,null,j.createElement(T.Z,{id:"".concat(m,"-label")},v),j.createElement(F.Z,(0,S.Z)({error:f},o,null==c?void 0:c.props,{multiline:!0,resize:"true",minRows:3,type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,rt)));case"radio":return j.createElement(j.Fragment,null,j.createElement(I.Z,(0,S.Z)({component:"fieldset",variant:"outlined"},o,null==c?void 0:c.props,rt),j.createElement(M.Z,{id:"".concat(m,"-label")},v),j.createElement(L.Z,{value:o.value,key:m,id:m},null===(r=a.choices)||void 0===r?void 0:r.map((function(e){var t,n;return j.createElement(q.Z,{key:null!==(t=null==e?void 0:e.value)&&void 0!==t?t:null==e?void 0:e.display,value:null!==(n=null==e?void 0:e.value)&&void 0!==n?n:null==e?void 0:e.display,control:j.createElement(z.Z,null),label:null==e?void 0:e.display})}))),j.createElement(R.Z,null,a.sub||"")));case"toggle":return j.createElement(j.Fragment,null,j.createElement(M.Z,{id:"".concat(m,"-label")},v),j.createElement(N.Z,(0,S.Z)({id:m,required:a.required,defaultChecked:a.defaultValue,edge:"end",inputProps:{"aria-labelledby":a.label}},o,null==c?void 0:c.props,a.props)),j.createElement(R.Z,null,a.sub||""));case"picture-selection":return j.createElement(Ge,{altField:a,controlledField:o,label:v,condition:c});case"checkbox":return a.key!==we?j.createElement(j.Fragment,null,!0===a.multiple?j.createElement(re,{altField:a,controlledField:o,label:v,condition:c}):j.createElement(I.Z,(0,S.Z)({component:"fieldset",variant:"outlined"},o,null==c?void 0:c.props),j.createElement(q.Z,{key:m,value:v,control:j.createElement(W.Z,{key:m,id:m,name:a.label,defaultChecked:a.defaultValue}),label:v}),j.createElement(R.Z,null,a.sub))):null;case"select":var b,g;return j.createElement(j.Fragment,null,j.createElement(T.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),j.createElement(_.Z,(0,S.Z)({id:m,key:m},o,null==c?void 0:c.props,{multiple:null!==(b=null==a?void 0:a.multiple)&&void 0!==b&&b,required:a.required,labelId:"".concat(m,"-label")},a.props,rt),null===(g=a.choices)||void 0===g?void 0:g.map((function(e){return j.createElement(B.Z,{key:null==e?void 0:e.value,value:null==e?void 0:e.value,divider:!0},null==e?void 0:e.display)}))),j.createElement(R.Z,null,a.sub));case"video":return j.createElement(ne,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:f,condition:c});case"signature":return j.createElement(Xe,{altField:a,label:v});case"upload":return j.createElement(s.Z,{key:m,sx:{width:"100%"}},j.createElement(d.Z,{variant:"body1",component:"span"},v),j.createElement(d.Z,{variant:"body2",component:"p"},a.sub),j.createElement(_e,{altField:nt(nt({},a),{},{setValue:u}),fileType:"all",type:"user"}),j.createElement(R.Z,null,a.sub||""));case"chip":return j.createElement(me,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:f,condition:c});case"linear":case"range":return j.createElement(ee,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:f,condition:c})}}({altField:e,controlledField:a,getValues:t,setValue:n,condition:u,errors:l}))}}):function(e){if("header"===e.component)return j.createElement(j.Fragment,null,j.createElement("h3",null,e.label),j.createElement("h4",null,e.sub))}(e))},gt=n(4561),ht=n(9655);function Et(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Et(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Et(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var xt=function(e){var t,n,o,u,c,b,g,h,E,Z,x=e.flowSlug,w=e.id,O=e.header,k=e.allFields,S=e.next,C=e.settings,D=e.answers,F=e.fieldOverrides,T=e.onSubmit,V=e.onStatusChange,A=e.onCreateFlowFromTemplateSelection,R=(0,ye.s0)(),I=(0,ht.lr)(),M=(0,a.Z)(I,1)[0],L=(0,j.useState)(null==C?void 0:C.showOneFieldAtATime),q=(0,a.Z)(L,2),z=q[0],N=(q[1],(0,j.useState)(function(e,t){return[].concat((0,p.Z)(e.map((function(e){return Zt(Zt({},e),{},{defaultValue:null==t?void 0:t[e.key]})}))),[{key:we,label:"",component:"checkbox",defaultValue:!0}])}(k,D||{}))),W=(0,a.Z)(N,1)[0],_=(0,j.useState)({current:W[0],next:null,previous:null,isCompleted:!1}),B=(0,a.Z)(_,2),H=B[0],U=B[1],G=(0,j.useState)([]),Y=(0,a.Z)(G,2),K=Y[0],J=Y[1],Q=(0,j.useState)(null),$=(0,a.Z)(Q,2),ee=$[0],te=$[1],ne=(0,P.cI)({mode:"onChange",shouldUnregister:!z,defaultValues:Zt({},D)}),re=ne.control,le=ne.formState,ae=ne.setValue,oe=ne.getValues,ie=ne.handleSubmit,ue=ne.watch,ce=ue(),se=F?ue(null==F?void 0:F.field):null,de=le.errors,pe=le.isSubmitting,me=(0,j.useState)(!1),ve=(0,a.Z)(me,2),fe=ve[0],be=ve[1],ge=(0,j.useState)(!1),he=(0,a.Z)(ge,2),Ee=he[0],ke=he[1],je=k.filter((function(e){return!0===e.required}));(0,j.useEffect)((function(){if(null!=F&&F.action)return null==F?void 0:F.action({formValues:ce,setValue:ae})}),[se]);var Pe=function(){var e=(0,l.Z)(i().mark((function e(){var t,n,r,l,a,o,u,c,s,d,p,m,v,f;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=null!==(t=null===(n=H.current)||void 0===n?void 0:n.required)&&void 0!==t&&t,u=H.current.defaultValue||null,c=(null==ce?void 0:ce[H.current.key])||null,s=null!=c,!0!==o||u||s){e.next=7;break}return te((null==de?void 0:de[null==H||null===(d=H.current)||void 0===d?void 0:d.key])||"no answer yet"),e.abrupt("return");case 7:if(!0!==o||s){e.next=10;break}return te((null==de?void 0:de[null==H||null===(p=H.current)||void 0===p?void 0:p.key])||"had answer before, but cleared out answer on current step"),e.abrupt("return");case 10:te(null),m=W.map((function(e){return Ze(e,oe)})).filter((function(e){return null!==e})),v=m.map((function(e){return"".concat((null==e?void 0:e.key)||""," - ").concat((null==e?void 0:e.label)||"")})).lastIndexOf("".concat((null===(r=H.current)||void 0===r?void 0:r.key)||""," - ").concat((null===(l=H.current)||void 0===l?void 0:l.label)||"")),f=(null===(a=m[v+1])||void 0===a?void 0:a.key)===we,U((function(e){return Zt(Zt({},e),{},{next:f?null:m[v+1],isCompleted:f})}));case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();(0,j.useEffect)((function(){z&&Pe()}),[z,H.current,ce[H.current.key]]);var Se=function(){var e=(0,l.Z)(i().mark((function e(t){var n,l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:be(!0),e.t0=t,e.next="previous"===e.t0?4:"next"===e.t0?7:31;break;case 4:return J((function(e){return e.pop(),(0,p.Z)(e)})),U((function(e){return Zt(Zt({},e),{},{current:e.previous.key?W.find((function(t){var n;return t.key===(null===(n=e.previous)||void 0===n?void 0:n.key)})):null,previous:W.find((function(e){return e.key===K[K.length-1]})),isCompleted:!1})})),e.abrupt("break",32);case 7:if(n=H.current.defaultValue||"",l=ce[H.current.key]||"",n===l){e.next=19;break}return e.prev=10,a=(0,r.Z)({},H.current.key,ce[H.current.key]),e.next=14,T(w,a);case 14:e.next=19;break;case 16:e.prev=16,e.t1=e.catch(10),console.log(Oe("gotoNextSubmitError"),e.t1);case 19:if(e.prev=19,0!==K.length){e.next=23;break}return e.next=23,V(w,"IN_PROGRESS");case 23:e.next=28;break;case 25:e.prev=25,e.t2=e.catch(19),console.log(Oe("gotoNextStatusChangeError"),e.t2);case 28:return J((function(e){return[].concat((0,p.Z)(e),[H.current.key])})),U((function(e){return Zt(Zt({},e),{},{current:Zt({},e.next),previous:W.find((function(t){return t.key===e.current.key}))})})),e.abrupt("break",32);case 31:return e.abrupt("break",32);case 32:be(!1);case 33:case"end":return e.stop()}}),e,null,[[10,16],[19,25]])})));return function(t){return e.apply(this,arguments)}}();(0,j.useEffect)((function(){if(!z){var e=le.isValid,t=!je.some((function(e){return!(null!=ce&&ce[e.key])}));ke(null!=e?e:t)}}),[ce]);var Ce=function(){var e=(0,l.Z)(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(delete t[we],console.log("submitting",t),x!==xe){e.next=6;break}return n=function(){var e=(0,l.Z)(i().mark((function e(){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!A){e.next=8;break}return e.next=4,A(t);case 4:if(!(n=e.sent).slug){e.next=8;break}return R("/flow/".concat(n.slug,"?mode=edit")),e.abrupt("return");case 8:e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error(e.t0);case 13:return e.abrupt("return");case 14:case"end":return e.stop()}}),e,null,[[0,10]])})));return function(){return e.apply(this,arguments)}}(),e.next=6,n();case 6:return e.prev=6,e.next=9,T(w,t);case 9:return e.next=11,V(w,"COMPLETED");case 11:if(x!==xe){e.next=13;break}return e.abrupt("return");case 13:R("../".concat(S)),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(6),console.log(Oe("onSubmitHandler"),e.t0);case 19:case"end":return e.stop()}}),e,null,[[6,16]])})));return function(t){return e.apply(this,arguments)}}();return j.createElement(m.Z,{variant:"outlined",id:"section-".concat(w)},j.createElement(v.Z,null,null!=O&&O.label?j.createElement(d.Z,{variant:"h3",component:"header",sx:{paddingBottom:2}},null==O?void 0:O.label):null,null!=O&&O.sub?j.createElement(d.Z,{variant:"h5",color:"text.secondary",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:X(null==O?void 0:O.sub)}}):null,x===xe&&M.get("template")&&j.createElement(d.Z,{variant:"h5",component:"p",sx:{pb:2,textDecoration:"capitalize"}},"With ",null===(t=M.get("template"))||void 0===t?void 0:t.split("-").join(" ")),z?j.createElement(s.Z,{paddingTop:2,paddingBottom:2,key:"".concat(w,"-1-at-a-time")},fe||pe?j.createElement(gt.EK,null):j.createElement(j.Fragment,null,j.createElement(s.Z,{paddingBottom:2,className:"altform-field"},bt(Zt(Zt({},H.current),{},{defaultValue:null!==(u=oe(H.current.key))&&void 0!==u?u:H.current.defaultValue,setValue:ae}),oe,ae,re,de)),j.createElement(s.Z,{sx:{pt:2},id:"altform-action"},null!==(c=H.previous)&&void 0!==c&&c.key?j.createElement(y.Z,{type:"button",onClick:function(){return Se("previous")}},"Back"):null,null!==(b=H.next)&&void 0!==b&&b.key?j.createElement(y.Z,{variant:"contained",type:"button",disabled:null!==(g=(null===(h=Object.keys(de))||void 0===h?void 0:h.length)>0||null!==ee)&&void 0!==g&&g,onClick:function(){return Se("next")}},"Continue"):null,H.isCompleted?j.createElement(y.Z,{variant:"contained",type:"submit",disabled:null!==(E=(null===(Z=Object.keys(de))||void 0===Z?void 0:Z.length)>0||null!==ee)&&void 0!==E&&E,onClick:ie(Ce)},S?"Continue":"Submit"):null))):j.createElement(s.Z,{py:2,className:"altform-fields"},pe?j.createElement(gt.EK,null):j.createElement(j.Fragment,{key:"".concat(w,"-full")},j.createElement(f.ZP,{key:"".concat(w,"-full"),container:!0,spacing:1,alignItems:"center",justifyItems:"center",justifyContent:"center"},null==W||null===(n=W.map((function(e){return Ze(e,oe)})))||void 0===n||null===(o=n.filter((function(e){return null!==e})))||void 0===o?void 0:o.map((function(e){var t;return j.createElement(f.ZP,{item:!0,xs:12,sm:12,md:12,key:e.key},bt(Zt(Zt({},e),{},{defaultValue:null!==(t=null==ce?void 0:ce[e.key])&&void 0!==t?t:null==e?void 0:e.defaultValue,setValue:ae}),oe,ae,re,de))}))),j.createElement(y.Z,{variant:"contained",type:"submit",disabled:!Ee,onClick:ie(Ce)},S?"Continue":"Submit")))))},wt=function(e){var t=e.children;return j.createElement(s.Z,{sx:{paddingBottom:4}},t)},Ot=function(e){var t=e.size;return j.createElement(f.ZP,{container:!0,spacing:1,paddingBottom:1},(0,p.Z)(Array(t).keys()).map((function(e,t){return j.createElement(f.ZP,{item:!0,sm:6,md:4,key:t,sx:{display:"grid",width:"100%"}},j.createElement(gt.ZP,{speed:2,width:476,height:124,viewBox:"0 0 476 124",backgroundColor:"#f3f3f3",foregroundColor:"#ecebeb"},j.createElement("circle",{cx:"20",cy:"20",r:"20"}),j.createElement("rect",{x:"48",y:"8",rx:"3",ry:"3",width:"88",height:"6"}),j.createElement("rect",{x:"48",y:"26",rx:"3",ry:"3",width:"52",height:"6"}),j.createElement("rect",{x:"0",y:"56",rx:"3",ry:"3",width:"240",height:"6"}),j.createElement("rect",{x:"0",y:"72",rx:"3",ry:"3",width:"200",height:"6"}),j.createElement("rect",{x:"0",y:"88",rx:"3",ry:"3",width:"178",height:"6"})))})))},kt=n(3416),jt=n(7709),Pt=n(7961),St=n(9620),Ct=n(7745),Dt=n(4498),Ft=n(1129),Tt=n(3406),Vt=n(3150),At=n(6140),Rt=n(8736),It=n(3030);function Mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Lt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mt(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var qt=function(e){var t,n,l=e.showPrint,a=e.setShowPrint,o=e.flow,i=e.answers,u=o.sections[1].id,c=["Mission Statement","Vision Statement","Personal/Family Vision"].map((function(e){var t,n,r=(null===(t=o.sections[1].fields.find((function(t){return t.label.trim()===e})))||void 0===t?void 0:t.key)||"",l=(null==i||null===(n=i[u])||void 0===n?void 0:n[r])||"";return{title:e,body:l}})),s=[{keyword:"your action area",title:"Action Areas",areas:{}},{keyword:"desire",title:"Desired Results & Measurements",areas:{}},{keyword:"capacity",title:"Capacity Requirements",areas:{}},{keyword:"opportunities",title:"Primary Obstacles",areas:{}},{keyword:"milestones",title:"Milestones",areas:{}},{keyword:"help",title:"Who Can Help Me?",areas:{}}];return null===(t=o.sections)||void 0===t||null===(n=t.filter((function(e){return e.slug.includes("action-area")})))||void 0===n||n.forEach((function(e){var t;null===(t=e.fields)||void 0===t||t.forEach((function(t){var n,l,a,o=s.findIndex((function(e){return t.label.toLowerCase().includes(e.keyword)})),u=t.parent||"";o>-1&&(s[o]=Lt(Lt({},s[o]),{},{areas:Lt(Lt({},null==s||null===(n=s[o])||void 0===n?void 0:n.areas),{},(0,r.Z)({},e.slug,(null==i||null===(l=i[e.id])||void 0===l?void 0:l[t.key])||(null==i||null===(a=i[e.id])||void 0===a?void 0:a[u])||""))}))}))})),(0,j.useEffect)((function(){!0===l&&setTimeout((function(){window.print()}),1e3)}),[l]),j.createElement(St.Z,{open:l,keepMounted:!1,maxWidth:"xl",fullWidth:!0,onClose:function(){return a(!1)}},j.createElement(Ct.Z,null,"Ardent Mentoring Roadmap"),j.createElement(Dt.Z,{sx:{p:2}},j.createElement(f.ZP,{container:!0,spacing:2,paddingBottom:1,key:"ardent-mentoring-print"},null==c?void 0:c.map((function(e,t){return j.createElement(f.ZP,{item:!0,sx:{display:"flex",justifyContent:"center",width:"".concat(100/c.length,"%")},key:t},j.createElement(m.Z,{variant:"outlined",sx:{width:"100%",display:"flex",flexDirection:"column",justifyContent:"space-between",textAlign:"center"}},j.createElement(Ft.Z,{title:e.title,titleTypographyProps:{variant:"h6"}}),j.createElement(v.Z,null,e.body)))}))),j.createElement(Tt.Z,{component:ce.Z,sx:{pt:2}},j.createElement(Vt.Z,{sx:{minWidth:650},"aria-label":"simple table"},j.createElement(At.Z,null,null==s?void 0:s.map((function(e){var t;return j.createElement(Rt.Z,{key:e.title,sx:{"&:last-child td, &:last-child th":{border:0}}},j.createElement(It.Z,{component:"th",scope:"row"},e.title),null===(t=Object.values(e.areas||{}))||void 0===t?void 0:t.map((function(e,t){return j.createElement(It.Z,{align:"center",key:t},e)})))})))))))},zt=n(5620),Nt=function(){var e=(0,l.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Ce.get("/flows/".concat(t));case 3:return n=e.sent,r=n.data,e.abrupt("return",r);case 8:return e.prev=8,e.t0=e.catch(0),console.error("error",e.t0),e.abrupt("return",null);case 12:case"end":return e.stop()}}),e,null,[[0,8]])})));return function(t){return e.apply(this,arguments)}}(),Wt=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Ce.post("/flows/".concat(t,"/validate"),{password:n});case 3:e.next=8;break;case 5:throw e.prev=5,e.t0=e.catch(0),e.t0;case 8:case"end":return e.stop()}}),e,null,[[0,5]])})));return function(t,n){return e.apply(this,arguments)}}(),_t=function(e){var t=e.flowSlug,n=e.setPasswordVerificationSuccess,r=(0,j.useState)(""),o=(0,a.Z)(r,2),u=o[0],c=o[1],p=(0,j.useState)(!1),m=(0,a.Z)(p,2),v=m[0],f=m[1];return j.createElement(s.Z,{sx:{display:"flex",flexDirection:"column"}},j.createElement(wt,null,j.createElement(d.Z,{variant:"h3",component:"header",sx:{pb:1}},"Password required to go through flow"),v&&j.createElement(zt.Z,{severity:"error"},"This flow's password is wrong! Please try again.")),j.createElement(T.Z,{id:"password-label"},"Enter password"),j.createElement(F.Z,{required:!0,type:"password",sx:{pb:2},onChange:function(e){return c(e.target.value)}}),u.length>0&&j.createElement(y.Z,{type:"submit",size:"small",variant:"outlined","aria-label":"validate-password",onClick:(0,l.Z)(i().mark((function e(){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,f(!1),e.next=4,Wt(t,u);case 4:n(!0),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(0),f(!0),n(!1);case 11:case"end":return e.stop()}}),e,null,[[0,7]])})))},"Continue"))},Bt=n(5275),Ht=n(9382),Ut=n(3085),Gt=function(e){var t,n,r,l=e.section,a=e.answers,o=e.status,i=e.isActionButtonDisabled,u=(0,ye.s0)();return j.createElement(m.Z,{variant:"outlined",id:l.id},j.createElement(v.Z,null,j.createElement(d.Z,{variant:"h3",component:"header",sx:{pb:1}},l.header.label),j.createElement(d.Z,{sx:{mb:2},variant:"h5",color:"text.secondary",component:"p",dangerouslySetInnerHTML:{__html:X(null===(t=l.header)||void 0===t?void 0:t.sub)}}),null!==(n=l.settings)&&void 0!==n&&n.displayOverview?j.createElement(j.Fragment,null,j.createElement(d.Z,{sx:{mb:1},variant:"h5",color:"text.secondary",component:"p"},"CREATED"===o?"What to expect:":"Your responses:"),null===(r=l.fields)||void 0===r?void 0:r.map((function(e){return function(e,t){var n,r;return j.createElement(g.ZP,{id:e.id,key:e.id,sx:{px:0,alignItems:"self-start"}},j.createElement(h.Z,{sx:{minWidth:"40px"}},function(e){switch(e){case"date":return j.createElement(lt.Z,{color:"primary"});case"textarea":return j.createElement(at.Z,{color:"primary"});case"radio":return j.createElement(ot.Z,{color:"primary"});case"checkbox":return j.createElement(it.Z,{color:"primary"});case"picture-selection":return j.createElement(ut.Z,{color:"primary"});case"select":return j.createElement(ct.Z,{color:"primary"});case"video":return j.createElement(st.Z,{color:"primary"});case"signature":return j.createElement(dt.Z,{color:"primary"});case"chip":return j.createElement(pt.Z,{color:"primary"});case"upload":return j.createElement(mt.Z,{color:"primary"});case"linear":return j.createElement(vt.Z,{color:"primary"});case"range":return j.createElement(ft.Z,{color:"primary"});default:return j.createElement(yt.Z,{color:"primary"})}}(e.component)),j.createElement(E.Z,{primary:e.label,secondary:(n=null==e?void 0:e.sub,r=t[e.key],j.createElement(j.Fragment,null,n?j.createElement(j.Fragment,null,n,j.createElement("br",null)):null,r?j.createElement(s.Z,{sx:{alignContent:"flex-start",alignItems:"flex-start",display:"flex",pt:1}},j.createElement(b.Z,{fontSize:"small",color:"success"}),function(e,t){switch(e.component){case"signature":return j.createElement("img",{src:X(t),alt:"signature/drawing",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}});case"picture-selection":return(e.multiple?t:[t]).map((function(t){var n,r=null==e||null===(n=e.choices)||void 0===n?void 0:n.find((function(e){return e.value===t}));return j.createElement(s.Z,{sx:{display:"flex",flexDirection:"column",border:"1px solid black",borderRadius:"18px",textAlign:"center",p:1,mr:1}},j.createElement("img",{src:(null==r?void 0:r.image)||"",alt:null==r?void 0:r.display,loading:"lazy",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}}),j.createElement(d.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:X(t)}}))}));default:return j.createElement(d.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:X(t)}})}}(e,r)):null)),secondaryTypographyProps:{component:"div"},sx:{marginTop:0}}))}(e,a)}))):null),j.createElement(Ut.Z,null,j.createElement(y.Z,{size:"medium",variant:"contained",disabled:i,onClick:function(){return u("".concat(l.slug),{state:{sectionId:l.id}})}},function(e){switch(e){case"CREATED":default:return"START";case"IN_PROGRESS":return"CONTINUE";case"COMPLETED":return"REVIEW"}}(o||"CREATED"))))},Yt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{endingMessage:null,sections:[],answers:null,statuses:null,isPreview:!1},t=e.endingMessage,n=e.sections,r=e.answers,l=e.isPreview,o=e.statuses,i=(0,j.useMemo)((function(){return n.some((function(e){return"COMPLETED"!==(null==o?void 0:o[e.id])}))}),[o]),u=(0,j.useMemo)((function(){var e,t;return(null===(e=Object.values(o||{}))||void 0===e||null===(t=e.map((function(e){return"COMPLETED"===e})))||void 0===t?void 0:t.filter(Boolean).length)/(null==n?void 0:n.length)*100||0}),[o]),c=(0,j.useState)(i||!0),d=(0,a.Z)(c,2),p=d[0],m=d[1],v=(0,j.useState)(u),f=(0,a.Z)(v,2),y=f[0],b=f[1];(0,j.useEffect)((function(){m(i),b(u)}),[o]);var g=(0,j.useState)(n.findIndex((function(e){var t,n=e.id;return"COMPLETED"!==(null!==(t=null==o?void 0:o[n])&&void 0!==t?t:"CREATED")}))||0),h=(0,a.Z)(g,1),E=h[0];return j.createElement(s.Z,{sx:{minWidth:"100%"},id:"flow-overview-main"},j.createElement(Kt,{variant:"determinate",value:y}),!p&&j.createElement(zt.Z,{severity:"success"},j.createElement(Bt.Z,null,"Woohoo! You've completed this flow!"),j.createElement("p",{dangerouslySetInnerHTML:{__html:X(null!=t?t:"")}})),null==n?void 0:n.map((function(e,t){var n;return j.createElement(s.Z,{sx:{paddingTop:2,paddingBottom:2},key:e.slug,className:"flow-overview"},r?j.createElement(Gt,{section:e,answers:(null==r?void 0:r[null==e?void 0:e.id])||{},status:(null==o?void 0:o[null==e?void 0:e.id])||null,isActionButtonDisabled:l||(null==e||null===(n=e.fields)||void 0===n?void 0:n.length)<1||t>E}):null)})))};function Kt(e){return j.createElement(s.Z,{sx:{display:"flex",alignItems:"center",my:1}},j.createElement(s.Z,{sx:{width:"100%",mr:1}},j.createElement(Ht.Z,(0,S.Z)({variant:"determinate"},e))),j.createElement(s.Z,{sx:{minWidth:35}},j.createElement(d.Z,{variant:"body2",color:"text.secondary"},"".concat(Math.round(e.value),"%"))))}var Jt=function(e){var t,n,r,l,o,i,u,c,p,m=e.flow,v=e.answers,b=e.statuses,g=(0,j.useState)(!(null!==(t=m.settings)&&void 0!==t&&t.toRequirePassword)),h=(0,a.Z)(g,2),E=h[0],Z=h[1],x=(0,j.useState)(!1),w=(0,a.Z)(x,2),O=w[0],k=w[1];return j.createElement(j.Fragment,null,j.createElement(s.Z,{id:"flow-main",component:"main",sx:{width:"100%"}},j.createElement(s.Z,{sx:{p:4}},j.createElement(f.ZP,{container:!0,alignItems:"center",justifyItems:"center",justifyContent:"center"},j.createElement(f.ZP,{item:!0,sm:3,display:"flex",alignItems:"center",justifyItems:"center",justifyContent:"center",sx:{textAlign:"center"}},j.createElement(Pt.Z,{alt:"".concat(m.name," logo"),variant:"square",src:null==m||null===(n=m.theme)||void 0===n?void 0:n["brand-logo"],imgProps:{sx:{objectFit:"contain"}},sx:{width:200,minHeight:200,mb:2}},null===(r=m.name)||void 0===r?void 0:r.substring(0,1))),j.createElement(f.ZP,{item:!0,sm:9,sx:{px:2}},j.createElement(s.Z,{sx:{display:"flex",justifyContent:"space-between",flexDirection:{xs:"column",sm:"row"}}},j.createElement(s.Z,{sx:{paddingBottom:2}},j.createElement(d.Z,{variant:"h2",component:"header"},m.name),j.createElement(d.Z,{variant:"caption",component:"p",sx:{paddingBottom:2}},"by ",null!==(l=null==m||null===(o=m.org)||void 0===o?void 0:o.name)&&void 0!==l?l:"".concat(m.owner.firstName," ").concat(m.owner.lastName))),j.createElement(s.Z,null,!v||null!==(i=m.settings)&&void 0!==i&&i.toRequirePassword?null:j.createElement(y.Z,{size:"small",variant:"outlined","aria-label":"print",onClick:function(){"ardent-roadmap"!==m.slug?window.print():k(!0)},startIcon:j.createElement(jt.Z,null)},"PDF"))),j.createElement(s.Z,null,j.createElement(d.Z,{variant:"h5",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:X(null==m?void 0:m.description)}})))),(null==m||null===(u=m.sections)||void 0===u?void 0:u.length)>0&&(null===(c=m.settings)||void 0===c?void 0:c.toRequirePassword)&&!E&&j.createElement(_t,{flowSlug:m.slug,setPasswordVerificationSuccess:Z}),E&&j.createElement(j.Fragment,null,(null==m||null===(p=m.sections)||void 0===p?void 0:p.length)>0&&v?j.createElement(j.Fragment,null,j.createElement(Yt,{endingMessage:m.ending||null,sections:null==m?void 0:m.sections,answers:v,statuses:b})):j.createElement(Ot,{size:1})))),"ardent-roadmap"===m.slug&&j.createElement(qt,{flow:m,answers:v,setShowPrint:k,showPrint:O}))},Qt=n(3215),Xt=n(4981),$t=n(4384),en=n(8573),tn=n(5309),nn=function(e){var t,n=e.flow,l=e.isEmbed,a=(0,ye.UO)(),o=(0,ye.TH)(),i=(0,ye.s0)(),u=l?"/":"/flow/".concat(n.slug);return null!==(t=n.settings)&&void 0!==t&&t.showSidebar?j.createElement(Xt.ZP,{variant:"permanent",id:"flow-sidebar",sx:(0,r.Z)({display:{xs:"none",md:"block"},width:se.pG,flexShrink:0},"& .MuiDrawer-paper",{width:se.pG,boxSizing:"border-box"})},j.createElement($t.Z,null),j.createElement(s.Z,{sx:{overflow:"auto"}},j.createElement(en.Z,null,j.createElement(g.ZP,{key:n.name,disablePadding:!0,onClick:function(){i(u)}},j.createElement(tn.Z,null,j.createElement(h.Z,null,j.createElement(Qt.Z,null)),j.createElement(E.Z,{primary:n.name,primaryTypographyProps:{sx:{fontWeight:"bold"}}}))),n.sections.map((function(e){var t,r,u=e.header.label,c=e.slug;return j.createElement(g.ZP,(0,S.Z)({key:u,disablePadding:!0},null!==(t=n.settings)&&void 0!==t&&t.navigateFreely?{onClick:function(){i(l?"".concat(c):"/flow/".concat(n.slug,"/").concat(c))}}:{}),j.createElement(tn.Z,{selected:l?"/".concat(c)===o.pathname:c===(null==a?void 0:a["*"]),disabled:!((l?"/".concat(c)===o.pathname:c===(null==a?void 0:a["*"]))||null!==(r=n.settings)&&void 0!==r&&r.navigateFreely)},j.createElement(h.Z,null),j.createElement(E.Z,{primary:u})))}))),j.createElement(Ke.Z,null))):j.createElement(j.Fragment,null)},rn=function(){var e=(0,l.Z)(i().mark((function e(t,n){var r,l;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n&&t){e.next=2;break}return e.abrupt("return",null);case 2:return e.next=4,Ce.get("/flows/".concat(t,"/answers?userId=").concat(n));case 4:return r=e.sent,l=r.data,e.abrupt("return",l);case 7:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),ln=function(){var e=(0,l.Z)(i().mark((function e(t,n){var r,l,a,o,u;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.lastName,l=n.firstName,a=n.email,e.prev=1,e.next=4,Ce.put("/users/".concat(t),{firstName:l,lastName:r,email:a});case 4:return o=e.sent,u=o.data,e.abrupt("return",u);case 9:e.prev=9,e.t0=e.catch(1),console.error("error update-user",e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})));return function(t,n){return e.apply(this,arguments)}}(),an=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,l){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ce.post("/flows/".concat(t,"/sections/").concat(n,"/answers?userId=").concat(r),l);case 2:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}(),on=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,l){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ce.post("/flows/".concat(t,"/sections/").concat(n,"/status?userId=").concat(r),{status:l});case 2:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}();function un(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?un(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):un(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const sn=function(e){var t,n,o,p=e.slug,m=((0,ye.TH)(),(0,j.useState)(null)),v=(0,a.Z)(m,2),f=v[0],y=v[1],b=(0,j.useState)(null),g=(0,a.Z)(b,2),h=g[0],E=g[1],Z=(0,j.useState)(null),x=(0,a.Z)(Z,2),w=x[0],O=x[1],k=(0,j.useState)(!0),P=(0,a.Z)(k,2),S=(P[0],P[1],(0,j.useState)(!1)),C=(0,a.Z)(S,2),D=C[0],F=C[1],T=((0,ye.s0)(),(0,j.useState)("")),V=(0,a.Z)(T,2),A=V[0],R=V[1];(0,j.useEffect)((function(){var e=function(){var e=(0,l.Z)(i().mark((function e(){var t,n,r,l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!p){e.next=25;break}return e.next=3,Nt(p);case 3:if(n=e.sent,y(n),n||(y(null),F(!0)),null!==(t=n.settings)&&void 0!==t&&t.toRequiredAuth,!1!==n.settings.toRequireAuth){e.next=25;break}if(r=localStorage.getItem("anon")){e.next=19;break}return l="anon_".concat((0,kt.x0)()),localStorage.setItem("anon",l),R(l),e.next=15,ln(l,{lastName:"",firstName:"",email:""});case 15:E({}),O({}),e.next=25;break;case 19:return R(r),e.next=22,rn(p,r);case 22:a=e.sent,E(null==a?void 0:a.answers),a.status&&O(a.status);case 25:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[]);var I=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("data",n),e.prev=1,e.next=4,an(p,t,A,n);case 4:E((function(e){return cn(cn({},e),{},(0,r.Z)({},t,cn(cn({},null==e?void 0:e[t]),n)))})),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(1),console.error(e.t0);case 10:case"end":return e.stop()}}),e,null,[[1,7]])})));return function(t,n){return e.apply(this,arguments)}}(),M=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null==f||!f.sections.find((function(e){var r=e.id,l=e.status;return r===t&&l===n}))){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,on(p,t,A,n);case 5:O((function(e){return cn(cn({},e),{},(0,r.Z)({},t,n))})),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:case"end":return e.stop()}}),e,null,[[2,8]])})));return function(t,n){return e.apply(this,arguments)}}(),L=null!=f&&null!==(t=f.theme)&&void 0!==t&&t["color-primary"]?(0,u.Z)(cn(cn({},se.rS),{},{palette:{primary:{main:null==f||null===(n=f.theme)||void 0===n?void 0:n["color-primary"]}}})):se.rS;return j.createElement(j.Fragment,null,j.createElement(c.Z,{theme:L},p&&f?j.createElement(s.Z,{sx:{display:"flex"},key:f.name,className:"flow-main",id:"flow-".concat(f.slug)},j.createElement(nn,{flow:f,isEmbed:!0}),j.createElement(ye.Z5,null,j.createElement(ye.AW,{index:!0,element:j.createElement(Jt,{flow:f,answers:h,statuses:w})}),null==f||null===(o=f.sections)||void 0===o?void 0:o.map((function(e){var t=e.header,n=e.fields,r=e.next,l=e.settings,a=e.id;return j.createElement(ye.AW,{path:e.slug,key:e.slug,element:j.createElement(s.Z,{id:"flow-section-main",component:"main",sx:{width:"100%",p:3}},j.createElement(d.Z,{variant:"h2",component:"header",sx:{paddingBottom:3}},f.name),null!=n&&n.length&&h?j.createElement(xt,{flowSlug:p,id:a,key:a,header:t,allFields:n,next:r||"",settings:l,answers:(null==h?void 0:h[a])||{},onSubmit:I,onStatusChange:M}):j.createElement(Ot,{size:1}))})})))):j.createElement(s.Z,{sx:{padding:2}},j.createElement(wt,null,j.createElement(d.Z,{variant:"h2",component:"header"},"Love is the flow(er) you've got to let grow!"),D&&j.createElement(d.Z,{variant:"h4",component:"header"},"Flow not found!")),!D&&j.createElement(Ot,{size:3}))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,