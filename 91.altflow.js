"use strict";(self.webpackChunkaltflow_ui=self.webpackChunkaltflow_ui||[]).push([[91],{3091:(e,t,n)=>{n.r(t),n.d(t,{default:()=>rn});var r=n(7462),l=n(4572),a=n(5861),o=n(885),i=n(4687),u=n.n(i),c=n(3215),s=n(6908),d=n(5974),p=n(120),m=n(4981),v=n(4384),f=n(8573),y=n(1388),b=n(5309),g=n(9894),h=n(1702),E=n(4373),Z=n(1647),x=n(2982),w=n(6482),O=n(2530),k=n(30),j=n(5305),P=n(1189);function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var D=function(e,t,n){var r,l=Array.isArray(t)?t:[t],a=n&&n("".concat(null==e?void 0:e.parent))||void 0,o=null==l?void 0:l.find((function(e){var t,n;return null!=e&&null!==(t=e.value)&&void 0!==t&&t.and?!(null==e||null===(n=e.value)||void 0===n||!n.and)||void 0:(null==e?void 0:e.value)===a}));return o?null!=o&&null!==(r=o.value)&&void 0!==r&&r.and?F(e,o,n):T(o,a):{hide:!0}},F=function(e,t,n){var r;return!1===t.value.and.every((function(r){if(null==r||!r.key){var l=n&&n("".concat(e.parent))||void 0;return!1===T({type:t.type,value:r.value},l).hide}var a=n&&n("".concat(e._metadata.key,".").concat(r.key))||void 0;return!1===T({type:t.type,value:r.value},a).hide}))?{hide:!0}:(r={},(0,l.Z)(r,t.type,!0),(0,l.Z)(r,"props",C({},t.props)),r)},T=function(e,t){var n,r;if(null===e)return{hide:!0};var a="".concat(e.value)==="".concat(t);if(!a&&"hide"===e.type)return{hide:!1};if(!a&&"show"===e.type)return{hide:!0};switch(e.type){case"disabled":return n={},(0,l.Z)(n,e.type,a),(0,l.Z)(n,"props",C({},e.props)),n;case"show":return{hide:!a,props:C({},e.props)};default:return r={},(0,l.Z)(r,e.type,!0),(0,l.Z)(r,"props",C({},e.props)),r}},V=n(7294),A=n(7536),R=n(6804),I=n(8790),M=n(2949),L=n(4917),z=n(599),q=n(3483),W=n(2853),N=n(7888),B=n(7546),_=n(8904),H=n(8037),U=n(2283),G=n(6569),Y=n(9960),K=n(4744),J=n(4825),Q=n(2856),X=n(1746),$=n(7619),ee=n(9116),te=n(7856),ne=n.n(te),re=function(e){try{return ne().sanitize(e)}catch(t){return e}},le=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];try{var n,r,l;return re(null==e||null===(n=e.split("\n"))||void 0===n||null===(r=n.map((function(e){return t?re(e):e})))||void 0===r||null===(l=r.join("<br/>"))||void 0===l?void 0:l.toString())}catch(t){return re(e)}},ae=function(e){try{return Number(e)}catch(t){return console.error("textToNumber - failed to convert value: ".concat(e," to number"),t),0}},oe=function(e){var t,n,l,a=e.label,i=e.altField,u=e.controlledField,c=(e.getValues,e.setValue,e.error),s=e.condition,d=(0,V.useState)((n=i.component,l=u.value,"range"===n?l&&Array.isArray(l)?null==l?void 0:l.map(Number):[0,0]:ae(l))),p=(0,o.Z)(d,2),m=p[0],v=p[1],f=function(){try{var e,t,n,r,l,a,o=(0,x.Z)((null==i||null===(e=i.choices)||void 0===e?void 0:e.sort((function(e,t){var n,r;return Number(null!==(n=null==e?void 0:e.value)&&void 0!==n?n:0)-Number(null!==(r=null==t?void 0:t.value)&&void 0!==r?r:0)})))||[]),u=null!==(t=null!==(n=null==o||null===(r=o[0])||void 0===r?void 0:r.value)&&void 0!==n?n:null==o?void 0:o[0])&&void 0!==t?t:0,c=null==o?void 0:o.pop();return{min:ae(u),max:ae(null!==(l=null!==(a=null==c?void 0:c.value)&&void 0!==a?a:c)&&void 0!==l?l:0)}}catch(e){return console.error("component::slider - failed to get range min, max, returning default 0, 100",e),{min:0,max:100}}}(),y=f.min,b=f.max;return V.createElement(V.Fragment,null,V.createElement(L.Z,null,a),V.createElement(N.Z,(0,r.Z)({component:"div",sx:{width:"95%",display:"flex",justifySelf:"center",mx:"auto"}},u,null==s?void 0:s.props),V.createElement(ee.ZP,(0,r.Z)({getAriaLabel:function(){return"".concat(i.component)}},u,{value:m,onChange:function(e,t){v(t),u.onChange(t)},step:null,min:y,max:b,marks:null===(t=i.choices)||void 0===t?void 0:t.map((function(e){return{value:ae(null==e?void 0:e.value),label:null==e?void 0:e.display}})),valueLabelDisplay:"off"})),V.createElement(W.Z,null,i.sub||""),c&&V.createElement(W.Z,null,c||"")))},ie=n(2004),ue=function(e){var t=e.label,n=e.altField,r=e.controlledField;return e.getValues,e.setValue,e.error,e.condition,V.createElement(V.Fragment,null,V.createElement(L.Z,{sx:{display:"flex",alignItems:"center"}},t,V.createElement(I.Z,{title:null!=n&&n.required?"You must watch the video before moving on":"This video is optional to watch",placement:"right",sx:{ml:"4px"}},V.createElement(R.Z,{fontSize:"inherit"}))),V.createElement(W.Z,null,n.sub||""),V.createElement(p.Z,{component:"div",className:"video-player-wrapper",sx:{minWidth:{sm:"100%",md:"unset"},height:{sm:"300px",md:"420px"}}},V.createElement(ie.Z,{url:n.watch,controls:!0,loop:!1,width:"100%",height:"100%",onEnded:function(){try{var e,t;(null==n||null===(e=n.props)||void 0===e?void 0:e.onEnded)&&(null==n||null===(t=n.props)||void 0===t||t.onEnded()),r.onChange("completed")}catch(e){console.log("error in video onEnded",e)}}})))},ce=function(e){var t,n=e.altField,l=e.controlledField,a=e.condition,i=e.label,u=(0,V.useState)(l.value||[]),c=(0,o.Z)(u,2),s=c[0],d=c[1];return V.createElement(V.Fragment,null,V.createElement(N.Z,(0,r.Z)({component:"fieldset",variant:"outlined"},a),V.createElement(B.Z,{component:"legend"},i),null==n||null===(t=n.choices)||void 0===t?void 0:t.map((function(e,t){return V.createElement(H.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,control:V.createElement(Y.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:s.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,x.Z)(s),[t]):s.filter((function(e){return e!==t}));l.onChange(n.length>0?n:void 0),d(n)},value:null==e?void 0:e.value}),label:null==e?void 0:e.display})})),V.createElement(W.Z,null,n.sub)))},se=n(9794),de=n(5591),pe=n(8227),me=n(9316),ve=n(130),fe=n(3896),ye=n(9031);function be(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ge(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?be(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):be(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var he=function(e){var t,n,l=e.label,a=e.altField,i=e.controlledField,u=e.getValues,c=e.setValue,s=e.error,d=e.condition,m=(0,V.useState)(""),v=(0,o.Z)(m,2),f=v[0],b=v[1],g=function(e){var t;null!==(t=u(a.key))&&void 0!==t&&t.includes(f.trim())||""===f||(c(a.key,[].concat((0,x.Z)(null==i?void 0:i.value),[f.trim()]),{shouldTouch:!0,shouldValidate:!0,shouldDirty:!0}),b(""),e.target.value="")};return V.createElement(p.Z,{key:a.key},V.createElement(Z.Z,{variant:"body1",component:"span"},l),V.createElement(W.Z,null,a.sub||""," Friendly Reminder: Be sure to press Enter/Return or Tab when you are done writing!"),V.createElement(pe.ZP,(0,r.Z)({required:!0,type:"text",sx:ge({flex:1,height:"2em",fontSize:"16px",width:"100%"},ye.VH)},a.props,{placeholder:"Type your answer choice and then press Enter/Return or Tab to save",inputProps:{"aria-label":a.label}},null==d?void 0:d.props,{value:f,onKeyDown:function(e){["Enter","Tab"].includes(e.key)&&(e.preventDefault(),g(e))},onChange:function(e){b(e.target.value)},endAdornment:(null==f?void 0:f.length)<1&&s?V.createElement(me.Z,{position:"end"},V.createElement(se.Z,{color:"error"})):(null==f?void 0:f.length)>0&&V.createElement(me.Z,{position:"end"},V.createElement(ve.Z,{onClick:g,size:"small",color:"primary"},V.createElement(de.Z,null))),color:s?"error":"primary"})),V.createElement(fe.Z,{sx:{display:"flex",justifyContent:"center",flexWrap:"wrap",listStyle:"none",p:.5,m:0,maxHeight:"200px",overflowX:"scroll"},component:"ul"},null===(t=(null==i?void 0:i.value)||[])||void 0===t||null===(n=t.map((function(e,t){return V.createElement(y.ZP,{key:"index-".concat(t,"-").concat(e)},V.createElement(q.Z,{label:e,onDelete:function(){var t,n=null===(t=i.value)||void 0===t?void 0:t.filter((function(t){return t!==e}));i.onChange(n.length?n:"")}}))})))||void 0===n?void 0:n.reverse()))},Ee=(0,V.createContext)({uploads:{}}),Ze=n(463),xe=n(9250),we=n(6388),Oe=n.n(we);function ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function je(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ke(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pe=function(e,t){var n=t("".concat(null==e?void 0:e.parent))||void 0,r=(null==e?void 0:e.condition)&&e.parent&&D(e,(null==e?void 0:e.condition)||null,t);return null!=r&&r.hide||null!=e&&e.parent&&void 0===n?null:je(je({},e),{},{props:je(je({},(null==e?void 0:e.props)||void 0),(null==r?void 0:r.props)||void 0)})},Se="create-flow",Ce="alt-last-field",De=function(e){var t;return(null===(t=e.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g))||void 0===t?void 0:t.join("-").toLowerCase())||e},Fe={0:{fields:{name:{props:{}},slug:{props:{disabled:!0,hidden:!0}}}}};function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ve(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ae=Oe().create({baseURL:"".concat("https://r5us0tfix4.execute-api.us-east-1.amazonaws.com/prod/"),timeout:6e4});Ae.interceptors.response.use((function(e){var t,n,r;return null!==(t=e.config.url)&&void 0!==t&&t.includes("/flows/".concat(Se))?(console.log("inside create-flow intercept"),e.data=Ve(Ve({},e.data),{},{sections:null===(n=e.data)||void 0===n||null===(r=n.sections)||void 0===r?void 0:r.map((function(e,t){var n;return null!==(n=Fe)&&void 0!==n&&n[t]?Ve(Ve({},e),{},{fields:e.fields.map((function(e){var n,r,l=null===(n=Fe)||void 0===n||null===(r=n[t])||void 0===r?void 0:r.fields;return null!=l&&l[e.key]?Ve(Ve({},e),null==l?void 0:l[e.key]):e}))}):e}))}),e):e}),(function(e){return Promise.reject(e)}));const Re=Ae;function Ie(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ie(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ie(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Le=function(){var e=(0,a.Z)(u().mark((function e(t,n,r,l){var i,c,s,d,p,m,v;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return d=function(){return d=(0,a.Z)(u().mark((function e(){var l,a;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Re.get("flows/".concat(t,"/upload?fileType=").concat(r,"&type=").concat(n));case 2:return l=e.sent,a=l.data,e.abrupt("return",a);case 5:case"end":return e.stop()}}),e)}))),d.apply(this,arguments)},s=function(){return d.apply(this,arguments)},e.next=4,s();case 4:return p=e.sent,m=null===(i=Object.keys(p.fields||{}))||void 0===i||null===(c=i.filter((function(e){return e.startsWith("x-amz-meta-")})))||void 0===c?void 0:c.reduce((function(e,t){return e[t]=p.fields[t],e}),{}),(v=new FormData).append("Content-Type",r),Object.entries(p.fields).forEach((function(e){var t=(0,o.Z)(e,2),n=t[0],r=t[1];v.append(n,r)})),v.append("file",l),e.next=12,Oe().post(p.url,v,{headers:Me({"Content-Type":"multipart/form-data"},m)});case 12:return e.abrupt("return","".concat(p.url,"/").concat(p.filePath));case 13:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}();function ze(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ze(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ze(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var We={display:"flex",flexDirection:"row",flexWrap:"wrap",marginTop:16},Ne={display:"inline-flex",borderRadius:2,border:"1px solid #eaeaea",marginBottom:8,marginRight:8,height:100,padding:4,boxSizing:"border-box"},Be={display:"flex",minWidth:0,overflow:"hidden"},_e={display:"block",width:"auto",height:"100%"},He={borderColor:"#2196f3"},Ue={borderColor:"#00e676"},Ge={borderColor:"#ff1744"},Ye={image:{"image/*":[]},all:{"image/*":[],"application/pdf":[".pdf"]}},Ke=function(e){var t,n=e.altField,r=e.type,i=e.fileType,c=(0,xe.UO)().slug,s=(0,V.useContext)(Ee),d=(0,V.useState)(n.defaultValue?[{name:n.defaultValue,preview:n.defaultValue}]:[]),p=(0,o.Z)(d,2),m=p[0],v=p[1],f=(0,Ze.uI)({accept:Ye[i],maxFiles:1,onDrop:(t=(0,a.Z)(u().mark((function e(t){var a,o;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=null==t?void 0:t[0],e.next=3,Le(c,r,a.type,a);case 3:o=e.sent,s.uploads=qe(qe({},s.uploads),{},(0,l.Z)({},n.key,o)),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,o,{shouldDirty:!0})),v(t.map((function(e){return Object.assign(e,{preview:URL.createObjectURL(e)})})));case 7:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})}),y=f.getRootProps,b=f.open,g=f.getInputProps,h=f.isFocused,E=f.isDragAccept,Z=f.isDragReject,x=f.fileRejections,w=(0,V.useMemo)((function(){return qe(qe(qe(qe({},{flex:1,display:"flex",flexDirection:"column",alignItems:"center",padding:"20px",borderWidth:2,borderRadius:"18px",borderColor:"#eeeeee",borderStyle:"dashed",backgroundColor:"#fafafa",color:"#bdbdbd",outline:"none",transition:"border .24s ease-in-out"}),h?He:{}),E?Ue:{}),Z?Ge:{})}),[h,E,Z]);(0,V.useEffect)((function(){return function(){return m.forEach((function(e){return URL.revokeObjectURL(e.preview)}))}}),[]);var O=m.map((function(e){return V.createElement("div",{style:Ne,key:e.name},V.createElement("div",{style:Be},V.createElement("img",{src:e.preview,style:_e,onLoad:function(){URL.revokeObjectURL(e.preview)},onError:function(e){return e.currentTarget.src=""}})))}));return V.createElement(V.Fragment,null,V.createElement("div",{className:"container"},(null==m?void 0:m.length)<1&&V.createElement("div",y({style:w}),V.createElement("input",g()),V.createElement("p",null,"Drag file here or"),V.createElement(j.Z,{size:"small",variant:"outlined","aria-label":"upload",onClick:b},"Select file")),V.createElement("aside",{style:We},O)),null==x?void 0:x.map((function(e){var t=e.file,n=e.errors;return V.createElement("li",{key:t.path},t.path,V.createElement("ul",null,n.map((function(e){return V.createElement("li",{key:e.code},e.message)}))))})),m.length>0&&V.createElement(j.Z,{size:"small",color:"error",variant:"outlined","aria-label":"delete",onClick:function(){null==m||m.forEach((function(e){return URL.revokeObjectURL(e.preview)})),v([]),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,"",{shouldDirty:!0}))}},"Delete"))},Je=n(2784),Qe=n(5613),Xe={display:"unset",border:"1px solid black",borderRadius:"18px",ml:"0",my:1,p:2,textAlign:"center"},$e=function(e){var t,n,l=e.altField,a=e.controlledField,i=e.condition,u=e.label,c=(0,V.useState)(a.value),s=(0,o.Z)(c,2),d=s[0],p=s[1];return V.createElement(V.Fragment,null,l.multiple?V.createElement(N.Z,(0,r.Z)({component:"div",variant:"outlined"},i),V.createElement(B.Z,{component:"legend"},u),null==l||null===(t=l.choices)||void 0===t?void 0:t.map((function(e,t){return V.createElement(H.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Xe,control:V.createElement(Je.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},V.createElement(Y.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:d.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,x.Z)(d),[t]):d.filter((function(e){return e!==t}));a.onChange(n),p(n)},value:null==e?void 0:e.value}),V.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),V.createElement(Qe.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})}))):V.createElement(N.Z,(0,r.Z)({component:"div",variant:"outlined"},a,null==i?void 0:i.props),V.createElement(B.Z,{component:"legend"},u),V.createElement(_.Z,{value:a.value},null==l||null===(n=l.choices)||void 0===n?void 0:n.map((function(e,t){return V.createElement(H.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Xe,control:V.createElement(Je.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},V.createElement(U.Z,{value:null==e?void 0:e.value}),V.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),V.createElement(Qe.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})})))))},et=n(9062),tt=n(8877),nt=n.n(tt),rt=function(e){var t=e.altField,n=e.label,r=(0,V.useState)(null),l=(0,o.Z)(r,2),a=l[0],i=l[1];return(0,V.useEffect)((function(){null==a||a.fromDataURL(t.defaultValue)}),[a]),V.createElement(V.Fragment,null,V.createElement(L.Z,{id:"".concat(t.key,"-label"),sx:{display:"flex",alignItems:"center"}},n,V.createElement(I.Z,{title:"This is a signature pad, start drawing within the box",placement:"right",sx:{ml:"4px"}},V.createElement(R.Z,{fontSize:"inherit"})),V.createElement("br",null)),V.createElement(W.Z,null,t.sub||""),V.createElement(p.Z,{id:"signature-box",sx:{textAlign:"center"},style:{border:"1px dotted black",borderRadius:"4px",padding:"4px"}},V.createElement(nt(),{ref:function(e){i(e)},onEnd:function(){if(null!=a&&a.isEmpty())throw Error("Signature not signed");try{var e=null==a?void 0:a.getTrimmedCanvas().toDataURL();(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,e))}catch(e){console.log("signature-canvas error",e)}},clearOnResize:!1,penColor:"black",canvasProps:{height:450,className:"altflow-signature-canvas",style:{width:"100%"}}}),V.createElement(E.Z,null),V.createElement(j.Z,{size:"small",variant:"outlined","aria-label":"clear signature canvas",fullWidth:!0,onClick:function(){null==a||a.clear(),(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,null))},startIcon:V.createElement(et.Z,null),sx:{mt:"4px"}},"Clear")))},lt=n(9208),at=n.n(lt);function ot(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function it(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ot(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ot(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ut={fullWidth:!0},ct=n(56),st=n(4683),dt=n(1008),pt=n(983),mt=n(1374),vt=n(1399),ft=n(8370),yt=n(5873),bt=n(2079),gt=n(6496),ht=n(6898),Et=n(3204),Zt=n(311),xt=function(e,t,n,l,a){var o,i,u=t("".concat(null==e?void 0:e.parent))||void 0,c=(null==e?void 0:e.condition)&&e.parent&&D(e,(null==e?void 0:e.condition)||null,t);if(null!=c&&c.hide)return null;if(null!=e&&e.parent&&void 0===u)return null;var s=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3?arguments[3]:void 0,l=function(e){try{return"string"==typeof e?e:JSON.stringify(e)}catch(t){return e}};switch(e){case"toggle":return null!=t&&t;case"checkbox":case"picture-selection":case"autocomplete":case"select":return n?void 0!==t&&t?Array.isArray(t)&&t.length<1?[]:Array.isArray(t)?t:[t]:[]:null!=t?t:"";case"radio":case"video":case"signature":return null!=t?t:"";default:return r?l(t):t||""}}(e.component,e.defaultValue,null!==(o=null==e?void 0:e.multiple)&&void 0!==o&&o,"json"===(null==e?void 0:e.format)||!1);return V.createElement(V.Fragment,null,"header"!==e.component?V.createElement(A.Qr,{key:e.key,name:e.key,control:l,rules:{required:null!==(i=null==e?void 0:e.required)&&void 0!==i&&i},defaultValue:s,render:function(l){var o=l.field;return V.createElement(p.Z,{sx:{pb:1}},function(e){var t,n,l,a,o=e.altField,i=e.controlledField,u=e.getValues,c=e.setValue,s=e.condition,d=e.errors,m=De(o.key),v=V.createElement(V.Fragment,null,o.label,null!=o&&o.required?"*":"",null!=o&&o.tip?V.createElement(I.Z,{title:null==o?void 0:o.tip,placement:"right",sx:{ml:"4px"}},V.createElement(R.Z,{fontSize:"inherit"})):null,!0===o.multiple&&V.createElement(I.Z,{title:"You can choose multiple options",placement:"right",sx:{ml:"4px"}},V.createElement(R.Z,{fontSize:"inherit"}))),f=at()(d,o.key,null)||null;if(null!=o&&null!==(t=o.props)&&void 0!==t&&t.hidden)return V.createElement(M.Z,(0,r.Z)({error:(null===(a=Object.keys(f||{}))||void 0===a?void 0:a.length)>0},i,null==s?void 0:s.props,{type:null==o?void 0:o.type,required:o.required,key:m,id:m,helperText:o.sub},o.props,ut,{style:{display:"none"}}));switch(o.component){case"autocomplete":var y;return V.createElement(V.Fragment,null,V.createElement(L.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),V.createElement(z.Z,(0,r.Z)({disablePortal:!0,options:o.choices,getOptionLabel:function(e){var t;return null!==(t=null==e?void 0:e.display)&&void 0!==t?t:e},isOptionEqualToValue:function(e,t){return e.value===t},key:m,multiple:null!==(y=null==o?void 0:o.multiple)&&void 0!==y&&y,renderTags:function(e,t){return null==e?void 0:e.map((function(e,n){return V.createElement(q.Z,(0,r.Z)({variant:"outlined",label:e},t({index:n})))}))},renderInput:function(e){return V.createElement(M.Z,e)},onChange:function(e,t){t?i.onChange(Array.isArray(t)?null==t?void 0:t.map((function(e){return null==e?void 0:e.value})):null==t?void 0:t.value):i.onChange("")},value:o.defaultValue},null==s?void 0:s.props,o.props,ut)),V.createElement(W.Z,null,o.sub||""));case"date":return V.createElement(Q._,{dateAdapter:$.H},V.createElement(L.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),V.createElement(X.M,(0,r.Z)({inputFormat:"MM-dd-yyyy"},i,{renderInput:function(e){return V.createElement(M.Z,(0,r.Z)({},e,{error:f,label:"MM-dd-yyyy"},i,null==s?void 0:s.props,{type:null==o?void 0:o.type,required:o.required,key:m,id:m,helperText:o.sub},o.props,ut))}})));case"input":return"date"===(null==o?void 0:o.type)?V.createElement(Q._,{dateAdapter:$.H},V.createElement(L.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),V.createElement(X.M,(0,r.Z)({inputFormat:"MM-dd-yyyy"},i,{renderInput:function(e){var t;return V.createElement(M.Z,(0,r.Z)({},e,{error:(null===(t=Object.keys(f||{}))||void 0===t?void 0:t.length)>0,label:"MM-dd-yyyy"},i,null==s?void 0:s.props,{type:null==o?void 0:o.type,required:o.required,key:m,id:m,helperText:o.sub},o.props,ut))}}))):V.createElement(V.Fragment,null,V.createElement(L.Z,{id:"".concat(m,"-label")},v),V.createElement(M.Z,(0,r.Z)({error:(null===(n=Object.keys(f||{}))||void 0===n?void 0:n.length)>0},i,null==s?void 0:s.props,{type:null==o?void 0:o.type,required:o.required,key:m,id:m,helperText:o.sub},o.props,ut)));case"textarea":return V.createElement(V.Fragment,null,V.createElement(L.Z,{id:"".concat(m,"-label")},v),V.createElement(M.Z,(0,r.Z)({error:f},i,null==s?void 0:s.props,{multiline:!0,resize:"true",minRows:3,type:null==o?void 0:o.type,required:o.required,key:m,id:m,helperText:o.sub},o.props,ut)));case"radio":return V.createElement(V.Fragment,null,V.createElement(N.Z,(0,r.Z)({component:"fieldset",variant:"outlined"},i,null==s?void 0:s.props,ut),V.createElement(B.Z,{id:"".concat(m,"-label")},v),V.createElement(_.Z,{value:i.value,key:m,id:m},null===(l=o.choices)||void 0===l?void 0:l.map((function(e){var t,n;return V.createElement(H.Z,{key:null!==(t=null==e?void 0:e.value)&&void 0!==t?t:null==e?void 0:e.display,value:null!==(n=null==e?void 0:e.value)&&void 0!==n?n:null==e?void 0:e.display,control:V.createElement(U.Z,null),label:null==e?void 0:e.display})}))),V.createElement(W.Z,null,o.sub||"")));case"toggle":return V.createElement(V.Fragment,null,V.createElement(B.Z,{id:"".concat(m,"-label")},v),V.createElement(G.Z,(0,r.Z)({id:m,required:o.required,defaultChecked:o.defaultValue,edge:"end",inputProps:{"aria-labelledby":o.label}},i,null==s?void 0:s.props,o.props)),V.createElement(W.Z,null,o.sub||""));case"picture-selection":return V.createElement($e,{altField:o,controlledField:i,label:v,condition:s});case"checkbox":return o.key!==Ce?V.createElement(V.Fragment,null,!0===o.multiple?V.createElement(ce,{altField:o,controlledField:i,label:v,condition:s}):V.createElement(N.Z,(0,r.Z)({component:"fieldset",variant:"outlined"},i,null==s?void 0:s.props),V.createElement(H.Z,{key:m,value:v,control:V.createElement(Y.Z,{key:m,id:m,name:o.label,defaultChecked:o.defaultValue}),label:v}),V.createElement(W.Z,null,o.sub))):null;case"select":var b,g;return V.createElement(V.Fragment,null,V.createElement(L.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),V.createElement(K.Z,(0,r.Z)({id:m,key:m},i,null==s?void 0:s.props,{multiple:null!==(b=null==o?void 0:o.multiple)&&void 0!==b&&b,required:o.required,labelId:"".concat(m,"-label")},o.props,ut),null===(g=o.choices)||void 0===g?void 0:g.map((function(e){return V.createElement(J.Z,{key:null==e?void 0:e.value,value:null==e?void 0:e.value,divider:!0},null==e?void 0:e.display)}))),V.createElement(W.Z,null,o.sub));case"video":return V.createElement(ue,{label:v,altField:o,controlledField:i,getValues:u,setValue:c,error:f,condition:s});case"signature":return V.createElement(rt,{altField:o,label:v});case"upload":return V.createElement(p.Z,{key:m,sx:{width:"100%"}},V.createElement(Z.Z,{variant:"body1",component:"span"},v),V.createElement(Z.Z,{variant:"body2",component:"p"},o.sub),V.createElement(Ke,{altField:it(it({},o),{},{setValue:c}),fileType:"all",type:"user"}),V.createElement(W.Z,null,o.sub||""));case"chip":return V.createElement(he,{label:v,altField:o,controlledField:i,getValues:u,setValue:c,error:f,condition:s});case"linear":case"range":return V.createElement(oe,{label:v,altField:o,controlledField:i,getValues:u,setValue:c,error:f,condition:s})}}({altField:e,controlledField:o,getValues:t,setValue:n,condition:c,errors:a}))}}):function(e){if("header"===e.component)return V.createElement(V.Fragment,null,V.createElement("h3",null,e.label),V.createElement("h4",null,e.sub))}(e))},wt=n(4561),Ot=n(9655);function kt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function jt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?kt(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):kt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Pt=function(e){var t,n,r,i,c,s,d,m,v,f,y=e.id,b=e.header,g=e.allFields,h=e.next,E=e.settings,P=e.answers,S=e.fieldOverrides,C=e.onSubmit,D=e.onStatusChange,F=e.onCreateFlowFromTemplateSelection,T=(0,xe.s0)(),R=(0,xe.UO)().slug,I=(0,Ot.lr)(),M=(0,o.Z)(I,1)[0],L=(0,V.useState)(null==E?void 0:E.showOneFieldAtATime),z=(0,o.Z)(L,2),q=z[0],W=(z[1],(0,V.useState)(function(e,t){return[].concat((0,x.Z)(e.map((function(e){return jt(jt({},e),{},{defaultValue:null==t?void 0:t[e.key]})}))),[{key:Ce,label:"",component:"checkbox",defaultValue:!0}])}(g,P||{}))),N=(0,o.Z)(W,1)[0],B=(0,V.useState)({current:N[0],next:null,previous:null,isCompleted:!1}),_=(0,o.Z)(B,2),H=_[0],U=_[1],G=(0,V.useState)([]),Y=(0,o.Z)(G,2),K=Y[0],J=Y[1],Q=(0,V.useState)(null),X=(0,o.Z)(Q,2),$=X[0],ee=X[1],te=(0,A.cI)({mode:"onChange",shouldUnregister:!q,defaultValues:jt({},P)}),ne=te.control,re=te.formState,ae=te.setValue,oe=te.getValues,ie=te.handleSubmit,ue=te.watch,ce=ue(),se=S?ue(null==S?void 0:S.field):null,de=re.errors,pe=re.isSubmitting,me=(0,V.useState)(!1),ve=(0,o.Z)(me,2),fe=ve[0],ye=ve[1],be=(0,V.useState)(!1),ge=(0,o.Z)(be,2),he=ge[0],Ee=ge[1],Ze=g.filter((function(e){return!0===e.required}));(0,V.useEffect)((function(){if(null!=S&&S.action)return null==S?void 0:S.action({formValues:ce,setValue:ae})}),[se]);var we=function(){var e=(0,a.Z)(u().mark((function e(){var t,n,r,l,a,o,i,c,s,d,p,m,v,f;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=null!==(t=null===(n=H.current)||void 0===n?void 0:n.required)&&void 0!==t&&t,i=H.current.defaultValue||null,c=(null==ce?void 0:ce[H.current.key])||null,s=null!=c,!0!==o||i||s){e.next=7;break}return ee((null==de?void 0:de[null==H||null===(d=H.current)||void 0===d?void 0:d.key])||"no answer yet"),e.abrupt("return");case 7:if(!0!==o||s){e.next=10;break}return ee((null==de?void 0:de[null==H||null===(p=H.current)||void 0===p?void 0:p.key])||"had answer before, but cleared out answer on current step"),e.abrupt("return");case 10:ee(null),m=N.map((function(e){return Pe(e,oe)})).filter((function(e){return null!==e})),v=m.map((function(e){return"".concat((null==e?void 0:e.key)||""," - ").concat((null==e?void 0:e.label)||"")})).lastIndexOf("".concat((null===(r=H.current)||void 0===r?void 0:r.key)||""," - ").concat((null===(l=H.current)||void 0===l?void 0:l.label)||"")),f=(null===(a=m[v+1])||void 0===a?void 0:a.key)===Ce,U((function(e){return jt(jt({},e),{},{next:f?null:m[v+1],isCompleted:f})}));case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();(0,V.useEffect)((function(){q&&we()}),[q,H.current,ce[H.current.key]]);var Oe=function(){var e=(0,a.Z)(u().mark((function e(t){var n,r,a;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:ye(!0),e.t0=t,e.next="previous"===e.t0?4:"next"===e.t0?7:31;break;case 4:return J((function(e){return e.pop(),(0,x.Z)(e)})),U((function(e){return jt(jt({},e),{},{current:e.previous.key?N.find((function(t){var n;return t.key===(null===(n=e.previous)||void 0===n?void 0:n.key)})):null,previous:N.find((function(e){return e.key===K[K.length-1]})),isCompleted:!1})})),e.abrupt("break",32);case 7:if(n=H.current.defaultValue||"",r=ce[H.current.key]||"",n===r){e.next=19;break}return e.prev=10,a=(0,l.Z)({},H.current.key,ce[H.current.key]),e.next=14,C(y,a);case 14:e.next=19;break;case 16:e.prev=16,e.t1=e.catch(10),console.log(De("gotoNextSubmitError"),e.t1);case 19:if(e.prev=19,0!==K.length){e.next=23;break}return e.next=23,D(y,"IN_PROGRESS");case 23:e.next=28;break;case 25:e.prev=25,e.t2=e.catch(19),console.log(De("gotoNextStatusChangeError"),e.t2);case 28:return J((function(e){return[].concat((0,x.Z)(e),[H.current.key])})),U((function(e){return jt(jt({},e),{},{current:jt({},e.next),previous:N.find((function(t){return t.key===e.current.key}))})})),e.abrupt("break",32);case 31:return e.abrupt("break",32);case 32:ye(!1);case 33:case"end":return e.stop()}}),e,null,[[10,16],[19,25]])})));return function(t){return e.apply(this,arguments)}}();(0,V.useEffect)((function(){if(!q){var e=re.isValid,t=!Ze.some((function(e){return!(null!=ce&&ce[e.key])}));Ee(null!=e?e:t)}}),[ce]);var ke=function(){var e=(0,a.Z)(u().mark((function e(t){var n;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(delete t[Ce],console.log("submitting",t),R!==Se){e.next=6;break}return n=function(){var e=(0,a.Z)(u().mark((function e(){var n;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!F){e.next=8;break}return e.next=4,F(t);case 4:if(!(n=e.sent).slug){e.next=8;break}return T("/flow/".concat(n.slug,"?mode=edit")),e.abrupt("return");case 8:e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error(e.t0);case 13:return e.abrupt("return");case 14:case"end":return e.stop()}}),e,null,[[0,10]])})));return function(){return e.apply(this,arguments)}}(),e.next=6,n();case 6:return e.prev=6,e.next=9,C(y,t);case 9:return e.next=11,D(y,"COMPLETED");case 11:if(R!==Se){e.next=13;break}return e.abrupt("return");case 13:if(h){e.next=16;break}return T("/flow/".concat(R)),e.abrupt("return");case 16:T("../".concat(h)),e.next=22;break;case 19:e.prev=19,e.t0=e.catch(6),console.log(De("onSubmitHandler"),e.t0);case 22:case"end":return e.stop()}}),e,null,[[6,19]])})));return function(t){return e.apply(this,arguments)}}();return V.createElement(w.Z,{variant:"outlined",id:"section-".concat(y)},V.createElement(O.Z,null,null!=b&&b.label?V.createElement(Z.Z,{variant:"h3",component:"header",sx:{paddingBottom:2}},null==b?void 0:b.label):null,null!=b&&b.sub?V.createElement(Z.Z,{variant:"h5",color:"text.secondary",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:le(null==b?void 0:b.sub)}}):null,R===Se&&M.get("template")&&V.createElement(Z.Z,{variant:"h5",component:"p",sx:{pb:2,textDecoration:"capitalize"}},"With ",null===(t=M.get("template"))||void 0===t?void 0:t.split("-").join(" ")),q?V.createElement(p.Z,{paddingTop:2,paddingBottom:2,key:"".concat(y,"-1-at-a-time")},fe||pe?V.createElement(wt.EK,null):V.createElement(V.Fragment,null,V.createElement(p.Z,{paddingBottom:2,className:"altform-field"},xt(jt(jt({},H.current),{},{defaultValue:null!==(i=oe(H.current.key))&&void 0!==i?i:H.current.defaultValue,setValue:ae}),oe,ae,ne,de)),V.createElement(p.Z,{sx:{pt:2},id:"altform-action"},null!==(c=H.previous)&&void 0!==c&&c.key?V.createElement(j.Z,{type:"button",onClick:function(){return Oe("previous")}},"Back"):null,null!==(s=H.next)&&void 0!==s&&s.key?V.createElement(j.Z,{variant:"contained",type:"button",disabled:null!==(d=(null===(m=Object.keys(de))||void 0===m?void 0:m.length)>0||null!==$)&&void 0!==d&&d,onClick:function(){return Oe("next")}},"Continue"):null,H.isCompleted?V.createElement(j.Z,{variant:"contained",type:"submit",disabled:null!==(v=(null===(f=Object.keys(de))||void 0===f?void 0:f.length)>0||null!==$)&&void 0!==v&&v,onClick:ie(ke)},h?"Continue":"Submit"):null))):V.createElement(p.Z,{py:2,className:"altform-fields"},pe?V.createElement(wt.EK,null):V.createElement(V.Fragment,{key:"".concat(y,"-full")},V.createElement(k.ZP,{key:"".concat(y,"-full"),container:!0,spacing:1,alignItems:"center",justifyItems:"center",justifyContent:"center"},null==N||null===(n=N.map((function(e){return Pe(e,oe)})))||void 0===n||null===(r=n.filter((function(e){return null!==e})))||void 0===r?void 0:r.map((function(e){var t;return V.createElement(k.ZP,{item:!0,xs:12,sm:12,md:12,key:e.key},xt(jt(jt({},e),{},{defaultValue:null!==(t=null==ce?void 0:ce[e.key])&&void 0!==t?t:null==e?void 0:e.defaultValue,setValue:ae}),oe,ae,ne,de))}))),V.createElement(j.Z,{variant:"contained",type:"submit",disabled:!he,onClick:ie(ke)},h?"Continue":"Submit")))))},St=function(e){var t=e.children;return V.createElement(p.Z,{sx:{paddingBottom:4}},t)},Ct=function(e){var t=e.size;return V.createElement(k.ZP,{container:!0,spacing:1,paddingBottom:1},(0,x.Z)(Array(t).keys()).map((function(e,t){return V.createElement(k.ZP,{item:!0,sm:6,md:4,key:t,sx:{display:"grid",width:"100%"}},V.createElement(wt.ZP,{speed:2,width:476,height:124,viewBox:"0 0 476 124",backgroundColor:"#f3f3f3",foregroundColor:"#ecebeb"},V.createElement("circle",{cx:"20",cy:"20",r:"20"}),V.createElement("rect",{x:"48",y:"8",rx:"3",ry:"3",width:"88",height:"6"}),V.createElement("rect",{x:"48",y:"26",rx:"3",ry:"3",width:"52",height:"6"}),V.createElement("rect",{x:"0",y:"56",rx:"3",ry:"3",width:"240",height:"6"}),V.createElement("rect",{x:"0",y:"72",rx:"3",ry:"3",width:"200",height:"6"}),V.createElement("rect",{x:"0",y:"88",rx:"3",ry:"3",width:"178",height:"6"})))})))},Dt=n(7709),Ft=n(7961),Tt=n(9620),Vt=n(7745),At=n(4498),Rt=n(1129),It=n(3406),Mt=n(3150),Lt=n(6140),zt=n(8736),qt=n(3030);function Wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Nt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Wt(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Wt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Bt=function(e){var t,n,r=e.showPrint,a=e.setShowPrint,o=e.flow,i=e.answers,u=o.sections[1].id,c=["Mission Statement","Vision Statement","Personal/Family Vision"].map((function(e){var t,n,r=(null===(t=o.sections[1].fields.find((function(t){return t.label.trim()===e})))||void 0===t?void 0:t.key)||"",l=(null==i||null===(n=i[u])||void 0===n?void 0:n[r])||"";return{title:e,body:l}})),s=[{keyword:"your action area",title:"Action Areas",areas:{}},{keyword:"desire",title:"Desired Results & Measurements",areas:{}},{keyword:"capacity",title:"Capacity Requirements",areas:{}},{keyword:"opportunities",title:"Primary Obstacles",areas:{}},{keyword:"milestones",title:"Milestones",areas:{}},{keyword:"help",title:"Who Can Help Me?",areas:{}}];return null===(t=o.sections)||void 0===t||null===(n=t.filter((function(e){return e.slug.includes("action-area")})))||void 0===n||n.forEach((function(e){var t;null===(t=e.fields)||void 0===t||t.forEach((function(t){var n,r,a,o=s.findIndex((function(e){return t.label.toLowerCase().includes(e.keyword)})),u=t.parent||"";o>-1&&(s[o]=Nt(Nt({},s[o]),{},{areas:Nt(Nt({},null==s||null===(n=s[o])||void 0===n?void 0:n.areas),{},(0,l.Z)({},e.slug,(null==i||null===(r=i[e.id])||void 0===r?void 0:r[t.key])||(null==i||null===(a=i[e.id])||void 0===a?void 0:a[u])||""))}))}))})),(0,V.useEffect)((function(){!0===r&&setTimeout((function(){window.print()}),1e3)}),[r]),V.createElement(Tt.Z,{open:r,keepMounted:!1,maxWidth:"xl",fullWidth:!0,onClose:function(){return a(!1)}},V.createElement(Vt.Z,null,"Ardent Mentoring Roadmap"),V.createElement(At.Z,{sx:{p:2}},V.createElement(k.ZP,{container:!0,spacing:2,paddingBottom:1,key:"ardent-mentoring-print"},null==c?void 0:c.map((function(e,t){return V.createElement(k.ZP,{item:!0,sx:{display:"flex",justifyContent:"center",width:"".concat(100/c.length,"%")},key:t},V.createElement(w.Z,{variant:"outlined",sx:{width:"100%",display:"flex",flexDirection:"column",justifyContent:"space-between",textAlign:"center"}},V.createElement(Rt.Z,{title:e.title,titleTypographyProps:{variant:"h6"}}),V.createElement(O.Z,null,e.body)))}))),V.createElement(It.Z,{component:fe.Z,sx:{pt:2}},V.createElement(Mt.Z,{sx:{minWidth:650},"aria-label":"simple table"},V.createElement(Lt.Z,null,null==s?void 0:s.map((function(e){var t;return V.createElement(zt.Z,{key:e.title,sx:{"&:last-child td, &:last-child th":{border:0}}},V.createElement(qt.Z,{component:"th",scope:"row"},e.title),null===(t=Object.values(e.areas||{}))||void 0===t?void 0:t.map((function(e,t){return V.createElement(qt.Z,{align:"center",key:t},e)})))})))))))},_t=n(5620),Ht=function(){var e=(0,a.Z)(u().mark((function e(t){var n,r;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Re.get("/flows/".concat(t));case 3:return n=e.sent,r=n.data,e.abrupt("return",r);case 8:return e.prev=8,e.t0=e.catch(0),console.error("error",e.t0),e.abrupt("return",null);case 12:case"end":return e.stop()}}),e,null,[[0,8]])})));return function(t){return e.apply(this,arguments)}}(),Ut=function(){var e=(0,a.Z)(u().mark((function e(t,n){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Re.post("/flows/".concat(t,"/validate"),{password:n});case 3:e.next=8;break;case 5:throw e.prev=5,e.t0=e.catch(0),e.t0;case 8:case"end":return e.stop()}}),e,null,[[0,5]])})));return function(t,n){return e.apply(this,arguments)}}(),Gt=function(e){var t=e.flowSlug,n=e.setPasswordVerificationSuccess,r=(0,V.useState)(""),l=(0,o.Z)(r,2),i=l[0],c=l[1],s=(0,V.useState)(!1),d=(0,o.Z)(s,2),m=d[0],v=d[1];return V.createElement(p.Z,{sx:{display:"flex",flexDirection:"column"}},V.createElement(St,null,V.createElement(Z.Z,{variant:"h3",component:"header",sx:{pb:1}},"Password required to go through flow"),m&&V.createElement(_t.Z,{severity:"error"},"This flow's password is wrong! Please try again.")),V.createElement(L.Z,{id:"password-label"},"Enter password"),V.createElement(M.Z,{required:!0,type:"password",sx:{pb:2},onChange:function(e){return c(e.target.value)}}),i.length>0&&V.createElement(j.Z,{type:"submit",size:"small",variant:"outlined","aria-label":"validate-password",onClick:(0,a.Z)(u().mark((function e(){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,v(!1),e.next=4,Ut(t,i);case 4:n(!0),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(0),v(!0),n(!1);case 11:case"end":return e.stop()}}),e,null,[[0,7]])})))},"Continue"))},Yt=n(5275),Kt=n(9382),Jt=n(3085),Qt=function(e){var t,n,r,l=e.section,a=e.answers,o=e.status,i=e.isActionButtonDisabled,u=(0,xe.s0)();return V.createElement(w.Z,{variant:"outlined",id:l.id},V.createElement(O.Z,null,V.createElement(Z.Z,{variant:"h3",component:"header",sx:{pb:1}},l.header.label),V.createElement(Z.Z,{sx:{mb:2},variant:"h5",color:"text.secondary",component:"p",dangerouslySetInnerHTML:{__html:le(null===(t=l.header)||void 0===t?void 0:t.sub)}}),null!==(n=l.settings)&&void 0!==n&&n.displayOverview?V.createElement(V.Fragment,null,V.createElement(Z.Z,{sx:{mb:1},variant:"h5",color:"text.secondary",component:"p"},"CREATED"===o?"What to expect:":"Your responses:"),null===(r=l.fields)||void 0===r?void 0:r.map((function(e){return function(e,t){var n,r;return V.createElement(y.ZP,{id:e.id,key:e.id,sx:{px:0,alignItems:"self-start"}},V.createElement(g.Z,{sx:{minWidth:"40px"}},function(e){switch(e){case"date":return V.createElement(ct.Z,{color:"primary"});case"textarea":return V.createElement(st.Z,{color:"primary"});case"radio":return V.createElement(dt.Z,{color:"primary"});case"checkbox":return V.createElement(pt.Z,{color:"primary"});case"picture-selection":return V.createElement(mt.Z,{color:"primary"});case"select":return V.createElement(vt.Z,{color:"primary"});case"video":return V.createElement(ft.Z,{color:"primary"});case"signature":return V.createElement(yt.Z,{color:"primary"});case"chip":return V.createElement(bt.Z,{color:"primary"});case"upload":return V.createElement(gt.Z,{color:"primary"});case"linear":return V.createElement(ht.Z,{color:"primary"});case"range":return V.createElement(Et.Z,{color:"primary"});default:return V.createElement(Zt.Z,{color:"primary"})}}(e.component)),V.createElement(h.Z,{primary:e.label,secondary:(n=null==e?void 0:e.sub,r=t[e.key],V.createElement(V.Fragment,null,n?V.createElement(V.Fragment,null,n,V.createElement("br",null)):null,r?V.createElement(p.Z,{sx:{alignContent:"flex-start",alignItems:"flex-start",display:"flex",pt:1}},V.createElement(P.Z,{fontSize:"small",color:"success"}),function(e,t){switch(e.component){case"signature":return V.createElement("img",{src:le(t),alt:"signature/drawing",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}});case"picture-selection":return(e.multiple?t:[t]).map((function(t){var n,r=null==e||null===(n=e.choices)||void 0===n?void 0:n.find((function(e){return e.value===t}));return V.createElement(p.Z,{sx:{display:"flex",flexDirection:"column",border:"1px solid black",borderRadius:"18px",textAlign:"center",p:1,mr:1}},V.createElement("img",{src:(null==r?void 0:r.image)||"",alt:null==r?void 0:r.display,loading:"lazy",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}}),V.createElement(Z.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:le(t)}}))}));default:return V.createElement(Z.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:le(t)}})}}(e,r)):null)),secondaryTypographyProps:{component:"div"},sx:{marginTop:0}}))}(e,a)}))):null),V.createElement(Jt.Z,null,V.createElement(j.Z,{size:"medium",variant:"contained",disabled:i,onClick:function(){return u(l.slug,{state:{sectionId:l.id}})}},function(e){switch(e){case"CREATED":default:return"START";case"IN_PROGRESS":return"CONTINUE";case"COMPLETED":return"REVIEW"}}(o||"CREATED"))))},Xt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{endingMessage:null,sections:[],answers:null,statuses:null,isPreview:!1},t=e.endingMessage,n=e.sections,r=e.answers,l=e.isPreview,a=e.statuses,i=(0,V.useMemo)((function(){return n.some((function(e){return"COMPLETED"!==(null==a?void 0:a[e.id])}))}),[a]),u=(0,V.useMemo)((function(){var e,t;return(null===(e=Object.values(a||{}))||void 0===e||null===(t=e.map((function(e){return"COMPLETED"===e})))||void 0===t?void 0:t.filter(Boolean).length)/(null==n?void 0:n.length)*100||0}),[a]),c=(0,V.useState)(i||!0),s=(0,o.Z)(c,2),d=s[0],m=s[1],v=(0,V.useState)(u),f=(0,o.Z)(v,2),y=f[0],b=f[1];(0,V.useEffect)((function(){m(i),b(u)}),[a]);var g=(0,V.useState)(n.findIndex((function(e){var t,n=e.id;return"COMPLETED"!==(null!==(t=null==a?void 0:a[n])&&void 0!==t?t:"CREATED")}))||0),h=(0,o.Z)(g,1),E=h[0];return V.createElement(p.Z,{sx:{minWidth:"100%"},id:"flow-overview-main"},V.createElement($t,{variant:"determinate",value:y}),!d&&V.createElement(_t.Z,{severity:"success"},V.createElement(Yt.Z,null,"Woohoo! You've completed this flow!"),V.createElement("p",{dangerouslySetInnerHTML:{__html:le(null!=t?t:"")}})),null==n?void 0:n.map((function(e,t){var n;return V.createElement(p.Z,{sx:{paddingTop:2,paddingBottom:2},key:e.slug,className:"flow-overview"},r?V.createElement(Qt,{section:e,answers:(null==r?void 0:r[null==e?void 0:e.id])||{},status:(null==a?void 0:a[null==e?void 0:e.id])||null,isActionButtonDisabled:l||(null==e||null===(n=e.fields)||void 0===n?void 0:n.length)<1||t>E}):null)})))};function $t(e){return V.createElement(p.Z,{sx:{display:"flex",alignItems:"center",my:1}},V.createElement(p.Z,{sx:{width:"100%",mr:1}},V.createElement(Kt.Z,(0,r.Z)({variant:"determinate"},e))),V.createElement(p.Z,{sx:{minWidth:35}},V.createElement(Z.Z,{variant:"body2",color:"text.secondary"},"".concat(Math.round(e.value),"%"))))}var en=function(e){var t,n,r,l,a,i,u,c,s,d=e.flow,m=e.answers,v=e.statuses,f=(0,V.useState)(!(null!==(t=d.settings)&&void 0!==t&&t.toRequirePassword)),y=(0,o.Z)(f,2),b=y[0],g=y[1],h=(0,V.useState)(!1),E=(0,o.Z)(h,2),x=E[0],w=E[1];return V.createElement(V.Fragment,null,V.createElement(p.Z,{id:"flow-main",component:"main",sx:{width:"100%"}},V.createElement(p.Z,{sx:{p:4}},V.createElement(k.ZP,{container:!0,alignItems:"center",justifyItems:"center",justifyContent:"center"},V.createElement(k.ZP,{item:!0,sm:3,display:"flex",alignItems:"center",justifyItems:"center",justifyContent:"center",sx:{textAlign:"center"}},V.createElement(Ft.Z,{alt:"".concat(d.name," logo"),variant:"square",src:null==d||null===(n=d.theme)||void 0===n?void 0:n["brand-logo"],imgProps:{sx:{objectFit:"contain"}},sx:{width:200,minHeight:200,mb:2}},null===(r=d.name)||void 0===r?void 0:r.substring(0,1))),V.createElement(k.ZP,{item:!0,sm:9,sx:{px:2}},V.createElement(p.Z,{sx:{display:"flex",justifyContent:"space-between",flexDirection:{xs:"column",sm:"row"}}},V.createElement(p.Z,{sx:{paddingBottom:2}},V.createElement(Z.Z,{variant:"h2",component:"header"},d.name),V.createElement(Z.Z,{variant:"caption",component:"p",sx:{paddingBottom:2}},"by ",null!==(l=null==d||null===(a=d.org)||void 0===a?void 0:a.name)&&void 0!==l?l:"".concat(d.owner.firstName," ").concat(d.owner.lastName))),V.createElement(p.Z,null,!m||null!==(i=d.settings)&&void 0!==i&&i.toRequirePassword?null:V.createElement(j.Z,{size:"small",variant:"outlined","aria-label":"print",onClick:function(){"ardent-roadmap"!==d.slug?window.print():w(!0)},startIcon:V.createElement(Dt.Z,null)},"PDF"))),V.createElement(p.Z,null,V.createElement(Z.Z,{variant:"h5",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:le(null==d?void 0:d.description)}})))),(null==d||null===(u=d.sections)||void 0===u?void 0:u.length)>0&&(null===(c=d.settings)||void 0===c?void 0:c.toRequirePassword)&&!b&&V.createElement(Gt,{flowSlug:d.slug,setPasswordVerificationSuccess:g}),b&&V.createElement(V.Fragment,null,(null==d||null===(s=d.sections)||void 0===s?void 0:s.length)>0&&m?V.createElement(V.Fragment,null,V.createElement(Xt,{endingMessage:d.ending||null,sections:null==d?void 0:d.sections,answers:m,statuses:v})):V.createElement(Ct,{size:1})))),"ardent-roadmap"===d.slug&&V.createElement(Bt,{flow:d,answers:m,setShowPrint:w,showPrint:x}))};function tn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tn(Object(n),!0).forEach((function(t){(0,l.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const rn=function(){var e,t,n,i,x,w=(null===(e=document.getElementById("altflow"))||void 0===e?void 0:e.getAttribute("data-flow"))||"unknown",O=((0,xe.TH)(),(0,V.useState)(null)),k=(0,o.Z)(O,2),j=k[0],P=k[1],S=(0,V.useState)(!0),C=(0,o.Z)(S,2),D=(C[0],C[1],(0,V.useState)(!1)),F=(0,o.Z)(D,2),T=F[0],A=F[1],R=(0,xe.s0)();(0,V.useEffect)((function(){var e=function(){var e=(0,a.Z)(u().mark((function e(){var t;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!w){e.next=6;break}return e.next=3,Ht(w);case 3:t=e.sent,P(t),t||(P(null),A(!0));case 6:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[]);var I=function(){var e=(0,a.Z)(u().mark((function e(t,n){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:console.log("data",n);case 1:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),M=function(){var e=(0,a.Z)(u().mark((function e(t,n){return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:console.log("sectionId",t),console.log("newStatus",n);case 2:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),L=null!=j&&null!==(t=j.theme)&&void 0!==t&&t["color-primary"]?(0,s.Z)(nn(nn({},ye.rS),{},{palette:{primary:{main:null==j||null===(n=j.theme)||void 0===n?void 0:n["color-primary"]}}})):ye.rS;return V.createElement(V.Fragment,null,V.createElement(d.Z,{theme:L},w&&j?V.createElement(p.Z,{sx:{display:"flex"},key:j.name,className:"flow-main",id:"flow-".concat(j.slug)},(null===(i=j.settings)||void 0===i?void 0:i.showSidebar)&&V.createElement(m.ZP,{variant:"permanent",id:"flow-sidebar",sx:(0,l.Z)({display:{xs:"none",md:"block"},width:ye.pG,flexShrink:0},"& .MuiDrawer-paper",{width:ye.pG,boxSizing:"border-box"})},V.createElement(v.Z,null),V.createElement(p.Z,{sx:{overflow:"auto"}},V.createElement(f.Z,null,V.createElement(y.ZP,{key:j.name,disablePadding:!0,onClick:function(){R("/flow/".concat(j.slug))}},V.createElement(b.Z,null,V.createElement(g.Z,null,V.createElement(c.Z,null)),V.createElement(h.Z,{primary:j.name,primaryTypographyProps:{sx:{fontWeight:"bold"}}}))),j.sections.map((function(e){var t,n=e.header.label,l=e.slug;return V.createElement(y.ZP,(0,r.Z)({key:n,disablePadding:!0},null!==(t=j.settings)&&void 0!==t&&t.navigateFreely?{onClick:function(){R("/flow/".concat(j.slug,"/").concat(l))}}:{}),V.createElement(b.Z,null,V.createElement(g.Z,null),V.createElement(h.Z,{primary:n})))}))),V.createElement(E.Z,null))),V.createElement(xe.Z5,null,V.createElement(xe.AW,{index:!0,element:V.createElement(en,{flow:j,answers:{},statuses:{}})}),null==j||null===(x=j.sections)||void 0===x?void 0:x.map((function(e){var t=e.header,n=e.fields,r=e.next,l=e.settings,a=e.id;return V.createElement(xe.AW,{path:e.slug,key:e.slug,element:V.createElement(p.Z,{id:"flow-section-main",component:"main",sx:{width:"100%",p:3}},V.createElement(Z.Z,{variant:"h2",component:"header",sx:{paddingBottom:3}},j.name),null!=n&&n.length?V.createElement(Pt,{id:a,key:a,header:t,allFields:n,next:r,settings:l,answers:{},onSubmit:I,onStatusChange:M}):V.createElement(Ct,{size:1}))})})))):V.createElement(p.Z,{sx:{padding:2}},V.createElement(St,null,V.createElement(Z.Z,{variant:"h2",component:"header"},"Love is the flow(er) you've got to let grow!"),T&&V.createElement(Z.Z,{variant:"h4",component:"header"},"Flow not found!")),!T&&V.createElement(Ct,{size:3}))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,