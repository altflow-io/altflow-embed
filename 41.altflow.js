"use strict";(self.webpackChunkaltflow_ui=self.webpackChunkaltflow_ui||[]).push([[41],{2041:(e,t,n)=>{n.r(t),n.d(t,{default:()=>mn});var r=n(4572),l=n(5861),a=n(885),o=n(4687),i=n.n(o),u=n(6908),c=n(5974),s=n(120),d=n(1647),p=n(6315),m=n(5305),v=n(1394),f=n(7294),y=function(e){var t=e.align,n=void 0===t?"right":t;return f.createElement(s.Z,{display:"flex",pt:4,justifyContent:n},f.createElement(m.Z,{component:v.Z,variant:"outlined",sx:{textAlign:"center"},type:"button",target:"_blank",href:"https://app.altflow.io/",startIcon:f.createElement(p.Z,null)},"Powered by Altflow"))},b=n(2982),g=n(6482),h=n(2530),E=n(30),Z=n(1189),x=n(1388),w=n(9894),O=n(1702);function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function j(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var P=function(e,t,n){var r,l=Array.isArray(t)?t:[t],a=n&&n("".concat(null==e?void 0:e.parent))||void 0,o=null==l?void 0:l.find((function(e){var t,n;return null!=e&&null!==(t=e.value)&&void 0!==t&&t.and?!(null==e||null===(n=e.value)||void 0===n||!n.and)||void 0:(null==e?void 0:e.value)===a}));return o?null!=o&&null!==(r=o.value)&&void 0!==r&&r.and?S(e,o,n):C(o,a):{hide:!0}},S=function(e,t,n){var l;return!1===t.value.and.every((function(r){if(null==r||!r.key){var l=n&&n("".concat(e.parent))||void 0;return!1===C({type:t.type,value:r.value},l).hide}var a=n&&n("".concat(e._metadata.key,".").concat(r.key))||void 0;return!1===C({type:t.type,value:r.value},a).hide}))?{hide:!0}:(l={},(0,r.Z)(l,t.type,!0),(0,r.Z)(l,"props",j({},t.props)),l)},C=function(e,t){var n,l;if(null===e)return{hide:!0};var a="".concat(e.value)==="".concat(t);if(!a&&"hide"===e.type)return{hide:!1};if(!a&&"show"===e.type)return{hide:!0};switch(e.type){case"disabled":return n={},(0,r.Z)(n,e.type,a),(0,r.Z)(n,"props",j({},e.props)),n;case"show":return{hide:!a,props:j({},e.props)};default:return l={},(0,r.Z)(l,e.type,!0),(0,r.Z)(l,"props",j({},e.props)),l}},D=n(7536),F=n(7462),T=n(6804),V=n(8790),A=n(2949),I=n(4917),R=n(599),M=n(3483),L=n(2853),q=n(7888),z=n(7546),N=n(8904),W=n(8037),_=n(2283),B=n(6569),H=n(9960),U=n(4744),G=n(4825),Y=n(2856),K=n(1746),J=n(7619),Q=n(9116),X=n(7856),$=n.n(X),ee=function(e){try{return $().sanitize(e)}catch(t){return e}},te=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];try{var n,r,l;return ee(null==e||null===(n=e.split("\n"))||void 0===n||null===(r=n.map((function(e){return t?ee(e):e})))||void 0===r||null===(l=r.join("<br/>"))||void 0===l?void 0:l.toString())}catch(t){return ee(e)}},ne=function(e){try{return Number(e)}catch(t){return console.error("textToNumber - failed to convert value: ".concat(e," to number"),t),0}},re=function(e){var t,n,r,l=e.label,o=e.altField,i=e.controlledField,u=(e.getValues,e.setValue,e.error),c=e.condition,s=(0,f.useState)((n=o.component,r=i.value,"range"===n?r&&Array.isArray(r)?null==r?void 0:r.map(Number):[0,0]:ne(r))),d=(0,a.Z)(s,2),p=d[0],m=d[1],v=function(){try{var e,t,n,r,l,a,i=(0,b.Z)((null==o||null===(e=o.choices)||void 0===e?void 0:e.sort((function(e,t){var n,r;return Number(null!==(n=null==e?void 0:e.value)&&void 0!==n?n:0)-Number(null!==(r=null==t?void 0:t.value)&&void 0!==r?r:0)})))||[]),u=null!==(t=null!==(n=null==i||null===(r=i[0])||void 0===r?void 0:r.value)&&void 0!==n?n:null==i?void 0:i[0])&&void 0!==t?t:0,c=null==i?void 0:i.pop();return{min:ne(u),max:ne(null!==(l=null!==(a=null==c?void 0:c.value)&&void 0!==a?a:c)&&void 0!==l?l:0)}}catch(e){return console.error("component::slider - failed to get range min, max, returning default 0, 100",e),{min:0,max:100}}}(),y=v.min,g=v.max;return f.createElement(f.Fragment,null,f.createElement(I.Z,null,l),f.createElement(q.Z,(0,F.Z)({component:"div",sx:{width:"95%",display:"flex",justifySelf:"center",mx:"auto"}},i,null==c?void 0:c.props),f.createElement(Q.ZP,(0,F.Z)({getAriaLabel:function(){return"".concat(o.component)}},i,{value:p,onChange:function(e,t){m(t),i.onChange(t)},step:null,min:y,max:g,marks:null===(t=o.choices)||void 0===t?void 0:t.map((function(e){return{value:ne(null==e?void 0:e.value),label:null==e?void 0:e.display}})),valueLabelDisplay:"off"})),f.createElement(L.Z,null,o.sub||""),u&&f.createElement(L.Z,null,u||"")))},le=n(2004),ae=function(e){var t=e.label,n=e.altField,r=e.controlledField;return e.getValues,e.setValue,e.error,e.condition,f.createElement(f.Fragment,null,f.createElement(I.Z,{sx:{display:"flex",alignItems:"center"}},t,f.createElement(V.Z,{title:null!=n&&n.required?"You must watch the video before moving on":"This video is optional to watch",placement:"right",sx:{ml:"4px"}},f.createElement(T.Z,{fontSize:"inherit"}))),f.createElement(L.Z,null,n.sub||""),f.createElement(s.Z,{component:"div",className:"video-player-wrapper",sx:{minWidth:{sm:"100%",md:"unset"},height:{sm:"300px",md:"420px"}}},f.createElement(le.Z,{url:n.watch,controls:!0,loop:!1,width:"100%",height:"100%",onEnded:function(){try{var e,t;(null==n||null===(e=n.props)||void 0===e?void 0:e.onEnded)&&(null==n||null===(t=n.props)||void 0===t||t.onEnded()),r.onChange("completed")}catch(e){console.log("error in video onEnded",e)}}})))},oe=function(e){var t,n=e.altField,r=e.controlledField,l=e.condition,o=e.label,i=(0,f.useState)(r.value||[]),u=(0,a.Z)(i,2),c=u[0],s=u[1];return f.createElement(f.Fragment,null,f.createElement(q.Z,(0,F.Z)({component:"fieldset",variant:"outlined"},l),f.createElement(z.Z,{component:"legend"},o),null==n||null===(t=n.choices)||void 0===t?void 0:t.map((function(e,t){return f.createElement(W.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,control:f.createElement(H.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:c.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,b.Z)(c),[t]):c.filter((function(e){return e!==t}));r.onChange(n.length>0?n:void 0),s(n)},value:null==e?void 0:e.value}),label:null==e?void 0:e.display})})),f.createElement(L.Z,null,n.sub)))},ie=n(9794),ue=n(5591),ce=n(8227),se=n(9316),de=n(130),pe=n(3896),me=n(9031);function ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ve(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ye=function(e){var t,n,r=e.label,l=e.altField,o=e.controlledField,i=e.getValues,u=e.setValue,c=e.error,p=e.condition,m=(0,f.useState)(""),v=(0,a.Z)(m,2),y=v[0],g=v[1],h=function(e){var t;null!==(t=i(l.key))&&void 0!==t&&t.includes(y.trim())||""===y||(u(l.key,[].concat((0,b.Z)(null==o?void 0:o.value),[y.trim()]),{shouldTouch:!0,shouldValidate:!0,shouldDirty:!0}),g(""),e.target.value="")};return f.createElement(s.Z,{key:l.key},f.createElement(d.Z,{variant:"body1",component:"span"},r),f.createElement(L.Z,null,l.sub||""," Friendly Reminder: Be sure to press Enter/Return or Tab when you are done writing!"),f.createElement(ce.ZP,(0,F.Z)({required:!0,type:"text",sx:fe({flex:1,height:"2em",fontSize:"16px",width:"100%"},me.VH)},l.props,{placeholder:"Type your answer choice and then press Enter/Return or Tab to save",inputProps:{"aria-label":l.label}},null==p?void 0:p.props,{value:y,onKeyDown:function(e){["Enter","Tab"].includes(e.key)&&(e.preventDefault(),h(e))},onChange:function(e){g(e.target.value)},endAdornment:(null==y?void 0:y.length)<1&&c?f.createElement(se.Z,{position:"end"},f.createElement(ie.Z,{color:"error"})):(null==y?void 0:y.length)>0&&f.createElement(se.Z,{position:"end"},f.createElement(de.Z,{onClick:h,size:"small",color:"primary"},f.createElement(ue.Z,null))),color:c?"error":"primary"})),f.createElement(pe.Z,{sx:{display:"flex",justifyContent:"center",flexWrap:"wrap",listStyle:"none",p:.5,m:0,maxHeight:"200px",overflowX:"scroll"},component:"ul"},null===(t=(null==o?void 0:o.value)||[])||void 0===t||null===(n=t.map((function(e,t){return f.createElement(x.ZP,{key:"index-".concat(t,"-").concat(e)},f.createElement(M.Z,{label:e,onDelete:function(){var t,n=null===(t=o.value)||void 0===t?void 0:t.filter((function(t){return t!==e}));o.onChange(n.length?n:"")}}))})))||void 0===n?void 0:n.reverse()))},be=(0,f.createContext)({uploads:{}}),ge=n(463),he=n(9250),Ee=n(6388),Ze=n.n(Ee);function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Oe=function(e,t){var n=t("".concat(null==e?void 0:e.parent))||void 0,r=(null==e?void 0:e.condition)&&e.parent&&P(e,(null==e?void 0:e.condition)||null,t);return null!=r&&r.hide||null!=e&&e.parent&&void 0===n?null:we(we({},e),{},{props:we(we({},(null==e?void 0:e.props)||void 0),(null==r?void 0:r.props)||void 0)})},ke="create-flow",je="alt-last-field",Pe=function(e){var t;return(null===(t=e.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g))||void 0===t?void 0:t.join("-").toLowerCase())||e},Se={0:{fields:{name:{props:{}},slug:{props:{disabled:!0,hidden:!0}}}}};function Ce(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function De(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ce(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ce(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Fe=Ze().create({baseURL:"".concat("https://r5us0tfix4.execute-api.us-east-1.amazonaws.com/prod/"),timeout:6e4});Fe.interceptors.response.use((function(e){var t,n,r;return null!==(t=e.config.url)&&void 0!==t&&t.includes("/flows/".concat(ke))?(console.log("inside create-flow intercept"),e.data=De(De({},e.data),{},{sections:null===(n=e.data)||void 0===n||null===(r=n.sections)||void 0===r?void 0:r.map((function(e,t){var n;return null!==(n=Se)&&void 0!==n&&n[t]?De(De({},e),{},{fields:e.fields.map((function(e){var n,r,l=null===(n=Se)||void 0===n||null===(r=n[t])||void 0===r?void 0:r.fields;return null!=l&&l[e.key]?De(De({},e),null==l?void 0:l[e.key]):e}))}):e}))}),e):e}),(function(e){return Promise.reject(e)}));const Te=Fe;function Ve(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ve(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ve(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ie=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,o){var u,c,s,d,p,m,v;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return d=function(){return d=(0,l.Z)(i().mark((function e(){var l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Te.get("flows/".concat(t,"/upload?fileType=").concat(r,"&type=").concat(n));case 2:return l=e.sent,a=l.data,e.abrupt("return",a);case 5:case"end":return e.stop()}}),e)}))),d.apply(this,arguments)},s=function(){return d.apply(this,arguments)},e.next=4,s();case 4:return p=e.sent,m=null===(u=Object.keys(p.fields||{}))||void 0===u||null===(c=u.filter((function(e){return e.startsWith("x-amz-meta-")})))||void 0===c?void 0:c.reduce((function(e,t){return e[t]=p.fields[t],e}),{}),(v=new FormData).append("Content-Type",r),Object.entries(p.fields).forEach((function(e){var t=(0,a.Z)(e,2),n=t[0],r=t[1];v.append(n,r)})),v.append("file",o),e.next=12,Ze().post(p.url,v,{headers:Ae({"Content-Type":"multipart/form-data"},m)});case 12:return e.abrupt("return","".concat(p.url,"/").concat(p.filePath));case 13:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}();function Re(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Re(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Re(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Le={display:"flex",flexDirection:"row",flexWrap:"wrap",marginTop:16},qe={display:"inline-flex",borderRadius:2,border:"1px solid #eaeaea",marginBottom:8,marginRight:8,height:100,padding:4,boxSizing:"border-box"},ze={display:"flex",minWidth:0,overflow:"hidden"},Ne={display:"block",width:"auto",height:"100%"},We={borderColor:"#2196f3"},_e={borderColor:"#00e676"},Be={borderColor:"#ff1744"},He={image:{"image/*":[]},all:{"image/*":[],"application/pdf":[".pdf"]}},Ue=function(e){var t,n=e.altField,o=e.type,u=e.fileType,c=(0,he.UO)().slug,s=(0,f.useContext)(be),d=(0,f.useState)(n.defaultValue?[{name:n.defaultValue,preview:n.defaultValue}]:[]),p=(0,a.Z)(d,2),v=p[0],y=p[1],b=(0,ge.uI)({accept:He[u],maxFiles:1,onDrop:(t=(0,l.Z)(i().mark((function e(t){var l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return l=null==t?void 0:t[0],e.next=3,Ie(c,o,l.type,l);case 3:a=e.sent,s.uploads=Me(Me({},s.uploads),{},(0,r.Z)({},n.key,a)),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,a,{shouldDirty:!0})),y(t.map((function(e){return Object.assign(e,{preview:URL.createObjectURL(e)})})));case 7:case"end":return e.stop()}}),e)}))),function(e){return t.apply(this,arguments)})}),g=b.getRootProps,h=b.open,E=b.getInputProps,Z=b.isFocused,x=b.isDragAccept,w=b.isDragReject,O=b.fileRejections,k=(0,f.useMemo)((function(){return Me(Me(Me(Me({},{flex:1,display:"flex",flexDirection:"column",alignItems:"center",padding:"20px",borderWidth:2,borderRadius:"18px",borderColor:"#eeeeee",borderStyle:"dashed",backgroundColor:"#fafafa",color:"#bdbdbd",outline:"none",transition:"border .24s ease-in-out"}),Z?We:{}),x?_e:{}),w?Be:{})}),[Z,x,w]);(0,f.useEffect)((function(){return function(){return v.forEach((function(e){return URL.revokeObjectURL(e.preview)}))}}),[]);var j=v.map((function(e){return f.createElement("div",{style:qe,key:e.name},f.createElement("div",{style:ze},f.createElement("img",{src:e.preview,style:Ne,onLoad:function(){URL.revokeObjectURL(e.preview)},onError:function(e){return e.currentTarget.src=""}})))}));return f.createElement(f.Fragment,null,f.createElement("div",{className:"container"},(null==v?void 0:v.length)<1&&f.createElement("div",g({style:k}),f.createElement("input",E()),f.createElement("p",null,"Drag file here or"),f.createElement(m.Z,{size:"small",variant:"outlined","aria-label":"upload",onClick:h},"Select file")),f.createElement("aside",{style:Le},j)),null==O?void 0:O.map((function(e){var t=e.file,n=e.errors;return f.createElement("li",{key:t.path},t.path,f.createElement("ul",null,n.map((function(e){return f.createElement("li",{key:e.code},e.message)}))))})),v.length>0&&f.createElement(m.Z,{size:"small",color:"error",variant:"outlined","aria-label":"delete",onClick:function(){null==v||v.forEach((function(e){return URL.revokeObjectURL(e.preview)})),y([]),(null==n?void 0:n.setValue)&&(null==n||n.setValue(n.key,"",{shouldDirty:!0}))}},"Delete"))},Ge=n(2784),Ye=n(5613),Ke={display:"unset",border:"1px solid black",borderRadius:"18px",ml:"0",my:1,p:2,textAlign:"center"},Je=function(e){var t,n,r=e.altField,l=e.controlledField,o=e.condition,i=e.label,u=(0,f.useState)(l.value),c=(0,a.Z)(u,2),s=c[0],d=c[1];return f.createElement(f.Fragment,null,r.multiple?f.createElement(q.Z,(0,F.Z)({component:"div",variant:"outlined"},o),f.createElement(z.Z,{component:"legend"},i),null==r||null===(t=r.choices)||void 0===t?void 0:t.map((function(e,t){return f.createElement(W.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Ke,control:f.createElement(Ge.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},f.createElement(H.Z,{key:null==e?void 0:e.value,name:null==e?void 0:e.display,checked:s.includes(null==e?void 0:e.value),onChange:function(e){var t=e.target.value,n=e.target.checked?[].concat((0,b.Z)(s),[t]):s.filter((function(e){return e!==t}));l.onChange(n),d(n)},value:null==e?void 0:e.value}),f.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),f.createElement(Ye.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})}))):f.createElement(q.Z,(0,F.Z)({component:"div",variant:"outlined"},l,null==o?void 0:o.props),f.createElement(z.Z,{component:"legend"},i),f.createElement(N.Z,{value:l.value},null==r||null===(n=r.choices)||void 0===n?void 0:n.map((function(e,t){return f.createElement(W.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),value:null==e?void 0:e.value,disableTypography:!0,sx:Ke,control:f.createElement(Ge.Z,{key:"".concat(null==e?void 0:e.value,"-").concat(t),sx:{display:"flex"}},f.createElement(_.Z,{value:null==e?void 0:e.value}),f.createElement("img",{src:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format"),srcSet:"".concat(null==e?void 0:e.image,"?w=248&fit=crop&auto=format&dpr=2 2x"),alt:null==e?void 0:e.display,loading:"lazy",style:{maxHeight:"200px"}}),f.createElement(Ye.Z,{position:"below",sx:{textAlign:"center"}})),label:e.display})})))))},Qe=n(9062),Xe=n(4373),$e=n(8877),et=n.n($e),tt=function(e){var t=e.altField,n=e.label,r=(0,f.useState)(null),l=(0,a.Z)(r,2),o=l[0],i=l[1];return(0,f.useEffect)((function(){null==o||o.fromDataURL(t.defaultValue)}),[o]),f.createElement(f.Fragment,null,f.createElement(I.Z,{id:"".concat(t.key,"-label"),sx:{display:"flex",alignItems:"center"}},n,f.createElement(V.Z,{title:"This is a signature pad, start drawing within the box",placement:"right",sx:{ml:"4px"}},f.createElement(T.Z,{fontSize:"inherit"})),f.createElement("br",null)),f.createElement(L.Z,null,t.sub||""),f.createElement(s.Z,{id:"signature-box",sx:{textAlign:"center"},style:{border:"1px dotted black",borderRadius:"4px",padding:"4px"}},f.createElement(et(),{ref:function(e){i(e)},onEnd:function(){if(null!=o&&o.isEmpty())throw Error("Signature not signed");try{var e=null==o?void 0:o.getTrimmedCanvas().toDataURL();(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,e))}catch(e){console.log("signature-canvas error",e)}},clearOnResize:!1,penColor:"black",canvasProps:{height:450,className:"altflow-signature-canvas",style:{width:"100%"}}}),f.createElement(Xe.Z,null),f.createElement(m.Z,{size:"small",variant:"outlined","aria-label":"clear signature canvas",fullWidth:!0,onClick:function(){null==o||o.clear(),(null==t?void 0:t.setValue)&&(null==t||t.setValue(t.key,null))},startIcon:f.createElement(Qe.Z,null),sx:{mt:"4px"}},"Clear")))},nt=n(9208),rt=n.n(nt);function lt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function at(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?lt(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):lt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ot={fullWidth:!0},it=n(56),ut=n(4683),ct=n(1008),st=n(983),dt=n(1374),pt=n(1399),mt=n(8370),vt=n(5873),ft=n(2079),yt=n(6496),bt=n(6898),gt=n(3204),ht=n(311),Et=function(e,t,n,r,l){var a,o,i=t("".concat(null==e?void 0:e.parent))||void 0,u=(null==e?void 0:e.condition)&&e.parent&&P(e,(null==e?void 0:e.condition)||null,t);if(null!=u&&u.hide)return null;if(null!=e&&e.parent&&void 0===i)return null;var c=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3?arguments[3]:void 0,l=function(e){try{return"string"==typeof e?e:JSON.stringify(e)}catch(t){return e}};switch(e){case"toggle":return null!=t&&t;case"checkbox":case"picture-selection":case"autocomplete":case"select":return n?void 0!==t&&t?Array.isArray(t)&&t.length<1?[]:Array.isArray(t)?t:[t]:[]:null!=t?t:"";case"radio":case"video":case"signature":return null!=t?t:"";default:return r?l(t):t||""}}(e.component,e.defaultValue,null!==(a=null==e?void 0:e.multiple)&&void 0!==a&&a,"json"===(null==e?void 0:e.format)||!1);return f.createElement(f.Fragment,null,"header"!==e.component?f.createElement(D.Qr,{key:e.key,name:e.key,control:r,rules:{required:null!==(o=null==e?void 0:e.required)&&void 0!==o&&o},defaultValue:c,render:function(r){var a=r.field;return f.createElement(s.Z,{sx:{pb:1}},function(e){var t,n,r,l,a=e.altField,o=e.controlledField,i=e.getValues,u=e.setValue,c=e.condition,p=e.errors,m=Pe(a.key),v=f.createElement(f.Fragment,null,a.label,null!=a&&a.required?"*":"",null!=a&&a.tip?f.createElement(V.Z,{title:null==a?void 0:a.tip,placement:"right",sx:{ml:"4px"}},f.createElement(T.Z,{fontSize:"inherit"})):null,!0===a.multiple&&f.createElement(V.Z,{title:"You can choose multiple options",placement:"right",sx:{ml:"4px"}},f.createElement(T.Z,{fontSize:"inherit"}))),y=rt()(p,a.key,null)||null;if(null!=a&&null!==(t=a.props)&&void 0!==t&&t.hidden)return f.createElement(A.Z,(0,F.Z)({error:(null===(l=Object.keys(y||{}))||void 0===l?void 0:l.length)>0},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,ot,{style:{display:"none"}}));switch(a.component){case"autocomplete":var b;return f.createElement(f.Fragment,null,f.createElement(I.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),f.createElement(R.Z,(0,F.Z)({disablePortal:!0,options:a.choices,getOptionLabel:function(e){var t;return null!==(t=null==e?void 0:e.display)&&void 0!==t?t:e},isOptionEqualToValue:function(e,t){return e.value===t},key:m,multiple:null!==(b=null==a?void 0:a.multiple)&&void 0!==b&&b,renderTags:function(e,t){return null==e?void 0:e.map((function(e,n){return f.createElement(M.Z,(0,F.Z)({variant:"outlined",label:e},t({index:n})))}))},renderInput:function(e){return f.createElement(A.Z,e)},onChange:function(e,t){t?o.onChange(Array.isArray(t)?null==t?void 0:t.map((function(e){return null==e?void 0:e.value})):null==t?void 0:t.value):o.onChange("")},value:a.defaultValue},null==c?void 0:c.props,a.props,ot)),f.createElement(L.Z,null,a.sub||""));case"date":return f.createElement(Y._,{dateAdapter:J.H},f.createElement(I.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),f.createElement(K.M,(0,F.Z)({inputFormat:"MM-dd-yyyy"},o,{renderInput:function(e){return f.createElement(A.Z,(0,F.Z)({},e,{error:y,label:"MM-dd-yyyy"},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,ot))}})));case"input":return"date"===(null==a?void 0:a.type)?f.createElement(Y._,{dateAdapter:J.H},f.createElement(I.Z,{id:"".concat(m,"-label"),sx:{pb:1}},v),f.createElement(K.M,(0,F.Z)({inputFormat:"MM-dd-yyyy"},o,{renderInput:function(e){var t;return f.createElement(A.Z,(0,F.Z)({},e,{error:(null===(t=Object.keys(y||{}))||void 0===t?void 0:t.length)>0,label:"MM-dd-yyyy"},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,ot))}}))):f.createElement(f.Fragment,null,f.createElement(I.Z,{id:"".concat(m,"-label")},v),f.createElement(A.Z,(0,F.Z)({error:(null===(n=Object.keys(y||{}))||void 0===n?void 0:n.length)>0},o,null==c?void 0:c.props,{type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,ot)));case"textarea":return f.createElement(f.Fragment,null,f.createElement(I.Z,{id:"".concat(m,"-label")},v),f.createElement(A.Z,(0,F.Z)({error:y},o,null==c?void 0:c.props,{multiline:!0,resize:"true",minRows:3,type:null==a?void 0:a.type,required:a.required,key:m,id:m,helperText:a.sub},a.props,ot)));case"radio":return f.createElement(f.Fragment,null,f.createElement(q.Z,(0,F.Z)({component:"fieldset",variant:"outlined"},o,null==c?void 0:c.props,ot),f.createElement(z.Z,{id:"".concat(m,"-label")},v),f.createElement(N.Z,{value:o.value,key:m,id:m},null===(r=a.choices)||void 0===r?void 0:r.map((function(e){var t,n;return f.createElement(W.Z,{key:null!==(t=null==e?void 0:e.value)&&void 0!==t?t:null==e?void 0:e.display,value:null!==(n=null==e?void 0:e.value)&&void 0!==n?n:null==e?void 0:e.display,control:f.createElement(_.Z,null),label:null==e?void 0:e.display})}))),f.createElement(L.Z,null,a.sub||"")));case"toggle":return f.createElement(f.Fragment,null,f.createElement(z.Z,{id:"".concat(m,"-label")},v),f.createElement(B.Z,(0,F.Z)({id:m,required:a.required,defaultChecked:a.defaultValue,edge:"end",inputProps:{"aria-labelledby":a.label}},o,null==c?void 0:c.props,a.props)),f.createElement(L.Z,null,a.sub||""));case"picture-selection":return f.createElement(Je,{altField:a,controlledField:o,label:v,condition:c});case"checkbox":return a.key!==je?f.createElement(f.Fragment,null,!0===a.multiple?f.createElement(oe,{altField:a,controlledField:o,label:v,condition:c}):f.createElement(q.Z,(0,F.Z)({component:"fieldset",variant:"outlined"},o,null==c?void 0:c.props),f.createElement(W.Z,{key:m,value:v,control:f.createElement(H.Z,{key:m,id:m,name:a.label,defaultChecked:a.defaultValue}),label:v}),f.createElement(L.Z,null,a.sub))):null;case"select":var g,h;return f.createElement(f.Fragment,null,f.createElement(I.Z,{id:"".concat(m,"-label"),sx:{display:"flex",alignItems:"center"}},v),f.createElement(U.Z,(0,F.Z)({id:m,key:m},o,null==c?void 0:c.props,{multiple:null!==(g=null==a?void 0:a.multiple)&&void 0!==g&&g,required:a.required,labelId:"".concat(m,"-label")},a.props,ot),null===(h=a.choices)||void 0===h?void 0:h.map((function(e){return f.createElement(G.Z,{key:null==e?void 0:e.value,value:null==e?void 0:e.value,divider:!0},null==e?void 0:e.display)}))),f.createElement(L.Z,null,a.sub));case"video":return f.createElement(ae,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:y,condition:c});case"signature":return f.createElement(tt,{altField:a,label:v});case"upload":return f.createElement(s.Z,{key:m,sx:{width:"100%"}},f.createElement(d.Z,{variant:"body1",component:"span"},v),f.createElement(d.Z,{variant:"body2",component:"p"},a.sub),f.createElement(Ue,{altField:at(at({},a),{},{setValue:u}),fileType:"all",type:"user"}),f.createElement(L.Z,null,a.sub||""));case"chip":return f.createElement(ye,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:y,condition:c});case"linear":case"range":return f.createElement(re,{label:v,altField:a,controlledField:o,getValues:i,setValue:u,error:y,condition:c})}}({altField:e,controlledField:a,getValues:t,setValue:n,condition:u,errors:l}))}}):function(e){if("header"===e.component)return f.createElement(f.Fragment,null,f.createElement("h3",null,e.label),f.createElement("h4",null,e.sub))}(e))},Zt=n(4561),xt=n(9655);function wt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ot(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?wt(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):wt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var kt=function(e){var t,n,o,u,c,p,v,y,Z,x,w=e.flowSlug,O=e.id,k=e.header,j=e.allFields,P=e.next,S=e.settings,C=e.answers,F=e.fieldOverrides,T=e.onSubmit,V=e.onStatusChange,A=e.onCreateFlowFromTemplateSelection,I=(0,he.s0)(),R=(0,xt.lr)(),M=(0,a.Z)(R,1)[0],L=(0,f.useState)(null==S?void 0:S.showOneFieldAtATime),q=(0,a.Z)(L,2),z=q[0],N=(q[1],(0,f.useState)(function(e,t){return[].concat((0,b.Z)(e.map((function(e){return Ot(Ot({},e),{},{defaultValue:null==t?void 0:t[e.key]})}))),[{key:je,label:"",component:"checkbox",defaultValue:!0}])}(j,C||{}))),W=(0,a.Z)(N,1)[0],_=(0,f.useState)({current:W[0],next:null,previous:null,isCompleted:!1}),B=(0,a.Z)(_,2),H=B[0],U=B[1],G=(0,f.useState)([]),Y=(0,a.Z)(G,2),K=Y[0],J=Y[1],Q=(0,f.useState)(null),X=(0,a.Z)(Q,2),$=X[0],ee=X[1],ne=(0,D.cI)({mode:"onChange",shouldUnregister:!z,defaultValues:Ot({},C)}),re=ne.control,le=ne.formState,ae=ne.setValue,oe=ne.getValues,ie=ne.handleSubmit,ue=ne.watch,ce=ue(),se=F?ue(null==F?void 0:F.field):null,de=le.errors,pe=le.isSubmitting,me=(0,f.useState)(!1),ve=(0,a.Z)(me,2),fe=ve[0],ye=ve[1],be=(0,f.useState)(!1),ge=(0,a.Z)(be,2),Ee=ge[0],Ze=ge[1],xe=j.filter((function(e){return!0===e.required}));(0,f.useEffect)((function(){if(null!=F&&F.action)return null==F?void 0:F.action({formValues:ce,setValue:ae})}),[se]);var we=function(){var e=(0,l.Z)(i().mark((function e(){var t,n,r,l,a,o,u,c,s,d,p,m,v,f;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(o=null!==(t=null===(n=H.current)||void 0===n?void 0:n.required)&&void 0!==t&&t,u=H.current.defaultValue||null,c=(null==ce?void 0:ce[H.current.key])||null,s=null!=c,!0!==o||u||s){e.next=7;break}return ee((null==de?void 0:de[null==H||null===(d=H.current)||void 0===d?void 0:d.key])||"no answer yet"),e.abrupt("return");case 7:if(!0!==o||s){e.next=10;break}return ee((null==de?void 0:de[null==H||null===(p=H.current)||void 0===p?void 0:p.key])||"had answer before, but cleared out answer on current step"),e.abrupt("return");case 10:ee(null),m=W.map((function(e){return Oe(e,oe)})).filter((function(e){return null!==e})),v=m.map((function(e){return"".concat((null==e?void 0:e.key)||""," - ").concat((null==e?void 0:e.label)||"")})).lastIndexOf("".concat((null===(r=H.current)||void 0===r?void 0:r.key)||""," - ").concat((null===(l=H.current)||void 0===l?void 0:l.label)||"")),f=(null===(a=m[v+1])||void 0===a?void 0:a.key)===je,U((function(e){return Ot(Ot({},e),{},{next:f?null:m[v+1],isCompleted:f})}));case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();(0,f.useEffect)((function(){z&&we()}),[z,H.current,ce[H.current.key]]);var Se=function(){var e=(0,l.Z)(i().mark((function e(t){var n,l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:ye(!0),e.t0=t,e.next="previous"===e.t0?4:"next"===e.t0?7:31;break;case 4:return J((function(e){return e.pop(),(0,b.Z)(e)})),U((function(e){return Ot(Ot({},e),{},{current:e.previous.key?W.find((function(t){var n;return t.key===(null===(n=e.previous)||void 0===n?void 0:n.key)})):null,previous:W.find((function(e){return e.key===K[K.length-1]})),isCompleted:!1})})),e.abrupt("break",32);case 7:if(n=H.current.defaultValue||"",l=ce[H.current.key]||"",n===l){e.next=19;break}return e.prev=10,a=(0,r.Z)({},H.current.key,ce[H.current.key]),e.next=14,T(O,a);case 14:e.next=19;break;case 16:e.prev=16,e.t1=e.catch(10),console.log(Pe("gotoNextSubmitError"),e.t1);case 19:if(e.prev=19,0!==K.length){e.next=23;break}return e.next=23,V(O,"IN_PROGRESS");case 23:e.next=28;break;case 25:e.prev=25,e.t2=e.catch(19),console.log(Pe("gotoNextStatusChangeError"),e.t2);case 28:return J((function(e){return[].concat((0,b.Z)(e),[H.current.key])})),U((function(e){return Ot(Ot({},e),{},{current:Ot({},e.next),previous:W.find((function(t){return t.key===e.current.key}))})})),e.abrupt("break",32);case 31:return e.abrupt("break",32);case 32:ye(!1);case 33:case"end":return e.stop()}}),e,null,[[10,16],[19,25]])})));return function(t){return e.apply(this,arguments)}}();(0,f.useEffect)((function(){if(!z){var e=le.isValid,t=!xe.some((function(e){return!(null!=ce&&ce[e.key])}));Ze(null!=e?e:t)}}),[ce]);var Ce=function(){var e=(0,l.Z)(i().mark((function e(t){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(delete t[je],console.log("submitting",t),w!==ke){e.next=6;break}return n=function(){var e=(0,l.Z)(i().mark((function e(){var n;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,!A){e.next=8;break}return e.next=4,A(t);case 4:if(!(n=e.sent).slug){e.next=8;break}return I("/flow/".concat(n.slug,"?mode=edit")),e.abrupt("return");case 8:e.next=13;break;case 10:e.prev=10,e.t0=e.catch(0),console.error(e.t0);case 13:return e.abrupt("return");case 14:case"end":return e.stop()}}),e,null,[[0,10]])})));return function(){return e.apply(this,arguments)}}(),e.next=6,n();case 6:return e.prev=6,e.next=9,T(O,t);case 9:return e.next=11,V(O,"COMPLETED");case 11:if(w!==ke){e.next=13;break}return e.abrupt("return");case 13:I("../".concat(P)),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(6),console.log(Pe("onSubmitHandler"),e.t0);case 19:case"end":return e.stop()}}),e,null,[[6,16]])})));return function(t){return e.apply(this,arguments)}}();return f.createElement(g.Z,{variant:"outlined",id:"section-".concat(O)},f.createElement(h.Z,null,null!=k&&k.label?f.createElement(d.Z,{variant:"h3",component:"header",sx:{paddingBottom:2}},null==k?void 0:k.label):null,null!=k&&k.sub?f.createElement(d.Z,{variant:"h5",color:"text.secondary",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:te(null==k?void 0:k.sub)}}):null,w===ke&&M.get("template")&&f.createElement(d.Z,{variant:"h5",component:"p",sx:{pb:2,textDecoration:"capitalize"}},"With ",null===(t=M.get("template"))||void 0===t?void 0:t.split("-").join(" ")),z?f.createElement(s.Z,{paddingTop:2,paddingBottom:2,key:"".concat(O,"-1-at-a-time")},fe||pe?f.createElement(Zt.EK,null):f.createElement(f.Fragment,null,f.createElement(s.Z,{paddingBottom:2,className:"altform-field"},Et(Ot(Ot({},H.current),{},{defaultValue:null!==(u=oe(H.current.key))&&void 0!==u?u:H.current.defaultValue,setValue:ae}),oe,ae,re,de)),f.createElement(s.Z,{sx:{pt:2},id:"altform-action"},null!==(c=H.previous)&&void 0!==c&&c.key?f.createElement(m.Z,{type:"button",onClick:function(){return Se("previous")}},"Back"):null,null!==(p=H.next)&&void 0!==p&&p.key?f.createElement(m.Z,{variant:"contained",type:"button",disabled:null!==(v=(null===(y=Object.keys(de))||void 0===y?void 0:y.length)>0||null!==$)&&void 0!==v&&v,onClick:function(){return Se("next")}},"Continue"):null,H.isCompleted?f.createElement(m.Z,{variant:"contained",type:"submit",disabled:null!==(Z=(null===(x=Object.keys(de))||void 0===x?void 0:x.length)>0||null!==$)&&void 0!==Z&&Z,onClick:ie(Ce)},P?"Continue":"Submit"):null))):f.createElement(s.Z,{py:2,className:"altform-fields"},pe?f.createElement(Zt.EK,null):f.createElement(f.Fragment,{key:"".concat(O,"-full")},f.createElement(E.ZP,{key:"".concat(O,"-full"),container:!0,spacing:1,alignItems:"center",justifyItems:"center",justifyContent:"center"},null==W||null===(n=W.map((function(e){return Oe(e,oe)})))||void 0===n||null===(o=n.filter((function(e){return null!==e})))||void 0===o?void 0:o.map((function(e){var t;return f.createElement(E.ZP,{item:!0,xs:12,sm:12,md:12,key:e.key},Et(Ot(Ot({},e),{},{defaultValue:null!==(t=null==ce?void 0:ce[e.key])&&void 0!==t?t:null==e?void 0:e.defaultValue,setValue:ae}),oe,ae,re,de))}))),f.createElement(m.Z,{variant:"contained",type:"submit",disabled:!Ee,onClick:ie(Ce)},P?"Continue":"Submit")))))},jt=function(e){var t=e.children;return f.createElement(s.Z,{sx:{paddingBottom:4}},t)},Pt=function(e){var t=e.size;return f.createElement(E.ZP,{container:!0,spacing:1,paddingBottom:1},(0,b.Z)(Array(t).keys()).map((function(e,t){return f.createElement(E.ZP,{item:!0,sm:6,md:4,key:t,sx:{display:"grid",width:"100%"}},f.createElement(Zt.ZP,{speed:2,width:476,height:124,viewBox:"0 0 476 124",backgroundColor:"#f3f3f3",foregroundColor:"#ecebeb"},f.createElement("circle",{cx:"20",cy:"20",r:"20"}),f.createElement("rect",{x:"48",y:"8",rx:"3",ry:"3",width:"88",height:"6"}),f.createElement("rect",{x:"48",y:"26",rx:"3",ry:"3",width:"52",height:"6"}),f.createElement("rect",{x:"0",y:"56",rx:"3",ry:"3",width:"240",height:"6"}),f.createElement("rect",{x:"0",y:"72",rx:"3",ry:"3",width:"200",height:"6"}),f.createElement("rect",{x:"0",y:"88",rx:"3",ry:"3",width:"178",height:"6"})))})))},St=n(3416),Ct=n(7709),Dt=n(7961),Ft=n(9620),Tt=n(7745),Vt=n(4498),At=n(1129),It=n(3406),Rt=n(3150),Mt=n(6140),Lt=n(8736),qt=n(3030);function zt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Nt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zt(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Wt=function(e){var t,n,l=e.showPrint,a=e.setShowPrint,o=e.flow,i=e.answers,u=o.sections[1].id,c=["Mission Statement","Vision Statement","Personal/Family Vision"].map((function(e){var t,n,r=(null===(t=o.sections[1].fields.find((function(t){return t.label.trim()===e})))||void 0===t?void 0:t.key)||"",l=(null==i||null===(n=i[u])||void 0===n?void 0:n[r])||"";return{title:e,body:l}})),s=[{keyword:"your action area",title:"Action Areas",areas:{}},{keyword:"desire",title:"Desired Results & Measurements",areas:{}},{keyword:"capacity",title:"Capacity Requirements",areas:{}},{keyword:"opportunities",title:"Primary Obstacles",areas:{}},{keyword:"milestones",title:"Milestones",areas:{}},{keyword:"help",title:"Who Can Help Me?",areas:{}}];return null===(t=o.sections)||void 0===t||null===(n=t.filter((function(e){return e.slug.includes("action-area")})))||void 0===n||n.forEach((function(e){var t;null===(t=e.fields)||void 0===t||t.forEach((function(t){var n,l,a,o=s.findIndex((function(e){return t.label.toLowerCase().includes(e.keyword)})),u=t.parent||"";o>-1&&(s[o]=Nt(Nt({},s[o]),{},{areas:Nt(Nt({},null==s||null===(n=s[o])||void 0===n?void 0:n.areas),{},(0,r.Z)({},e.slug,(null==i||null===(l=i[e.id])||void 0===l?void 0:l[t.key])||(null==i||null===(a=i[e.id])||void 0===a?void 0:a[u])||""))}))}))})),(0,f.useEffect)((function(){!0===l&&setTimeout((function(){window.print()}),1e3)}),[l]),f.createElement(Ft.Z,{open:l,keepMounted:!1,maxWidth:"xl",fullWidth:!0,onClose:function(){return a(!1)}},f.createElement(Tt.Z,null,"Ardent Mentoring Roadmap"),f.createElement(Vt.Z,{sx:{p:2}},f.createElement(E.ZP,{container:!0,spacing:2,paddingBottom:1,key:"ardent-mentoring-print"},null==c?void 0:c.map((function(e,t){return f.createElement(E.ZP,{item:!0,sx:{display:"flex",justifyContent:"center",width:"".concat(100/c.length,"%")},key:t},f.createElement(g.Z,{variant:"outlined",sx:{width:"100%",display:"flex",flexDirection:"column",justifyContent:"space-between",textAlign:"center"}},f.createElement(At.Z,{title:e.title,titleTypographyProps:{variant:"h6"}}),f.createElement(h.Z,null,e.body)))}))),f.createElement(It.Z,{component:pe.Z,sx:{pt:2}},f.createElement(Rt.Z,{sx:{minWidth:650},"aria-label":"simple table"},f.createElement(Mt.Z,null,null==s?void 0:s.map((function(e){var t;return f.createElement(Lt.Z,{key:e.title,sx:{"&:last-child td, &:last-child th":{border:0}}},f.createElement(qt.Z,{component:"th",scope:"row"},e.title),null===(t=Object.values(e.areas||{}))||void 0===t?void 0:t.map((function(e,t){return f.createElement(qt.Z,{align:"center",key:t},e)})))})))))))},_t=n(5620),Bt=function(){var e=(0,l.Z)(i().mark((function e(t){var n,r;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Te.get("/flows/".concat(t));case 3:return n=e.sent,r=n.data,e.abrupt("return",r);case 8:return e.prev=8,e.t0=e.catch(0),console.error("error",e.t0),e.abrupt("return",null);case 12:case"end":return e.stop()}}),e,null,[[0,8]])})));return function(t){return e.apply(this,arguments)}}(),Ht=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,Te.post("/flows/".concat(t,"/validate"),{password:n});case 3:e.next=8;break;case 5:throw e.prev=5,e.t0=e.catch(0),e.t0;case 8:case"end":return e.stop()}}),e,null,[[0,5]])})));return function(t,n){return e.apply(this,arguments)}}(),Ut=function(e){var t=e.flowSlug,n=e.setPasswordVerificationSuccess,r=(0,f.useState)(""),o=(0,a.Z)(r,2),u=o[0],c=o[1],p=(0,f.useState)(!1),v=(0,a.Z)(p,2),y=v[0],b=v[1];return f.createElement(s.Z,{sx:{display:"flex",flexDirection:"column"}},f.createElement(jt,null,f.createElement(d.Z,{variant:"h3",component:"header",sx:{pb:1}},"Password required to go through flow"),y&&f.createElement(_t.Z,{severity:"error"},"This flow's password is wrong! Please try again.")),f.createElement(I.Z,{id:"password-label"},"Enter password"),f.createElement(A.Z,{required:!0,type:"password",sx:{pb:2},onChange:function(e){return c(e.target.value)}}),u.length>0&&f.createElement(m.Z,{type:"submit",size:"small",variant:"outlined","aria-label":"validate-password",onClick:(0,l.Z)(i().mark((function e(){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,b(!1),e.next=4,Ht(t,u);case 4:n(!0),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(0),b(!0),n(!1);case 11:case"end":return e.stop()}}),e,null,[[0,7]])})))},"Continue"))},Gt=n(5275),Yt=n(9382),Kt=n(3085),Jt=function(e){var t,n,r,l=e.section,a=e.answers,o=e.status,i=e.isActionButtonDisabled,u=(0,he.s0)();return f.createElement(g.Z,{variant:"outlined",id:l.id},f.createElement(h.Z,null,f.createElement(d.Z,{variant:"h3",component:"header",sx:{pb:1}},l.header.label),f.createElement(d.Z,{sx:{mb:2},variant:"h5",color:"text.secondary",component:"p",dangerouslySetInnerHTML:{__html:te(null===(t=l.header)||void 0===t?void 0:t.sub)}}),null!==(n=l.settings)&&void 0!==n&&n.displayOverview?f.createElement(f.Fragment,null,f.createElement(d.Z,{sx:{mb:1},variant:"h5",color:"text.secondary",component:"p"},"CREATED"===o?"What to expect:":"Your responses:"),null===(r=l.fields)||void 0===r?void 0:r.map((function(e){return function(e,t){var n,r;return f.createElement(x.ZP,{id:e.id,key:e.id,sx:{px:0,alignItems:"self-start"}},f.createElement(w.Z,{sx:{minWidth:"40px"}},function(e){switch(e){case"date":return f.createElement(it.Z,{color:"primary"});case"textarea":return f.createElement(ut.Z,{color:"primary"});case"radio":return f.createElement(ct.Z,{color:"primary"});case"checkbox":return f.createElement(st.Z,{color:"primary"});case"picture-selection":return f.createElement(dt.Z,{color:"primary"});case"select":return f.createElement(pt.Z,{color:"primary"});case"video":return f.createElement(mt.Z,{color:"primary"});case"signature":return f.createElement(vt.Z,{color:"primary"});case"chip":return f.createElement(ft.Z,{color:"primary"});case"upload":return f.createElement(yt.Z,{color:"primary"});case"linear":return f.createElement(bt.Z,{color:"primary"});case"range":return f.createElement(gt.Z,{color:"primary"});default:return f.createElement(ht.Z,{color:"primary"})}}(e.component)),f.createElement(O.Z,{primary:e.label,secondary:(n=null==e?void 0:e.sub,r=t[e.key],f.createElement(f.Fragment,null,n?f.createElement(f.Fragment,null,n,f.createElement("br",null)):null,r?f.createElement(s.Z,{sx:{alignContent:"flex-start",alignItems:"flex-start",display:"flex",pt:1}},f.createElement(Z.Z,{fontSize:"small",color:"success"}),function(e,t){switch(e.component){case"signature":return f.createElement("img",{src:te(t),alt:"signature/drawing",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}});case"picture-selection":return(e.multiple?t:[t]).map((function(t){var n,r=null==e||null===(n=e.choices)||void 0===n?void 0:n.find((function(e){return e.value===t}));return f.createElement(s.Z,{sx:{display:"flex",flexDirection:"column",border:"1px solid black",borderRadius:"18px",textAlign:"center",p:1,mr:1}},f.createElement("img",{src:(null==r?void 0:r.image)||"",alt:null==r?void 0:r.display,loading:"lazy",style:{maxHeight:"100px",maxWidth:"100%",paddingLeft:"8px",paddingTop:"8px"}}),f.createElement(d.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:te(t)}}))}));default:return f.createElement(d.Z,{sx:{fontWeight:"bold",paddingTop:0,paddingLeft:1},dangerouslySetInnerHTML:{__html:te(t)}})}}(e,r)):null)),secondaryTypographyProps:{component:"div"},sx:{marginTop:0}}))}(e,a)}))):null),f.createElement(Kt.Z,null,f.createElement(m.Z,{size:"medium",variant:"contained",disabled:i,onClick:function(){return u("".concat(l.slug),{state:{sectionId:l.id}})}},function(e){switch(e){case"CREATED":default:return"START";case"IN_PROGRESS":return"CONTINUE";case"COMPLETED":return"REVIEW"}}(o||"CREATED"))))},Qt=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{endingMessage:null,sections:[],answers:null,statuses:null,isPreview:!1},t=e.endingMessage,n=e.sections,r=e.answers,l=e.isPreview,o=e.statuses,i=(0,f.useMemo)((function(){return n.some((function(e){return"COMPLETED"!==(null==o?void 0:o[e.id])}))}),[o]),u=(0,f.useMemo)((function(){var e,t;return(null===(e=Object.values(o||{}))||void 0===e||null===(t=e.map((function(e){return"COMPLETED"===e})))||void 0===t?void 0:t.filter(Boolean).length)/(null==n?void 0:n.length)*100||0}),[o]),c=(0,f.useState)(i||!0),d=(0,a.Z)(c,2),p=d[0],m=d[1],v=(0,f.useState)(u),y=(0,a.Z)(v,2),b=y[0],g=y[1];(0,f.useEffect)((function(){m(i),g(u)}),[o]);var h=(0,f.useState)(n.findIndex((function(e){var t,n=e.id;return"COMPLETED"!==(null!==(t=null==o?void 0:o[n])&&void 0!==t?t:"CREATED")}))||0),E=(0,a.Z)(h,1),Z=E[0];return f.createElement(s.Z,{sx:{minWidth:"100%"},id:"flow-overview-main"},f.createElement(Xt,{variant:"determinate",value:b}),!p&&f.createElement(_t.Z,{severity:"success"},f.createElement(Gt.Z,null,"Woohoo! You've completed this flow!"),f.createElement("p",{dangerouslySetInnerHTML:{__html:te(null!=t?t:"")}})),null==n?void 0:n.map((function(e,t){var n;return f.createElement(s.Z,{sx:{paddingTop:2,paddingBottom:2},key:e.slug,className:"flow-overview"},r?f.createElement(Jt,{section:e,answers:(null==r?void 0:r[null==e?void 0:e.id])||{},status:(null==o?void 0:o[null==e?void 0:e.id])||null,isActionButtonDisabled:l||(null==e||null===(n=e.fields)||void 0===n?void 0:n.length)<1||t>Z}):null)})))};function Xt(e){return f.createElement(s.Z,{sx:{display:"flex",alignItems:"center",my:1}},f.createElement(s.Z,{sx:{width:"100%",mr:1}},f.createElement(Yt.Z,(0,F.Z)({variant:"determinate"},e))),f.createElement(s.Z,{sx:{minWidth:35}},f.createElement(d.Z,{variant:"body2",color:"text.secondary"},"".concat(Math.round(e.value),"%"))))}var $t=function(e){var t,n,r,l,o,i,u,c,p,v=e.flow,b=e.answers,g=e.statuses,h=(0,f.useState)(!(null!==(t=v.settings)&&void 0!==t&&t.toRequirePassword)),Z=(0,a.Z)(h,2),x=Z[0],w=Z[1],O=(0,f.useState)(!1),k=(0,a.Z)(O,2),j=k[0],P=k[1];return f.createElement(f.Fragment,null,f.createElement(s.Z,{id:"flow-main",component:"main",sx:{width:"100%"}},f.createElement(s.Z,{sx:{p:4}},f.createElement(E.ZP,{container:!0,alignItems:"center",justifyItems:"center",justifyContent:"center"},f.createElement(E.ZP,{item:!0,sm:3,display:"flex",alignItems:"center",justifyItems:"center",justifyContent:"center",sx:{textAlign:"center"}},f.createElement(Dt.Z,{alt:"".concat(v.name," logo"),variant:"square",src:null==v||null===(n=v.theme)||void 0===n?void 0:n["brand-logo"],imgProps:{sx:{objectFit:"contain"}},sx:{width:200,minHeight:200,mb:2}},null===(r=v.name)||void 0===r?void 0:r.substring(0,1))),f.createElement(E.ZP,{item:!0,sm:9,sx:{px:2}},f.createElement(s.Z,{sx:{display:"flex",justifyContent:"space-between",flexDirection:{xs:"column",sm:"row"}}},f.createElement(s.Z,{sx:{paddingBottom:2}},f.createElement(d.Z,{variant:"h2",component:"header"},v.name),f.createElement(d.Z,{variant:"caption",component:"p",sx:{paddingBottom:2}},"by ",null!==(l=null==v||null===(o=v.org)||void 0===o?void 0:o.name)&&void 0!==l?l:"".concat(v.owner.firstName," ").concat(v.owner.lastName))),f.createElement(s.Z,null,!b||null!==(i=v.settings)&&void 0!==i&&i.toRequirePassword?null:f.createElement(m.Z,{size:"small",variant:"outlined","aria-label":"print",onClick:function(){"ardent-roadmap"!==v.slug?window.print():P(!0)},startIcon:f.createElement(Ct.Z,null)},"PDF"))),f.createElement(s.Z,null,f.createElement(d.Z,{variant:"h5",component:"p",sx:{paddingBottom:2},dangerouslySetInnerHTML:{__html:te(null==v?void 0:v.description)}})))),(null==v||null===(u=v.sections)||void 0===u?void 0:u.length)>0&&(null===(c=v.settings)||void 0===c?void 0:c.toRequirePassword)&&!x&&f.createElement(Ut,{flowSlug:v.slug,setPasswordVerificationSuccess:w}),x&&f.createElement(f.Fragment,null,(null==v||null===(p=v.sections)||void 0===p?void 0:p.length)>0&&b?f.createElement(f.Fragment,null,f.createElement(Qt,{endingMessage:v.ending||null,sections:null==v?void 0:v.sections,answers:b,statuses:g})):f.createElement(Pt,{size:1})),f.createElement(y,null))),"ardent-roadmap"===v.slug&&f.createElement(Wt,{flow:v,answers:b,setShowPrint:P,showPrint:j}))},en=n(3215),tn=n(4981),nn=n(4384),rn=n(8573),ln=n(5309),an=function(e){var t,n=e.flow,l=e.isEmbed,a=(0,he.UO)(),o=(0,he.TH)(),i=(0,he.s0)(),u=l?"/":"/flow/".concat(n.slug);return null!==(t=n.settings)&&void 0!==t&&t.showSidebar?f.createElement(tn.ZP,{variant:"permanent",id:"flow-sidebar",sx:(0,r.Z)({display:{xs:"none",md:"block"},width:me.pG,flexShrink:0},"& .MuiDrawer-paper",{width:me.pG,boxSizing:"border-box"})},f.createElement(nn.Z,null),f.createElement(s.Z,{sx:{overflow:"auto"}},f.createElement(rn.Z,null,f.createElement(x.ZP,{key:n.name,disablePadding:!0,onClick:function(){i(u)}},f.createElement(ln.Z,null,f.createElement(w.Z,null,f.createElement(en.Z,null)),f.createElement(O.Z,{primary:n.name,primaryTypographyProps:{sx:{fontWeight:"bold"}}}))),n.sections.map((function(e){var t,r,u=e.header.label,c=e.slug;return f.createElement(x.ZP,(0,F.Z)({key:u,disablePadding:!0},null!==(t=n.settings)&&void 0!==t&&t.navigateFreely?{onClick:function(){i(l?"".concat(c):"/flow/".concat(n.slug,"/").concat(c))}}:{}),f.createElement(ln.Z,{selected:l?"/".concat(c)===o.pathname:c===(null==a?void 0:a["*"]),disabled:!((l?"/".concat(c)===o.pathname:c===(null==a?void 0:a["*"]))||null!==(r=n.settings)&&void 0!==r&&r.navigateFreely)},f.createElement(w.Z,null),f.createElement(O.Z,{primary:u})))}))),f.createElement(Xe.Z,null),f.createElement(y,{align:"center"}))):f.createElement(f.Fragment,null)},on=function(){var e=(0,l.Z)(i().mark((function e(t,n){var r,l;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n&&t){e.next=2;break}return e.abrupt("return",null);case 2:return e.next=4,Te.get("/flows/".concat(t,"/answers?userId=").concat(n));case 4:return r=e.sent,l=r.data,e.abrupt("return",l);case 7:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),un=function(){var e=(0,l.Z)(i().mark((function e(t,n){var r,l,a,o,u;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=n.lastName,l=n.firstName,a=n.email,e.prev=1,e.next=4,Te.put("/users/".concat(t),{firstName:l,lastName:r,email:a});case 4:return o=e.sent,u=o.data,e.abrupt("return",u);case 9:e.prev=9,e.t0=e.catch(1),console.error("error update-user",e.t0);case 12:case"end":return e.stop()}}),e,null,[[1,9]])})));return function(t,n){return e.apply(this,arguments)}}(),cn=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,l){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Te.post("/flows/".concat(t,"/sections/").concat(n,"/answers?userId=").concat(r),l);case 2:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}(),sn=function(){var e=(0,l.Z)(i().mark((function e(t,n,r,l){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Te.post("/flows/".concat(t,"/sections/").concat(n,"/status?userId=").concat(r),{status:l});case 2:case"end":return e.stop()}}),e)})));return function(t,n,r,l){return e.apply(this,arguments)}}();function dn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function pn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dn(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const mn=function(e){var t,n,o,p=e.slug,m=((0,he.TH)(),(0,f.useState)(null)),v=(0,a.Z)(m,2),b=v[0],g=v[1],h=(0,f.useState)(null),E=(0,a.Z)(h,2),Z=E[0],x=E[1],w=(0,f.useState)(null),O=(0,a.Z)(w,2),k=O[0],j=O[1],P=(0,f.useState)(!0),S=(0,a.Z)(P,2),C=(S[0],S[1],(0,f.useState)(!1)),D=(0,a.Z)(C,2),F=D[0],T=D[1],V=((0,he.s0)(),(0,f.useState)("")),A=(0,a.Z)(V,2),I=A[0],R=A[1];(0,f.useEffect)((function(){var e=function(){var e=(0,l.Z)(i().mark((function e(){var t,n,r,l,a;return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!p){e.next=25;break}return e.next=3,Bt(p);case 3:if(n=e.sent,g(n),n||(g(null),T(!0)),null!==(t=n.settings)&&void 0!==t&&t.toRequiredAuth,!1!==n.settings.toRequireAuth){e.next=25;break}if(r=localStorage.getItem("anon")){e.next=19;break}return l="anon_".concat((0,St.x0)()),localStorage.setItem("anon",l),R(l),e.next=15,un(l,{lastName:"",firstName:"",email:""});case 15:x({}),j({}),e.next=25;break;case 19:return R(r),e.next=22,on(p,r);case 22:a=e.sent,x(null==a?void 0:a.answers),a.status&&j(a.status);case 25:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[]);var M=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("data",n),e.prev=1,e.next=4,cn(p,t,I,n);case 4:x((function(e){return pn(pn({},e),{},(0,r.Z)({},t,pn(pn({},null==e?void 0:e[t]),n)))})),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(1),console.error(e.t0);case 10:case"end":return e.stop()}}),e,null,[[1,7]])})));return function(t,n){return e.apply(this,arguments)}}(),L=function(){var e=(0,l.Z)(i().mark((function e(t,n){return i().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(null==b||!b.sections.find((function(e){var r=e.id,l=e.status;return r===t&&l===n}))){e.next=2;break}return e.abrupt("return");case 2:return e.prev=2,e.next=5,sn(p,t,I,n);case 5:j((function(e){return pn(pn({},e),{},(0,r.Z)({},t,n))})),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(2),console.error(e.t0);case 11:case"end":return e.stop()}}),e,null,[[2,8]])})));return function(t,n){return e.apply(this,arguments)}}(),q=null!=b&&null!==(t=b.theme)&&void 0!==t&&t["color-primary"]?(0,u.Z)(pn(pn({},me.rS),{},{palette:{primary:{main:null==b||null===(n=b.theme)||void 0===n?void 0:n["color-primary"]}}})):me.rS;return f.createElement(f.Fragment,null,f.createElement(c.Z,{theme:q},p&&b?f.createElement(s.Z,{sx:{display:"flex"},key:b.name,className:"flow-main",id:"flow-".concat(b.slug)},f.createElement(an,{flow:b,isEmbed:!0}),f.createElement(he.Z5,null,f.createElement(he.AW,{index:!0,element:f.createElement($t,{flow:b,answers:Z,statuses:k})}),null==b||null===(o=b.sections)||void 0===o?void 0:o.map((function(e){var t=e.header,n=e.fields,r=e.next,l=e.settings,a=e.id;return f.createElement(he.AW,{path:e.slug,key:e.slug,element:f.createElement(s.Z,{id:"flow-section-main",component:"main",sx:{width:"100%",p:3}},f.createElement(d.Z,{variant:"h2",component:"header",sx:{paddingBottom:3}},b.name),null!=n&&n.length&&Z?f.createElement(kt,{flowSlug:p,id:a,key:a,header:t,allFields:n,next:r||"",settings:l,answers:(null==Z?void 0:Z[a])||{},onSubmit:M,onStatusChange:L}):f.createElement(Pt,{size:1}),f.createElement(y,null))})})))):f.createElement(s.Z,{sx:{padding:2}},f.createElement(jt,null,f.createElement(d.Z,{variant:"h2",component:"header"},"Love is the flow(er) you've got to let grow!"),F&&f.createElement(d.Z,{variant:"h4",component:"header"},"Flow not found!")),!F&&f.createElement(Pt,{size:3}))))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,