/*! For license information please see altflow.js.LICENSE.txt */
(()=>{var e,t,n,r,o={6751:(e,t,n)=>{"use strict";n.d(t,{Z:()=>ne});var r=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),o=Math.abs,a=String.fromCharCode,i=Object.assign;function l(e){return e.trim()}function u(e,t,n){return e.replace(t,n)}function s(e,t){return e.indexOf(t)}function c(e,t){return 0|e.charCodeAt(t)}function f(e,t,n){return e.slice(t,n)}function d(e){return e.length}function p(e){return e.length}function h(e,t){return t.push(e),e}var m=1,g=1,v=0,y=0,b=0,w="";function k(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:m,column:g,length:i,return:""}}function S(e,t){return i(k("",null,null,"",null,null,0),e,{length:-e.length},t)}function x(){return b=y>0?c(w,--y):0,g--,10===b&&(g=1,m--),b}function _(){return b=y<v?c(w,y++):0,g++,10===b&&(g=1,m++),b}function E(){return c(w,y)}function P(){return y}function O(e,t){return f(w,e,t)}function C(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function j(e){return m=g=1,v=d(w=e),y=0,[]}function T(e){return w="",e}function R(e){return l(O(y-1,N(91===e?e+2:40===e?e+1:e)))}function L(e){for(;(b=E())&&b<33;)_();return C(e)>2||C(b)>3?"":" "}function M(e,t){for(;--t&&_()&&!(b<48||b>102||b>57&&b<65||b>70&&b<97););return O(e,P()+(t<6&&32==E()&&32==_()))}function N(e){for(;_();)switch(b){case e:return y;case 34:case 39:34!==e&&39!==e&&N(b);break;case 40:41===e&&N(e);break;case 92:_()}return y}function I(e,t){for(;_()&&e+b!==57&&(e+b!==84||47!==E()););return"/*"+O(t,y-1)+"*"+a(47===e?e:_())}function Z(e){for(;!C(E());)_();return O(e,y)}var A="-ms-",$="-webkit-",F="comm",z="rule",D="decl",W="@keyframes";function U(e,t){for(var n="",r=p(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function B(e,t,n,r){switch(e.type){case"@import":case D:return e.return=e.return||e.value;case F:return"";case W:return e.return=e.value+"{"+U(e.children,r)+"}";case z:e.value=e.props.join(",")}return d(n=U(e.children,r))?e.return=e.value+"{"+n+"}":""}function H(e){return T(G("",null,null,null,[""],e=j(e),0,[0],e))}function G(e,t,n,r,o,i,l,f,p){for(var m=0,g=0,v=l,y=0,b=0,w=0,k=1,S=1,O=1,C=0,j="",T=o,N=i,A=r,$=j;S;)switch(w=C,C=_()){case 40:if(108!=w&&58==c($,v-1)){-1!=s($+=u(R(C),"&","&\f"),"&\f")&&(O=-1);break}case 34:case 39:case 91:$+=R(C);break;case 9:case 10:case 13:case 32:$+=L(w);break;case 92:$+=M(P()-1,7);continue;case 47:switch(E()){case 42:case 47:h(q(I(_(),P()),t,n),p);break;default:$+="/"}break;case 123*k:f[m++]=d($)*O;case 125*k:case 59:case 0:switch(C){case 0:case 125:S=0;case 59+g:b>0&&d($)-v&&h(b>32?K($+";",r,n,v-1):K(u($," ","")+";",r,n,v-2),p);break;case 59:$+=";";default:if(h(A=V($,t,n,m,g,o,f,j,T=[],N=[],v),i),123===C)if(0===g)G($,t,A,A,T,i,v,f,N);else switch(99===y&&110===c($,3)?100:y){case 100:case 109:case 115:G(e,A,A,r&&h(V(e,A,A,0,0,o,f,j,o,T=[],v),N),o,N,v,f,r?T:N);break;default:G($,A,A,A,[""],N,0,f,N)}}m=g=b=0,k=O=1,j=$="",v=l;break;case 58:v=1+d($),b=w;default:if(k<1)if(123==C)--k;else if(125==C&&0==k++&&125==x())continue;switch($+=a(C),C*k){case 38:O=g>0?1:($+="\f",-1);break;case 44:f[m++]=(d($)-1)*O,O=1;break;case 64:45===E()&&($+=R(_())),y=E(),g=v=d(j=$+=Z(P())),C++;break;case 45:45===w&&2==d($)&&(k=0)}}return i}function V(e,t,n,r,a,i,s,c,d,h,m){for(var g=a-1,v=0===a?i:[""],y=p(v),b=0,w=0,S=0;b<r;++b)for(var x=0,_=f(e,g+1,g=o(w=s[b])),E=e;x<y;++x)(E=l(w>0?v[x]+" "+_:u(_,/&\f/g,v[x])))&&(d[S++]=E);return k(e,t,n,0===a?z:c,d,h,m)}function q(e,t,n){return k(e,t,n,F,a(b),f(e,2,-2),0)}function K(e,t,n,r){return k(e,t,n,D,f(e,0,r),f(e,r+1,-1),r)}var Q=function(e,t,n){for(var r=0,o=0;r=o,o=E(),38===r&&12===o&&(t[n]=1),!C(o);)_();return O(e,y)},X=new WeakMap,J=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||X.get(n))&&!r){X.set(e,!0);for(var o=[],i=function(e,t){return T(function(e,t){var n=-1,r=44;do{switch(C(r)){case 0:38===r&&12===E()&&(t[n]=1),e[n]+=Q(y-1,t,n);break;case 2:e[n]+=R(r);break;case 4:if(44===r){e[++n]=58===E()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=a(r)}}while(r=_());return e}(j(e),t))}(t,o),l=n.props,u=0,s=0;u<i.length;u++)for(var c=0;c<l.length;c++,s++)e.props[s]=o[u]?i[u].replace(/&\f/g,l[c]):l[c]+" "+i[u]}}},Y=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function ee(e,t){switch(function(e,t){return 45^c(e,0)?(((t<<2^c(e,0))<<2^c(e,1))<<2^c(e,2))<<2^c(e,3):0}(e,t)){case 5103:return"-webkit-print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return $+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return $+e+"-moz-"+e+A+e+e;case 6828:case 4268:return $+e+A+e+e;case 6165:return $+e+A+"flex-"+e+e;case 5187:return $+e+u(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return $+e+A+"flex-item-"+u(e,/flex-|-self/,"")+e;case 4675:return $+e+A+"flex-line-pack"+u(e,/align-content|flex-|-self/,"")+e;case 5548:return $+e+A+u(e,"shrink","negative")+e;case 5292:return $+e+A+u(e,"basis","preferred-size")+e;case 6060:return"-webkit-box-"+u(e,"-grow","")+$+e+A+u(e,"grow","positive")+e;case 4554:return $+u(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return u(u(u(e,/(zoom-|grab)/,"-webkit-$1"),/(image-set)/,"-webkit-$1"),e,"")+e;case 5495:case 3959:return u(e,/(image-set\([^]*)/,"-webkit-$1$`$1");case 4968:return u(u(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+$+e+e;case 4095:case 3583:case 4068:case 2532:return u(e,/(.+)-inline(.+)/,"-webkit-$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(d(e)-1-t>6)switch(c(e,t+1)){case 109:if(45!==c(e,t+4))break;case 102:return u(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1-moz-"+(108==c(e,t+3)?"$3":"$2-$3"))+e;case 115:return~s(e,"stretch")?ee(u(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==c(e,t+1))break;case 6444:switch(c(e,d(e)-3-(~s(e,"!important")&&10))){case 107:return u(e,":",":-webkit-")+e;case 101:return u(e,/(.+:)([^;!]+)(;|!.+)?/,"$1-webkit-"+(45===c(e,14)?"inline-":"")+"box$3$1-webkit-$2$3$1-ms-$2box$3")+e}break;case 5936:switch(c(e,t+11)){case 114:return $+e+A+u(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return $+e+A+u(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return $+e+A+u(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return $+e+A+e+e}return e}var te=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case D:e.return=ee(e.value,e.length);break;case W:return U([S(e,{value:u(e.value,"@","@-webkit-")})],r);case z:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return U([S(e,{props:[u(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return U([S(e,{props:[u(t,/:(plac\w+)/,":-webkit-input-$1")]}),S(e,{props:[u(t,/:(plac\w+)/,":-moz-$1")]}),S(e,{props:[u(t,/:(plac\w+)/,"-ms-input-$1")]})],r)}return""}))}}];const ne=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var o,a,i=e.stylisPlugins||te,l={},u=[];o=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)l[t[n]]=!0;u.push(e)}));var s,c,f,d,h=[B,(d=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],m=(c=[J,Y].concat(i,h),f=p(c),function(e,t,n,r){for(var o="",a=0;a<f;a++)o+=c[a](e,t,n,r)||"";return o});a=function(e,t,n,r){s=n,U(H(e?e+"{"+t.styles+"}":t.styles),m),r&&(g.inserted[t.name]=!0)};var g={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:l,registered:{},insert:a};return g.sheet.hydrate(u),g}},5042:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}},2443:(e,t,n)=>{"use strict";n.d(t,{C:()=>i,T:()=>u,w:()=>l});var r=n(7294),o=n(6751),a=(n(6797),n(7278),(0,r.createContext)("undefined"!=typeof HTMLElement?(0,o.Z)({key:"css"}):null)),i=a.Provider,l=function(e){return(0,r.forwardRef)((function(t,n){var o=(0,r.useContext)(a);return e(t,o,n)}))},u=(0,r.createContext)({})},917:(e,t,n)=>{"use strict";n.d(t,{F4:()=>c,iv:()=>s,xB:()=>u});var r=n(7294),o=(n(6751),n(2443)),a=(n(8679),n(444)),i=n(6797),l=n(7278),u=(0,o.w)((function(e,t){var n=e.styles,u=(0,i.O)([n],void 0,(0,r.useContext)(o.T)),s=(0,r.useRef)();return(0,l.j)((function(){var e=t.key+"-global",n=new t.sheet.constructor({key:e,nonce:t.sheet.nonce,container:t.sheet.container,speedy:t.sheet.isSpeedy}),r=!1,o=document.querySelector('style[data-emotion="'+e+" "+u.name+'"]');return t.sheet.tags.length&&(n.before=t.sheet.tags[0]),null!==o&&(r=!0,o.setAttribute("data-emotion",e),n.hydrate([o])),s.current=[n,r],function(){n.flush()}}),[t]),(0,l.j)((function(){var e=s.current,n=e[0];if(e[1])e[1]=!1;else{if(void 0!==u.next&&(0,a.My)(t,u.next,!0),n.tags.length){var r=n.tags[n.tags.length-1].nextElementSibling;n.before=r,n.flush()}t.insert("",u,n,!1)}}),[t,u.name]),null}));function s(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return(0,i.O)(t)}var c=function(){var e=s.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}}},6797:(e,t,n)=>{"use strict";n.d(t,{O:()=>m});const r=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},o={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var a=n(5042),i=/[A-Z]|^ms/g,l=/_EMO_([^_]+?)_([^]*?)_EMO_/g,u=function(e){return 45===e.charCodeAt(1)},s=function(e){return null!=e&&"boolean"!=typeof e},c=(0,a.Z)((function(e){return u(e)?e:e.replace(i,"-$&").toLowerCase()})),f=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(l,(function(e,t,n){return p={name:t,styles:n,next:p},t}))}return 1===o[e]||u(e)||"number"!=typeof t||0===t?t:t+"px"};function d(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return p={name:n.name,styles:n.styles,next:p},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)p={name:r.name,styles:r.styles,next:p},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=d(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":s(i)&&(r+=c(a)+":"+f(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=d(e,t,i);switch(a){case"animation":case"animationName":r+=c(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var u=0;u<i.length;u++)s(i[u])&&(r+=c(a)+":"+f(a,i[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=p,a=n(e);return p=o,d(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var p,h=/label:\s*([^\s;\n{]+)\s*(;|$)/g,m=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var o=!0,a="";p=void 0;var i=e[0];null==i||void 0===i.raw?(o=!1,a+=d(n,t,i)):a+=i[0];for(var l=1;l<e.length;l++)a+=d(n,t,e[l]),o&&(a+=i[l]);h.lastIndex=0;for(var u,s="";null!==(u=h.exec(a));)s+="-"+u[1];return{name:r(a)+s,styles:a,next:p}}},7278:(e,t,n)=>{"use strict";var r;n.d(t,{L:()=>i,j:()=>l});var o=n(7294),a=!!(r||(r=n.t(o,2))).useInsertionEffect&&(r||(r=n.t(o,2))).useInsertionEffect,i=a||function(e){return e()},l=a||o.useLayoutEffect},444:(e,t,n)=>{"use strict";function r(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}n.d(t,{My:()=>a,fp:()=>r,hC:()=>o});var o=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},a=function(e,t,n){o(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var a=t;do{e.insert(t===a?"."+r:"",a,e.sheet,!0),a=a.next}while(void 0!==a)}}},6949:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"}},6115:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={black:"#000",white:"#fff"}},3486:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"}},7036:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"}},5621:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"}},5137:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"}},4518:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"}},265:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"}},120:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(1354),o=n(7078);const a=(0,n(6908).Z)(),i=(0,r.Z)({defaultTheme:a,defaultClassName:"MuiBox-root",generateClassName:o.Z.generate})},1039:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7462),o=(n(7294),n(1234)),a=n(5165),i=n(5893);const l=function(e){return(0,i.jsx)(o.Z,(0,r.Z)({},e,{defaultTheme:a.Z}))}},6535:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"}},3655:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r.Z});var r=n(4867)},6908:(e,t,n)=>{"use strict";n.d(t,{Z:()=>le});var r=n(7462),o=n(3366),a=n(1387),i=n(9766),l=n(360),u=n(1796);const s={black:"#000",white:"#fff"};var c=n(6535);const f="#f3e5f5",d="#ce93d8",p="#ba68c8",h="#ab47bc",m="#9c27b0",g="#7b1fa2",v="#e57373",y="#ef5350",b="#f44336",w="#d32f2f",k="#c62828",S="#ffb74d",x="#ffa726",_="#ff9800",E="#f57c00",P="#e65100",O="#e3f2fd",C="#90caf9",j="#42a5f5",T="#1976d2",R="#1565c0",L="#4fc3f7",M="#29b6f6",N="#03a9f4",I="#0288d1",Z="#01579b",A="#81c784",$="#66bb6a",F="#4caf50",z="#388e3c",D="#2e7d32",W="#1b5e20",U=["mode","contrastThreshold","tonalOffset"],B={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:s.white,default:s.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},H={text:{primary:s.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:s.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function G(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,u.$n)(e.main,o):"dark"===t&&(e.dark=(0,u._j)(e.main,a)))}const V=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],q={textTransform:"uppercase"},K='"Roboto", "Helvetica", "Arial", sans-serif';function Q(e,t){const n="function"==typeof t?t(e):t,{fontFamily:a=K,fontSize:l=14,fontWeightLight:u=300,fontWeightRegular:s=400,fontWeightMedium:c=500,fontWeightBold:f=700,htmlFontSize:d=16,allVariants:p,pxToRem:h}=n,m=(0,o.Z)(n,V),g=l/14,v=h||(e=>e/d*g+"rem"),y=(e,t,n,o,i)=>{return(0,r.Z)({fontFamily:a,fontWeight:e,fontSize:v(t),lineHeight:n},a===K?{letterSpacing:(l=o/t,Math.round(1e5*l)/1e5+"em")}:{},i,p);var l},b={h1:y(u,96,1.167,-1.5),h2:y(u,60,1.2,-.5),h3:y(s,48,1.167,0),h4:y(s,34,1.235,.25),h5:y(s,24,1.334,0),h6:y(c,20,1.6,.15),subtitle1:y(s,16,1.75,.15),subtitle2:y(c,14,1.57,.1),body1:y(s,16,1.5,.15),body2:y(s,14,1.43,.15),button:y(c,14,1.75,.4,q),caption:y(s,12,1.66,.4),overline:y(s,12,2.66,1,q)};return(0,i.Z)((0,r.Z)({htmlFontSize:d,pxToRem:v,fontFamily:a,fontSize:l,fontWeightLight:u,fontWeightRegular:s,fontWeightMedium:c,fontWeightBold:f},b),m,{clone:!1})}function X(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const J=["none",X(0,2,1,-1,0,1,1,0,0,1,3,0),X(0,3,1,-2,0,2,2,0,0,1,5,0),X(0,3,3,-2,0,3,4,0,0,1,8,0),X(0,2,4,-1,0,4,5,0,0,1,10,0),X(0,3,5,-1,0,5,8,0,0,1,14,0),X(0,3,5,-1,0,6,10,0,0,1,18,0),X(0,4,5,-2,0,7,10,1,0,2,16,1),X(0,5,5,-3,0,8,10,1,0,3,14,2),X(0,5,6,-3,0,9,12,1,0,3,16,2),X(0,6,6,-3,0,10,14,1,0,4,18,3),X(0,6,7,-4,0,11,15,1,0,4,20,3),X(0,7,8,-4,0,12,17,2,0,5,22,4),X(0,7,8,-4,0,13,19,2,0,5,24,4),X(0,7,9,-4,0,14,21,2,0,5,26,4),X(0,8,9,-5,0,15,22,2,0,6,28,5),X(0,8,10,-5,0,16,24,2,0,6,30,5),X(0,8,11,-5,0,17,26,2,0,6,32,5),X(0,9,11,-5,0,18,28,2,0,7,34,6),X(0,9,12,-6,0,19,29,2,0,7,36,6),X(0,10,13,-6,0,20,31,3,0,8,38,7),X(0,10,13,-6,0,21,33,3,0,8,40,7),X(0,10,14,-6,0,22,35,3,0,8,42,7),X(0,11,14,-7,0,23,36,3,0,9,44,8),X(0,11,15,-7,0,24,38,3,0,9,46,8)],Y=["duration","easing","delay"],ee={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},te={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function ne(e){return`${Math.round(e)}ms`}function re(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function oe(e){const t=(0,r.Z)({},ee,e.easing),n=(0,r.Z)({},te,e.duration);return(0,r.Z)({getAutoHeightDuration:re,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:i=t.easeInOut,delay:l=0}=r;return(0,o.Z)(r,Y),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:ne(a)} ${i} ${"string"==typeof l?l:ne(l)}`)).join(",")}},e,{easing:t,duration:n})}const ae={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},ie=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const le=function(e={},...t){const{mixins:n={},palette:V={},transitions:q={},typography:K={}}=e,X=(0,o.Z)(e,ie);if(e.vars)throw new Error((0,a.Z)(18));const Y=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:l=.2}=e,V=(0,o.Z)(e,U),q=e.primary||function(e="light"){return"dark"===e?{main:C,light:O,dark:j}:{main:T,light:j,dark:R}}(t),K=e.secondary||function(e="light"){return"dark"===e?{main:d,light:f,dark:h}:{main:m,light:p,dark:g}}(t),Q=e.error||function(e="light"){return"dark"===e?{main:b,light:v,dark:w}:{main:w,light:y,dark:k}}(t),X=e.info||function(e="light"){return"dark"===e?{main:M,light:L,dark:I}:{main:I,light:N,dark:Z}}(t),J=e.success||function(e="light"){return"dark"===e?{main:$,light:A,dark:z}:{main:D,light:F,dark:W}}(t),Y=e.warning||function(e="light"){return"dark"===e?{main:x,light:S,dark:E}:{main:"#ed6c02",light:_,dark:P}}(t);function ee(e){return(0,u.mi)(e,H.text.primary)>=n?H.text.primary:B.text.primary}const te=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:i=700})=>{if(!(e=(0,r.Z)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,a.Z)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,a.Z)(12,t?` (${t})`:"",JSON.stringify(e.main)));return G(e,"light",o,l),G(e,"dark",i,l),e.contrastText||(e.contrastText=ee(e.main)),e},ne={dark:H,light:B};return(0,i.Z)((0,r.Z)({common:(0,r.Z)({},s),mode:t,primary:te({color:q,name:"primary"}),secondary:te({color:K,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:te({color:Q,name:"error"}),warning:te({color:Y,name:"warning"}),info:te({color:X,name:"info"}),success:te({color:J,name:"success"}),grey:c.Z,contrastThreshold:n,getContrastText:ee,augmentColor:te,tonalOffset:l},ne[t]),V)}(V),ee=(0,l.Z)(e);let te=(0,i.Z)(ee,{mixins:(ne=ee.breakpoints,re=n,(0,r.Z)({toolbar:{minHeight:56,[ne.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[ne.up("sm")]:{minHeight:64}}},re)),palette:Y,shadows:J.slice(),typography:Q(Y,K),transitions:oe(q),zIndex:(0,r.Z)({},ae)});var ne,re;return te=(0,i.Z)(te,X),te=t.reduce(((e,t)=>(0,i.Z)(e,t)),te),te}},5165:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(6908).Z)()},8884:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(9628),o=n(5165);function a({props:e,name:t}){return(0,r.Z)({props:e,name:t,defaultTheme:o.Z})}},5584:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,o.default)({toolbar:{minHeight:56,[e.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[e.up("sm")]:{minHeight:64}}},t)};var o=r(n(434))},7625:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.dark=void 0,t.default=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,w=(0,a.default)(e,g),k=e.primary||function(e="light"){return"dark"===e?{main:p.default[200],light:p.default[50],dark:p.default[400]}:{main:p.default[700],light:p.default[400],dark:p.default[800]}}(t),S=e.secondary||function(e="light"){return"dark"===e?{main:c.default[200],light:c.default[50],dark:c.default[400]}:{main:c.default[500],light:c.default[300],dark:c.default[700]}}(t),x=e.error||function(e="light"){return"dark"===e?{main:f.default[500],light:f.default[300],dark:f.default[700]}:{main:f.default[700],light:f.default[400],dark:f.default[800]}}(t),_=e.info||function(e="light"){return"dark"===e?{main:h.default[400],light:h.default[300],dark:h.default[700]}:{main:h.default[700],light:h.default[500],dark:h.default[900]}}(t),E=e.success||function(e="light"){return"dark"===e?{main:m.default[400],light:m.default[300],dark:m.default[700]}:{main:m.default[800],light:m.default[500],dark:m.default[900]}}(t),P=e.warning||function(e="light"){return"dark"===e?{main:d.default[400],light:d.default[300],dark:d.default[700]}:{main:"#ed6c02",light:d.default[500],dark:d.default[900]}}(t);function O(e){return(0,l.getContrastRatio)(e,y.text.primary)>=n?y.text.primary:v.text.primary}const C=({color:e,name:t,mainShade:n=500,lightShade:a=300,darkShade:l=700})=>{if(!(e=(0,o.default)({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error((0,i.formatMuiErrorMessage)(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error((0,i.formatMuiErrorMessage)(12,t?` (${t})`:"",JSON.stringify(e.main)));return b(e,"light",a,r),b(e,"dark",l,r),e.contrastText||(e.contrastText=O(e.main)),e},j={dark:y,light:v};return(0,i.deepmerge)((0,o.default)({common:(0,o.default)({},u.default),mode:t,primary:C({color:k,name:"primary"}),secondary:C({color:S,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:C({color:x,name:"error"}),warning:C({color:P,name:"warning"}),info:C({color:_,name:"info"}),success:C({color:E,name:"success"}),grey:s.default,contrastThreshold:n,getContrastText:O,augmentColor:C,tonalOffset:r},j[t]),w)},t.light=void 0;var o=r(n(434)),a=r(n(7071)),i=n(600),l=n(231),u=r(n(6115)),s=r(n(7036)),c=r(n(4518)),f=r(n(265)),d=r(n(5137)),p=r(n(6949)),h=r(n(5621)),m=r(n(3486));const g=["mode","contrastThreshold","tonalOffset"],v={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:u.default.white,default:u.default.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}};t.light=v;const y={text:{primary:u.default.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:u.default.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function b(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,l.lighten)(e.main,o):"dark"===t&&(e.dark=(0,l.darken)(e.main,a)))}t.dark=y},185:(e,t,n)=>{"use strict";var r=n(4836);t.ZP=void 0;var o=r(n(434)),a=r(n(7071)),i=n(600),l=n(231),u=(r(n(3655)),r(n(5584))),s=r(n(7625)),c=r(n(1445)),f=r(n(1692)),d=r(n(6067)),p=r(n(8369));const h=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];var m=function(e={},...t){const{mixins:n={},palette:r={},transitions:m={},typography:g={}}=e,v=(0,a.default)(e,h);if(e.vars)throw new Error((0,i.formatMuiErrorMessage)(18));const y=(0,s.default)(r),b=(0,l.createTheme)(e);let w=(0,i.deepmerge)(b,{mixins:(0,u.default)(b.breakpoints,n),palette:y,shadows:f.default.slice(),typography:(0,c.default)(y,g),transitions:(0,d.default)(m),zIndex:(0,o.default)({},p.default)});return w=(0,i.deepmerge)(w,v),w=t.reduce(((e,t)=>(0,i.deepmerge)(e,t)),w),w};t.ZP=m},6067:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=(0,a.default)({},l,e.easing),n=(0,a.default)({},u,e.duration);return(0,a.default)({getAutoHeightDuration:c,create:(e=["all"],r={})=>{const{duration:a=n.standard,easing:l=t.easeInOut,delay:u=0}=r;return(0,o.default)(r,i),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof a?a:s(a)} ${l} ${"string"==typeof u?u:s(u)}`)).join(",")}},e,{easing:t,duration:n})},t.easing=t.duration=void 0;var o=r(n(7071)),a=r(n(434));const i=["duration","easing","delay"],l={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"};t.easing=l;const u={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function s(e){return`${Math.round(e)}ms`}function c(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}t.duration=u},1445:(e,t,n)=>{"use strict";var r=n(4836);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=s,fontSize:c=14,fontWeightLight:f=300,fontWeightRegular:d=400,fontWeightMedium:p=500,fontWeightBold:h=700,htmlFontSize:m=16,allVariants:g,pxToRem:v}=n,y=(0,a.default)(n,l),b=c/14,w=v||(e=>e/m*b+"rem"),k=(e,t,n,a,i)=>{return(0,o.default)({fontFamily:r,fontWeight:e,fontSize:w(t),lineHeight:n},r===s?{letterSpacing:(l=a/t,Math.round(1e5*l)/1e5+"em")}:{},i,g);var l},S={h1:k(f,96,1.167,-1.5),h2:k(f,60,1.2,-.5),h3:k(d,48,1.167,0),h4:k(d,34,1.235,.25),h5:k(d,24,1.334,0),h6:k(p,20,1.6,.15),subtitle1:k(d,16,1.75,.15),subtitle2:k(p,14,1.57,.1),body1:k(d,16,1.5,.15),body2:k(d,14,1.43,.15),button:k(p,14,1.75,.4,u),caption:k(d,12,1.66,.4),overline:k(d,12,2.66,1,u)};return(0,i.deepmerge)((0,o.default)({htmlFontSize:m,pxToRem:w,fontFamily:r,fontSize:c,fontWeightLight:f,fontWeightRegular:d,fontWeightMedium:p,fontWeightBold:h},S),y,{clone:!1})};var o=r(n(434)),a=r(n(7071)),i=n(600);const l=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],u={textTransform:"uppercase"},s='"Roboto", "Helvetica", "Arial", sans-serif'},1692:(e,t)=>{"use strict";function n(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=["none",n(0,2,1,-1,0,1,1,0,0,1,3,0),n(0,3,1,-2,0,2,2,0,0,1,5,0),n(0,3,3,-2,0,3,4,0,0,1,8,0),n(0,2,4,-1,0,4,5,0,0,1,10,0),n(0,3,5,-1,0,5,8,0,0,1,14,0),n(0,3,5,-1,0,6,10,0,0,1,18,0),n(0,4,5,-2,0,7,10,1,0,2,16,1),n(0,5,5,-3,0,8,10,1,0,3,14,2),n(0,5,6,-3,0,9,12,1,0,3,16,2),n(0,6,6,-3,0,10,14,1,0,4,18,3),n(0,6,7,-4,0,11,15,1,0,4,20,3),n(0,7,8,-4,0,12,17,2,0,5,22,4),n(0,7,8,-4,0,13,19,2,0,5,24,4),n(0,7,9,-4,0,14,21,2,0,5,26,4),n(0,8,9,-5,0,15,22,2,0,6,28,5),n(0,8,10,-5,0,16,24,2,0,6,30,5),n(0,8,11,-5,0,17,26,2,0,6,32,5),n(0,9,11,-5,0,18,28,2,0,7,34,6),n(0,9,12,-6,0,19,29,2,0,7,36,6),n(0,10,13,-6,0,20,31,3,0,8,38,7),n(0,10,13,-6,0,21,33,3,0,8,40,7),n(0,10,14,-6,0,22,35,3,0,8,42,7),n(0,11,14,-7,0,23,36,3,0,9,44,8),n(0,11,15,-7,0,24,38,3,0,9,46,8)];t.default=r},8369:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},4819:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},6760:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(4819);function a(){return r.useContext(o.Z)}},1234:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a}),n(7294);var r=n(917),o=n(5893);function a(e){const{styles:t,defaultTheme:n={}}=e,a="function"==typeof t?e=>{return t(null==(r=e)||0===Object.keys(r).length?n:e);var r}:t;return(0,o.jsx)(r.xB,{styles:a})}},9378:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>b,Co:()=>w});var r=n(7294),o=n(7462),a=n(5042),i=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const l=(0,a.Z)((function(e){return i.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var u=n(2443),s=n(444),c=n(6797),f=n(7278),d=l,p=function(e){return"theme"!==e},h=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?d:p},m=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},g=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return(0,s.hC)(t,n,r),(0,f.L)((function(){return(0,s.My)(t,n,r)})),null};var v=function e(t,n){var a,i,l=t.__emotion_real===t,f=l&&t.__emotion_base||t;void 0!==n&&(a=n.label,i=n.target);var d=m(t,n,l),p=d||h(f),v=!p("as");return function(){var y=arguments,b=l&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==a&&b.push("label:"+a+";"),null==y[0]||void 0===y[0].raw)b.push.apply(b,y);else{b.push(y[0][0]);for(var w=y.length,k=1;k<w;k++)b.push(y[k],y[0][k])}var S=(0,u.w)((function(e,t,n){var o=v&&e.as||f,a="",l=[],m=e;if(null==e.theme){for(var y in m={},e)m[y]=e[y];m.theme=(0,r.useContext)(u.T)}"string"==typeof e.className?a=(0,s.fp)(t.registered,l,e.className):null!=e.className&&(a=e.className+" ");var w=(0,c.O)(b.concat(l),t.registered,m);a+=t.key+"-"+w.name,void 0!==i&&(a+=" "+i);var k=v&&void 0===d?h(o):p,S={};for(var x in e)v&&"as"===x||k(x)&&(S[x]=e[x]);return S.className=a,S.ref=n,(0,r.createElement)(r.Fragment,null,(0,r.createElement)(g,{cache:t,serialized:w,isStringTag:"string"==typeof o}),(0,r.createElement)(o,S))}));return S.displayName=void 0!==a?a:"Styled("+("string"==typeof f?f:f.displayName||f.name||"Component")+")",S.defaultProps=t.defaultProps,S.__emotion_real=S,S.__emotion_base=f,S.__emotion_styles=b,S.__emotion_forwardProp=d,Object.defineProperty(S,"toString",{value:function(){return"."+i}}),S.withComponent=function(t,r){return e(t,(0,o.Z)({},n,r,{shouldForwardProp:m(S,r,!0)})).apply(void 0,b)},S}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){v[e]=v(e)}));const y=v;function b(e,t){return y(e,t)}const w=(e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=t(e.__emotion_styles))}},5974:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7294),o=n(7462),a=n(4819),i=n(6760);const l="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__";var u=n(5893);const s=function(e){const{children:t,theme:n}=e,s=(0,i.Z)(),c=r.useMemo((()=>{const e=null===s?n:function(e,t){return"function"==typeof t?t(e):(0,o.Z)({},e,t)}(s,n);return null!=e&&(e[l]=null!==s),e}),[n,s]);return(0,u.jsx)(a.Z.Provider,{value:c,children:t})};var c=n(2443),f=n(6682);const d={};function p(e){const t=(0,f.Z)();return(0,u.jsx)(c.T.Provider,{value:"object"==typeof t?t:d,children:e.children})}const h=function(e){const{children:t,theme:n}=e;return(0,u.jsx)(s,{theme:n,children:(0,u.jsx)(p,{children:t})})}},3019:(e,t,n)=>{"use strict";n.d(t,{Cg:()=>u,E0:()=>y,SK:()=>h,Vv:()=>v,XY:()=>m,ZP:()=>b,h$:()=>f,j1:()=>s,sc:()=>d,tv:()=>p,vQ:()=>c,vS:()=>g});var r=n(4844),o=n(2428),a=n(2605),i=n(5408);function l(e){return"number"!=typeof e?e:`${e}px solid`}const u=(0,r.ZP)({prop:"border",themeKey:"borders",transform:l}),s=(0,r.ZP)({prop:"borderTop",themeKey:"borders",transform:l}),c=(0,r.ZP)({prop:"borderRight",themeKey:"borders",transform:l}),f=(0,r.ZP)({prop:"borderBottom",themeKey:"borders",transform:l}),d=(0,r.ZP)({prop:"borderLeft",themeKey:"borders",transform:l}),p=(0,r.ZP)({prop:"borderColor",themeKey:"palette"}),h=(0,r.ZP)({prop:"borderTopColor",themeKey:"palette"}),m=(0,r.ZP)({prop:"borderRightColor",themeKey:"palette"}),g=(0,r.ZP)({prop:"borderBottomColor",themeKey:"palette"}),v=(0,r.ZP)({prop:"borderLeftColor",themeKey:"palette"}),y=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=(0,a.eI)(e.theme,"shape.borderRadius",4,"borderRadius"),n=e=>({borderRadius:(0,a.NA)(t,e)});return(0,i.k9)(e,e.borderRadius,n)}return null};y.propTypes={},y.filterProps=["borderRadius"];const b=(0,o.Z)(u,s,c,f,d,p,h,m,g,v,y)},5408:(e,t,n)=>{"use strict";n.d(t,{L7:()=>c,P$:()=>d,VO:()=>i,W8:()=>s,ZP:()=>p,dt:()=>f,k9:()=>u});var r=n(7462),o=n(9766),a=n(7730);const i={xs:0,sm:600,md:900,lg:1200,xl:1536},l={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${i[e]}px)`};function u(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||l;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||l;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||i).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function s(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}function c(e,t){return e.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),t)}function f(e,...t){const n=s(e),r=[n,...t].reduce(((e,t)=>(0,o.Z)(e,t)),{});return c(Object.keys(n),r)}function d({values:e,breakpoints:t,base:n}){const r=n||function(e,t){if("object"!=typeof e)return{};const n={},r=Object.keys(t);return Array.isArray(e)?r.forEach(((t,r)=>{r<e.length&&(n[t]=!0)})):r.forEach((t=>{null!=e[t]&&(n[t]=!0)})),n}(e,t),o=Object.keys(r);if(0===o.length)return e;let a;return o.reduce(((t,n,r)=>(Array.isArray(e)?(t[n]=null!=e[r]?e[r]:e[a],a=r):"object"==typeof e?(t[n]=null!=e[n]?e[n]:e[a],a=n):t[n]=e,t)),{})}const p=function(e){const t=t=>{const n=t.theme||{},o=e(t),i=n.breakpoints||l,u=i.keys.reduce(((o,a)=>(t[a]&&((o=o||{})[i.up(a)]=e((0,r.Z)({theme:n},t[a]))),o)),null);return(0,a.Z)(o,u)};return t.propTypes={},t.filterProps=["xs","sm","md","lg","xl",...e.filterProps],t}},1796:(e,t,n)=>{"use strict";n.d(t,{$n:()=>m,Fq:()=>p,H3:()=>f,_4:()=>g,_j:()=>h,mi:()=>d,n8:()=>l,oo:()=>a,tB:()=>i,ve:()=>c,vq:()=>s,wy:()=>u});var r=n(1387);function o(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function a(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(a(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error((0,r.Z)(9,e));let o,l=e.substring(t+1,e.length-1);if("color"===n){if(l=l.split(" "),o=l.shift(),4===l.length&&"/"===l[3].charAt(0)&&(l[3]=l[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(o))throw new Error((0,r.Z)(10,o))}else l=l.split(",");return l=l.map((e=>parseFloat(e))),{type:n,values:l,colorSpace:o}}const l=e=>{const t=i(e);return t.values.slice(0,3).map(((e,n)=>-1!==t.type.indexOf("hsl")&&0!==n?`${e}%`:e)).join(" ")};function u(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function s(e){if(0===e.indexOf("#"))return e;const{values:t}=i(e);return`#${t.map(((e,t)=>function(e){const t=e.toString(16);return 1===t.length?`0${t}`:t}(3===t?Math.round(255*e):e))).join("")}`}function c(e){e=i(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),l=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const c=[Math.round(255*l(0)),Math.round(255*l(8)),Math.round(255*l(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),u({type:s,values:c})}function f(e){let t="hsl"===(e=i(e)).type||"hsla"===e.type?i(c(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function d(e,t){const n=f(e),r=f(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function p(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,u(e)}function h(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return u(e)}function m(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return u(e)}function g(e,t=.15){return f(e)>.5?h(e,t):m(e,t)}},2428:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7730);const o=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,o)=>t[o]?(0,r.Z)(n,t[o](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n}},1354:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(7462),o=n(3366),a=n(7294),i=n(6010),l=n(9378),u=n(6523),s=n(9707),c=n(6682),f=n(5893);const d=["className","component"];function p(e={}){const{defaultTheme:t,defaultClassName:n="MuiBox-root",generateClassName:p,styleFunctionSx:h=u.Z}=e,m=(0,l.ZP)("div",{shouldForwardProp:e=>"theme"!==e&&"sx"!==e&&"as"!==e})(h);return a.forwardRef((function(e,a){const l=(0,c.Z)(t),u=(0,s.Z)(e),{className:h,component:g="div"}=u,v=(0,o.Z)(u,d);return(0,f.jsx)(m,(0,r.Z)({as:g,ref:a,className:(0,i.Z)(h,p?p(n):n),theme:l},v))}))}},2807:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>y,x9:()=>g,P_:()=>v});var r=n(3366),o=n(7462),a=n(9378),i=n(360),l=n(8320);const u=["variant"];function s(e){return 0===e.length}function c(e){const{variant:t}=e,n=(0,r.Z)(e,u);let o=t||"";return Object.keys(n).sort().forEach((t=>{o+="color"===t?s(o)?e[t]:(0,l.Z)(e[t]):`${s(o)?t:(0,l.Z)(t)}${(0,l.Z)(e[t].toString())}`})),o}var f=n(6523);const d=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],p=["theme"],h=["theme"];function m(e){return 0===Object.keys(e).length}function g(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const v=(0,i.Z)();function y(e={}){const{defaultTheme:t=v,rootShouldForwardProp:n=g,slotShouldForwardProp:i=g,styleFunctionSx:l=f.Z}=e,u=e=>{const n=m(e.theme)?t:e.theme;return l((0,o.Z)({},e,{theme:n}))};return u.__mui_systemSx=!0,(e,l={})=>{(0,a.Co)(e,(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx)))));const{name:s,slot:f,skipVariantsResolver:v,skipSx:y,overridesResolver:b}=l,w=(0,r.Z)(l,d),k=void 0!==v?v:f&&"Root"!==f||!1,S=y||!1;let x=g;"Root"===f?x=n:f?x=i:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(x=void 0);const _=(0,a.ZP)(e,(0,o.Z)({shouldForwardProp:x,label:void 0},w)),E=(e,...n)=>{const a=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:a}=n,i=(0,r.Z)(n,p);return e((0,o.Z)({theme:m(a)?t:a},i))}:e)):[];let i=e;s&&b&&a.push((e=>{const n=m(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(s,n);if(r){const t={};return Object.entries(r).forEach((([r,a])=>{t[r]="function"==typeof a?a((0,o.Z)({},e,{theme:n})):a})),b(e,t)}return null})),s&&!k&&a.push((e=>{const n=m(e.theme)?t:e.theme;return((e,t,n,r)=>{var o,a;const{ownerState:i={}}=e,l=[],u=null==n||null==(o=n.components)||null==(a=o[r])?void 0:a.variants;return u&&u.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[c(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=c(e.props);r[t]=e.style})),r})(s,n),n,s)})),S||a.push(u);const l=a.length-n.length;if(Array.isArray(e)&&l>0){const t=new Array(l).fill("");i=[...e,...t],i.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(i=n=>{let{theme:a}=n,i=(0,r.Z)(n,h);return e((0,o.Z)({theme:m(a)?t:a},i))});return _(i,...a)};return _.withConfig&&(E.withConfig=_.withConfig),E}}},1512:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(3366),o=n(7462);const a=["values","unit","step"];function i(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:i=5}=e,l=(0,r.Z)(e,a),u=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>(0,o.Z)({},e,{[t.key]:t.val})),{})})(t),s=Object.keys(u);function c(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function f(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-i/100}${n})`}function d(e,r){const o=s.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==o&&"number"==typeof t[s[o]]?t[s[o]]:r)-i/100}${n})`}return(0,o.Z)({keys:s,values:u,up:c,down:f,between:d,only:function(e){return s.indexOf(e)+1<s.length?d(e,s[s.indexOf(e)+1]):c(e)},not:function(e){const t=s.indexOf(e);return 0===t?c(s[1]):t===s.length-1?f(s[t]):d(e,s[s.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},l)}},8373:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(2605);function o(e=8){if(e.mui)return e;const t=(0,r.hB)({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}},360:(e,t,n)=>{"use strict";n.d(t,{Z:()=>c});var r=n(7462),o=n(3366),a=n(9766),i=n(1512),l=n(3101),u=n(8373);const s=["breakpoints","palette","spacing","shape"],c=function(e={},...t){const{breakpoints:n={},palette:c={},spacing:f,shape:d={}}=e,p=(0,o.Z)(e,s),h=(0,i.Z)(n),m=(0,u.Z)(f);let g=(0,a.Z)({breakpoints:h,direction:"ltr",components:{},palette:(0,r.Z)({mode:"light"},c),spacing:m,shape:(0,r.Z)({},l.Z,d)},p);return g=t.reduce(((e,t)=>(0,a.Z)(e,t)),g),g}},3101:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={borderRadius:4}},2053:(e,t,n)=>{"use strict";n.d(t,{B:()=>d,FW:()=>h,K$:()=>m,RG:()=>g,SG:()=>l,ZP:()=>b,aN:()=>p,e$:()=>u,fD:()=>y,oI:()=>f,s2:()=>s,t4:()=>c,zI:()=>v});var r=n(4844),o=n(2428),a=n(2605),i=n(5408);const l=e=>{if(void 0!==e.gap&&null!==e.gap){const t=(0,a.eI)(e.theme,"spacing",8,"gap"),n=e=>({gap:(0,a.NA)(t,e)});return(0,i.k9)(e,e.gap,n)}return null};l.propTypes={},l.filterProps=["gap"];const u=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=(0,a.eI)(e.theme,"spacing",8,"columnGap"),n=e=>({columnGap:(0,a.NA)(t,e)});return(0,i.k9)(e,e.columnGap,n)}return null};u.propTypes={},u.filterProps=["columnGap"];const s=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=(0,a.eI)(e.theme,"spacing",8,"rowGap"),n=e=>({rowGap:(0,a.NA)(t,e)});return(0,i.k9)(e,e.rowGap,n)}return null};s.propTypes={},s.filterProps=["rowGap"];const c=(0,r.ZP)({prop:"gridColumn"}),f=(0,r.ZP)({prop:"gridRow"}),d=(0,r.ZP)({prop:"gridAutoFlow"}),p=(0,r.ZP)({prop:"gridAutoColumns"}),h=(0,r.ZP)({prop:"gridAutoRows"}),m=(0,r.ZP)({prop:"gridTemplateColumns"}),g=(0,r.ZP)({prop:"gridTemplateRows"}),v=(0,r.ZP)({prop:"gridTemplateAreas"}),y=(0,r.ZP)({prop:"gridArea"}),b=(0,o.Z)(l,u,s,c,f,d,p,h,m,g,v,y)},208:(e,t,n)=>{"use strict";n.d(t,{ZP:()=>f});var r=n(4844),o=n(2428);const a=(0,r.ZP)({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),i=(0,r.ZP)({prop:"display"}),l=(0,r.ZP)({prop:"overflow"}),u=(0,r.ZP)({prop:"textOverflow"}),s=(0,r.ZP)({prop:"visibility"}),c=(0,r.ZP)({prop:"whiteSpace"}),f=(0,o.Z)(a,i,l,u,s,c)},4523:(e,t,n)=>{"use strict";n.d(t,{H7:()=>p,Kl:()=>u,Kv:()=>c,Me:()=>i,P_:()=>a,WO:()=>l,ZP:()=>y,cq:()=>s,eY:()=>g,fU:()=>d,i4:()=>h,uk:()=>m,vm:()=>f,zo:()=>v});var r=n(4844),o=n(2428);const a=(0,r.ZP)({prop:"flexBasis"}),i=(0,r.ZP)({prop:"flexDirection"}),l=(0,r.ZP)({prop:"flexWrap"}),u=(0,r.ZP)({prop:"justifyContent"}),s=(0,r.ZP)({prop:"alignItems"}),c=(0,r.ZP)({prop:"alignContent"}),f=(0,r.ZP)({prop:"order"}),d=(0,r.ZP)({prop:"flex"}),p=(0,r.ZP)({prop:"flexGrow"}),h=(0,r.ZP)({prop:"flexShrink"}),m=(0,r.ZP)({prop:"alignSelf"}),g=(0,r.ZP)({prop:"justifyItems"}),v=(0,r.ZP)({prop:"justifySelf"}),y=(0,o.Z)(a,i,l,u,s,c,f,d,p,h,m,g,v)},6809:(e,t,n)=>{"use strict";n.d(t,{G$:()=>h,Gc:()=>m,ZP:()=>g});var r=n(3019),o=n(208),a=n(4523),i=n(2053),l=n(7373),u=n(4126),s=n(7081),c=n(8241),f=n(2605),d=n(8706);const p={borders:r.ZP.filterProps,display:o.ZP.filterProps,flexbox:a.ZP.filterProps,grid:i.ZP.filterProps,positions:l.ZP.filterProps,palette:u.ZP.filterProps,shadows:s.Z.filterProps,sizing:c.ZP.filterProps,spacing:f.ZP.filterProps,typography:d.ZP.filterProps},h={borders:r.ZP,display:o.ZP,flexbox:a.ZP,grid:i.ZP,positions:l.ZP,palette:u.ZP,shadows:s.Z,sizing:c.ZP,spacing:f.ZP,typography:d.ZP},m=Object.keys(p).reduce(((e,t)=>(p[t].forEach((n=>{e[n]=h[t]})),e)),{}),g=function(e,t,n){const r={[e]:t,theme:n},o=m[e];return o?o(r):{[e]:t}}},231:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Box:()=>j,Container:()=>pe,GlobalStyles:()=>c.Z,Stack:()=>He,StyledEngineProvider:()=>u,ThemeProvider:()=>D.Z,Unstable_Grid:()=>Me,alignContent:()=>m.Kv,alignItems:()=>m.cq,alignSelf:()=>m.uk,alpha:()=>z.Fq,backgroundColor:()=>v.Cz,bgcolor:()=>v.n9,border:()=>f.Cg,borderBottom:()=>f.h$,borderBottomColor:()=>f.vS,borderColor:()=>f.tv,borderLeft:()=>f.sc,borderLeftColor:()=>f.Vv,borderRadius:()=>f.E0,borderRight:()=>f.vQ,borderRightColor:()=>f.XY,borderTop:()=>f.j1,borderTopColor:()=>f.SK,borders:()=>f.ZP,bottom:()=>y.I,boxSizing:()=>w.ix,breakpoints:()=>d.ZP,color:()=>v.$_,colorChannel:()=>z.n8,columnGap:()=>g.e$,compose:()=>p.Z,containerClasses:()=>ge,createBox:()=>C.Z,createBreakpoints:()=>M.Z,createContainer:()=>de,createGrid:()=>Le,createSpacing:()=>N.Z,createStack:()=>Be,createStyled:()=>T.ZP,createTheme:()=>L.Z,createUnarySpacing:()=>k.hB,createUnaryUnit:()=>k.eI,css:()=>s.iv,darken:()=>z._j,decomposeColor:()=>z.tB,display:()=>h.ZP,emphasize:()=>z._4,experimental_sx:()=>P,flex:()=>m.fU,flexBasis:()=>m.P_,flexDirection:()=>m.Me,flexGrow:()=>m.H7,flexShrink:()=>m.i4,flexWrap:()=>m.WO,flexbox:()=>m.ZP,fontFamily:()=>x.I8,fontSize:()=>x.JB,fontStyle:()=>x.p_,fontWeight:()=>x.Ue,gap:()=>g.SG,getContainerUtilityClass:()=>me,getContrastRatio:()=>z.mi,getGridUtilityClass:()=>Ne,getLuminance:()=>z.H3,getPath:()=>S.DW,getStackUtilityClass:()=>Ge,getStyleFromPropValue:()=>k.zO,getStyleValue:()=>S.Jq,getThemeProps:()=>A.Z,getValue:()=>k.NA,grid:()=>g.ZP,gridArea:()=>g.fD,gridAutoColumns:()=>g.aN,gridAutoFlow:()=>g.B,gridAutoRows:()=>g.FW,gridClasses:()=>Ae,gridColumn:()=>g.t4,gridRow:()=>g.oI,gridTemplateAreas:()=>g.zI,gridTemplateColumns:()=>g.K$,gridTemplateRows:()=>g.RG,handleBreakpoints:()=>d.k9,height:()=>w.Cb,hexToRgb:()=>z.oo,hslToRgb:()=>z.ve,justifyContent:()=>m.Kl,justifyItems:()=>m.eY,justifySelf:()=>m.zo,keyframes:()=>s.F4,left:()=>y.t$,letterSpacing:()=>x.rX,lighten:()=>z.$n,lineHeight:()=>x.Nv,margin:()=>k.e6,maxHeight:()=>w.kC,maxWidth:()=>w.kk,mergeBreakpointsInOrder:()=>d.dt,minHeight:()=>w.jw,minWidth:()=>w.ih,order:()=>m.vm,padding:()=>k.o3,palette:()=>v.ZP,position:()=>y.FK,positions:()=>y.ZP,recomposeColor:()=>z.wy,responsivePropType:()=>re,rgbToHex:()=>z.vq,right:()=>y.F2,rowGap:()=>g.s2,shadows:()=>b.Z,shape:()=>I.Z,shouldForwardProp:()=>T.x9,sizeHeight:()=>w.Vs,sizeWidth:()=>w.lO,sizing:()=>w.ZP,spacing:()=>k.ZP,stackClasses:()=>Ve,style:()=>S.ZP,styled:()=>R,systemDefaultTheme:()=>T.P_,textAlign:()=>x.yd,textTransform:()=>x.Qx,top:()=>y.we,typography:()=>x.ZP,typographyVariant:()=>x.HB,unstable_createCssVarsProvider:()=>te,unstable_createGetCssVar:()=>ne,unstable_createStyleFunctionSx:()=>_.n,unstable_extendSxProp:()=>E.Z,unstable_getThemeValue:()=>O.ZP,unstable_resolveBreakpointValues:()=>d.P$,unstable_styleFunctionSx:()=>_.Z,useTheme:()=>$.Z,useThemeProps:()=>Z.Z,useThemeWithoutDefault:()=>F.Z,width:()=>w.bf,zIndex:()=>y.W5});var r=n(7294),o=n(2443),a=n(6751),i=n(5893);const l=(0,a.Z)({key:"css",prepend:!0});function u(e){const{injectFirst:t,children:n}=e;return t?(0,i.jsx)(o.C,{value:l,children:n}):n}var s=n(917),c=n(1234),f=n(3019),d=n(5408),p=n(2428),h=n(208),m=n(4523),g=n(2053),v=n(4126),y=n(7373),b=n(7081),w=n(8241),k=n(2605),S=n(4844),x=n(8706),_=n(6523),E=n(9707);const P=function(e){return({theme:t})=>(0,_.Z)({sx:e,theme:t})};var O=n(6809),C=n(1354);const j=(0,C.Z)();var T=n(2807);const R=(0,T.ZP)();var L=n(360),M=n(1512),N=n(8373),I=n(3101),Z=n(9628),A=n(539),$=n(6682),F=n(4168),z=n(1796),D=n(5974),W=n(7462),U=n(3366),B=n(1387),H=n(9766);const G=(e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().indexOf("opacity")>=0?t:`${t}px`:t;function V(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={};var i,l;return i=(e,t,i)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`;Object.assign(o,{[r]:G(e,t)}),((e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))})(a,e,`var(${r})`,i)}},l=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!l||l&&!l([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):i([...n,t],o,r))}))}(e),{css:o,vars:a}}const q="mode",K="color-scheme",Q="data-color-scheme";function X(e){if("undefined"!=typeof window&&"system"===e)return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}function J(e,t){return"light"===e.mode||"system"===e.mode&&"light"===e.systemMode?t("light"):"dark"===e.mode||"system"===e.mode&&"dark"===e.systemMode?t("dark"):void 0}function Y(e,t){if("undefined"==typeof window)return;let n;try{n=localStorage.getItem(e)||void 0,n||localStorage.setItem(e,t)}catch(e){}return n||t}const ee=["colorSchemes","components","cssVarPrefix"];function te(e){const{theme:t={},attribute:n=Q,modeStorageKey:o=q,colorSchemeStorageKey:a=K,defaultMode:l="light",defaultColorScheme:u,disableTransitionOnChange:s=!1,shouldSkipGeneratingVar:f,resolveTheme:d,excludeVariablesFromRoot:p}=e;(!t.colorSchemes||"string"==typeof u&&!t.colorSchemes[u]||"object"==typeof u&&!t.colorSchemes[null==u?void 0:u.light]||"object"==typeof u&&!t.colorSchemes[null==u?void 0:u.dark])&&console.error(`MUI: \`${u}\` does not exist in \`theme.colorSchemes\`.`);const h=r.createContext(void 0),m="string"==typeof u?u:u.light,g="string"==typeof u?u:u.dark;return{CssVarsProvider:function({children:e,theme:m=t,modeStorageKey:g=o,colorSchemeStorageKey:v=a,attribute:y=n,defaultMode:b=l,defaultColorScheme:w=u,disableTransitionOnChange:k=s,storageWindow:S=("undefined"==typeof window?void 0:window),documentNode:x=("undefined"==typeof document?void 0:document),colorSchemeNode:_=("undefined"==typeof document?void 0:document.documentElement),colorSchemeSelector:E=":root",shouldSkipGeneratingVar:P=f}){const O=r.useRef(!1),{colorSchemes:C={},components:j={},cssVarPrefix:T}=m,R=(0,U.Z)(m,ee),L=Object.keys(C),M="string"==typeof w?w:w.light,N="string"==typeof w?w:w.dark,{mode:I,setMode:Z,systemMode:A,lightColorScheme:$,darkColorScheme:F,colorScheme:z,setColorScheme:B}=function(e){const{defaultMode:t="light",defaultLightColorScheme:n,defaultDarkColorScheme:o,supportedColorSchemes:a=[],modeStorageKey:i=q,colorSchemeStorageKey:l=K,storageWindow:u=("undefined"==typeof window?void 0:window)}=e,s=a.join(","),[c,f]=r.useState((()=>{const e=Y(i,t),r=Y(`${l}-light`,n),a=Y(`${l}-dark`,o);return{mode:e,systemMode:X(e),lightColorScheme:r,darkColorScheme:a}})),d=function(e){return J(e,(t=>"light"===t?e.lightColorScheme:"dark"===t?e.darkColorScheme:void 0))}(c),p=r.useCallback((e=>{f((n=>{if(e===n.mode)return n;const r=e||t;try{localStorage.setItem(i,r)}catch(e){}return(0,W.Z)({},n,{mode:r,systemMode:X(r)})}))}),[i,t]),h=r.useCallback((e=>{e?"string"==typeof e?e&&!s.includes(e)?console.error(`\`${e}\` does not exist in \`theme.colorSchemes\`.`):f((t=>{const n=(0,W.Z)({},t);return J(t,(t=>{try{localStorage.setItem(`${l}-${t}`,e)}catch(e){}"light"===t&&(n.lightColorScheme=e),"dark"===t&&(n.darkColorScheme=e)})),n})):f((t=>{const r=(0,W.Z)({},t),a=null===e.light?n:e.light,i=null===e.dark?o:e.dark;if(a)if(s.includes(a)){r.lightColorScheme=a;try{localStorage.setItem(`${l}-light`,a)}catch(e){}}else console.error(`\`${a}\` does not exist in \`theme.colorSchemes\`.`);if(i)if(s.includes(i)){r.darkColorScheme=i;try{localStorage.setItem(`${l}-dark`,i)}catch(e){}}else console.error(`\`${i}\` does not exist in \`theme.colorSchemes\`.`);return r})):f((e=>{try{localStorage.setItem(`${l}-light`,n),localStorage.setItem(`${l}-dark`,o)}catch(e){}return(0,W.Z)({},e,{lightColorScheme:n,darkColorScheme:o})}))}),[s,l,n,o]),m=r.useCallback((e=>{"system"===c.mode&&f((t=>(0,W.Z)({},t,{systemMode:null!=e&&e.matches?"dark":"light"})))}),[c.mode]),g=r.useRef(m);return g.current=m,r.useEffect((()=>{const e=(...e)=>g.current(...e),t=window.matchMedia("(prefers-color-scheme: dark)");return t.addListener(e),e(t),()=>t.removeListener(e)}),[]),r.useEffect((()=>{const e=e=>{const n=e.newValue;"string"!=typeof e.key||!e.key.startsWith(l)||n&&!s.match(n)||(e.key.endsWith("light")&&h({light:n}),e.key.endsWith("dark")&&h({dark:n})),e.key!==i||n&&!["light","dark","system"].includes(n)||p(n||t)};if(u)return u.addEventListener("storage",e),()=>u.removeEventListener("storage",e)}),[h,p,i,l,s,t,u]),(0,W.Z)({},c,{colorScheme:d,setMode:p,setColorScheme:h})}({supportedColorSchemes:L,defaultLightColorScheme:M,defaultDarkColorScheme:N,modeStorageKey:g,colorSchemeStorageKey:v,defaultMode:b,storageWindow:S}),G=z||("dark"===(I||("system"===b?l:b))?N:M),{css:Q,vars:te}=V(R,{prefix:T,shouldSkipGeneratingVar:P}),ne=(0,W.Z)({},R,{components:j,colorSchemes:C,cssVarPrefix:T,vars:te,getColorSchemeSelector:e=>`[${y}="${e}"] &`}),re={},oe={};Object.entries(C).forEach((([e,t])=>{const{css:n,vars:r}=V(t,{prefix:T,shouldSkipGeneratingVar:P});if(ne.vars=(0,H.Z)(ne.vars,r),e===G&&(Object.keys(t).forEach((e=>{t[e]&&"object"==typeof t[e]?ne[e]=(0,W.Z)({},ne[e],t[e]):ne[e]=t[e]})),ne.palette&&(ne.palette.colorScheme=e)),e===("string"==typeof w?w:"dark"===b?w.dark:w.light)){if(p){const t={};p(T).forEach((e=>{t[e]=n[e],delete n[e]})),re[`[${y}="${e}"]`]=t}re[`${E}, [${y}="${e}"]`]=n}else oe[`${":root"===E?"":E}[${y}="${e}"]`]=n})),r.useEffect((()=>{z&&_&&_.setAttribute(y,z)}),[z,y,_]),r.useEffect((()=>{let e;if(k&&O.current&&x){const t=x.createElement("style");t.appendChild(x.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),x.head.appendChild(t),window.getComputedStyle(x.body),e=setTimeout((()=>{x.head.removeChild(t)}),1)}return()=>{clearTimeout(e)}}),[z,k,x]),r.useEffect((()=>(O.current=!0,()=>{O.current=!1})),[]);const ae=r.useMemo((()=>({mode:I,systemMode:A,setMode:Z,lightColorScheme:$,darkColorScheme:F,colorScheme:z,setColorScheme:B,allColorSchemes:L})),[L,z,F,$,I,B,Z,A]);return(0,i.jsxs)(h.Provider,{value:ae,children:[(0,i.jsx)(c.Z,{styles:{[E]:Q}}),(0,i.jsx)(c.Z,{styles:re}),(0,i.jsx)(c.Z,{styles:oe}),(0,i.jsx)(D.Z,{theme:d?d(ne):ne,children:e})]})},useColorScheme:()=>{const e=r.useContext(h);if(!e)throw new Error((0,B.Z)(19));return e},getInitColorSchemeScript:e=>function(e){const{defaultMode:t="light",defaultLightColorScheme:n="light",defaultDarkColorScheme:r="dark",modeStorageKey:o=q,colorSchemeStorageKey:a=K,attribute:l=Q,colorSchemeNode:u="document.documentElement"}=e||{};return(0,i.jsx)("script",{dangerouslySetInnerHTML:{__html:`(function() { try {\n        var mode = localStorage.getItem('${o}') || '${t}';\n        var cssColorScheme = mode;\n        var colorScheme = '';\n        if (mode === 'system') {\n          // handle system mode\n          var mql = window.matchMedia('(prefers-color-scheme: dark)');\n          if (mql.matches) {\n            cssColorScheme = 'dark';\n            colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n          } else {\n            cssColorScheme = 'light';\n            colorScheme = localStorage.getItem('${a}-light') || '${n}';\n          }\n        }\n        if (mode === 'light') {\n          colorScheme = localStorage.getItem('${a}-light') || '${n}';\n        }\n        if (mode === 'dark') {\n          colorScheme = localStorage.getItem('${a}-dark') || '${r}';\n        }\n        if (colorScheme) {\n          ${u}.setAttribute('${l}', colorScheme);\n        }\n      } catch (e) {} })();`}},"mui-color-scheme-init")}((0,W.Z)({attribute:n,colorSchemeStorageKey:a,defaultMode:l,defaultLightColorScheme:m,defaultDarkColorScheme:g,modeStorageKey:o},e))}}function ne(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}const re={};var oe=n(6010),ae=n(8320),ie=n(4867),le=n(4780);const ue=["className","component","disableGutters","fixed","maxWidth","classes"],se=(0,L.Z)(),ce=R("div",{name:"MuiContainer",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[`maxWidth${(0,ae.Z)(String(n.maxWidth))}`],n.fixed&&t.fixed,n.disableGutters&&t.disableGutters]}}),fe=e=>(0,Z.Z)({props:e,name:"MuiContainer",defaultTheme:se});function de(e={}){const{createStyledComponent:t=ce,useThemeProps:n=fe,componentName:o="MuiContainer"}=e,a=t((({theme:e,ownerState:t})=>(0,W.Z)({width:"100%",marginLeft:"auto",boxSizing:"border-box",marginRight:"auto",display:"block"},!t.disableGutters&&{paddingLeft:e.spacing(2),paddingRight:e.spacing(2),[e.breakpoints.up("sm")]:{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}})),(({theme:e,ownerState:t})=>t.fixed&&Object.keys(e.breakpoints.values).reduce(((t,n)=>{const r=n,o=e.breakpoints.values[r];return 0!==o&&(t[e.breakpoints.up(r)]={maxWidth:`${o}${e.breakpoints.unit}`}),t}),{})),(({theme:e,ownerState:t})=>(0,W.Z)({},"xs"===t.maxWidth&&{[e.breakpoints.up("xs")]:{maxWidth:Math.max(e.breakpoints.values.xs,444)}},t.maxWidth&&"xs"!==t.maxWidth&&{[e.breakpoints.up(t.maxWidth)]:{maxWidth:`${e.breakpoints.values[t.maxWidth]}${e.breakpoints.unit}`}}))),l=r.forwardRef((function(e,t){const r=n(e),{className:l,component:u="div",disableGutters:s=!1,fixed:c=!1,maxWidth:f="lg"}=r,d=(0,U.Z)(r,ue),p=(0,W.Z)({},r,{component:u,disableGutters:s,fixed:c,maxWidth:f}),h=((e,t)=>{const{classes:n,fixed:r,disableGutters:o,maxWidth:a}=e,i={root:["root",a&&`maxWidth${(0,ae.Z)(String(a))}`,r&&"fixed",o&&"disableGutters"]};return(0,le.Z)(i,(e=>(0,ie.Z)(t,e)),n)})(p,o);return(0,i.jsx)(a,(0,W.Z)({as:u,ownerState:p,className:(0,oe.Z)(h.root,l),ref:t},d))}));return l}const pe=de();var he=n(1588);function me(e){return(0,ie.Z)("MuiContainer",e)}const ge=(0,he.Z)("MuiContainer",["root","disableGutters","fixed","maxWidthXs","maxWidthSm","maxWidthMd","maxWidthLg","maxWidthXl"]),ve=(e,t,n)=>{const r=e.keys[0];var o,a;Array.isArray(t)?t.forEach(((t,r)=>{n(((t,n)=>{r<=e.keys.length-1&&(0===r?Object.assign(t,n):t[e.up(e.keys[r])]=n)}),t)})):t&&"object"==typeof t?(Object.keys(t).length>e.keys.length?e.keys:(o=e.keys,a=Object.keys(t),o.filter((e=>a.includes(e))))).forEach((o=>{if(-1!==e.keys.indexOf(o)){const a=t[o];void 0!==a&&n(((t,n)=>{r===o?Object.assign(t,n):t[e.up(o)]=n}),a)}})):"number"!=typeof t&&"string"!=typeof t||n(((e,t)=>{Object.assign(e,t)}),t)},ye=({theme:e,ownerState:t})=>{const n={};return ve(e.breakpoints,t.gridSize,((e,r)=>{let o={};!0===r&&(o={flexBasis:0,flexGrow:1,maxWidth:"100%"}),"auto"===r&&(o={flexBasis:"auto",flexGrow:0,flexShrink:0,maxWidth:"none",width:"auto"}),"number"==typeof r&&(o={flexGrow:0,flexBasis:"auto",width:`calc(100% * ${r} / var(--Grid-columns)${t.nested&&t.container?" + var(--Grid-columnSpacing)":""})`}),e(n,o)})),n},be=({theme:e,ownerState:t})=>{const n={};return ve(e.breakpoints,t.gridOffset,((e,t)=>{let r={};"auto"===t&&(r={marginLeft:"auto"}),"number"==typeof t&&(r={marginLeft:0===t?"0px":`calc(100% * ${t} / var(--Grid-columns))`}),e(n,r)})),n},we=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={"--Grid-columns":12};return ve(e.breakpoints,t.columns,((e,t)=>{e(n,{"--Grid-columns":t})})),n},ke=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return ve(e.breakpoints,t.rowSpacing,((t,r)=>{var o;t(n,{"--Grid-rowSpacing":"string"==typeof r?r:null==(o=e.spacing)?void 0:o.call(e,r)})})),n},Se=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return ve(e.breakpoints,t.columnSpacing,((t,r)=>{var o;t(n,{"--Grid-columnSpacing":"string"==typeof r?r:null==(o=e.spacing)?void 0:o.call(e,r)})})),n},xe=({theme:e,ownerState:t})=>{if(!t.container)return{};const n={};return ve(e.breakpoints,t.direction,((e,t)=>{e(n,{flexDirection:t})})),n},_e=({ownerState:e})=>(0,W.Z)({minWidth:0,boxSizing:"border-box"},e.container?(0,W.Z)({display:"flex",flexWrap:"wrap"},e.wrap&&"wrap"!==e.wrap&&{flexWrap:e.wrap},{margin:"calc(var(--Grid-rowSpacing) / -2) calc(var(--Grid-columnSpacing) / -2)"},e.disableEqualOverflow&&{margin:"calc(var(--Grid-rowSpacing) * -1) 0px 0px calc(var(--Grid-columnSpacing) * -1)"},e.nested?(0,W.Z)({padding:"calc(var(--Grid-nested-rowSpacing) / 2) calc(var(--Grid-nested-columnSpacing) / 2)"},(e.disableEqualOverflow||e.parentDisableEqualOverflow)&&{padding:"calc(var(--Grid-nested-rowSpacing)) 0px 0px calc(var(--Grid-nested-columnSpacing))"}):{"--Grid-nested-rowSpacing":"var(--Grid-rowSpacing)","--Grid-nested-columnSpacing":"var(--Grid-columnSpacing)"}):(0,W.Z)({padding:"calc(var(--Grid-rowSpacing) / 2) calc(var(--Grid-columnSpacing) / 2)"},e.disableEqualOverflow&&{padding:"calc(var(--Grid-rowSpacing)) 0px 0px calc(var(--Grid-columnSpacing))"})),Ee=e=>{const t=[];return Object.entries(e).forEach((([e,n])=>{!1!==n&&void 0!==n&&t.push(`grid-${e}-${String(n)}`)})),t},Pe=(e,t="xs")=>{function n(e){return void 0!==e&&("string"==typeof e&&!Number.isNaN(Number(e))||"number"==typeof e&&e>0)}if(n(e))return[`spacing-${t}-${String(e)}`];if("object"==typeof e&&!Array.isArray(e)){const t=[];return Object.entries(e).forEach((([e,r])=>{n(r)&&t.push(`spacing-${e}-${String(r)}`)})),t}return[]},Oe=e=>void 0===e?[]:"object"==typeof e?Object.entries(e).map((([e,t])=>`direction-${e}-${t}`)):[`direction-xs-${String(e)}`],Ce=["className","columns","container","component","direction","wrap","spacing","rowSpacing","columnSpacing","disableEqualOverflow"],je=(0,L.Z)(),Te=R("div",{name:"MuiGrid",slot:"Root",overridesResolver:(e,t)=>t.root});function Re(e){return(0,Z.Z)({props:e,name:"MuiGrid",defaultTheme:je})}function Le(e={}){const{createStyledComponent:t=Te,useThemeProps:n=Re,componentName:o="MuiGrid"}=e,a=r.createContext(!1),l=r.createContext(void 0),u=t(we,Se,ke,ye,xe,_e,be),s=r.forwardRef((function(e,t){var s,c,f,d,p,h,m,g;const v=(0,$.Z)(),y=n(e),b=(0,E.Z)(y),w=r.useContext(a),k=r.useContext(l),{className:S,columns:x=12,container:_=!1,component:P="div",direction:O="row",wrap:C="wrap",spacing:j=0,rowSpacing:T=j,columnSpacing:R=j,disableEqualOverflow:L}=b,M=(0,U.Z)(b,Ce);let N=L;w&&void 0!==L&&(N=e.disableEqualOverflow);const I={},Z={},A={};Object.entries(M).forEach((([e,t])=>{void 0!==v.breakpoints.values[e]?I[e]=t:void 0!==v.breakpoints.values[e.replace("Offset","")]?Z[e.replace("Offset","")]=t:A[e]=t}));const F=null!=(s=e.columns)?s:w?void 0:x,z=null!=(c=e.spacing)?c:w?void 0:j,D=null!=(f=null!=(d=e.rowSpacing)?d:e.spacing)?f:w?void 0:T,B=null!=(p=null!=(h=e.columnSpacing)?h:e.spacing)?p:w?void 0:R,H=(0,W.Z)({},b,{nested:w,columns:F,container:_,direction:O,wrap:C,spacing:z,rowSpacing:D,columnSpacing:B,gridSize:I,gridOffset:Z,disableEqualOverflow:null!=(m=null!=(g=N)?g:k)&&m,parentDisableEqualOverflow:k}),G=((e,t)=>{const{container:n,direction:r,spacing:a,wrap:i,gridSize:l}=e,u={root:["root",n&&"container","wrap"!==i&&`wrap-xs-${String(i)}`,...Oe(r),...Ee(l),...n?Pe(a,t.breakpoints.keys[0]):[]]};return(0,le.Z)(u,(e=>(0,ie.Z)(o,e)),{})})(H,v);let V=(0,i.jsx)(u,(0,W.Z)({ref:t,as:P,ownerState:H,className:(0,oe.Z)(G.root,S)},A));return w||(V=(0,i.jsx)(a.Provider,{value:!0,children:V})),void 0!==N&&N!==(null!=k&&k)&&(V=(0,i.jsx)(l.Provider,{value:N,children:V})),V}));return s}const Me=Le();function Ne(e){return(0,ie.Z)("MuiGrid",e)}const Ie=["auto",!0,1,2,3,4,5,6,7,8,9,10,11,12],Ze=(0,he.Z)("MuiGrid",["root","container","item",...[0,1,2,3,4,5,6,7,8,9,10].map((e=>`spacing-xs-${e}`)),...["column-reverse","column","row-reverse","row"].map((e=>`direction-xs-${e}`)),...["nowrap","wrap-reverse","wrap"].map((e=>`wrap-xs-${e}`)),...Ie.map((e=>`grid-xs-${e}`)),...Ie.map((e=>`grid-sm-${e}`)),...Ie.map((e=>`grid-md-${e}`)),...Ie.map((e=>`grid-lg-${e}`)),...Ie.map((e=>`grid-xl-${e}`))]),Ae=Ze,$e=["component","direction","spacing","divider","children","className"],Fe=(0,L.Z)(),ze=R("div",{name:"MuiStack",slot:"Root",overridesResolver:(e,t)=>t.root});function De(e){return(0,Z.Z)({props:e,name:"MuiStack",defaultTheme:Fe})}function We(e,t){const n=r.Children.toArray(e).filter(Boolean);return n.reduce(((e,o,a)=>(e.push(o),a<n.length-1&&e.push(r.cloneElement(t,{key:`separator-${a}`})),e)),[])}const Ue=({ownerState:e,theme:t})=>{let n=(0,W.Z)({display:"flex",flexDirection:"column"},(0,d.k9)({theme:t},(0,d.P$)({values:e.direction,breakpoints:t.breakpoints.values}),(e=>({flexDirection:e}))));if(e.spacing){const r=(0,k.hB)(t),o=Object.keys(t.breakpoints.values).reduce(((t,n)=>(("object"==typeof e.spacing&&null!=e.spacing[n]||"object"==typeof e.direction&&null!=e.direction[n])&&(t[n]=!0),t)),{}),a=(0,d.P$)({values:e.direction,base:o}),i=(0,d.P$)({values:e.spacing,base:o});"object"==typeof a&&Object.keys(a).forEach(((e,t,n)=>{if(!a[e]){const r=t>0?a[n[t-1]]:"column";a[e]=r}}));const l=(t,n)=>{return{"& > :not(style) + :not(style)":{margin:0,[`margin${o=n?a[n]:e.direction,{row:"Left","row-reverse":"Right",column:"Top","column-reverse":"Bottom"}[o]}`]:(0,k.NA)(r,t)}};var o};n=(0,H.Z)(n,(0,d.k9)({theme:t},i,l))}return n=(0,d.dt)(t.breakpoints,n),n};function Be(e={}){const{createStyledComponent:t=ze,useThemeProps:n=De,componentName:o="MuiStack"}=e,a=t(Ue),l=r.forwardRef((function(e,t){const r=n(e),l=(0,E.Z)(r),{component:u="div",direction:s="column",spacing:c=0,divider:f,children:d,className:p}=l,h=(0,U.Z)(l,$e),m={direction:s,spacing:c},g=(0,le.Z)({root:["root"]},(e=>(0,ie.Z)(o,e)),{});return(0,i.jsx)(a,(0,W.Z)({as:u,ownerState:m,ref:t,className:(0,oe.Z)(g.root,p)},h,{children:f?We(d,f):d}))}));return l}const He=Be();function Ge(e){return(0,ie.Z)("MuiStack",e)}const Ve=(0,he.Z)("MuiStack",["root"])},7730:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(9766);const o=function(e,t){return t?(0,r.Z)(e,t,{clone:!1}):e}},4126:(e,t,n)=>{"use strict";n.d(t,{$_:()=>i,Cz:()=>u,ZP:()=>s,n9:()=>l});var r=n(4844),o=n(2428);function a(e,t){return"grey"===t?t:e}const i=(0,r.ZP)({prop:"color",themeKey:"palette",transform:a}),l=(0,r.ZP)({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:a}),u=(0,r.ZP)({prop:"backgroundColor",themeKey:"palette",transform:a}),s=(0,o.Z)(i,l,u)},7373:(e,t,n)=>{"use strict";n.d(t,{F2:()=>u,FK:()=>a,I:()=>s,W5:()=>i,ZP:()=>f,t$:()=>c,we:()=>l});var r=n(4844),o=n(2428);const a=(0,r.ZP)({prop:"position"}),i=(0,r.ZP)({prop:"zIndex",themeKey:"zIndex"}),l=(0,r.ZP)({prop:"top"}),u=(0,r.ZP)({prop:"right"}),s=(0,r.ZP)({prop:"bottom"}),c=(0,r.ZP)({prop:"left"}),f=(0,o.Z)(a,i,l,u,s,c)},7081:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(4844).ZP)({prop:"boxShadow",themeKey:"shadows"})},8241:(e,t,n)=>{"use strict";n.d(t,{Cb:()=>c,Vs:()=>h,ZP:()=>g,bf:()=>l,ih:()=>s,ix:()=>m,jw:()=>d,kC:()=>f,kk:()=>u,lO:()=>p});var r=n(4844),o=n(2428),a=n(5408);function i(e){return e<=1&&0!==e?100*e+"%":e}const l=(0,r.ZP)({prop:"width",transform:i}),u=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||a.VO[t]||i(t)}};return(0,a.k9)(e,e.maxWidth,t)}return null};u.filterProps=["maxWidth"];const s=(0,r.ZP)({prop:"minWidth",transform:i}),c=(0,r.ZP)({prop:"height",transform:i}),f=(0,r.ZP)({prop:"maxHeight",transform:i}),d=(0,r.ZP)({prop:"minHeight",transform:i}),p=(0,r.ZP)({prop:"size",cssProperty:"width",transform:i}),h=(0,r.ZP)({prop:"size",cssProperty:"height",transform:i}),m=(0,r.ZP)({prop:"boxSizing"}),g=(0,o.Z)(l,u,s,c,f,d,m)},2605:(e,t,n)=>{"use strict";n.d(t,{hB:()=>h,eI:()=>p,ZP:()=>k,zO:()=>g,NA:()=>m,e6:()=>y,o3:()=>b});var r=n(5408),o=n(4844),a=n(7730);const i={m:"margin",p:"padding"},l={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},u={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},s=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!u[e])return[e];e=u[e]}const[t,n]=e.split(""),r=i[t],o=l[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),c=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],f=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],d=[...c,...f];function p(e,t,n,r){var a;const i=null!=(a=(0,o.DW)(e,t,!1))?a:n;return"number"==typeof i?e=>"string"==typeof e?e:i*e:Array.isArray(i)?e=>"string"==typeof e?e:i[e]:"function"==typeof i?i:()=>{}}function h(e){return p(e,"spacing",8)}function m(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function g(e,t){return n=>e.reduce(((e,r)=>(e[r]=m(t,n),e)),{})}function v(e,t){const n=h(e.theme);return Object.keys(e).map((o=>function(e,t,n,o){if(-1===t.indexOf(n))return null;const a=g(s(n),o),i=e[n];return(0,r.k9)(e,i,a)}(e,t,o,n))).reduce(a.Z,{})}function y(e){return v(e,c)}function b(e){return v(e,f)}function w(e){return v(e,d)}y.propTypes={},y.filterProps=c,b.propTypes={},b.filterProps=f,w.propTypes={},w.filterProps=d;const k=w},4844:(e,t,n)=>{"use strict";n.d(t,{DW:()=>a,Jq:()=>i,ZP:()=>l});var r=n(8320),o=n(5408);function a(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function i(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:a(e,n)||r,t&&(o=t(o,r)),o}const l=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:l,transform:u}=e,s=e=>{if(null==e[t])return null;const s=e[t],c=a(e.theme,l)||{};return(0,o.k9)(e,s,(e=>{let o=i(c,u,e);return e===o&&"string"==typeof e&&(o=i(c,u,`${t}${"default"===e?"":(0,r.Z)(e)}`,e)),!1===n?o:{[n]:o}}))};return s.propTypes={},s.filterProps=[t],s}},9707:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u});var r=n(7462),o=n(3366),a=n(9766),i=n(6809);const l=["sx"];function u(e){const{sx:t}=e,n=(0,o.Z)(e,l),{systemProps:u,otherProps:s}=(e=>{const t={systemProps:{},otherProps:{}};return Object.keys(e).forEach((n=>{i.Gc[n]?t.systemProps[n]=e[n]:t.otherProps[n]=e[n]})),t})(n);let c;return c=Array.isArray(t)?[u,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return(0,a.P)(n)?(0,r.Z)({},u,n):u}:(0,r.Z)({},u,t),(0,r.Z)({},s,{sx:c})}},6523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>u,n:()=>i});var r=n(7730),o=n(6809),a=n(5408);function i(e=o.G$){const t=Object.keys(e).reduce(((t,n)=>(e[n].filterProps.forEach((r=>{t[r]=e[n]})),t)),{});function n(e,n,r){const o={[e]:n,theme:r},a=t[e];return a?a(o):{[e]:n}}return function e(o){const{sx:i,theme:l={}}=o||{};if(!i)return null;function u(o){let i=o;if("function"==typeof o)i=o(l);else if("object"!=typeof o)return o;if(!i)return null;const u=(0,a.W8)(l.breakpoints),s=Object.keys(u);let c=u;return Object.keys(i).forEach((o=>{const u="function"==typeof(s=i[o])?s(l):s;var s;if(null!=u)if("object"==typeof u)if(t[o])c=(0,r.Z)(c,n(o,u,l));else{const t=(0,a.k9)({theme:l},u,(e=>({[o]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,u)?c=(0,r.Z)(c,t):c[o]=e({sx:u,theme:l})}else c=(0,r.Z)(c,n(o,u,l))})),(0,a.L7)(s,c)}return Array.isArray(i)?i.map(u):u(i)}}const l=i();l.filterProps=["sx"];const u=l},8706:(e,t,n)=>{"use strict";n.d(t,{HB:()=>p,I8:()=>a,JB:()=>i,Nv:()=>f,Qx:()=>c,Ue:()=>u,ZP:()=>h,p_:()=>l,rX:()=>s,yd:()=>d});var r=n(4844),o=n(2428);const a=(0,r.ZP)({prop:"fontFamily",themeKey:"typography"}),i=(0,r.ZP)({prop:"fontSize",themeKey:"typography"}),l=(0,r.ZP)({prop:"fontStyle",themeKey:"typography"}),u=(0,r.ZP)({prop:"fontWeight",themeKey:"typography"}),s=(0,r.ZP)({prop:"letterSpacing"}),c=(0,r.ZP)({prop:"textTransform"}),f=(0,r.ZP)({prop:"lineHeight"}),d=(0,r.ZP)({prop:"textAlign"}),p=(0,r.ZP)({prop:"typography",cssProperty:!1,themeKey:"typography"}),h=(0,o.Z)(p,a,i,l,u,s,f,d,c)},6682:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(360),o=n(4168);const a=(0,r.Z)(),i=function(e=a){return(0,o.Z)(e)}},539:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7925);function o(e){const{theme:t,name:n,props:o}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?(0,r.Z)(t.components[n].defaultProps,o):o}},9628:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(539),o=n(6682);function a({props:e,name:t,defaultTheme:n}){const a=(0,o.Z)(n);return(0,r.Z)({theme:a,name:t,props:e})}},4168:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(6760);const o=function(e=null){const t=(0,r.Z)();return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}},7078:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r=e=>e,o=(()=>{let e=r;return{configure(t){e=t},generate:t=>e(t),reset(){e=r}}})()},8320:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(1387);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},4780:(e,t,n)=>{"use strict";function r(e,t,n){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}n.d(t,{Z:()=>r})},9064:(e,t,n)=>{"use strict";function r(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}n.d(t,{Z:()=>r})},7596:(e,t,n)=>{"use strict";function r(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}n.d(t,{Z:()=>r})},9766:(e,t,n)=>{"use strict";n.d(t,{P:()=>o,Z:()=>a});var r=n(7462);function o(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function a(e,t,n={clone:!0}){const i=n.clone?(0,r.Z)({},e):e;return o(e)&&o(t)&&Object.keys(t).forEach((r=>{"__proto__"!==r&&(o(t[r])&&r in e&&o(e[r])?i[r]=a(e[r],t[r],n):i[r]=t[r])})),i}},1387:(e,t,n)=>{"use strict";function r(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},4867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7078);const o={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function a(e,t,n="Mui"){const a=o[t];return a?`${n}-${a}`:`${r.Z.generate(e)}-${t}`}},1588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(4867);function o(e,t,n="Mui"){const o={};return t.forEach((t=>{o[t]=(0,r.Z)(e,t,n)})),o}},5806:(e,t,n)=>{"use strict";function r(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}n.d(t,{Z:()=>r})},600:(e,t,n)=>{"use strict";function r(e,t){return()=>null}n.r(t),n.d(t,{HTMLElementType:()=>v,chainPropTypes:()=>r,deepmerge:()=>o.Z,elementAcceptingRef:()=>u,elementTypeAcceptingRef:()=>s,exactProp:()=>c,formatMuiErrorMessage:()=>f.Z,getDisplayName:()=>g,integerPropType:()=>B,internal_resolveProps:()=>H.Z,isPlainObject:()=>o.P,ponyfillGlobal:()=>y,refType:()=>b,unstable_ClassNameGenerator:()=>K.Z,unstable_capitalize:()=>w.Z,unstable_composeClasses:()=>G.Z,unstable_createChainedFunction:()=>k.Z,unstable_debounce:()=>S.Z,unstable_deprecatedPropType:()=>x,unstable_detectScrollType:()=>$,unstable_generateUtilityClass:()=>V.Z,unstable_generateUtilityClasses:()=>q.Z,unstable_getNormalizedScrollLeft:()=>F,unstable_getScrollbarSize:()=>Z.Z,unstable_isMuiElement:()=>_.Z,unstable_ownerDocument:()=>E.Z,unstable_ownerWindow:()=>P.Z,unstable_requirePropFactory:()=>O,unstable_setRef:()=>C.Z,unstable_unsupportedProp:()=>R,unstable_useControlled:()=>L.Z,unstable_useEnhancedEffect:()=>j.Z,unstable_useEventCallback:()=>M.Z,unstable_useForkRef:()=>N.Z,unstable_useId:()=>T.Z,unstable_useIsFocusVisible:()=>I.Z,usePreviousProps:()=>D,visuallyHidden:()=>W.Z});var o=n(9766),a=n(5697),i=n.n(a);const l=(i().element,()=>null);l.isRequired=(i().element.isRequired,()=>null);const u=l,s=(i().elementType,()=>null);function c(e){return e}n(7462);var f=n(1387),d=n(9864);const p=/^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;function h(e,t=""){return e.displayName||e.name||function(e){const t=`${e}`.match(p);return t&&t[1]||""}(e)||t}function m(e,t,n){const r=h(t);return e.displayName||(""!==r?`${n}(${r})`:n)}function g(e){if(null!=e){if("string"==typeof e)return e;if("function"==typeof e)return h(e,"Component");if("object"==typeof e)switch(e.$$typeof){case d.ForwardRef:return m(e,e.render,"ForwardRef");case d.Memo:return m(e,e.type,"memo");default:return}}}function v(e,t,n,r,o){return null}const y="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")(),b=i().oneOfType([i().func,i().object]);var w=n(8320),k=n(9064),S=n(7596);function x(e,t){return()=>null}var _=n(8719),E=n(7094),P=n(8290);function O(e,t){return()=>null}var C=n(7960),j=n(6600),T=n(7579);function R(e,t,n,r,o){return null}var L=n(8925),M=n(3633),N=n(67),I=n(9962),Z=n(5806);let A;function $(){if(A)return A;const e=document.createElement("div"),t=document.createElement("div");return t.style.width="10px",t.style.height="1px",e.appendChild(t),e.dir="rtl",e.style.fontSize="14px",e.style.width="4px",e.style.height="1px",e.style.position="absolute",e.style.top="-1000px",e.style.overflow="scroll",document.body.appendChild(e),A="reverse",e.scrollLeft>0?A="default":(e.scrollLeft=1,0===e.scrollLeft&&(A="negative")),document.body.removeChild(e),A}function F(e,t){const n=e.scrollLeft;if("rtl"!==t)return n;switch($()){case"negative":return e.scrollWidth-e.clientWidth+n;case"reverse":return e.scrollWidth-e.clientWidth-n;default:return n}}var z=n(7294);const D=e=>{const t=z.useRef({});return z.useEffect((()=>{t.current=e})),t.current};var W=n(3113);function U(){return null}Number.isInteger,U.isRequired=U;const B=U;var H=n(7925),G=n(4780),V=n(4867),q=n(1588),K=n(7078)},8719:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}},7094:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},8290:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7094);function o(e){return(0,r.Z)(e).defaultView||window}},7925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7462);function o(e,t){const n=(0,r.Z)({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}},7960:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},8925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);function o({controlled:e,default:t,name:n,state:o="value"}){const{current:a}=r.useRef(void 0!==e),[i,l]=r.useState(t);return[a?e:i,r.useCallback((e=>{a||l(e)}),[])]}},6600:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(7294);const o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect},3633:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(6600);function a(e){const t=r.useRef(e);return(0,o.Z)((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}},67:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7294),o=n(7960);function a(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{(0,o.Z)(e,t)}))}),e)}},7579:(e,t,n)=>{"use strict";var r;n.d(t,{Z:()=>l});var o=n(7294);let a=0;const i=(r||(r=n.t(o,2))).useId;function l(e){if(void 0!==i){const t=i();return null!=e?e:t}return function(e){const[t,n]=o.useState(e),r=e||t;return o.useEffect((()=>{null==t&&(a+=1,n(`mui-${a}`))}),[t]),r}(e)}},9962:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7294);let o,a=!0,i=!1;const l={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function u(e){e.metaKey||e.altKey||e.ctrlKey||(a=!0)}function s(){a=!1}function c(){"hidden"===this.visibilityState&&i&&(a=!0)}function f(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",u,!0),t.addEventListener("mousedown",s,!0),t.addEventListener("pointerdown",s,!0),t.addEventListener("touchstart",s,!0),t.addEventListener("visibilitychange",c,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return a||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!l[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(i=!0,window.clearTimeout(o),o=window.setTimeout((()=>{i=!1}),100),t.current=!1,!0)},ref:e}}},3113:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={border:0,clip:"rect(0 0 0 0)",height:"1px",margin:-1,overflow:"hidden",padding:0,position:"absolute",whiteSpace:"nowrap",width:"1px"}},2599:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}var o;n.d(t,{RQ:()=>O,WK:()=>M,Zn:()=>k,Zq:()=>E,aU:()=>o,cP:()=>c,fp:()=>p,kG:()=>S,pC:()=>P,q_:()=>i}),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));const a="popstate";function i(e){return void 0===e&&(e={}),function(e,t,n,r){void 0===r&&(r={});let{window:i=document.defaultView,v5Compat:c=!1}=r,d=i.history,p=o.Pop,h=null;function m(){p=o.Pop,h&&h({action:p,location:g.location})}let g={get action(){return p},get location(){return e(i,d)},listen(e){if(h)throw new Error("A history only accepts one active listener");return i.addEventListener(a,m),h=e,()=>{i.removeEventListener(a,m),h=null}},createHref:e=>t(i,e),encodeLocation(e){let t=f("string"==typeof e?e:s(e));return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(e,t){p=o.Push;let r=u(g.location,e,t);n&&n(r,e);let a=l(r),s=g.createHref(r);try{d.pushState(a,"",s)}catch(e){i.location.assign(s)}c&&h&&h({action:p,location:g.location})},replace:function(e,t){p=o.Replace;let r=u(g.location,e,t);n&&n(r,e);let a=l(r),i=g.createHref(r);d.replaceState(a,"",i),c&&h&&h({action:p,location:g.location})},go:e=>d.go(e)};return g}((function(e,t){let{pathname:n="/",search:r="",hash:o=""}=c(e.location.hash.substr(1));return u("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){let n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){let t=e.location.href,n=t.indexOf("#");r=-1===n?t:t.slice(0,n)}return r+"#"+("string"==typeof t?t:s(t))}),(function(e,t){!function(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),e)}function l(e){return{usr:e.state,key:e.key}}function u(e,t,n,o){return void 0===n&&(n=null),r({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?c(t):t,{state:n,key:t&&t.key||o||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function c(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function f(e){let t="undefined"!=typeof window&&void 0!==window.location&&"null"!==window.location.origin?window.location.origin:"unknown://unknown",n="string"==typeof e?e:s(e);return new URL(n,t)}var d;function p(e,t,n){void 0===n&&(n="/");let r=k(("string"==typeof t?c(t):t).pathname||"/",n);if(null==r)return null;let o=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let a=null;for(let e=0;null==a&&e<o.length;++e)a=y(o[e],w(r));return a}function h(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let a={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(S(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));let i=O([r,a.relativePath]),l=n.concat(a);e.children&&e.children.length>0&&(S(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+i+'".'),h(e.children,t,l,i)),(null!=e.path||e.index)&&t.push({path:i,score:v(i,e.index),routesMeta:l})})),t}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(d||(d={}));const m=/^:\w+$/,g=e=>"*"===e;function v(e,t){let n=e.split("/"),r=n.length;return n.some(g)&&(r+=-2),t&&(r+=2),n.filter((e=>!g(e))).reduce(((e,t)=>e+(m.test(t)?3:""===t?1:10)),r)}function y(e,t){let{routesMeta:n}=e,r={},o="/",a=[];for(let e=0;e<n.length;++e){let i=n[e],l=e===n.length-1,u="/"===o?t:t.slice(o.length)||"/",s=b({path:i.relativePath,caseSensitive:i.caseSensitive,end:l},u);if(!s)return null;Object.assign(r,s.params);let c=i.route;a.push({params:r,pathname:O([o,s.pathname]),pathnameBase:C(O([o,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(o=O([o,s.pathnameBase]))}return a}function b(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),x("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let a=o[0],i=a.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=l[n]||"";i=a.slice(0,a.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return x(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(l[n]||"",t),e}),{}),pathname:a,pathnameBase:i,pattern:e}}function w(e){try{return decodeURI(e)}catch(t){return x(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function k(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function S(e,t){if(!1===e||null==e)throw new Error(t)}function x(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function _(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function E(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}function P(e,t,n,o){let a;void 0===o&&(o=!1),"string"==typeof e?a=c(e):(a=r({},e),S(!a.pathname||!a.pathname.includes("?"),_("?","pathname","search",a)),S(!a.pathname||!a.pathname.includes("#"),_("#","pathname","hash",a)),S(!a.search||!a.search.includes("#"),_("#","search","hash",a)));let i,l=""===e||""===a.pathname,u=l?"/":a.pathname;if(o||null==u)i=n;else{let e=t.length-1;if(u.startsWith("..")){let t=u.split("/");for(;".."===t[0];)t.shift(),e-=1;a.pathname=t.join("/")}i=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?c(e):e,a=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:a,search:j(r),hash:T(o)}}(a,i),f=u&&"/"!==u&&u.endsWith("/"),d=(l||"."===u)&&n.endsWith("/");return s.pathname.endsWith("/")||!f&&!d||(s.pathname+="/"),s}const O=e=>e.join("/").replace(/\/\/+/g,"/"),C=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),j=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",T=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";class R extends Error{}class L{constructor(e,t,n,r){void 0===r&&(r=!1),this.status=e,this.statusText=t||"",this.internal=r,n instanceof Error?(this.data=n.toString(),this.error=n):this.data=n}}function M(e){return e instanceof L}const N=["post","put","patch","delete"],I=(new Set(N),["get",...N]);new Set(I),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement},9031:(e,t,n)=>{"use strict";n.d(t,{VH:()=>u,pG:()=>s,rS:()=>p});var r=n(4572),o=n(6535),a=n(185);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,r.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u={":hover":{borderBottom:"1px dashed #000000"},"&.Mui-focused":{borderBottom:"1px dashed #000000"}},s=240,c=(0,a.ZP)({palette:{secondary:{light:"#fff5f8",main:"#ff3366",dark:"#e62958"}},typography:{fontFamily:"Circular, -apple-system, BlinkMacSystemFont, Roboto, Helvetica Neue, sans-serif",fontSize:16,fontWeightLight:300,fontWeightRegular:400,fontWeightMedium:600}}),f={color:c.palette.text.primary,fontWeight:c.typography.fontWeightMedium},d={MuiAppBar:{styleOverrides:{root:{backgroundColor:c.palette.common.white,borderColor:"#f5f5f5",border:"solid thin #f5f5f5",boxShadow:"none"}}},MuiCard:{styleOverrides:{root:{borderRadius:"18px"}}},MuiCardHeader:{styleOverrides:{root:{borderBottom:"1px solid rgb(235, 235, 235) !important"}}},MuiCardContent:{styleOverrides:{root:{padding:"32px"}}},MuiCardActions:{styleOverrides:{root:{padding:"0px 32px 32px 32px"}}},MuiButton:{styleOverrides:{root:{textTransform:"none",boxShadow:"none",minWidth:"60px"}}},MuiIconButton:{styleOverrides:{root:{boxShadow:"none"}}},MuiInputBase:{styleOverrides:{root:{resize:"both","& .Mui-error":{color:"red",border:"1px solid red"},".Mui-error":{color:"red",border:"1px solid red"}}}},MuiListSubheader:{styleOverrides:{root:{lineHeight:"32px"}}}},p=l(l({},c),{},{palette:l(l({},c.palette),{},{background:l(l({},c.palette.background),{},{backgroundColor:c.palette.common.black,default:c.palette.common.white,placeholder:o.Z[200]})}),typography:l(l({},c.typography),{},{fontHeader:f,h1:l(l(l({},c.typography.h1),f),{},{letterSpacing:0,fontSize:32}),h2:l(l(l({},c.typography.h2),f),{},{fontSize:26}),h3:l(l(l({},c.typography.h3),f),{},{fontSize:22}),h4:l(l(l({},c.typography.h4),f),{},{fontSize:20}),h5:l(l({},c.typography.h5),{},{fontWeight:c.typography.fontWeightLight,fontSize:18}),h6:l(l(l({},c.typography.h6),f),{},{fontSize:16}),subtitle1:l(l({},c.typography.subtitle1),{},{fontSize:14}),body1:l(l({},c.typography.body1),{},{fontWeight:c.typography.fontWeightRegular,fontSize:14}),body2:l(l({},c.typography.body2),{},{fontSize:12})}),components:d})},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o});const o=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},1247:function(e,t,n){!function(e){"use strict";var t={};Object.defineProperty(t,"__esModule",{value:!0});var r={getItem:function(e,t){return r.multiGet([e]).then((function(e){return e[0][1]})).then((function(e){return t&&t(null,e),e})).catch((function(e){return t&&t(e,null),e}))},setItem:function(e,t,n){return r.multiSet([[e,t]]).then((function(e){return n&&n(null,e),e})).catch((function(e){return n&&n(e,null),e}))},getAllKeys:function(e){return Promise.resolve(Object.keys(localStorage)).then((function(t){return e&&e(null,t),t})).catch((function(t){return e&&e(t,null),t}))},removeItem:function(e,t){return r.multiRemove([e]).then((function(){t&&t(null)})).catch((function(e){t&&t(e,null)}))},clear:function(){return new Promise((function(e){window.localStorage.clear(),e()}))},multiGet:function(e){return new Promise((function(t){t(e.reduce((function(e,t){return e.concat([[t,localStorage.getItem(t)]])}),[]))}))},multiSet:function(e){return new Promise((function(t,n){var r=[];return e.forEach((function(e){var t=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&l.return&&l.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(e,2),n=t[0],o=t[1];try{localStorage.setItem(n,o)}catch(e){r.push(e)}})),r.length>0?n(r):t()}))},multiRemove:function(e){return new Promise((function(t){e.forEach((function(e){return window.localStorage.removeItem(e)})),t()}))},flushGetRequests:function(){console.warn("AsyncStorage.flushGetRequests: Not supported on `web`")}},o=t.default=r,a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};function i(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}var l,u,s=function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){if(t.constructor!==n.constructor)return!1;var r,o,a;if(Array.isArray(t)){if((r=t.length)!=n.length)return!1;for(o=r;0!=o--;)if(!e(t[o],n[o]))return!1;return!0}if(t.constructor===RegExp)return t.source===n.source&&t.flags===n.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===n.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===n.toString();if((r=(a=Object.keys(t)).length)!==Object.keys(n).length)return!1;for(o=r;0!=o--;)if(!Object.prototype.hasOwnProperty.call(n,a[o]))return!1;for(o=r;0!=o--;){var i=a[o];if(!e(t[i],n[i]))return!1}return!0}return t!=t&&n!=n},c=null,f="BULLET_TRAIN_DB",d="BULLET_TRAIN_EVENT",p="https://edge.api.flagsmith.com/api/v1/",h=function(e){return"Attempted to "+e+" a user before calling flagsmith.init. Call flagsmith.init first, if you wish to prevent it sending a request for flags, call init with preventFetch:true."},m=function(){function e(e){var t=this;this.eventSource=null,this.getJSON=function(e,n,r){var o=t,a=o.environmentID,i=o.headers,u={method:n||"GET",body:r,headers:{"x-environment-key":"".concat(a)}};return n&&"GET"!==n&&(u.headers["Content-Type"]="application/json; charset=utf-8"),i&&Object.assign(u.headers,i),l||console.error("Flagsmith: fetch is undefined, please specify a fetch implementation into flagsmith.init to support SSR."),l(e,u).then((function(r){return t.log("Fetch response: "+r.status+" "+(n||"GET")+0+e),r.text().then((function(e){var t=e;try{t=JSON.parse(e)}catch(e){}return r.status>=200&&r.status?t:Promise.reject(t)}))})).catch((function(e){throw console.error("Flagsmith: Fetch error: "+e),new Error("Flagsmith: Fetch error:"+e)}))},this.getFlags=function(e,n){var r=t,o=r.onChange,i=r.onError,l=r.identity,u=r.api,c=!1;t.log("Get Flags");var f=function(e){var n=e.flags,r=e.traits;l&&(t.withTraits=null);var i={},u={};r=r||[],(n=n||[]).forEach((function(e){i[e.feature.name.toLowerCase().replace(/ /g,"_")]={id:e.feature.id,enabled:e.enabled,value:e.feature_state_value}})),r.forEach((function(e){u[e.trait_key.toLowerCase().replace(/ /g,"_")]=e.trait_value})),t.oldFlags=a({},t.flags);var c=s(t.flags,i),f=s(t.traits,u);if(t.flags=i,t.traits=u,t.updateStorage(),t.dtrum){var d={javaDouble:{},date:{},shortString:{},javaLongOrObject:{}};Object.keys(t.flags).map((function(e){y(d,"flagsmith_value_"+e,t.getValue(e)),y(d,"flagsmith_enabled_"+e,t.hasFeature(e))})),Object.keys(t.traits).map((function(e){y(d,"flagsmith_trait_"+e,t.getTrait(e))})),t.log("Sending javaLongOrObject traits to dynatrace",d.javaLongOrObject),t.log("Sending date traits to dynatrace",d.date),t.log("Sending shortString traits to dynatrace",d.shortString),t.log("Sending javaDouble to dynatrace",d.javaDouble),t.dtrum.sendSessionProperties(d.javaLongOrObject,d.date,d.shortString,d.javaDouble)}t.trigger&&(t.log("trigger called"),t.trigger()),o&&o(t.oldFlags,{isFromServer:!0,flagsChanged:!c,traitsChanged:!f})};return l?Promise.all([t.withTraits?t.getJSON(u+"identities/","POST",JSON.stringify({identifier:l,traits:Object.keys(t.withTraits).map((function(e){return{trait_key:e,trait_value:t.withTraits[e]}}))})):t.getJSON(u+"identities/?identifier="+encodeURIComponent(l))]).then((function(n){t.withTraits=null,f(n[0]),e&&!c&&(c=!0,e())})).catch((function(e){var t=e.message;i&&i({message:t})})):Promise.all([t.getJSON(u+"flags/")]).then((function(t){f({flags:t[0],traits:void 0}),e&&!c&&(c=!0,e())})).catch((function(e){n&&!c&&(c=!0,n(e)),i&&i(e)}))},this.analyticsFlags=function(){var e=t.api;if(t.evaluationEvent&&t.evaluationEvent[t.environmentID])return t.evaluationEvent&&0!==Object.getOwnPropertyNames(t.evaluationEvent).length&&0!==Object.getOwnPropertyNames(t.evaluationEvent[t.environmentID]).length?t.getJSON(e+"analytics/flags/","POST",JSON.stringify(t.evaluationEvent[t.environmentID])).then((function(e){var n=t.getState();t.evaluationEvent||(t.evaluationEvent={}),t.evaluationEvent[t.environmentID]={},t.setState(a(a({},n),{evaluationEvent:t.evaluationEvent})),t.updateEventStorage()})).catch((function(e){t.log("Exception fetching evaluationEvent",e)})):void 0},this.canUseStorage=!1,this.analyticsInterval=null,this.api=null,this.cacheFlags=!1,this.ts=null,this.enableAnalytics=!1,this.enableLogs=!1,this.environmentID="",this.evaluationEvent=null,this.flags=null,this.getFlagInterval=null,this.headers=null,this.initialised=!1,this.oldFlags=null,this.onChange=null,this.onError=null,this.trigger=null,this.identity=null,this.ticks=null,this.timer=null,this.traits=null,this.dtrum=null,this.withTraits=null,this.cacheOptions={ttl:0,skipAPI:!1},this.evaluateFlag=function(e){if(t.enableAnalytics){if(!t.evaluationEvent)return;t.evaluationEvent[t.environmentID]||(t.evaluationEvent[t.environmentID]={}),void 0===t.evaluationEvent[t.environmentID][e]&&(t.evaluationEvent[t.environmentID][e]=0),t.evaluationEvent[t.environmentID][e]+=1}t.updateEventStorage()},this.getValue=function(e,n){var r=t.flags&&t.flags[e.toLowerCase().replace(/ /g,"_")],o=null;if(r&&(o=r.value),t.evaluateFlag(e),null==n?void 0:n.json)try{return null===o?(t.log("Tried to parse null flag as JSON: "+e),n.fallback):JSON.parse(o)}catch(e){return n.fallback}return o},this.getTrait=function(e){return t.traits&&t.traits[e.toLowerCase().replace(/ /g,"_")]},this.getAllTraits=function(){return t.traits},this.setTrait=function(e,n){if(t.api){var r={};return r[e]=n,t.setTraits(r)}console.error(h("setTrait"))},this.setTraits=function(e){if(t.api){if(e&&"object"==typeof e||console.error("Expected object for flagsmith.setTraits"),t.withTraits=a(a({},t.withTraits||{}),e),t.identity)return t.initialised?t.getFlags():void 0;t.log("Set traits prior to identifying",t.withTraits)}else console.error(h("setTraits"))},this.hasFeature=function(e){var n=t.flags&&t.flags[e.toLowerCase().replace(/ /g,"_")],r=!1;return n&&n.enabled&&(r=!0),t.evaluateFlag(e),r},l=e.fetch?e.fetch:"undefined"!=typeof fetch?fetch:null===n.g||void 0===n.g?void 0:n.g.fetch,this.canUseStorage="undefined"!=typeof window||!!e.browserlessStorage,this.log("Constructing flagsmith instance "+e),e.eventSource&&(u=e.eventSource),e.AsyncStorage&&(c=e.AsyncStorage)}return e.prototype.init=function(e){var t=this,n=e.environmentID,r=e.api,o=void 0===r?p:r,i=e.headers,s=e.onChange,h=e.cacheFlags,m=e.onError,g=e.defaultFlags,v=e.fetch,y=e.preventFetch,b=e.enableLogs,w=e.enableDynatrace,k=e.enableAnalytics,S=e.realtime,x=e.eventSourceUrl,_=void 0===x?"https://realtime.flagsmith.com/":x,E=e.AsyncStorage,P=e.identity,O=e.traits,C=e._trigger,j=e.state,T=e.cacheOptions,R=e.angularHttpClient;return new Promise((function(e,r){if(t.environmentID=n,t.api=o,t.headers=i,t.getFlagInterval=null,t.analyticsInterval=null,t.onChange=s,t.trigger=C||t.trigger,t.onError=m,t.identity=P,t.withTraits=O,t.enableLogs=b||!1,t.cacheOptions=T?{skipAPI:!!T.skipAPI,ttl:T.ttl||0}:t.cacheOptions,!t.cacheOptions.ttl&&t.cacheOptions.skipAPI&&console.warn("Flagsmith: you have set a cache ttl of 0 and are skipping API calls, this means the API will not be hit unless you clear local storage."),v&&(l=v),t.enableAnalytics=k||!1,t.flags=Object.assign({},g)||{},t.initialised=!0,t.ticks=1e4,S&&"undefined"!=typeof window){var p=_+"sse/environments/"+n+"/stream";u?t.eventSource||(t.log("Creating event source with url "+p),t.eventSource=new u(p),t.eventSource.addEventListener("environment_updated",(function(e){t.log("Received eventsource message"),t.getFlags()}))):t.log("Error, EventSource is undefined")}if(t.log("Initialising with properties",{environmentID:n,api:o,headers:i,onChange:s,cacheFlags:h,onError:m,defaultFlags:g,preventFetch:y,enableLogs:b,enableAnalytics:k,AsyncStorage:c,identity:P,traits:O,_trigger:C,state:j,angularHttpClient:R},t),t.timer=t.enableLogs?(new Date).valueOf():null,E&&(c=E),t.cacheFlags=void 0!==c&&!!h,t.setState(j),!n)throw r("Please specify a environment id"),"Please specify a environment id";w&&("undefined"==typeof dtrum?console.error("You have attempted to enable dynatrace but dtrum is undefined, please check you have the Dynatrace RUM JavaScript API installed."):t.dtrum=dtrum),R&&(l=function(e,t){var n=t.headers,r=t.method,o=t.body;return new Promise((function(t){switch(r){case"GET":return R.get(e,{headers:n}).subscribe((function(e){t({ok:!0,text:function(){return Promise.resolve(e)}})}));case"POST":case"PUT":return R.post(e,o,{headers:n}).subscribe((function(e){t({ok:!0,text:function(){return Promise.resolve(e)}})}))}}))}),c&&t.canUseStorage&&c.getItem(d).then((function(e){if(e)try{t.evaluationEvent=JSON.parse(e)}catch(e){t.evaluationEvent={}}else t.evaluationEvent={};return t.analyticsInterval=setInterval(t.analyticsFlags,t.ticks),!0})),t.enableAnalytics&&(t.analyticsInterval&&clearInterval(t.analyticsInterval),c&&t.canUseStorage&&c.getItem(d,(function(e,n){if(n){var r=JSON.parse(n);r[t.environmentID]&&(j=t.getState(),t.log("Retrieved events from cache",n),t.setState(a(a({},j),{evaluationEvent:r[t.environmentID]})))}return!0}))),h?c&&t.canUseStorage&&c.getItem(f,(function(n,o){if(o)try{var a=JSON.parse(o),i=!1;if(a&&a.api===t.api&&a.environmentID===t.environmentID){var l=!0;t.identity&&a.identity!==t.identity&&(t.log("Ignoring cache,  identity has changed from "+a.identity+" to "+t.identity),l=!1),t.cacheOptions.ttl&&(!a.ts||(new Date).valueOf()-a.ts>t.cacheOptions.ttl)&&a.ts&&(t.log("Ignoring cache, timestamp is too old ts:"+a.ts+" ttl: "+t.cacheOptions.ttl+" time elapsed since cache: "+((new Date).valueOf()-a.ts)+"ms"),l=!1),l&&(i=!0,t.setState(a),t.log("Retrieved flags from cache",a))}t.flags?(t.trigger&&(t.log("trigger called"),t.trigger()),t.onChange&&(t.log("onChange called"),t.onChange(null,{isFromServer:!1,flagsChanged:!0,traitsChanged:!!t.traits})),t.oldFlags=t.flags,e(!0),t.cacheOptions.skipAPI&&i&&t.log("Skipping API, using cache"),y||t.cacheOptions.skipAPI&&i||t.getFlags()):y?e(!0):t.getFlags(e,r)}catch(e){t.log("Exception fetching cached logs",e)}else y?(g&&(t.trigger&&(t.log("trigger called"),t.trigger()),t.onChange&&(t.log("onChange called"),t.onChange(null,{isFromServer:!1,flagsChanged:!0,traitsChanged:!!t.traits}))),e(!0)):t.getFlags(e,r);return!0})):y?(g&&(t.trigger&&(t.log("trigger called"),t.trigger()),t.onChange&&(t.log("onChange called"),t.onChange(null,{isFromServer:!1,flagsChanged:!0,traitsChanged:!!t.traits}))),e(!0)):t.getFlags(e,r)})).catch((function(e){t.log("Error during initialisation ",e),m&&m(e)}))},e.prototype.getAllFlags=function(){return this.flags},e.prototype.identify=function(e,t){return this.identity=e,this.log("Identify: "+this.identity),t&&(this.withTraits=a(a({},this.withTraits||{}),t)),this.initialised?this.getFlags():Promise.resolve()},e.prototype.getState=function(){return{api:this.api,environmentID:this.environmentID,flags:this.flags,identity:this.identity,ts:this.ts,traits:this.traits,evaluationEvent:this.evaluationEvent}},e.prototype.setState=function(e){e&&(this.initialised=!0,this.api=e.api||this.api||p,this.environmentID=e.environmentID||this.environmentID,this.flags=e.flags||this.flags,this.identity=e.identity||this.identity,this.traits=e.traits||this.traits,this.evaluationEvent=e.evaluationEvent||this.evaluationEvent,this.log("setState called",this))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this.enableLogs&&console.log.apply(this,i(["FLAGSMITH:",(new Date).valueOf()-(this.timer||0),"ms"],e,!0))},e.prototype.updateStorage=function(){if(this.cacheFlags){this.ts=(new Date).valueOf();var e=JSON.stringify(this.getState());this.log("Setting storage",e),c.setItem(f,e)}},e.prototype.updateEventStorage=function(){if(this.enableAnalytics){var e=JSON.stringify(this.getState().evaluationEvent);this.log("Setting event storage",e),c.setItem(d,e)}},e.prototype.logout=function(){return this.identity=null,this.traits=null,this.initialised?this.getFlags():Promise.resolve()},e.prototype.startListening=function(e){void 0===e&&(e=1e3),this.getFlagInterval&&clearInterval(this.getFlagInterval),this.getFlagInterval=setInterval(this.getFlags,e)},e.prototype.stopListening=function(){this.getFlagInterval&&(clearInterval(this.getFlagInterval),this.getFlagInterval=null)},e.prototype.getSegments=function(){},e}();function g(e){var t=e.fetch;e.browserlessStorage;var n=e.AsyncStorage,r=e.eventSource;return new m({fetch:t,AsyncStorage:n,eventSource:r})}var v,y=function(e,t,n){var r="shortString",o=!0;"number"==typeof n&&(r="javaDouble",o=!1),e[r]=e[r]||{},e[r][t]=o?n+"":n},b=(v=function(e,t){return v=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},v(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}v(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),w=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},k=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,a=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=a.next()).done;)i.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=a.return)&&n.call(a)}finally{if(o)throw o.error}}return i},S=function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},x=function(e){function t(){return e.call(this,"EventSource not available.\nConsider loading an EventSource polyfill and making it available globally as EventSource, or passing one in as eventSourceClass to the ReconnectingEventSource constructor.")||this}return b(t,e),t}(Error),_=function(){function e(e,t){var n=this;if(this.CONNECTING=0,this.OPEN=1,this.CLOSED=2,this._configuration=null!=t?Object.assign({},t):void 0,this.withCredentials=!1,this._eventSource=null,this._lastEventId=null,this._timer=null,this._listeners={open:[],error:[],message:[]},this.url=e.toString(),this.readyState=this.CONNECTING,this.max_retry_time=3e3,this.eventSourceClass=globalThis.EventSource,null!=this._configuration&&(this._configuration.lastEventId&&(this._lastEventId=this._configuration.lastEventId,delete this._configuration.lastEventId),this._configuration.max_retry_time&&(this.max_retry_time=this._configuration.max_retry_time,delete this._configuration.max_retry_time),this._configuration.eventSourceClass&&(this.eventSourceClass=this._configuration.eventSourceClass,delete this._configuration.eventSourceClass)),null==this.eventSourceClass||"function"!=typeof this.eventSourceClass)throw new x;this._onevent_wrapped=function(e){n._onevent(e)},this._start()}return e.prototype.dispatchEvent=function(e){throw new Error("Method not implemented.")},e.prototype._start=function(){var e,t,n=this,r=this.url;this._lastEventId&&(-1===r.indexOf("?")?r+="?":r+="&",r+="lastEventId="+encodeURIComponent(this._lastEventId)),this._eventSource=new this.eventSourceClass(r,this._configuration),this._eventSource.onopen=function(e){n._onopen(e)},this._eventSource.onerror=function(e){n._onerror(e)},this._eventSource.onmessage=function(e){n.onmessage(e)};try{for(var o=w(Object.keys(this._listeners)),a=o.next();!a.done;a=o.next()){var i=a.value;this._eventSource.addEventListener(i,this._onevent_wrapped)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}},e.prototype._onopen=function(e){0===this.readyState&&(this.readyState=1,this.onopen(e))},e.prototype._onerror=function(e){var t=this;if(1===this.readyState&&(this.readyState=0,this.onerror(e)),this._eventSource&&2===this._eventSource.readyState){this._eventSource.close(),this._eventSource=null;var n=Math.round(this.max_retry_time*Math.random());this._timer=setTimeout((function(){return t._start()}),n)}},e.prototype._onevent=function(e){var t,n;e instanceof MessageEvent&&(this._lastEventId=e.lastEventId);var r=this._listeners[e.type];if(null!=r)try{for(var o=w(S([],k(r),!1)),a=o.next();!a.done;a=o.next())a.value.call(this,e)}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}"message"===e.type&&this.onmessage(e)},e.prototype.onopen=function(e){},e.prototype.onerror=function(e){},e.prototype.onmessage=function(e){},e.prototype.close=function(){this._timer&&(clearTimeout(this._timer),this._timer=null),this._eventSource&&(this._eventSource.close(),this._eventSource=null),this.readyState=2},e.prototype.addEventListener=function(e,t,n){null==this._listeners[e]&&(this._listeners[e]=[],null!=this._eventSource&&this._eventSource.addEventListener(e,this._onevent_wrapped));var r=this._listeners[e];r.includes(t)||(this._listeners[e]=S(S([],k(r),!1),[t],!1))},e.prototype.removeEventListener=function(e,t,n){var r=this._listeners[e];this._listeners[e]=r.filter((function(e){return e!==t}))},e}(),E=function(e,t){return t=t||{},new Promise((function(n,r){var o=new XMLHttpRequest,a=[],i=[],l={},u=function(){return{ok:2==(o.status/100|0),statusText:o.statusText,status:o.status,url:o.responseURL,text:function(){return Promise.resolve(o.responseText)},json:function(){return Promise.resolve(o.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([o.response]))},clone:u,headers:{keys:function(){return a},entries:function(){return i},get:function(e){return l[e.toLowerCase()]},has:function(e){return e.toLowerCase()in l}}}};for(var s in o.open(t.method||"get",e,!0),o.onload=function(){o.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(e,t,n){a.push(t=t.toLowerCase()),i.push([t,n]),l[t]=l[t]?l[t]+","+n:n})),n(u())},o.onerror=r,o.withCredentials="include"==t.credentials,t.headers)o.setRequestHeader(s,t.headers[s]);o.send(t.body||null)}))},P=g({AsyncStorage:o,fetch:E,eventSource:_});"undefined"!=typeof window&&(window.flagsmith=P),e.createFlagsmithInstance=function(){return g({AsyncStorage:o,fetch:E,eventSource:_})},e.default=P,Object.defineProperty(e,"__esModule",{value:!0})}(t)},1832:function(e,t,n){!function(e,t){"use strict";var n=function(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}(t),r=function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o={exports:{}};function a(){}a.prototype={on:function(e,t,n){var r=this.e||(this.e={});return(r[e]||(r[e]=[])).push({fn:t,ctx:n}),this},once:function(e,t,n){var r=this;function o(){r.off(e,o),t.apply(n,arguments)}return o._=t,this.on(e,o,n)},emit:function(e){for(var t=[].slice.call(arguments,1),n=((this.e||(this.e={}))[e]||[]).slice(),r=0,o=n.length;r<o;r++)n[r].fn.apply(n[r].ctx,t);return this},off:function(e,t){var n=this.e||(this.e={}),r=n[e],o=[];if(r&&t)for(var a=0,i=r.length;a<i;a++)r[a].fn!==t&&r[a].fn._!==t&&o.push(r[a]);return o.length?n[e]=o:delete n[e],this}},o.exports=a,o.exports.TinyEmitter=a;var i=new o.exports.TinyEmitter,l=t.createContext(null),u=function(e){var n=t.useRef(e);return n.current||(n.current=e),n.current},s=function(e){if("string"==typeof e)return[e];if("object"==typeof e&&e.hasOwnProperty("length"))return e;throw new Error("Flagsmith: please supply an array of strings or a single string of flag keys to useFlags")},c=function(e,t,n){return void 0===n&&(n=[]),t.map((function(t){return"".concat(e.getValue(t)).concat(e.hasFeature(t))})).concat(n.map((function(t){return"".concat(e.getTrait(t))}))).join(",")};e.FlagsmithContext=l,e.FlagsmithProvider=function(e){var o=e.flagsmith,a=e.options,u=e.serverState,s=e.children,c=t.useRef(!0);return o&&!(null==o?void 0:o.trigger)&&(o.trigger=function(){o.log("React - trigger event received"),i.emit("event")}),u&&!o.initialised&&o.setState(u),c.current&&(c.current=!1,a&&o.init(r(r({},a),{state:a.state||u,onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];a.onChange&&a.onChange.apply(a,e),i.emit("event")}}))),n.default.createElement(l.Provider,{value:o},s)},e.useFlags=function(e,n){void 0===n&&(n=[]);var r=t.useRef(!0),o=u(s(e)),a=u(s(n)),f=t.useContext(l),d=t.useState(c(f,o)),p=d[0],h=d[1],m=t.useRef(p),g=t.useCallback((function(){null==f||f.log("React - Event listener triggered");var e=c(f,o,a);e!==m.current&&(m.current=e,h(e))}),[]);return r.current&&(r.current=!1,null==f||f.log("React - Initialising event listeners"),i.on("event",g)),t.useEffect((function(){return function(){null==f||f.log("React - Removing event listeners"),i.off("event",g)}}),[]),t.useMemo((function(){null==f||f.log("React - Render key has changed");var e={};return o.map((function(t){e[t]={enabled:f.hasFeature(t),value:f.getValue(t)}})).concat(null==a?void 0:a.map((function(t){e[t]=f.getTrait(t)}))),e}),[p])},e.useFlagsmith=function(){var e=t.useContext(l);if(!e)throw new Error("useFlagsmith must be used with in a FlagsmithProvider");return e},Object.defineProperty(e,"__esModule",{value:!0})}(t,n(7294))},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);f&&(i=i.concat(f(n)));for(var l=u(t),m=u(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var y=d(n,v);try{s(t,v,y)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case g:case m:case u:return e;default:return t}}case o:return t}}}function S(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||k(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===a},t.isLazy=function(e){return k(e)===g},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===i},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=k},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},9258:function(e){var t;t=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}({"./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":function(e,t){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":function(e,t,n){var r=n("./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");e.exports=function(e){if(Array.isArray(e))return r(e)},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/classCallCheck.js":function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/createClass.js":function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/defineProperty.js":function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/interopRequireDefault.js":function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":function(e,t,n){var r=n("./node_modules/@babel/runtime/helpers/typeof.js").default;function o(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,n=new WeakMap;return(o=function(e){return e?n:t})(e)}e.exports=function(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var n=o(t);if(n&&n.has(e))return n.get(e);var a={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if("default"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var u=i?Object.getOwnPropertyDescriptor(e,l):null;u&&(u.get||u.set)?Object.defineProperty(a,l,u):a[l]=e[l]}return a.default=e,n&&n.set(e,a),a},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/iterableToArray.js":function(e,t){e.exports=function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/nonIterableSpread.js":function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/objectWithoutProperties.js":function(e,t,n){var r=n("./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js");e.exports=function(e,t){if(null==e)return{};var n,o,a=r(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js":function(e,t){e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/toConsumableArray.js":function(e,t,n){var r=n("./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js"),o=n("./node_modules/@babel/runtime/helpers/iterableToArray.js"),a=n("./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js"),i=n("./node_modules/@babel/runtime/helpers/nonIterableSpread.js");e.exports=function(e){return r(e)||o(e)||a(e)||i()},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/typeof.js":function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=n=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),n(t)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":function(e,t,n){var r=n("./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},"./node_modules/webpack/buildin/global.js":function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},"./packages/@logrocket/console/src/index.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n("./packages/@logrocket/console/src/registerConsole.js")).default;t.default=o,e.exports=t.default},"./packages/@logrocket/console/src/registerConsole.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=[];return["log","warn","info","error","debug"].forEach((function(n){t.push((0,a.default)(console,n,(function(){for(var t=arguments.length,r=new Array(t),a=0;a<t;a++)r[a]=arguments[a];e.addEvent("lr.core.LogEvent",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=t.isEnabled;return"object"===(0,o.default)(a)&&!1===a[n]||!1===a?null:("error"===n&&t.shouldAggregateConsoleErrors&&i.Capture.captureMessage(e,r[0],r,{},!0),{logLevel:n.toUpperCase(),args:r})}))})))})),function(){t.forEach((function(e){return e()}))}};var o=r(n("./node_modules/@babel/runtime/helpers/typeof.js")),a=r(n("./packages/@logrocket/utils/src/enhanceFunc.js")),i=n("./packages/@logrocket/exceptions/src/index.js");e.exports=t.default},"./packages/@logrocket/exceptions/src/Capture.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.captureMessage=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={exceptionType:o?"CONSOLE":"MESSAGE",message:t,messageArgs:n,browserHref:window.location?window.location.href:""};u(a,r),e.addEvent("lr.core.Exception",(function(){return a}))},t.captureException=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=r||a.default.computeStackTrace(t),l={exceptionType:"WINDOW",errorType:o.name,message:o.message,browserHref:window.location?window.location.href:""};u(l,n);var s={_stackTrace:(0,i.default)(o)};e.addEvent("lr.core.Exception",(function(){return l}),s)};var o=r(n("./node_modules/@babel/runtime/helpers/typeof.js")),a=r(n("./packages/@logrocket/utils/src/TraceKit.js")),i=r(n("./packages/@logrocket/exceptions/src/stackTraceFromError.js"));function l(e){return/boolean|number|string/.test((0,o.default)(e))}function u(e,t){if(t){for(var n=0,r=["level","logger"];n<r.length;n++){var o=r[n],a=t[o];l(a)&&(e[o]=a.toString())}for(var i=0,u=["tags","extra"];i<u.length;i++){for(var s=u[i],c=t[s]||{},f={},d=0,p=Object.keys(c);d<p.length;d++){var h=p[d],m=c[h];l(m)&&(f[h.toString()]=m.toString())}e[s]=f}}}},"./packages/@logrocket/exceptions/src/index.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireWildcard.js"),o=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"registerExceptions",{enumerable:!0,get:function(){return a.default}}),t.Capture=void 0;var a=o(n("./packages/@logrocket/exceptions/src/registerExceptions.js")),i=r(n("./packages/@logrocket/exceptions/src/Capture.js"));t.Capture=i},"./packages/@logrocket/exceptions/src/raven/raven.js":function(e,t,n){"use strict";(function(r){var o=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=o(n("./node_modules/@babel/runtime/helpers/classCallCheck.js")),i=o(n("./node_modules/@babel/runtime/helpers/createClass.js")),l=o(n("./packages/@logrocket/utils/src/TraceKit.js")),u=Object.prototype;function s(e){return"function"==typeof e}function c(e,t,n,r){var o=e[t];e[t]=n(o),r&&r.push([e,t,o])}var f="undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:{},d=(f.document,function(){function e(t){var n=t.captureException;(0,a.default)(this,e),this._errorHandler=this._errorHandler.bind(this),this._ignoreOnError=0,this._wrappedBuiltIns=[],this.captureException=n,l.default.report.subscribe(this._errorHandler),this._instrumentTryCatch()}return(0,i.default)(e,[{key:"uninstall",value:function(){var e;for(l.default.report.unsubscribe(this._errorHandler);this._wrappedBuiltIns.length;){var t=(e=this._wrappedBuiltIns.shift())[0],n=e[1],r=e[2];t[n]=r}}},{key:"_errorHandler",value:function(e){this._ignoreOnError||this.captureException(e)}},{key:"_ignoreNextOnError",value:function(){var e=this;this._ignoreOnError+=1,setTimeout((function(){e._ignoreOnError-=1}))}},{key:"context",value:function(e,t,n){return s(e)&&(n=t||[],t=e,e=void 0),this.wrap(e,t).apply(this,n)}},{key:"wrap",value:function(e,t,n){var r,o,a=this;if(void 0===t&&!s(e))return e;if(s(e)&&(t=e,e=void 0),!s(t))return t;try{if(t.__lr__)return t;if(t.__lr_wrapper__)return t.__lr_wrapper__;if(!Object.isExtensible(t))return t}catch(e){return t}function i(){var r=[],o=arguments.length,i=!e||e&&!1!==e.deep;for(n&&s(n)&&n.apply(this,arguments);o--;)r[o]=i?a.wrap(e,arguments[o]):arguments[o];try{return t.apply(this,r)}catch(t){throw a._ignoreNextOnError(),a.captureException(l.default.computeStackTrace(t),e),t}}for(var c in t)r=t,o=c,u.hasOwnProperty.call(r,o)&&(i[c]=t[c]);return i.prototype=t.prototype,t.__lr_wrapper__=i,i.__lr__=!0,i.__inner__=t,i}},{key:"_instrumentTryCatch",value:function(){var e=this,t=e._wrappedBuiltIns;function n(t){return function(n,r){for(var o=new Array(arguments.length),a=0;a<o.length;++a)o[a]=arguments[a];var i=o[0];return s(i)&&(o[0]=e.wrap(i)),t.apply?t.apply(this,o):t(o[0],o[1])}}function r(n){var r=f[n]&&f[n].prototype;r&&r.hasOwnProperty&&r.hasOwnProperty("addEventListener")&&(c(r,"addEventListener",(function(t){return function(n,r,o,a){try{r&&r.handleEvent&&(r.handleEvent=e.wrap(r.handleEvent))}catch(e){}return t.call(this,n,e.wrap(r,void 0,void 0),o,a)}}),t),c(r,"removeEventListener",(function(e){return function(t,n,r,o){try{n=n&&(n.__lr_wrapper__?n.__lr_wrapper__:n)}catch(e){}return e.call(this,t,n,r,o)}}),t))}c(f,"setTimeout",n,t),c(f,"setInterval",n,t),f.requestAnimationFrame&&c(f,"requestAnimationFrame",(function(t){return function(n){return t(e.wrap(n))}}),t);for(var o=["EventTarget","Window","Node","ApplicationCache","AudioTrackList","ChannelMergerNode","CryptoOperation","EventSource","FileReader","HTMLUnknownElement","IDBDatabase","IDBRequest","IDBTransaction","KeyOperation","MediaController","MessagePort","ModalWindow","Notification","SVGElementInstance","Screen","TextTrack","TextTrackCue","TextTrackList","WebSocket","WebSocketWorker","Worker","XMLHttpRequest","XMLHttpRequestEventTarget","XMLHttpRequestUpload"],a=0;a<o.length;a++)r(o[a]);var i=f.jQuery||f.$;i&&i.fn&&i.fn.ready&&c(i.fn,"ready",(function(t){return function(n){return t.call(this,e.wrap(n))}}),t)}}]),e}());t.default=d,e.exports=t.default}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./packages/@logrocket/exceptions/src/registerExceptions.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireWildcard.js"),o=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=new a.default({captureException:function(t){i.captureException(e,null,null,t)}}),n=function(t){e.addEvent("lr.core.Exception",(function(){return{exceptionType:"UNHANDLED_REJECTION",message:t.reason||"Unhandled Promise rejection"}}))};return window.addEventListener("unhandledrejection",n),function(){window.removeEventListener("unhandledrejection",n),t.uninstall()}};var a=o(n("./packages/@logrocket/exceptions/src/raven/raven.js")),i=r(n("./packages/@logrocket/exceptions/src/Capture.js"));e.exports=t.default},"./packages/@logrocket/exceptions/src/stackTraceFromError.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){function t(e){return null===e?void 0:e}return e.stack?e.stack.map((function(e){return{lineNumber:t(e.line),columnNumber:t(e.column),fileName:t(e.url),functionName:t(e.func)}})):void 0},e.exports=t.default},"./packages/@logrocket/network/src/fetchIntercept.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=r(n("./node_modules/@babel/runtime/helpers/toConsumableArray.js")),a=n("./packages/@logrocket/network/src/registerXHR.js"),i=[];function l(e,t){for(var n=i.reduce((function(e,t){return[t].concat(e)}),[]),r=arguments.length,l=new Array(r>2?r-2:0),u=2;u<r;u++)l[u-2]=arguments[u];var s=Promise.resolve(l);return n.forEach((function(e){var n=e.request,r=e.requestError;(n||r)&&(s=s.then((function(e){return n.apply(void 0,[t].concat((0,o.default)(e)))}),(function(e){return r.apply(void 0,[t].concat((0,o.default)(e)))})))})),s=s.then((function(t){var n,r;(0,a.setActive)(!1);try{n=e.apply(void 0,(0,o.default)(t))}catch(e){r=e}if((0,a.setActive)(!0),r)throw r;return n})),n.forEach((function(e){var n=e.response,r=e.responseError;(n||r)&&(s=s.then((function(e){return n(t,e)}),(function(e){return r&&r(t,e)})))})),s}var u=!1,s={register:function(e){return u||(u=!0,function(e){if(e.fetch&&e.Promise){var t=e.fetch.polyfill;e.fetch=function(e){var t=0;return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return l.apply(void 0,[e,t++].concat(r))}}(e.fetch),t&&(e.fetch.polyfill=t)}}(window)),i.push(e),function(){var t=i.indexOf(e);t>=0&&i.splice(t,1)}},clear:function(){i=[]}};t.default=s,e.exports=t.default},"./packages/@logrocket/network/src/index.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{isReactNative:!1},n=t.isReactNative,r=t.shouldAugmentNPS,o=t.shouldParseXHRBlob,c={},d=function(e){var t=e;if("object"===(0,a.default)(e)&&null!=e){var n=Object.getPrototypeOf(e);n!==Object.prototype&&null!==n||(t=JSON.stringify(e))}if(t&&t.length&&t.length>4096e3&&"string"==typeof t){var r=t.substring(0,1e3);return"".concat(r," ... LogRocket truncating to first 1000 characters.\n      Keep data under 4MB to prevent truncation. https://docs.logrocket.com/reference#network")}return e},p=function(t,n){var r=n.method;e.addEvent("lr.network.RequestEvent",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=e.isEnabled,a=void 0===o||o,i=e.requestSanitizer,l=void 0===i?function(e){return e}:i;if(!a)return null;var u=null;try{u=l(f(f({},n),{},{reqId:t}))}catch(e){console.error(e)}if(u){var p=u.url;if("undefined"!=typeof document&&"function"==typeof document.createElement){var h=document.createElement("a");h.href=u.url,p=h.href}return{reqId:t,url:p,headers:(0,s.default)(u.headers,(function(e){return"".concat(e)})),body:d(u.body),method:r,referrer:u.referrer||void 0,mode:u.mode||void 0,credentials:u.credentials||void 0}}return c[t]=!0,null}))},h=function(t,n){var r=n.method,o=n.status;e.addEvent("lr.network.ResponseEvent",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},a=e.isEnabled,i=void 0===a||a,l=e.responseSanitizer,u=void 0===l?function(e){return e}:l;if(!i)return null;if(c[t])return delete c[t],null;var p=null;try{p=u(f(f({},n),{},{reqId:t}))}catch(e){console.error(e)}return p?{reqId:t,status:p.status,headers:(0,s.default)(p.headers,(function(e){return"".concat(e)})),body:d(p.body),method:r}:{reqId:t,status:o,headers:{},body:null,method:r}}))},m=function(t){return e.isDisabled||!0===c[t]},g=(0,i.default)({addRequest:p,addResponse:h,isIgnored:m}),v=(0,u.default)({addRequest:p,addResponse:h,isIgnored:m,logger:e,shouldAugmentNPS:r,shouldParseXHRBlob:o}),y=n?function(){}:(0,l.default)(e);return function(){y(),g(),v()}};var o=r(n("./node_modules/@babel/runtime/helpers/defineProperty.js")),a=r(n("./node_modules/@babel/runtime/helpers/typeof.js")),i=r(n("./packages/@logrocket/network/src/registerFetch.js")),l=r(n("./packages/@logrocket/network/src/registerNetworkInformation.js")),u=r(n("./packages/@logrocket/network/src/registerXHR.js")),s=r(n("./packages/@logrocket/utils/src/mapValues.js"));function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){(0,o.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}e.exports=t.default},"./packages/@logrocket/network/src/registerFetch.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.addRequest,n=e.addResponse,r=e.isIgnored,o="fetch-",a={},l=i.default.register({request:function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];var l;if("undefined"!=typeof Request&&r[0]instanceof Request){var s;try{s=r[0].clone().text()}catch(e){s=Promise.resolve("LogRocket fetch error: ".concat(e.message))}l=s.then((function(e){return u(u({},c(r[0])),{},{body:e})}),(function(e){return u(u({},c(r[0])),{},{body:"LogRocket fetch error: ".concat(e.message)})}))}else l=Promise.resolve(u(u({},c(r[1])),{},{url:"".concat(r[0]),body:(r[1]||{}).body}));return l.then((function(n){return a[e]=n.method,t("".concat(o).concat(e),n),r}))},requestError:function(e,t){return Promise.reject(t)},response:function(e,t){var i,l;if(r("".concat(o).concat(e)))return t;try{i=t.clone()}catch(r){var u={url:t.url,status:t.status,headers:s(t.headers),body:"LogRocket fetch error: ".concat(r.message),method:a[e]};return delete a[e],n("".concat(o).concat(e),u),t}try{if(window.TextDecoder){var c=i.body.getReader(),f=new window.TextDecoder("utf-8"),d="";l=c.read().then((function e(t){var n=t.done,r=t.value;if(n)return d;var o=r?f.decode(r,{stream:!0}):"";return d+=o,c.read().then(e)}))}else l=i.text()}catch(e){l=Promise.resolve("LogRocket error reading body: ".concat(e.message))}return l.catch((function(e){if(!("AbortError"===e.name&&e instanceof DOMException))return"LogRocket error reading body: ".concat(e.message)})).then((function(r){var i={url:t.url,status:t.status,headers:s(t.headers),body:r,method:a[e]};delete a[e],n("".concat(o).concat(e),i)})),t},responseError:function(e,t){var r={url:void 0,status:0,headers:{},body:"".concat(t)};return n("".concat(o).concat(e),r),Promise.reject(t)}});return l};var o=r(n("./node_modules/@babel/runtime/helpers/defineProperty.js")),a=r(n("./packages/@logrocket/utils/src/mapValues.js")),i=r(n("./packages/@logrocket/network/src/fetchIntercept.js"));function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){(0,o.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var s=function(e){return(0,a.default)(function(e){if(null==e||"function"!=typeof e.forEach)return e;var t={};return e.forEach((function(e,n){t[n]?t[n]="".concat(t[n],",").concat(e):t[n]="".concat(e)})),t}(e),(function(e){return"".concat(e)}))};function c(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{url:e.url,headers:s(e.headers),method:e.method&&e.method.toUpperCase(),referrer:e.referrer||void 0,mode:e.mode||void 0,credentials:e.credentials||void 0}}e.exports=t.default},"./packages/@logrocket/network/src/registerNetworkInformation.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=void 0;function n(){var n={online:window.navigator.onLine,effectiveType:"UNKOWN"};window.navigator.onLine?window.navigator.connection&&window.navigator.connection.effectiveType&&(n.effectiveType=r[window.navigator.connection.effectiveType]||"UNKNOWN"):n.effectiveType="NONE",t&&n.online===t.online&&n.effectiveType===t.effectiveType||(t=n,e.addEvent("lr.network.NetworkStatusEvent",(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.isEnabled,r=void 0===t||t;return r?n:null})))}return setTimeout(n),window.navigator.connection&&"function"==typeof window.navigator.connection.addEventListener&&window.navigator.connection.addEventListener("change",n),window.addEventListener("online",n),window.addEventListener("offline",n),function(){window.removeEventListener("offline",n),window.removeEventListener("online",n),window.navigator.connection&&"function"==typeof window.navigator.connection.removeEventListener&&window.navigator.connection.removeEventListener("change",n)}};var r={"slow-2g":"SLOW2G","2g":"TWOG","3g":"THREEG","4g":"FOURG"};e.exports=t.default},"./packages/@logrocket/network/src/registerXHR.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.setActive=function(e){u=e},t.default=function(e){var t=e.addRequest,n=e.addResponse,r=e.isIgnored,c=e.logger,f=e.shouldAugmentNPS,d=void 0===f||f,p=e.shouldParseXHRBlob,h=void 0!==p&&p,m=XMLHttpRequest,g=new WeakMap,v=!1,y="xhr-";return window._lrXMLHttpRequest=XMLHttpRequest,XMLHttpRequest=function(e,f){var p=new m(e,f);if(!u)return p;g.set(p,{xhrId:++s,headers:{}});var b=p.open,w=p.send;d&&(p.open=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];try{var r=t[1];if(window.URL&&"function"==typeof window.URL&&0===r.search(l.WOOTRIC_RESPONSES_REGEX)){var o=new window.URL(c.recordingURL);o.searchParams.set("nps","wootric");var a=new window.URL(r),i=a.searchParams.get("response[text]"),u=i?"".concat(i,"\n\n"):"";a.searchParams.set("response[text]","".concat(u,"<").concat(o.href,"|View LogRocket session>")),t[1]=a.href}}catch(e){}return b.apply(this,t)},p.send=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];try{var r=g.get(p);if(window.URL&&"function"==typeof window.URL&&r&&r.url&&0===r.url.search(l.DELIGHTED_RESPONSES_REGEX)&&t.length&&-1!==t[0].indexOf(l.DELIGHTED_FEEDBACK_PREFIX)){var o=new window.URL(c.recordingURL);o.searchParams.set("nps","delighted");var a=encodeURIComponent(o.href),u=t[0].split("&").map((function(e){if((0,i.default)(e,l.DELIGHTED_FEEDBACK_PREFIX)){var t=e===l.DELIGHTED_FEEDBACK_PREFIX;return"".concat(e).concat(t?"":"\n\n","<").concat(a,"|View LogRocket session>")}return e})).join("&");t[0]=u}}catch(e){}return w.apply(this,t)}),(0,a.default)(p,"open",(function(e,t){if(!v){var n=g.get(p);n.method=e,n.url=t}})),(0,a.default)(p,"send",(function(e){if(!v){var n=g.get(p);if(n){var r={url:n.url,method:n.method&&n.method.toUpperCase(),headers:(0,o.default)(n.headers||{},(function(e){return e.join(", ")})),body:e};t("".concat(y).concat(n.xhrId),r)}}})),(0,a.default)(p,"setRequestHeader",(function(e,t){if(!v){var n=g.get(p);n&&(n.headers=n.headers||{},n.headers[e]=n.headers[e]||[],n.headers[e].push(t))}}));var k={readystatechange:function(){if(!v&&4===p.readyState){var e=g.get(p);if(!e)return;if(r("".concat(y).concat(e.xhrId)))return;var t,o=(p.getAllResponseHeaders()||"").split(/[\r\n]+/).reduce((function(e,t){var n=e,r=t.split(": ");if(r.length>0){var o=r.shift(),a=r.join(": ");e[o]?n[o]+=", ".concat(a):n[o]=a}return n}),{});try{switch(p.responseType){case"json":t=c._shouldCloneResponse?JSON.parse(JSON.stringify(p.response)):p.response;break;case"arraybuffer":case"blob":t=p.response;break;case"document":t=p.responseXML;break;case"text":case"":t=p.responseText;break;default:t=""}}catch(e){t="LogRocket: Error accessing response."}var a={url:e.url,status:p.status,headers:o,body:t,method:(e.method||"").toUpperCase()};if(h&&a.body instanceof Blob){var i=new FileReader;i.readAsText(a.body),i.onload=function(){try{a.body=JSON.parse(i.result)}catch(e){}n("".concat(y).concat(e.xhrId),a)}}else n("".concat(y).concat(e.xhrId),a)}}};return Object.keys(k).forEach((function(e){p.addEventListener(e,k[e])})),p},XMLHttpRequest.prototype=m.prototype,["UNSENT","OPENED","HEADERS_RECEIVED","LOADING","DONE"].forEach((function(e){XMLHttpRequest[e]=m[e]})),function(){v=!0,XMLHttpRequest=m}};var o=r(n("./packages/@logrocket/utils/src/mapValues.js")),a=r(n("./packages/@logrocket/utils/src/enhanceFunc.js")),i=r(n("./packages/@logrocket/utils/src/startsWith.js")),l=n("./packages/@logrocket/utils/src/constants/nps.js"),u=!0,s=0},"./packages/@logrocket/now/src/index.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=Date.now.bind(Date),o=r(),a="undefined"!=typeof performance&&performance.now?performance.now.bind(performance):function(){return r()-o};t.default=a,e.exports=t.default},"./packages/@logrocket/redux/src/createEnhancer.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.stateSanitizer,r=void 0===n?function(e){return e}:n,o=t.actionSanitizer,i=void 0===o?function(e){return e}:o;return function(t){return function(n,o,s){var c=t(n,o,s),f=c.dispatch,d=u++;return e.addEvent("lr.redux.InitialState",(function(){var e;try{e=r(c.getState())}catch(e){console.error(e.toString())}return{state:e,storeId:d}})),l(l({},c),{},{dispatch:function(t){var n,o,l=(0,a.default)();try{o=f(t)}catch(e){n=e}finally{var u=(0,a.default)()-l;e.addEvent("lr.redux.ReduxAction",(function(){var e=null,n=null;try{e=r(c.getState()),n=i(t)}catch(e){console.error(e.toString())}return e&&n?{storeId:d,action:n,duration:u,stateDelta:e}:null}))}if(n)throw n;return o}})}}};var o=r(n("./node_modules/@babel/runtime/helpers/defineProperty.js")),a=r(n("./packages/@logrocket/now/src/index.js"));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,o.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var u=0;e.exports=t.default},"./packages/@logrocket/redux/src/createMiddleware.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.stateSanitizer,r=void 0===n?function(e){return e}:n,i=t.actionSanitizer,l=void 0===i?function(e){return e}:i;return function(t){var n=a++;return e.addEvent("lr.redux.InitialState",(function(){var e;try{e=r(t.getState())}catch(e){console.error(e.toString())}return{state:e,storeId:n}})),function(a){return function(i){var u,s,c=(0,o.default)();try{s=a(i)}catch(e){u=e}finally{var f=(0,o.default)()-c;e.addEvent("lr.redux.ReduxAction",(function(){var e=null,o=null;try{e=r(t.getState()),o=l(i)}catch(e){console.error(e.toString())}return e&&o?{storeId:n,action:o,duration:f,stateDelta:e}:null}))}if(u)throw u;return s}}}};var o=r(n("./packages/@logrocket/now/src/index.js")),a=0;e.exports=t.default},"./packages/@logrocket/redux/src/index.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"createEnhancer",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"createMiddleware",{enumerable:!0,get:function(){return a.default}});var o=r(n("./packages/@logrocket/redux/src/createEnhancer.js")),a=r(n("./packages/@logrocket/redux/src/createMiddleware.js"))},"./packages/@logrocket/utils/src/TraceKit.js":function(e,t,n){"use strict";(function(n){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={collectWindowErrors:!0,debug:!1},o="undefined"!=typeof window?window:void 0!==n?n:"undefined"!=typeof self?self:{},a=[].slice,i="?",l=/^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;function u(){return"undefined"==typeof document||void 0===document.location?"":document.location.href}r.report=function(){var e,t,n=[],s=null,c=null,f=null;function d(e,t){var o=null;if(!t||r.collectWindowErrors){for(var i in n)if(n.hasOwnProperty(i))try{n[i].apply(null,[e].concat(a.call(arguments,2)))}catch(e){o=e}if(o)throw o}}function p(t,n,o,a,s){if(f)r.computeStackTrace.augmentStackTraceWithInitialElement(f,n,o,t),h();else if(s)d(r.computeStackTrace(s),!0);else{var c,p={url:n,line:o,column:a},m=void 0,g=t;"[object String]"==={}.toString.call(t)&&(c=t.match(l))&&(m=c[1],g=c[2]),p.func=i,d({name:m,message:g,url:u(),stack:[p]},!0)}return!!e&&e.apply(this,arguments)}function h(){var e=f,t=s;s=null,f=null,c=null,d.apply(null,[e,!1].concat(t))}function m(e,t){var n=a.call(arguments,1);if(f){if(c===e)return;h()}var o=r.computeStackTrace(e);if(f=o,c=e,s=n,setTimeout((function(){c===e&&h()}),o.incomplete?2e3:0),!1!==t)throw e}return m.subscribe=function(r){t||(e=o.onerror,o.onerror=p,t=!0),n.push(r)},m.unsubscribe=function(e){for(var t=n.length-1;t>=0;--t)n[t]===e&&n.splice(t,1)},m.uninstall=function(){t&&(o.onerror=e,t=!1,e=void 0),n=[]},m}(),r.computeStackTrace=function(){function e(e){if(void 0!==e.stack&&e.stack){for(var t,n,r=/^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,o=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|resource|\[native).*?)(?::(\d+))?(?::(\d+))?\s*$/i,a=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i,l=e.stack.split("\n"),s=[],c=(/^(.*) is undefined$/.exec(e.message),0),f=l.length;c<f;++c){if(t=r.exec(l[c])){var d=t[2]&&-1!==t[2].indexOf("native");n={url:d?null:t[2],func:t[1]||i,args:d?[t[2]]:[],line:t[3]?+t[3]:null,column:t[4]?+t[4]:null}}else if(t=a.exec(l[c]))n={url:t[2],func:t[1]||i,args:[],line:+t[3],column:t[4]?+t[4]:null};else{if(!(t=o.exec(l[c])))continue;n={url:t[3],func:t[1]||i,args:t[2]?t[2].split(","):[],line:t[4]?+t[4]:null,column:t[5]?+t[5]:null}}!n.func&&n.line&&(n.func=i),s.push(n)}return s.length?(s[0].column||void 0===e.columnNumber||(s[0].column=e.columnNumber+1),{name:e.name,message:e.message,url:u(),stack:s}):null}}function t(e,t,n,r){var o={url:t,line:n};if(o.url&&o.line){if(e.incomplete=!1,o.func||(o.func=i),e.stack.length>0&&e.stack[0].url===o.url){if(e.stack[0].line===o.line)return!1;if(!e.stack[0].line&&e.stack[0].func===o.func)return e.stack[0].line=o.line,!1}return e.stack.unshift(o),e.partial=!0,!0}return e.incomplete=!0,!1}function n(e,a){for(var l,s,c=/function\s+([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)?\s*\(/i,f=[],d={},p=!1,h=n.caller;h&&!p;h=h.caller)if(h!==o&&h!==r.report){if(s={url:null,func:i,line:null,column:null},h.name?s.func=h.name:(l=c.exec(h.toString()))&&(s.func=l[1]),void 0===s.func)try{s.func=l.input.substring(0,l.input.indexOf("{"))}catch(e){}d[""+h]?p=!0:d[""+h]=!0,f.push(s)}a&&f.splice(0,a);var m={name:e.name,message:e.message,url:u(),stack:f};return t(m,e.sourceURL||e.fileName,e.line||e.lineNumber,e.message||e.description),m}function o(t,o){var a=null;o=null==o?0:+o;try{if(a=e(t))return a}catch(e){if(r.debug)throw e}try{if(a=n(t,o+1))return a}catch(e){if(r.debug)throw e}return{name:t.name,message:t.message,url:u()}}return o.augmentStackTraceWithInitialElement=t,o.computeStackTraceFromStackProp=e,o}();var s=r;t.default=s,e.exports=t.default}).call(this,n("./node_modules/webpack/buildin/global.js"))},"./packages/@logrocket/utils/src/constants/nps.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DELIGHTED_FEEDBACK_PREFIX=t.DELIGHTED_RESPONSES_REGEX=t.WOOTRIC_RESPONSES_REGEX=void 0,t.WOOTRIC_RESPONSES_REGEX=/^https:\/\/production.wootric.com\/responses/,t.DELIGHTED_RESPONSES_REGEX=/^https:\/\/web.delighted.com\/e\/[a-zA-Z-]*\/c/,t.DELIGHTED_FEEDBACK_PREFIX="comment="},"./packages/@logrocket/utils/src/enhanceFunc.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var r=e[t];return e[t]=function(){for(var e,t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];return r&&(e=r.apply(this,o)),n.apply(this,o),e},function(){e[t]=r}},e.exports=t.default},"./packages/@logrocket/utils/src/mapValues.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(null==e)return{};var n={};return Object.keys(e).forEach((function(r){n[r]=t(e[r])})),n},e.exports=t.default},"./packages/@logrocket/utils/src/startsWith.js":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return e&&t&&e.substring(n,n+t.length)===t},e.exports=t.default},"./packages/logrocket/src/LogRocket.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.MAX_QUEUE_SIZE=void 0;var o=r(n("./node_modules/@babel/runtime/helpers/classCallCheck.js")),a=r(n("./node_modules/@babel/runtime/helpers/createClass.js")),i=r(n("./node_modules/@babel/runtime/helpers/defineProperty.js")),l=r(n("./node_modules/@babel/runtime/helpers/objectWithoutProperties.js")),u=r(n("./packages/@logrocket/network/src/index.js")),s=n("./packages/@logrocket/exceptions/src/index.js"),c=r(n("./packages/@logrocket/console/src/index.js")),f=n("./packages/@logrocket/redux/src/index.js");function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}t.MAX_QUEUE_SIZE=1e3;var h=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.ingestServer,n=(0,l.default)(e,["ingestServer"]);return t?p({serverURL:"".concat(t,"/i"),statsURL:"".concat(t,"/s")},n):n},m=function(){function e(){var t=this;(0,o.default)(this,e),this._buffer=[],["log","info","warn","error","debug"].forEach((function(e){t[e]=function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];t.addEvent("lr.core.LogEvent",(function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return"error"===e&&n.shouldAggregateConsoleErrors&&s.Capture.captureMessage(t,r[0],r,{},!0),{logLevel:e.toUpperCase(),args:r}}),{shouldCaptureStackTrace:!0})}})),this._isInitialized=!1,this._installed=[],window._lr_surl_cb=this.getSessionURL.bind(this)}return(0,a.default)(e,[{key:"addEvent",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Date.now();this._run((function(o){o.addEvent(e,t,p(p({},n),{},{timeOverride:r}))}))}},{key:"onLogger",value:function(e){for(this._logger=e;this._buffer.length>0;)this._buffer.shift()(this._logger)}},{key:"_run",value:function(e){if(!this._isDisabled)if(this._logger)e(this._logger);else{if(this._buffer.length>=1e3)return this._isDisabled=!0,console.warn("LogRocket: script did not load. Check that you have a valid network connection."),void this.uninstall();this._buffer.push(e.bind(this))}}},{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this._isInitialized){var n=t.shouldAugmentNPS,r=void 0===n||n,o=t.shouldParseXHRBlob,a=void 0!==o&&o;this._installed.push((0,s.registerExceptions)(this)),this._installed.push((0,u.default)(this,{shouldAugmentNPS:!!r,shouldParseXHRBlob:!!a})),this._installed.push((0,c.default)(this)),this._isInitialized=!0,this._run((function(n){n.init(e,h(t))}))}}},{key:"start",value:function(){this._run((function(e){e.start()}))}},{key:"uninstall",value:function(){this._installed.forEach((function(e){return e()})),this._buffer=[],this._run((function(e){e.uninstall()}))}},{key:"identify",value:function(e,t){this._run((function(n){n.identify(e,t)}))}},{key:"startNewSession",value:function(){this._run((function(e){e.startNewSession()}))}},{key:"track",value:function(e,t){this._run((function(n){n.track(e,t)}))}},{key:"getSessionURL",value:function(e){if("function"!=typeof e)throw new Error("LogRocket: must pass callback to getSessionURL()");this._run((function(t){t.getSessionURL?t.getSessionURL(e):e(t.recordingURL)}))}},{key:"getVersion",value:function(e){this._run((function(t){e(t.version)}))}},{key:"captureMessage",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s.Capture.captureMessage(this,e,[e],t)}},{key:"captureException",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};s.Capture.captureException(this,e,t)}},{key:"version",get:function(){return this._logger&&this._logger.version}},{key:"sessionURL",get:function(){return this._logger&&this._logger.recordingURL}},{key:"recordingURL",get:function(){return this._logger&&this._logger.recordingURL}},{key:"recordingID",get:function(){return this._logger&&this._logger.recordingID}},{key:"threadID",get:function(){return this._logger&&this._logger.threadID}},{key:"tabID",get:function(){return this._logger&&this._logger.tabID}},{key:"reduxEnhancer",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,f.createEnhancer)(this,e)}},{key:"reduxMiddleware",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,f.createMiddleware)(this,e)}},{key:"isDisabled",get:function(){return!!(this._isDisabled||this._logger&&this._logger._isDisabled)}}]),e}();t.default=m},"./packages/logrocket/src/makeLogRocket.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};if("undefined"!=typeof navigator&&"ReactNative"===navigator.product)throw new Error(a);if("undefined"!=typeof window){if(window._disableLogRocket)return i();if(window.MutationObserver&&window.WeakMap){window._lrMutationObserver=window.MutationObserver;var t=new o.default;return e(t),t}}return i()};var o=r(n("./packages/logrocket/src/LogRocket.js")),a="LogRocket does not yet support React Native.",i=function(){return{init:function(){},uninstall:function(){},log:function(){},info:function(){},warn:function(){},error:function(){},debug:function(){},addEvent:function(){},identify:function(){},start:function(){},get threadID(){return null},get recordingID(){return null},get recordingURL(){return null},reduxEnhancer:function(){return function(e){return function(){return e.apply(void 0,arguments)}}},reduxMiddleware:function(){return function(){return function(e){return function(t){return e(t)}}}},track:function(){},getSessionURL:function(){},getVersion:function(){},startNewSession:function(){},onLogger:function(){},setClock:function(){},captureMessage:function(){},captureException:function(){}}};e.exports=t.default},"./packages/logrocket/src/module-npm.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=(0,r(n("./packages/logrocket/src/setup.js")).default)();t.default=o,e.exports=t.default},"./packages/logrocket/src/setup.js":function(e,t,n){"use strict";var r=n("./node_modules/@babel/runtime/helpers/interopRequireDefault.js");Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.enterpriseServer,r=t.sdkVersion,l=void 0===r?"3.0.1":r,u=(0,o.default)(t,["enterpriseServer","sdkVersion"]),s="https://cdn.logrocket.io";if("script"===l)try{var c=document.currentScript,f=c.src.match(/^(https?:\/\/([^\\]+))\/.+$/),d=f&&f[2];d&&i[d]&&(s=f&&f[1],e=i[d])}catch(e){}else s="https://cdn.lr-in-prod.com",e="https://r.lr-in-prod.com";var p=u.sdkServer||n,h=u.ingestServer||n||e,m=(0,a.default)((function(){var e=document.createElement("script");h&&(void 0===window.__SDKCONFIG__&&(window.__SDKCONFIG__={}),window.__SDKCONFIG__.serverURL="".concat(h,"/i"),window.__SDKCONFIG__.statsURL="".concat(h,"/s")),p?e.src="".concat(p,"/logger.min.js"):window.__SDKCONFIG__&&window.__SDKCONFIG__.loggerURL?e.src=window.__SDKCONFIG__.loggerURL:window._lrAsyncScript?e.src=window._lrAsyncScript:e.src="".concat(s,"/logger-1.min.js"),e.async=!0,document.head.appendChild(e),e.onload=function(){"function"==typeof window._LRLogger?m.onLogger(new window._LRLogger({sdkVersion:l})):(console.warn("LogRocket: script execution has been blocked by a product or service."),m.uninstall())},e.onerror=function(){console.warn("LogRocket: script could not load. Check that you have a valid network connection."),m.uninstall()}}));return m};var o=r(n("./node_modules/@babel/runtime/helpers/objectWithoutProperties.js")),a=r(n("./packages/logrocket/src/makeLogRocket.js")),i={"cdn.logrocket.io":"https://r.logrocket.io","cdn.lr-ingest.io":"https://r.lr-ingest.io","cdn.lr-in.com":"https://r.lr-in.com","cdn.lr-in-prod.com":"https://r.lr-in-prod.com","cdn-staging.logrocket.io":"https://staging-i.logrocket.io","cdn-staging.lr-ingest.io":"https://staging-i.lr-ingest.io","cdn-staging.lr-in.com":"https://staging-i.lr-in.com","cdn-staging.lr-in-prod.com":"https://staging-i.lr-in-prod.com"};e.exports=t.default},0:function(e,t,n){e.exports=n("./packages/logrocket/src/module-npm.js")}})},e.exports=t()},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),S=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),_=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),O=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),j=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var M=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var N=Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=N&&e[N]||e["@@iterator"])?e:null}var Z,A=Object.assign;function $(e){if(void 0===Z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);Z=t&&t[1]||""}return"\n"+Z+e}var F=!1;function z(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function D(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case S:return"Portal";case E:return"Profiler";case _:return"StrictMode";case j:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function U(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===_?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function B(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function H(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=H(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function V(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=H(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function K(e,t){var n=t.checked;return A({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=B(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=B(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,B(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Y(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+B(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return A({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:B(n)}}function ae(e,t){var n=B(t.value),r=B(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,xe=null,_e=null;function Ee(e){if(e=wo(e)){if("function"!=typeof Se)throw Error(a(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Pe(e){xe?_e?_e.push(e):_e=[e]:xe=e}function Oe(){if(xe){var e=xe,t=_e;if(_e=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Ce(e,t){return e(t)}function je(){}var Te=!1;function Re(e,t,n){if(Te)return e(t,n);Te=!0;try{return Ce(e,t,n)}finally{Te=!1,(null!==xe||null!==_e)&&(je(),Oe())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Me=!1;if(c)try{var Ne={};Object.defineProperty(Ne,"passive",{get:function(){Me=!0}}),window.addEventListener("test",Ne,Ne),window.removeEventListener("test",Ne,Ne)}catch(ce){Me=!1}function Ie(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ze=!1,Ae=null,$e=!1,Fe=null,ze={onError:function(e){Ze=!0,Ae=e}};function De(e,t,n,r,o,a,i,l,u){Ze=!1,Ae=null,Ie.apply(ze,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ue(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Be(e){if(We(e)!==e)throw Error(a(188))}function He(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Be(o),e;if(i===r)return Be(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ve=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,Ke=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ye=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var kt,St,xt,_t,Et,Pt=!1,Ot=[],Ct=null,jt=null,Tt=null,Rt=new Map,Lt=new Map,Mt=[],Nt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":jt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Zt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function At(e){var t=bo(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ue(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function $t(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Ft(e,t,n){$t(e)&&n.delete(t)}function zt(){Pt=!1,null!==Ct&&$t(Ct)&&(Ct=null),null!==jt&&$t(jt)&&(jt=null),null!==Tt&&$t(Tt)&&(Tt=null),Rt.forEach(Ft),Lt.forEach(Ft)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,zt)))}function Wt(e){function t(t){return Dt(t,e)}if(0<Ot.length){Dt(Ot[0],e);for(var n=1;n<Ot.length;n++){var r=Ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Dt(Ct,e),null!==jt&&Dt(jt,e),null!==Tt&&Dt(Tt,e),Rt.forEach(t),Lt.forEach(t),n=0;n<Mt.length;n++)(r=Mt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Mt.length&&null===(n=Mt[0]).blockedOn;)At(n),null===n.blockedOn&&Mt.shift()}var Ut=w.ReactCurrentBatchConfig,Bt=!0;function Ht(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=1,Vt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function Gt(e,t,n,r){var o=bt,a=Ut.transition;Ut.transition=null;try{bt=4,Vt(e,t,n,r)}finally{bt=o,Ut.transition=a}}function Vt(e,t,n,r){if(Bt){var o=Kt(e,t,n,r);if(null===o)Br(e,t,r,qt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ct=Zt(Ct,e,t,n,r,o),!0;case"dragenter":return jt=Zt(jt,e,t,n,r,o),!0;case"mouseover":return Tt=Zt(Tt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Rt.set(a,Zt(Rt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,Lt.set(a,Zt(Lt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Nt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&kt(a),null===(a=Kt(e,t,n,r))&&Br(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Br(e,t,r,null,n)}}var qt=null;function Kt(e,t,n,r){if(qt=null,null!==(e=bo(e=ke(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ue(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ye:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Yt=null;function en(){if(Yt)return Yt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Yt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return A(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=A({},sn,{view:0,detail:0}),dn=on(fn),pn=A({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(A({},pn,{dataTransfer:0})),gn=on(A({},fn,{relatedTarget:0})),vn=on(A({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=A({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),wn=on(A({},sn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _n(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return _n}var Pn=A({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=on(Pn),Cn=on(A({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),jn=on(A({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=on(A({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=A({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=on(Rn),Mn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,In=null;c&&"documentMode"in document&&(In=document.documentMode);var Zn=c&&"TextEvent"in window&&!In,An=c&&(!Nn||In&&8<In&&11>=In),$n=String.fromCharCode(32),Fn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Dn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Bn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){Pe(r),0<(t=Gr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Vn=null;function qn(e){$r(e,0)}function Kn(e){if(V(ko(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Yn="oninput"in document;if(!Yn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Yn="function"==typeof er.oninput}Jn=Yn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Gn&&(Gn.detachEvent("onpropertychange",nr),Vn=Gn=null)}function nr(e){if("value"===e.propertyName&&Kn(Vn)){var t=[];Hn(t,Vn,e,ke(e)),Re(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Vn=n,(Gn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Vn)}function ar(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==q(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Gr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function kr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:kr("Animation","AnimationEnd"),animationiteration:kr("Animation","AnimationIteration"),animationstart:kr("Animation","AnimationStart"),transitionend:kr("Transition","TransitionEnd")},xr={},_r={};function Er(e){if(xr[e])return xr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in _r)return xr[e]=n[t];return e}c&&(_r=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Pr=Er("animationend"),Or=Er("animationiteration"),Cr=Er("animationstart"),jr=Er("transitionend"),Tr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Tr.set(e,t),u(t,[e])}for(var Mr=0;Mr<Rr.length;Mr++){var Nr=Rr[Mr];Lr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Lr(Pr,"onAnimationEnd"),Lr(Or,"onAnimationIteration"),Lr(Cr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(jr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(De.apply(this,arguments),Ze){if(!Ze)throw Error(a(198));var c=Ae;Ze=!1,Ae=null,$e||($e=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function $r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Ar(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Ar(o,l,s),a=u}}}if($e)throw e=Fe,$e=!1,Fe=null,e}function Fr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var Dr="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Dr]){e[Dr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Zr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Dr]||(t[Dr]=!0,zr("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Qt(t)){case 1:var o=Ht;break;case 4:o=Gt;break;default:o=Vt}n=o.bind(null,t,n,e),o=void 0,!Me||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Br(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Re((function(){var r=a,o=ke(n),i=[];e:{var l=Tr.get(e);if(void 0!==l){var u=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=jn;break;case Pr:case Or:case Cr:u=vn;break;case jr:u=Tn;break;case"scroll":u=dn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Cn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Le(h,d))&&c.push(Hr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Cn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:ko(u),p=null==s?l:ko(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Vr(p))h++;for(p=0,m=d;m;m=Vr(m))p++;for(;0<h-p;)c=Vr(c),h--;for(;0<p-h;)d=Vr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Vr(c),d=Vr(d)}c=null}else c=null;null!==u&&qr(i,l,u,c,!1),null!==s&&null!==f&&qr(i,f,s,c,!0)}if("select"===(u=(l=r?ko(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Qn;else if(Bn(l))if(Xn)g=ir;else{g=or;var v=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?Hn(i,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?ko(r):window,e){case"focusin":(Bn(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var y;if(Nn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Wn=!0)),0<(v=Gr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=Dn(n)))&&(b.data=y))),(y=Zn?function(e,t){switch(e){case"compositionend":return Dn(t);case"keypress":return 32!==t.which?null:(Fn=!0,$n);case"textInput":return(e=t.data)===$n&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Nn&&zn(e,t)?(e=en(),Yt=Jt=Xt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Gr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}$r(i,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Gr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Le(e,n))&&r.unshift(Hr(e,a,o)),null!=(a=Le(e,t))&&r.push(Hr(e,a,o))),e=e.return}return r}function Vr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Le(n,a))&&i.unshift(Hr(n,u,l)):o||null!=(u=Le(n,a))&&i.push(Hr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Kr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Qr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Yr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,vo="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ko(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function So(e){return e[ho]||null}var xo=[],_o=-1;function Eo(e){return{current:e}}function Po(e){0>_o||(e.current=xo[_o],xo[_o]=null,_o--)}function Oo(e,t){_o++,xo[_o]=e.current,e.current=t}var Co={},jo=Eo(Co),To=Eo(!1),Ro=Co;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Mo(e){return null!=e.childContextTypes}function No(){Po(To),Po(jo)}function Io(e,t,n){if(jo.current!==Co)throw Error(a(168));Oo(jo,t),Oo(To,n)}function Zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,U(e)||"Unknown",o));return A({},n,r)}function Ao(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Co,Ro=jo.current,Oo(jo,e),Oo(To,To.current),!0}function $o(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Zo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,Po(To),Po(jo),Oo(jo,e)):Po(To),Oo(To,n)}var Fo=null,zo=!1,Do=!1;function Wo(e){null===Fo?Fo=[e]:Fo.push(e)}function Uo(){if(!Do&&null!==Fo){Do=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,zo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Ve(Ye,Uo),t}finally{bt=t,Do=!1}}return null}var Bo=[],Ho=0,Go=null,Vo=0,qo=[],Ko=0,Qo=null,Xo=1,Jo="";function Yo(e,t){Bo[Ho++]=Vo,Bo[Ho++]=Go,Go=e,Vo=t}function ea(e,t,n){qo[Ko++]=Xo,qo[Ko++]=Jo,qo[Ko++]=Qo,Qo=e;var r=Xo;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Xo=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Yo(e,1),ea(e,1,0))}function na(e){for(;e===Go;)Go=Bo[--Ho],Bo[Ho]=null,Vo=Bo[--Ho],Bo[Ho]=null;for(;e===Qo;)Qo=qo[--Ko],qo[Ko]=null,Jo=qo[--Ko],qo[Ko]=null,Xo=qo[--Ko],qo[Ko]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Rs(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rs(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function sa(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(sa(e))throw Error(a(418));t=so(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(sa(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(sa(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=so(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?so(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=so(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=w.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=A({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=Eo(null),ba=null,wa=null,ka=null;function Sa(){ka=wa=ba=null}function xa(e){var t=ya.current;Po(ya),e._currentValue=t}function _a(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ea(e,t){ba=e,ka=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Pa(e){var t=e._currentValue;if(ka!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var Oa=null;function Ca(e){null===Oa?Oa=[e]:Oa.push(e)}function ja(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ca(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ta(e,r)}function Ta(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ra=!1;function La(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ma(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Na(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ia(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Cu)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ta(e,n)}return null===(o=r.interleaved)?(t.next=t,Ca(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ta(e,n)}function Za(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Aa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function $a(e,t,n,r){var o=e.updateQueue;Ra=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?a=s:i.next=s,i=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,c=s=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=A({},f,d);break e;case 2:Ra=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Zu|=i,e.lanes=i,e.memoizedState=f}}function Fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var za=(new r.Component).refs;function Da(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:A({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Wa={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Na(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(ns(t,e,o,r),Za(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),a=Na(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Ia(e,a,o))&&(ns(t,e,o,r),Za(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Na(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ia(e,o,r))&&(ns(t,e,r,n),Za(t,e,r))}};function Ua(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function Ba(e,t,n){var r=!1,o=Co,a=t.contextType;return"object"==typeof a&&null!==a?a=Pa(a):(o=Mo(t)?Ro:jo.current,a=(r=null!=(r=t.contextTypes))?Lo(e,o):Co),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Ha(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Wa.enqueueReplaceState(t,t.state,null)}function Ga(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=za,La(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Pa(a):(a=Mo(t)?Ro:jo.current,o.context=Lo(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Da(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Wa.enqueueReplaceState(o,o.state,null),$a(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Va(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===za&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ka(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ms(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=As(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===x?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===L&&Ka(a)===t.type)?((r=o(t,n.props)).ref=Va(e,t,n),r.return=e,r):((r=Ns(n.type,n.key,n.props,null,e.mode,r)).ref=Va(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$s(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Is(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=As(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ns(t.type,t.key,t.props,null,e.mode,n)).ref=Va(e,null,t),n.return=e,n;case S:return(t=$s(t,e.mode,n)).return=e,t;case L:return d(e,(0,t._init)(t._payload),n)}if(te(t)||I(t))return(t=Is(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===o?s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null;case L:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||I(n))return null!==o?null:f(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case L:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||I(r))return f(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,g=null;null!==f&&m<l.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,f=g}if(m===l.length)return n(o,f),aa&&Yo(o,m),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return aa&&Yo(o,m),s}for(f=r(o,f);m<l.length;m++)null!==(g=h(f,o,m,l[m],u))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),aa&&Yo(o,m),s}function g(o,l,u,s){var c=I(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,g=l=0,v=null,y=u.next();null!==m&&!y.done;g++,y=u.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,g),null===f?c=b:f.sibling=b,f=b,m=v}if(y.done)return n(o,m),aa&&Yo(o,g),c;if(null===m){for(;!y.done;g++,y=u.next())null!==(y=d(o,y.value,s))&&(l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return aa&&Yo(o,g),c}for(m=r(o,m);!y.done;g++,y=u.next())null!==(y=h(m,o,g,y.value,s))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=i(y,l,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Yo(o,g),c}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===x&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var s=i.key,c=a;null!==c;){if(c.key===s){if((s=i.type)===x){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===L&&Ka(s)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=Va(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===x?((a=Is(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Ns(i.type,i.key,i.props,null,r.mode,u)).ref=Va(r,a,i),u.return=r,r=u)}return l(r);case S:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=$s(i,r.mode,u)).return=r,r=a}return l(r);case L:return e(r,a,(c=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(I(i))return g(r,a,i,u);qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=As(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Xa=Qa(!0),Ja=Qa(!1),Ya={},ei=Eo(Ya),ti=Eo(Ya),ni=Eo(Ya);function ri(e){if(e===Ya)throw Error(a(174));return e}function oi(e,t){switch(Oo(ni,t),Oo(ti,e),Oo(ei,Ya),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(ei),Oo(ei,t)}function ai(){Po(ei),Po(ti),Po(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(Oo(ti,e),Oo(ei,n))}function li(e){ti.current===e&&(Po(ei),Po(ti))}var ui=Eo(0);function si(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function fi(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,vi=null,yi=!1,bi=!1,wi=0,ki=0;function Si(){throw Error(a(321))}function xi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function _i(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,vi=gi=null,t.updateQueue=null,di.current=sl,e=n(r,o)}while(bi)}if(di.current=il,t=null!==gi&&null!==gi.next,hi=0,vi=gi=mi=null,yi=!1,t)throw Error(a(300));return e}function Ei(){var e=0!==wi;return wi=0,e}function Pi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function Oi(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Ci(e,t){return"function"==typeof t?t(e):t}function ji(e){var t=Oi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((hi&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,mi.lanes|=f,Zu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Zu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ti(e){var t=Oi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ri(){}function Li(e,t){var n=mi,r=Oi(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Bi(Ii.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Fi(9,Ni.bind(null,n,r,o,t),void 0,null),null===ju)throw Error(a(349));0!=(30&hi)||Mi(n,t,o)}return o}function Mi(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ni(e,t,n,r){t.value=n,t.getSnapshot=r,Zi(t)&&Ai(e)}function Ii(e,t,n){return n((function(){Zi(t)&&Ai(e)}))}function Zi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ai(e){var t=Ta(e,1);null!==t&&ns(t,e,1,-1)}function $i(e){var t=Pi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ci,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Fi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zi(){return Oi().memoizedState}function Di(e,t,n,r){var o=Pi();mi.flags|=e,o.memoizedState=Fi(1|t,n,void 0,void 0===r?null:r)}function Wi(e,t,n,r){var o=Oi();r=void 0===r?null:r;var a=void 0;if(null!==gi){var i=gi.memoizedState;if(a=i.destroy,null!==r&&xi(r,i.deps))return void(o.memoizedState=Fi(t,n,a,r))}mi.flags|=e,o.memoizedState=Fi(1|t,n,a,r)}function Ui(e,t){return Di(8390656,8,e,t)}function Bi(e,t){return Wi(2048,8,e,t)}function Hi(e,t){return Wi(4,2,e,t)}function Gi(e,t){return Wi(4,4,e,t)}function Vi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Wi(4,4,Vi.bind(null,t,e),n)}function Ki(){}function Qi(e,t){var n=Oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=Oi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Zu|=n,e.baseState=!0),t)}function Yi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Oi().memoizedState}function tl(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=ja(e,t,n,r))&&(ns(n,e,r,es()),al(n,t,r))}function nl(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Ca(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=ja(e,t,o,r))&&(ns(n,e,r,o=es()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:Pa,useCallback:Si,useContext:Si,useEffect:Si,useImperativeHandle:Si,useInsertionEffect:Si,useLayoutEffect:Si,useMemo:Si,useReducer:Si,useRef:Si,useState:Si,useDebugValue:Si,useDeferredValue:Si,useTransition:Si,useMutableSource:Si,useSyncExternalStore:Si,useId:Si,unstable_isNewReconciler:!1},ll={readContext:Pa,useCallback:function(e,t){return Pi().memoizedState=[e,void 0===t?null:t],e},useContext:Pa,useEffect:Ui,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Di(4194308,4,Vi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Di(4194308,4,e,t)},useInsertionEffect:function(e,t){return Di(4,2,e,t)},useMemo:function(e,t){var n=Pi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pi().memoizedState=e},useState:$i,useDebugValue:Ki,useDeferredValue:function(e){return Pi().memoizedState=e},useTransition:function(){var e=$i(!1),t=e[0];return e=Yi.bind(null,e[1]),Pi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Pi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===ju)throw Error(a(349));0!=(30&hi)||Mi(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Ui(Ii.bind(null,r,i,e),[e]),r.flags|=2048,Fi(9,Ni.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Pi(),t=ju.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ki++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Pa,useCallback:Qi,useContext:Pa,useEffect:Bi,useImperativeHandle:qi,useInsertionEffect:Hi,useLayoutEffect:Gi,useMemo:Xi,useReducer:ji,useRef:zi,useState:function(){return ji(Ci)},useDebugValue:Ki,useDeferredValue:function(e){return Ji(Oi(),gi.memoizedState,e)},useTransition:function(){return[ji(Ci)[0],Oi().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Li,useId:el,unstable_isNewReconciler:!1},sl={readContext:Pa,useCallback:Qi,useContext:Pa,useEffect:Bi,useImperativeHandle:qi,useInsertionEffect:Hi,useLayoutEffect:Gi,useMemo:Xi,useReducer:Ti,useRef:zi,useState:function(){return Ti(Ci)},useDebugValue:Ki,useDeferredValue:function(e){var t=Oi();return null===gi?t.memoizedState=e:Ji(t,gi.memoizedState,e)},useTransition:function(){return[Ti(Ci)[0],Oi().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Li,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=D(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Na(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bu||(Bu=!0,Hu=r),dl(0,t)},n}function ml(e,t,n){(n=Na(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Gu?Gu=new Set([this]):Gu.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Na(-1,1)).tag=2,Ia(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function kl(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Xa(t,e.child,n,r)}function Sl(e,t,n,r,o){n=n.render;var a=t.ref;return Ea(t,o),r=_i(e,t,n,r,a,o),n=Ei(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,kl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Bl(e,t,o))}function xl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ls(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ns(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,_l(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Bl(e,t,o)}return t.flags|=1,(e=Ms(a,r)).ref=t.ref,e.return=t,t.child=e}function _l(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Bl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Ol(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oo(Mu,Lu),Lu|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oo(Mu,Lu),Lu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Oo(Mu,Lu),Lu|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Oo(Mu,Lu),Lu|=r;return kl(e,t,o,n),t.child}function Pl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ol(e,t,n,r,o){var a=Mo(n)?Ro:jo.current;return a=Lo(t,a),Ea(t,o),n=_i(e,t,n,r,a,o),r=Ei(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,kl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Bl(e,t,o))}function Cl(e,t,n,r,o){if(Mo(n)){var a=!0;Ao(t)}else a=!1;if(Ea(t,o),null===t.stateNode)Ul(e,t),Ba(t,n,r),Ga(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?Pa(s):Lo(t,s=Mo(n)?Ro:jo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Ha(t,i,r,s),Ra=!1;var d=t.memoizedState;i.state=d,$a(t,r,i,o),u=t.memoizedState,l!==r||d!==u||To.current||Ra?("function"==typeof c&&(Da(t,n,c,r),u=t.memoizedState),(l=Ra||Ua(t,n,l,r,d,u,s))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ma(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:va(t.type,l),i.props=s,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Pa(u):Lo(t,u=Mo(n)?Ro:jo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&Ha(t,i,r,u),Ra=!1,d=t.memoizedState,i.state=d,$a(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||To.current||Ra?("function"==typeof p&&(Da(t,n,p,r),h=t.memoizedState),(s=Ra||Ua(t,n,s,r,d,h,u)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return jl(e,t,n,r,a,o)}function jl(e,t,n,r,o,a){Pl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&$o(t,n,!1),Bl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):kl(e,t,l,a),t.memoizedState=r.state,o&&$o(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),oi(e,t.containerInfo)}function Rl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,kl(e,t,n,r),t.child}var Ll,Ml,Nl,Il={dehydrated:null,treeContext:null,retryLane:0};function Zl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Al(e,t,n){var r,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Oo(ui,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Zs(u,o,0,null),e=Is(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Zl(n),t.memoizedState=Il,e):$l(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Fl(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Zs({mode:"visible",children:r.children},o,0,null),(i=Is(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Zl(l),t.memoizedState=Il,i);if(0==(1&t.mode))return Fl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Fl(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=ju)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ta(e,o),ns(r,e,o,-1))}return ms(),Fl(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Os.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=so(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(qo[Ko++]=Xo,qo[Ko++]=Jo,qo[Ko++]=Qo,Xo=e.id,Jo=e.overflow,Qo=t),(t=$l(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Ms(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Ms(r,l):(l=Is(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Zl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Il,o}return e=(l=e.child).sibling,o=Ms(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function $l(e,t){return(t=Zs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fl(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=$l(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function zl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),_a(e.return,t,n)}function Dl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Wl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(kl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&zl(e,n,t);else if(19===e.tag)zl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oo(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===si(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Dl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===si(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Dl(t,!0,n,null,a);break;case"together":Dl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ul(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Bl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Zu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ms(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ms(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Hl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Gl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Vl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Gl(t),null;case 1:case 17:return Mo(t.type)&&No(),Gl(t),null;case 3:return r=t.stateNode,ai(),Po(To),Po(jo),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(is(ia),ia=null))),Gl(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Ml(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Gl(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Q(r,i),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Fr("invalid",r);break;case"textarea":oe(r,i),Fr("invalid",r)}for(var u in ye(n,i),o=null,i)if(i.hasOwnProperty(u)){var s=i[u];"children"===u?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):l.hasOwnProperty(u)&&null!=s&&"onScroll"===u&&Fr("scroll",r)}switch(n){case"input":G(r),Y(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Yr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Ll(e,t),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)Fr(Ir[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":Q(e,r),o=K(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=A({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(i in ye(n,o),s=o)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Fr("scroll",e):null!=c&&b(e,i,c,u))}switch(n){case"input":G(e),Y(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+B(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Yr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Gl(t),null;case 6:if(e&&null!=t.stateNode)Nl(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Gl(t),null;case 13:if(Po(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Gl(t),i=!1}else null!==ia&&(is(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Nu&&(Nu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Gl(t),null);case 4:return ai(),null===e&&Wr(t.stateNode.containerInfo),Gl(t),null;case 10:return xa(t.type._context),Gl(t),null;case 19:if(Po(ui),null===(i=t.memoizedState))return Gl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Hl(i,!1);else{if(0!==Nu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=si(e))){for(t.flags|=128,Hl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oo(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Wu&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=si(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Hl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Gl(t),null}else 2*Xe()-i.renderingStartTime>Wu&&1073741824!==n&&(t.flags|=128,r=!0,Hl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ui.current,Oo(ui,r?1&n|2:1&n),t):(Gl(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Lu)&&(Gl(t),6&t.subtreeFlags&&(t.flags|=8192)):Gl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function ql(e,t){switch(na(t),t.tag){case 1:return Mo(t.type)&&No(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),Po(To),Po(jo),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(Po(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(ui),null;case 4:return ai(),null;case 10:return xa(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Ll=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ml=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=K(e,o),r=K(e,r),i=[];break;case"select":o=A({},o,{value:void 0}),r=A({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Yr)}for(c in ye(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var u=o[c];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var s=r[c];if(u=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==u&&(null!=s||null!=u))if("style"===c)if(u){for(a in u)!u.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&u[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(i||(i=[]),i.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,u=u?u.__html:void 0,null!=s&&u!==s&&(i=i||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(i=i||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),i||u===s||(i=[])):(i=i||[]).push(c,s))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Nl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Kl=!1,Ql=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Jl=null;function Yl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){_s(e,t,n)}else n.current=null}function eu(e,t,n){try{n()}catch(n){_s(e,t,n)}}var tu=!1;function nu(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&eu(t,n,a)}o=o.next}while(o!==r)}}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function au(e){var t=e.alternate;null!==t&&(e.alternate=null,au(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[vo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function iu(e){return 5===e.tag||3===e.tag||4===e.tag}function lu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||iu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function uu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Yr));else if(4!==r&&null!==(e=e.child))for(uu(e,t,n),e=e.sibling;null!==e;)uu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var cu=null,fu=!1;function du(e,t,n){for(n=n.child;null!==n;)pu(e,t,n),n=n.sibling}function pu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Ql||Yl(n,t);case 6:var r=cu,o=fu;cu=null,du(e,t,n),fu=o,null!==(cu=r)&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cu.removeChild(n.stateNode));break;case 18:null!==cu&&(fu?(e=cu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Wt(e)):uo(cu,n.stateNode));break;case 4:r=cu,o=fu,cu=n.stateNode.containerInfo,fu=!0,du(e,t,n),cu=r,fu=o;break;case 0:case 11:case 14:case 15:if(!Ql&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&eu(n,t,i),o=o.next}while(o!==r)}du(e,t,n);break;case 1:if(!Ql&&(Yl(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){_s(n,t,e)}du(e,t,n);break;case 21:du(e,t,n);break;case 22:1&n.mode?(Ql=(r=Ql)||null!==n.memoizedState,du(e,t,n),Ql=r):du(e,t,n);break;default:du(e,t,n)}}function hu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Cs.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:cu=u.stateNode,fu=!1;break e;case 3:case 4:cu=u.stateNode.containerInfo,fu=!0;break e}u=u.return}if(null===cu)throw Error(a(160));pu(i,l,o),cu=null,fu=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){_s(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),vu(e),4&r){try{nu(3,e,e.return),ru(3,e)}catch(t){_s(e,e.return,t)}try{nu(5,e,e.return)}catch(t){_s(e,e.return,t)}}break;case 1:mu(t,e),vu(e),512&r&&null!==n&&Yl(n,n.return);break;case 5:if(mu(t,e),vu(e),512&r&&null!==n&&Yl(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){_s(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),be(u,l);var c=be(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?ge(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(u){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){_s(e,e.return,t)}}break;case 6:if(mu(t,e),vu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){_s(e,e.return,t)}}break;case 3:if(mu(t,e),vu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){_s(e,e.return,t)}break;case 4:default:mu(t,e),vu(e);break;case 13:mu(t,e),vu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Du=Xe())),4&r&&hu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Ql=(c=Ql)||f,mu(t,e),Ql=c):mu(t,e),vu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Jl=e,f=e.child;null!==f;){for(d=Jl=f;null!==Jl;){switch(h=(p=Jl).child,p.tag){case 0:case 11:case 14:case 15:nu(4,p,p.return);break;case 1:Yl(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){_s(r,n,e)}}break;case 5:Yl(p,p.return);break;case 22:if(null!==p.memoizedState){ku(d);continue}}null!==h?(h.return=p,Jl=h):ku(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=me("display",l))}catch(t){_s(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){_s(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),vu(e),4&r&&hu(e);case 21:}}function vu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(iu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,lu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;uu(e,lu(e),i);break;default:throw Error(a(161))}}catch(t){_s(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yu(e,t,n){Jl=e,bu(e,t,n)}function bu(e,t,n){for(var r=0!=(1&e.mode);null!==Jl;){var o=Jl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Kl;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Ql;l=Kl;var s=Ql;if(Kl=i,(Ql=u)&&!s)for(Jl=o;null!==Jl;)u=(i=Jl).child,22===i.tag&&null!==i.memoizedState?Su(o):null!==u?(u.return=i,Jl=u):Su(o);for(;null!==a;)Jl=a,bu(a,t,n),a=a.sibling;Jl=o,Kl=l,Ql=s}wu(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Jl=a):wu(e)}}function wu(e){for(;null!==Jl;){var t=Jl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ql||ru(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ql)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Fa(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Fa(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(a(163))}Ql||512&t.flags&&ou(t)}catch(e){_s(t,t.return,e)}}if(t===e){Jl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Jl=n;break}Jl=t.return}}function ku(e){for(;null!==Jl;){var t=Jl;if(t===e){Jl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Jl=n;break}Jl=t.return}}function Su(e){for(;null!==Jl;){var t=Jl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ru(4,t)}catch(e){_s(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){_s(t,o,e)}}var a=t.return;try{ou(t)}catch(e){_s(t,a,e)}break;case 5:var i=t.return;try{ou(t)}catch(e){_s(t,i,e)}}}catch(e){_s(t,t.return,e)}if(t===e){Jl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Jl=l;break}Jl=t.return}}var xu,_u=Math.ceil,Eu=w.ReactCurrentDispatcher,Pu=w.ReactCurrentOwner,Ou=w.ReactCurrentBatchConfig,Cu=0,ju=null,Tu=null,Ru=0,Lu=0,Mu=Eo(0),Nu=0,Iu=null,Zu=0,Au=0,$u=0,Fu=null,zu=null,Du=0,Wu=1/0,Uu=null,Bu=!1,Hu=null,Gu=null,Vu=!1,qu=null,Ku=0,Qu=0,Xu=null,Ju=-1,Yu=0;function es(){return 0!=(6&Cu)?Xe():-1!==Ju?Ju:Ju=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&Cu)&&0!==Ru?Ru&-Ru:null!==ga.transition?(0===Yu&&(Yu=mt()),Yu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function ns(e,t,n,r){if(50<Qu)throw Qu=0,Xu=null,Error(a(185));vt(e,n,r),0!=(2&Cu)&&e===ju||(e===ju&&(0==(2&Cu)&&(Au|=n),4===Nu&&ls(e,Ru)),rs(e,r),1===n&&0===Cu&&0==(1&t.mode)&&(Wu=Xe()+500,zo&&Uo()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===ju?Ru:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){zo=!0,Wo(e)}(us.bind(null,e)):Wo(us.bind(null,e)),io((function(){0==(6&Cu)&&Uo()})),n=null;else{switch(wt(r)){case 1:n=Ye;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=js(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Ju=-1,Yu=0,0!=(6&Cu))throw Error(a(327));var n=e.callbackNode;if(Ss()&&e.callbackNode!==n)return null;var r=dt(e,e===ju?Ru:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gs(e,r);else{t=r;var o=Cu;Cu|=2;var i=hs();for(ju===e&&Ru===t||(Uu=null,Wu=Xe()+500,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}Sa(),Eu.current=i,Cu=o,null!==Tu?t=0:(ju=null,Ru=0,t=Nu)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=as(e,o)),1===t)throw n=Iu,ds(e,0),ls(e,r),rs(e,Xe()),n;if(6===t)ls(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=gs(e,r))&&0!==(i=ht(e))&&(r=i,t=as(e,i)),1===t))throw n=Iu,ds(e,0),ls(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:ks(e,zu,Uu);break;case 3:if(ls(e,r),(130023424&r)===r&&10<(t=Du+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(ks.bind(null,e,zu,Uu),t);break}ks(e,zu,Uu);break;case 4:if(ls(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*_u(r/1960))-r)){e.timeoutHandle=ro(ks.bind(null,e,zu,Uu),r);break}ks(e,zu,Uu);break;default:throw Error(a(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function as(e,t){var n=Fu;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=gs(e,t))&&(t=zu,zu=n,null!==t&&is(t)),e}function is(e){null===zu?zu=e:zu.push.apply(zu,e)}function ls(e,t){for(t&=~$u,t&=~Au,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function us(e){if(0!=(6&Cu))throw Error(a(327));Ss();var t=dt(e,0);if(0==(1&t))return rs(e,Xe()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=as(e,r))}if(1===n)throw n=Iu,ds(e,0),ls(e,t),rs(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,zu,Uu),rs(e,Xe()),null}function ss(e,t){var n=Cu;Cu|=1;try{return e(t)}finally{0===(Cu=n)&&(Wu=Xe()+500,zo&&Uo())}}function cs(e){null!==qu&&0===qu.tag&&0==(6&Cu)&&Ss();var t=Cu;Cu|=1;var n=Ou.transition,r=bt;try{if(Ou.transition=null,bt=1,e)return e()}finally{bt=r,Ou.transition=n,0==(6&(Cu=t))&&Uo()}}function fs(){Lu=Mu.current,Po(Mu)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Tu)for(n=Tu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&No();break;case 3:ai(),Po(To),Po(jo),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:Po(ui);break;case 10:xa(r.type._context);break;case 22:case 23:fs()}n=n.return}if(ju=e,Tu=e=Ms(e.current,null),Ru=Lu=t,Nu=0,Iu=null,$u=Au=Zu=0,zu=Fu=null,null!==Oa){for(t=0;t<Oa.length;t++)if(null!==(r=(n=Oa[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}Oa=null}return e}function ps(e,t){for(;;){var n=Tu;try{if(Sa(),di.current=il,yi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yi=!1}if(hi=0,vi=gi=mi=null,bi=!1,wi=0,Pu.current=null,null===n||null===n.return){Nu=1,Iu=t,Tu=null;break}e:{var i=e,l=n.return,u=n,s=t;if(t=Ru,u.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&gl(i,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(s),t.updateQueue=g}else m.add(s);break e}if(0==(1&t)){gl(i,c,t),ms();break e}s=Error(a(426))}else if(aa&&1&u.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,u,0,t),ma(cl(s,u));break e}}i=s=cl(s,u),4!==Nu&&(Nu=2),null===Fu?Fu=[i]:Fu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Aa(i,hl(0,s,t));break e;case 1:u=s;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Gu||!Gu.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Aa(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}ws(n)}catch(e){t=e,Tu===n&&null!==n&&(Tu=n=n.return);continue}break}}function hs(){var e=Eu.current;return Eu.current=il,null===e?il:e}function ms(){0!==Nu&&3!==Nu&&2!==Nu||(Nu=4),null===ju||0==(268435455&Zu)&&0==(268435455&Au)||ls(ju,Ru)}function gs(e,t){var n=Cu;Cu|=2;var r=hs();for(ju===e&&Ru===t||(Uu=null,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}if(Sa(),Cu=n,Eu.current=r,null!==Tu)throw Error(a(261));return ju=null,Ru=0,Nu}function vs(){for(;null!==Tu;)bs(Tu)}function ys(){for(;null!==Tu&&!Ke();)bs(Tu)}function bs(e){var t=xu(e.alternate,e,Lu);e.memoizedProps=e.pendingProps,null===t?ws(e):Tu=t,Pu.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Vl(n,t,Lu)))return void(Tu=n)}else{if(null!==(n=ql(n,t)))return n.flags&=32767,void(Tu=n);if(null===e)return Nu=6,void(Tu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tu=t);Tu=t=e}while(null!==t);0===Nu&&(Nu=5)}function ks(e,t,n){var r=bt,o=Ou.transition;try{Ou.transition=null,bt=1,function(e,t,n,r){do{Ss()}while(null!==qu);if(0!=(6&Cu))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===ju&&(Tu=ju=null,Ru=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Vu||(Vu=!0,js(tt,(function(){return Ss(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Ou.transition,Ou.transition=null;var l=bt;bt=1;var u=Cu;Cu|=4,Pu.current=null,function(e,t){if(eo=Bt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===i&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Bt=!1,Jl=t;null!==Jl;)if(e=(t=Jl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Jl=e;else for(;null!==Jl;){t=Jl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:va(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){_s(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Jl=e;break}Jl=t.return}m=tu,tu=!1}(e,n),gu(n,e),hr(to),Bt=!!eo,to=eo=null,e.current=n,yu(n,e,o),Qe(),Cu=u,bt=l,Ou.transition=i}else e.current=n;if(Vu&&(Vu=!1,qu=e,Ku=o),0===(i=e.pendingLanes)&&(Gu=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Bu)throw Bu=!1,e=Hu,Hu=null,e;0!=(1&Ku)&&0!==e.tag&&Ss(),0!=(1&(i=e.pendingLanes))?e===Xu?Qu++:(Qu=0,Xu=e):Qu=0,Uo()}(e,t,n,r)}finally{Ou.transition=o,bt=r}return null}function Ss(){if(null!==qu){var e=wt(Ku),t=Ou.transition,n=bt;try{if(Ou.transition=null,bt=16>e?16:e,null===qu)var r=!1;else{if(e=qu,qu=null,Ku=0,0!=(6&Cu))throw Error(a(331));var o=Cu;for(Cu|=4,Jl=e.current;null!==Jl;){var i=Jl,l=i.child;if(0!=(16&Jl.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(Jl=c;null!==Jl;){var f=Jl;switch(f.tag){case 0:case 11:case 15:nu(8,f,i)}var d=f.child;if(null!==d)d.return=f,Jl=d;else for(;null!==Jl;){var p=(f=Jl).sibling,h=f.return;if(au(f),f===c){Jl=null;break}if(null!==p){p.return=h,Jl=p;break}Jl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Jl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Jl=l;else e:for(;null!==Jl;){if(0!=(2048&(i=Jl).flags))switch(i.tag){case 0:case 11:case 15:nu(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Jl=y;break e}Jl=i.return}}var b=e.current;for(Jl=b;null!==Jl;){var w=(l=Jl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Jl=w;else e:for(l=b;null!==Jl;){if(0!=(2048&(u=Jl).flags))try{switch(u.tag){case 0:case 11:case 15:ru(9,u)}}catch(e){_s(u,u.return,e)}if(u===l){Jl=null;break e}var k=u.sibling;if(null!==k){k.return=u.return,Jl=k;break e}Jl=u.return}}if(Cu=o,Uo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Ou.transition=t}}return!1}function xs(e,t,n){e=Ia(e,t=hl(0,t=cl(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function _s(e,t,n){if(3===e.tag)xs(e,e,n);else for(;null!==t;){if(3===t.tag){xs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gu||!Gu.has(r))){t=Ia(t,e=ml(t,e=cl(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,ju===e&&(Ru&n)===n&&(4===Nu||3===Nu&&(130023424&Ru)===Ru&&500>Xe()-Du?ds(e,0):$u|=n),rs(e,t)}function Ps(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=es();null!==(e=Ta(e,t))&&(vt(e,t,n),rs(e,n))}function Os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ps(e,n)}function Cs(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Ps(e,n)}function js(e,t){return Ve(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rs(e,t,n,r){return new Ts(e,t,n,r)}function Ls(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ms(e,t){var n=e.alternate;return null===n?((n=Rs(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ns(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ls(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Is(n.children,o,i,t);case _:l=8,o|=8;break;case E:return(e=Rs(12,n,t,2|o)).elementType=E,e.lanes=i,e;case j:return(e=Rs(13,n,t,o)).elementType=j,e.lanes=i,e;case T:return(e=Rs(19,n,t,o)).elementType=T,e.lanes=i,e;case M:return Zs(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case O:l=9;break e;case C:l=11;break e;case R:l=14;break e;case L:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Rs(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Is(e,t,n,r){return(e=Rs(7,e,r,t)).lanes=n,e}function Zs(e,t,n,r){return(e=Rs(22,e,r,t)).elementType=M,e.lanes=n,e.stateNode={isHidden:!1},e}function As(e,t,n){return(e=Rs(6,e,null,t)).lanes=n,e}function $s(e,t,n){return(t=Rs(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function zs(e,t,n,r,o,a,i,l,u){return e=new Fs(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Rs(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},La(a),e}function Ds(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ws(e){if(!e)return Co;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Mo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Mo(n))return Zo(e,n,t)}return t}function Us(e,t,n,r,o,a,i,l,u){return(e=zs(n,r,!0,e,0,a,0,l,u)).context=Ws(null),n=e.current,(a=Na(r=es(),o=ts(n))).callback=null!=t?t:null,Ia(n,a,o),e.current.lanes=o,vt(e,o,r),rs(e,r),e}function Bs(e,t,n,r){var o=t.current,a=es(),i=ts(o);return n=Ws(n),null===t.context?t.context=n:t.pendingContext=n,(t=Na(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ia(o,t,i))&&(ns(e,o,i,a),Za(e,o,i)),i}function Hs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vs(e,t){Gs(e,t),(e=e.alternate)&&Gs(e,t)}xu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||To.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),ha();break;case 5:ii(t);break;case 1:Mo(t.type)&&Ao(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Oo(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oo(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Al(e,t,n):(Oo(ui,1&ui.current),null!==(e=Bl(e,t,n))?e.sibling:null);Oo(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Wl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Oo(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Bl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Vo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var o=Lo(t,jo.current);Ea(t,n),o=_i(null,t,r,e,o,n);var i=Ei();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Mo(r)?(i=!0,Ao(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,La(t),o.updater=Wa,t.stateNode=o,o._reactInternals=t,Ga(t,r,e,n),t=jl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),kl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ls(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===R)return 14}return 2}(r),e=va(r,e),o){case 0:t=Ol(null,t,r,e,n);break e;case 1:t=Cl(null,t,r,e,n);break e;case 11:t=Sl(null,t,r,e,n);break e;case 14:t=xl(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ol(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,Cl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Tl(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ma(e,t),$a(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Rl(e,t,r,n,o=cl(Error(a(423)),t));break e}if(r!==o){t=Rl(e,t,r,n,o=cl(Error(a(424)),t));break e}for(oa=so(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Bl(e,t,n);break e}kl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Pl(e,t),kl(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Al(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):kl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Sl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return kl(e,t,t.pendingProps,n),t.child;case 8:case 12:return kl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Oo(ya,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!To.current){t=Bl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var s=u.firstContext;null!==s;){if(s.context===r){if(1===i.tag){(s=Na(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}i.lanes|=n,null!==(s=i.alternate)&&(s.lanes|=n),_a(i.return,n,t),u.lanes|=n;break}s=s.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),_a(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}kl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ea(t,n),r=r(o=Pa(o)),t.flags|=1,kl(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),xl(e,t,r,o=va(r.type,o),n);case 15:return _l(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Ul(e,t),t.tag=1,Mo(r)?(e=!0,Ao(t)):e=!1,Ea(t,n),Ba(t,r,o),Ga(t,r,o,n),jl(null,t,r,!0,e,n);case 19:return Wl(e,t,n);case 22:return El(e,t,n)}throw Error(a(156,t.tag))};var qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ks(e){this._internalRoot=e}function Qs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Js(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ys(){}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Hs(i);l.call(e)}}Bs(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Hs(i);a.call(e)}}var i=Us(t,r,e,0,null,!1,0,"",Ys);return e._reactRootContainer=i,e[mo]=i.current,Wr(8===e.nodeType?e.parentNode:e),cs(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Hs(u);l.call(e)}}var u=zs(e,0,!1,null,0,!1,0,"",Ys);return e._reactRootContainer=u,e[mo]=u.current,Wr(8===e.nodeType?e.parentNode:e),cs((function(){Bs(t,u,n,r)})),u}(n,t,e,o,r);return Hs(i)}Qs.prototype.render=Ks.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Bs(e,t,null,null)},Qs.prototype.unmount=Ks.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){Bs(null,e,null,null)})),t[mo]=null}},Qs.prototype.unstable_scheduleHydration=function(e){if(e){var t=_t();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Mt.length&&0!==t&&t<Mt[n].priority;n++);Mt.splice(n,0,e),0===n&&At(e)}},kt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),rs(t,Xe()),0==(6&Cu)&&(Wu=Xe()+500,Uo()))}break;case 13:cs((function(){var t=Ta(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Vs(e,1)}},St=function(e){if(13===e.tag){var t=Ta(e,134217728);null!==t&&ns(t,e,134217728,es()),Vs(e,134217728)}},xt=function(e){if(13===e.tag){var t=ts(e),n=Ta(e,t);null!==n&&ns(n,e,t,es()),Vs(e,t)}},_t=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(a(90));V(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=ss,je=cs;var tc={usingClientEntryPoint:!1,Events:[wo,ko,So,Pe,Oe,ss]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=He(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(a(200));return Ds(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(a(299));var n=!1,r="",o=qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=zs(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Ks(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=He(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Js(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=qs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Us(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qs(t)},t.render=function(e,t,n){if(!Js(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Js(e))throw Error(a(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Js(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context");var n=Symbol.for("react.forward_ref"),r=(Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"));Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.ForwardRef=n,t.Memo=r},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},9655:(e,t,n)=>{"use strict";n.d(t,{UT:()=>s,lr:()=>c});var r,o,a=n(7294),i=n(9250),l=n(2599);function u(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let r=e[n];return t.concat(Array.isArray(r)?r.map((e=>[n,e])):[[n,r]])}),[]))}function s(e){let{basename:t,children:n,window:r}=e,o=a.useRef();null==o.current&&(o.current=(0,l.q_)({window:r,v5Compat:!0}));let u=o.current,[s,c]=a.useState({action:u.action,location:u.location});return a.useLayoutEffect((()=>u.listen(c)),[u]),a.createElement(i.F0,{basename:t,children:n,location:s.location,navigationType:s.action,navigator:u})}function c(e){let t=a.useRef(u(e)),n=(0,i.TH)(),r=a.useMemo((()=>function(e,t){let n=u(e);for(let e of t.keys())n.has(e)||t.getAll(e).forEach((t=>{n.append(e,t)}));return n}(n.search,t.current)),[n.search]),o=(0,i.s0)(),l=a.useCallback(((e,t)=>{const n=u("function"==typeof e?e(r):e);o("?"+n,t)}),[o,r]);return[r,l]}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(r||(r={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(o||(o={}))},9250:(e,t,n)=>{"use strict";var r;n.d(t,{AW:()=>C,F0:()=>j,TH:()=>b,UO:()=>k,Z5:()=>T,s0:()=>w});var o=n(2599),a=n(7294);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}"function"==typeof Object.is&&Object.is;const{useState:l,useEffect:u,useLayoutEffect:s,useDebugValue:c}=r||(r=n.t(a,2));"undefined"==typeof window||void 0===window.document||window.document.createElement,(r||(r=n.t(a,2))).useSyncExternalStore;const f=a.createContext(null),d=a.createContext(null),p=a.createContext(null),h=a.createContext(null),m=a.createContext(null),g=a.createContext({outlet:null,matches:[]}),v=a.createContext(null);function y(){return null!=a.useContext(m)}function b(){return y()||(0,o.kG)(!1),a.useContext(m).location}function w(){y()||(0,o.kG)(!1);let{basename:e,navigator:t}=a.useContext(h),{matches:n}=a.useContext(g),{pathname:r}=b(),i=JSON.stringify((0,o.Zq)(n).map((e=>e.pathnameBase))),l=a.useRef(!1);return a.useEffect((()=>{l.current=!0})),a.useCallback((function(n,a){if(void 0===a&&(a={}),!l.current)return;if("number"==typeof n)return void t.go(n);let u=(0,o.pC)(n,JSON.parse(i),r,"path"===a.relative);"/"!==e&&(u.pathname="/"===u.pathname?e:(0,o.RQ)([e,u.pathname])),(a.replace?t.replace:t.push)(u,a.state,a)}),[e,t,i,r])}function k(){let{matches:e}=a.useContext(g),t=e[e.length-1];return t?t.params:{}}function S(){let e=function(){var e;let t=a.useContext(v),n=function(e){let t=a.useContext(p);return t||(0,o.kG)(!1),t}(P.UseRouteError),r=a.useContext(g),i=r.matches[r.matches.length-1];return t||(r||(0,o.kG)(!1),!i.route.id&&(0,o.kG)(!1),null==(e=n.errors)?void 0:e[i.route.id])}(),t=(0,o.WK)(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,r="rgba(200,200,200, 0.5)",i={padding:"0.5rem",backgroundColor:r},l={padding:"2px 4px",backgroundColor:r};return a.createElement(a.Fragment,null,a.createElement("h2",null,"Unhandled Thrown Error!"),a.createElement("h3",{style:{fontStyle:"italic"}},t),n?a.createElement("pre",{style:i},n):null,a.createElement("p",null,"💿 Hey developer 👋"),a.createElement("p",null,"You can provide a way better UX than this when your app throws errors by providing your own ",a.createElement("code",{style:l},"errorElement")," props on ",a.createElement("code",{style:l},"<Route>")))}class x extends a.Component{constructor(e){super(e),this.state={location:e.location,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return this.state.error?a.createElement(v.Provider,{value:this.state.error,children:this.props.component}):this.props.children}}function _(e){let{routeContext:t,match:n,children:r}=e,o=a.useContext(f);return o&&n.route.errorElement&&(o._deepestRenderedBoundaryId=n.route.id),a.createElement(g.Provider,{value:t},r)}var E,P,O;function C(e){(0,o.kG)(!1)}function j(e){let{basename:t="/",children:n=null,location:r,navigationType:i=o.aU.Pop,navigator:l,static:u=!1}=e;y()&&(0,o.kG)(!1);let s=t.replace(/^\/*/,"/"),c=a.useMemo((()=>({basename:s,navigator:l,static:u})),[s,l,u]);"string"==typeof r&&(r=(0,o.cP)(r));let{pathname:f="/",search:d="",hash:p="",state:g=null,key:v="default"}=r,b=a.useMemo((()=>{let e=(0,o.Zn)(f,s);return null==e?null:{pathname:e,search:d,hash:p,state:g,key:v}}),[s,f,d,p,g,v]);return null==b?null:a.createElement(h.Provider,{value:c},a.createElement(m.Provider,{children:n,value:{location:b,navigationType:i}}))}function T(e){let{children:t,location:n}=e,r=a.useContext(d);return function(e,t){y()||(0,o.kG)(!1);let{navigator:n}=a.useContext(h),r=a.useContext(p),{matches:l}=a.useContext(g),u=l[l.length-1],s=u?u.params:{},c=(u&&u.pathname,u?u.pathnameBase:"/");u&&u.route;let f,d=b();if(t){var v;let e="string"==typeof t?(0,o.cP)(t):t;"/"===c||(null==(v=e.pathname)?void 0:v.startsWith(c))||(0,o.kG)(!1),f=e}else f=d;let w=f.pathname||"/",k="/"===c?w:w.slice(c.length)||"/",E=(0,o.fp)(e,{pathname:k}),P=function(e,t,n){if(void 0===t&&(t=[]),null==e){if(null==n||!n.errors)return null;e=n.matches}let r=e,i=null==n?void 0:n.errors;if(null!=i){let e=r.findIndex((e=>e.route.id&&(null==i?void 0:i[e.route.id])));e>=0||(0,o.kG)(!1),r=r.slice(0,Math.min(r.length,e+1))}return r.reduceRight(((e,o,l)=>{let u=o.route.id?null==i?void 0:i[o.route.id]:null,s=n?o.route.errorElement||a.createElement(S,null):null,c=()=>a.createElement(_,{match:o,routeContext:{outlet:e,matches:t.concat(r.slice(0,l+1))}},u?s:void 0!==o.route.element?o.route.element:e);return n&&(o.route.errorElement||0===l)?a.createElement(x,{location:n.location,component:s,error:u,children:c()}):c()}),null)}(E&&E.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:(0,o.RQ)([c,n.encodeLocation?n.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:(0,o.RQ)([c,n.encodeLocation?n.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,r||void 0);return t&&P?a.createElement(m.Provider,{value:{location:i({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:o.aU.Pop}},P):P}(r&&!t?r.router.routes:L(t),n)}!function(e){e.UseRevalidator="useRevalidator"}(E||(E={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(P||(P={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(O||(O={})),new Promise((()=>{}));class R extends a.Component{constructor(e){super(e),this.state={error:null}}static getDerivedStateFromError(e){return{error:e}}componentDidCatch(e,t){console.error("<Await> caught the following error during render",e,t)}render(){let{children:e,errorElement:t,resolve:n}=this.props,r=null,o=O.pending;if(n instanceof Promise)if(this.state.error){O.error;let e=this.state.error;Promise.reject().catch((()=>{})),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_error",{get:()=>e})}else n._tracked?void 0!==r._error?O.error:void 0!==r._data?O.success:O.pending:(O.pending,Object.defineProperty(n,"_tracked",{get:()=>!0}),n.then((e=>Object.defineProperty(n,"_data",{get:()=>e})),(e=>Object.defineProperty(n,"_error",{get:()=>e}))));else O.success,Promise.resolve(),Object.defineProperty(r,"_tracked",{get:()=>!0}),Object.defineProperty(r,"_data",{get:()=>n});if(o===O.error&&r._error instanceof AbortedDeferredError)throw neverSettledPromise;if(o===O.error&&!t)throw r._error;if(o===O.error)return React.createElement(AwaitContext.Provider,{value:r,children:t});if(o===O.success)return React.createElement(AwaitContext.Provider,{value:r,children:e});throw r}}function L(e,t){void 0===t&&(t=[]);let n=[];return a.Children.forEach(e,((e,r)=>{if(!a.isValidElement(e))return;if(e.type===a.Fragment)return void n.push.apply(n,L(e.props.children,t));e.type!==C&&(0,o.kG)(!1),e.props.index&&e.props.children&&(0,o.kG)(!1);let i=[...t,r],l={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(l.children=L(e.props.children,i)),n.push(l)})),n}},5251:(e,t,n)=>{"use strict";var r=n(7294),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,n){var r,u={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(u[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===u[r]&&(u[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:u,_owner:i.current}}t.jsx=u,t.jsxs=u},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var k=Array.isArray,S=Object.prototype.hasOwnProperty,x={current:null},_={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)S.call(t,o)&&!_.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:x.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function j(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+C(u,0):a,k(i)?(o="",null!=e&&(o=e.replace(O,"$&/")+"/"),j(i,t,o,"",(function(e){return e}))):null!=i&&(P(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(O,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",k(e))for(var s=0;s<e.length;s++){var c=a+C(l=e[s],s);u+=j(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=j(l=l.value,t,o,c=a+C(l,s++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function T(e,t,n){if(null==e)return e;var r=[],o=0;return j(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},M={transition:null},N={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:M,ReactCurrentOwner:x};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)S.call(t,s)&&!_.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=M.transition;M.transition={};try{e()}finally{M.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>a(u,n))s<o&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function k(e){if(g=!1,w(e),!m)if(null!==r(s))m=!0,M(S);else{var t=r(c);null!==t&&N(k,t.startTime-e)}}function S(e,n){m=!1,g&&(g=!1,y(P),P=-1),h=!0;var a=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!j());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var u=!0;else{var f=r(c);null!==f&&N(k,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,_=!1,E=null,P=-1,O=5,C=-1;function j(){return!(t.unstable_now()-C<O)}function T(){if(null!==E){var e=t.unstable_now();C=e;var n=!0;try{n=E(!0,e)}finally{n?x():(_=!1,E=null)}}else _=!1}if("function"==typeof b)x=function(){b(T)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,L=R.port2;R.port1.onmessage=T,x=function(){L.postMessage(null)}}else x=function(){v(T,0)};function M(e){E=e,_||(_=!0,x())}function N(e,n){P=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,M(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(g?(y(P),P=-1):g=!0,N(k,a-i))):(e.sortIndex=l,n(s,e),m||h||(m=!0,M(S))),e},t.unstable_shouldYield=j,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},434:e=>{function t(){return e.exports=t=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.exports.__esModule=!0,e.exports.default=e.exports,t.apply(this,arguments)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4836:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},7071:e=>{e.exports=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o},e.exports.__esModule=!0,e.exports.default=e.exports},4572:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function o(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,t);if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e,"string");return"symbol"===r(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>o})},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})}},a={};function i(e){var t=a[e];if(void 0!==t)return t.exports;var n=a[e]={exports:{}};return o[e].call(n.exports,n,n.exports,i),n.exports}i.m=o,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+".altflow.js",i.miniCssF=e=>{},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},r="altflow-ui:",i.l=(e,t,o,a)=>{if(n[e])n[e].push(t);else{var l,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==r+o){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,i.nc&&l.setAttribute("nonce",i.nc),l.setAttribute("data-webpack",r+o),l.src=e),n[e]=[t];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=n[e];if(delete n[e],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.p="./",(()=>{var e={179:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=o);var a=i.p+i.u(t),l=new Error;i.l(a,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,o,[a,l,u]=n,s=0;if(a.some((t=>0!==e[t]))){for(r in l)i.o(l,r)&&(i.m[r]=l[r]);u&&u(i)}for(t&&t(n);s<a.length;s++)o=a[s],i.o(e,o)&&e[o]&&e[o][0](),e[o]=0},n=self.webpackChunkaltflow_ui=self.webpackChunkaltflow_ui||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=i(5974),t=i(7462),n=i(7294),r=i(8884),o=i(1039),a=i(5893);const l=(e,n)=>(0,t.Z)({WebkitFontSmoothing:"antialiased",MozOsxFontSmoothing:"grayscale",boxSizing:"border-box",WebkitTextSizeAdjust:"100%"},n&&!e.vars&&{colorScheme:e.palette.mode}),u=e=>(0,t.Z)({color:(e.vars||e).palette.text.primary},e.typography.body1,{backgroundColor:(e.vars||e).palette.background.default,"@media print":{backgroundColor:(e.vars||e).palette.common.white}}),s=function(e){const i=(0,r.Z)({props:e,name:"MuiCssBaseline"}),{children:s,enableColorScheme:c=!1}=i;return(0,a.jsxs)(n.Fragment,{children:[(0,a.jsx)(o.Z,{styles:e=>((e,n=!1)=>{var r,o;const a={};n&&e.colorSchemes&&Object.entries(e.colorSchemes).forEach((([t,n])=>{var r;a[e.getColorSchemeSelector(t).replace(/\s*&/,"")]={colorScheme:null==(r=n.palette)?void 0:r.mode}}));let i=(0,t.Z)({html:l(e,n),"*, *::before, *::after":{boxSizing:"inherit"},"strong, b":{fontWeight:e.typography.fontWeightBold},body:(0,t.Z)({margin:0},u(e),{"&::backdrop":{backgroundColor:(e.vars||e).palette.background.default}})},a);const s=null==(r=e.components)||null==(o=r.MuiCssBaseline)?void 0:o.styleOverrides;return s&&(i=[i,s]),i})(e,c)}),s]})};var c=i(1247),f=i.n(c),d=i(1832),p=i(745),h=i(9655),m=i(9031),g=i(120),v=i(9258),y=i.n(v),b="1wc7e9/altflowio",w=(0,n.lazy)((function(){return Promise.all([i.e(63),i.e(41)]).then(i.bind(i,2041))}));const k=function(){var e;b.length&&y().init(b);var t=(null===(e=document.getElementById("altflow"))||void 0===e?void 0:e.getAttribute("data-flow"))||"unknown";return n.createElement(n.Fragment,null,n.createElement(g.Z,{sx:{px:0}},n.createElement(w,{slug:t})))};var S=document.getElementById("altflow");(0,p.s)(S).render(n.createElement(e.Z,{theme:m.rS},n.createElement(s,null),n.createElement(d.FlagsmithProvider,{options:{environmentID:"KAc6M2qvBQJJ4CiK4oNhnD"},flagsmith:f()},n.createElement(h.UT,null,n.createElement(k,null))))),document.documentElement.setAttribute("lang","en-US")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxH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QUFlQyxFQUFTLGFBQWMsQ0FDM0M5TyxPQUFPLElBRVQ4TyxFQUFBLGFBQWtCLEVBVWxCLElBQUl1TCxFQURZLENBQUMsT0FBUXRHLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUlBLEVBQWEsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEdB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WUFDN0JyTSxFQUFBQSxFQUFBQSxHQUFXcHpGLEdBQ25CcWlDLE9BQ0gsZ0JBQUNoTyxFQUFBLEVBQWEsQ0FBQ3JWLE1BQU9BLEVBQUFBLElBQ3BCLGdCQUFDLEVBQVcsTUFDWixnQkFBQyxFQUFBeTZCLGtCQUFpQixDQUNoQnA2QyxRQUFTLENBQ1BneUMsY0FBZWl1RCwwQkFFakJ0bUQsVUFBV0EsS0FDWCxnQkFBQyxLQUFVLEtBQ1QsZ0JBQUMsRUFBUSxVQU1qQi8zQyxTQUFTaXdCLGdCQUFnQi92QixhQUFhLE9BQVEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hbHRmbG93LXVpL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9lbW90aW9uLXNoZWV0LmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9VdGlsaXR5LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvc3R5bGlzL3NyYy9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL0VudW0uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1NlcmlhbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9zdHlsaXMvc3JjL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvZW1vdGlvbi1jYWNoZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3N0eWxpcy9zcmMvTWlkZGxld2FyZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9lbW90aW9uLW1lbW9pemUuZXNtLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vcmVhY3QvZGlzdC9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9yZWFjdC9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9oYXNoL2Rpc3QvZW1vdGlvbi1oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvZW1vdGlvbi11bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9lbW90aW9uLXNlcmlhbGl6ZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzL2Rpc3QvZW1vdGlvbi11c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3V0aWxzL2Rpc3QvZW1vdGlvbi11dGlscy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9saWdodEJsdWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2NvbG9ycy9yZWQuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9Cb3gvQm94LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vR2xvYmFsU3R5bGVzL0dsb2JhbFN0eWxlcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9ncmV5LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vY29sb3JzL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9wdXJwbGUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vY29sb3JzL29yYW5nZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9ibHVlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vY29sb3JzL2xpZ2h0Qmx1ZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL2NvbG9ycy9ncmVlbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vc3R5bGVzL2NyZWF0ZVR5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy9jcmVhdGVUcmFuc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy96SW5kZXguanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvZXNtL3N0eWxlcy91c2VUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlUGFsZXR0ZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL2NyZWF0ZVRoZW1lLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9tYXRlcmlhbC9zdHlsZXMvc2hhZG93cy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvbWF0ZXJpYWwvc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL1RoZW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvcHJpdmF0ZS10aGVtaW5nL3VzZVRoZW1lL3VzZVRoZW1lLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL0dsb2JhbFN0eWxlcy9HbG9iYWxTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9iYXNlL2Rpc3QvZW1vdGlvbi1zdHlsZWQtYmFzZS5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxlZC9kaXN0L2Vtb3Rpb24tc3R5bGVkLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zdHlsZWQtZW5naW5lL2luZGV4LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9wcml2YXRlLXRoZW1pbmcvVGhlbWVQcm92aWRlci9uZXN0ZWQuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3ByaXZhdGUtdGhlbWluZy9UaGVtZVByb3ZpZGVyL1RoZW1lUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2JvcmRlcnMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vYnJlYWtwb2ludHMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY29sb3JNYW5pcHVsYXRvci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jb21wb3NlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZUJveC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wcm9wc1RvQ2xhc3NLZXkuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlU3R5bGVkLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZUJyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2NyZWF0ZVRoZW1lL2NyZWF0ZVNwYWNpbmcuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3JlYXRlVGhlbWUvc2hhcGUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzR3JpZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9kaXNwbGF5LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL2ZsZXhib3guanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vZ2V0VGhlbWVWYWx1ZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3R5bGVkLWVuZ2luZS9TdHlsZWRFbmdpbmVQcm92aWRlci9TdHlsZWRFbmdpbmVQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zeC9zeC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9Cb3gvQm94LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3N0eWxlZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9jc3NWYXJzL2Nzc1ZhcnNQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9nZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy91c2VDdXJyZW50Q29sb3JTY2hlbWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9jcmVhdGVDc3NWYXJzUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vY3NzVmFycy9jcmVhdGVHZXRDc3NWYXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vcmVzcG9uc2l2ZVByb3BUeXBlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL0NvbnRhaW5lci9jcmVhdGVDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vQ29udGFpbmVyL0NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9Db250YWluZXIvY29udGFpbmVyQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9VbnN0YWJsZV9HcmlkL2dyaWRHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vVW5zdGFibGVfR3JpZC9jcmVhdGVHcmlkLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1Vuc3RhYmxlX0dyaWQvR3JpZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9VbnN0YWJsZV9HcmlkL2dyaWRDbGFzc2VzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1N0YWNrL2NyZWF0ZVN0YWNrLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1N0YWNrL1N0YWNrLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL1N0YWNrL3N0YWNrQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9tZXJnZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9wYWxldHRlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3Bvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zaGFkb3dzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3NpemluZy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vc3R5bGVGdW5jdGlvblN4L2V4dGVuZFN4UHJvcC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS9zdHlsZUZ1bmN0aW9uU3gvc3R5bGVGdW5jdGlvblN4LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3R5cG9ncmFwaHkuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3N5c3RlbS9lc20vdXNlVGhlbWVQcm9wcy9nZXRUaGVtZVByb3BzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS9zeXN0ZW0vZXNtL3VzZVRoZW1lUHJvcHMvdXNlVGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvc3lzdGVtL2VzbS91c2VUaGVtZVdpdGhvdXREZWZhdWx0LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vQ2xhc3NOYW1lR2VuZXJhdG9yL0NsYXNzTmFtZUdlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NhcGl0YWxpemUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9jb21wb3NlQ2xhc3Nlcy9jb21wb3NlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlYm91bmNlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZm9ybWF0TXVpRXJyb3JNZXNzYWdlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MvZ2VuZXJhdGVVdGlsaXR5Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzL2dlbmVyYXRlVXRpbGl0eUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZXRTY3JvbGxiYXJTaXplLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vY2hhaW5Qcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9lbGVtZW50QWNjZXB0aW5nUmVmLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9leGFjdFByb3AuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS9nZXREaXNwbGF5TmFtZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL0hUTUxFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3BvbnlmaWxsR2xvYmFsLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVmVHlwZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL2RlcHJlY2F0ZWRQcm9wVHlwZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Vuc3VwcG9ydGVkUHJvcC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3Njcm9sbExlZnQuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VQcmV2aW91c1Byb3BzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaW50ZWdlclByb3BUeXBlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vb3duZXJEb2N1bWVudC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL293bmVyV2luZG93LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vcmVzb2x2ZVByb3BzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vc2V0UmVmLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUVuaGFuY2VkRWZmZWN0LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdXNlRXZlbnRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL3V0aWxzL2VzbS91c2VJZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BtdWkvdXRpbHMvZXNtL3VzZUlzRm9jdXNWaXNpYmxlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQG11aS91dGlscy9lc20vdmlzdWFsbHlIaWRkZW4uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vc3JjL3N0eWxlL2luZGV4LnRzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL2ZsYWdzbWl0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL2ZsYWdzbWl0aC9yZWFjdC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL2xvZ3JvY2tldC9kaXN0L2J1aWxkLnVtZC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2FsdGZsb3ctdWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9hbHRmbG93LXVpL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9hbHRmbG93LXVpL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2FsdGZsb3ctdWkvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWx0Zmxvdy11aS8uL25vZGVfbW9kdWxlcy9AbXVpL21hdGVyaWFsL2VzbS9Dc3NCYXNlbGluZS9Dc3NCYXNlbGluZS5qcyIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vc3JjL0VtYmVkQXBwLnRzeCIsIndlYnBhY2s6Ly9hbHRmbG93LXVpLy4vc3JjL2VtYmVkLWluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgPyAob2JqKSA9PiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpIDogKG9iaikgPT4gKG9iai5fX3Byb3RvX18pO1xudmFyIGxlYWZQcm90b3R5cGVzO1xuLy8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLy8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vLyBtb2RlICYgMTY6IHJldHVybiB2YWx1ZSB3aGVuIGl0J3MgUHJvbWlzZS1saWtlXG4vLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuXHRpZihtb2RlICYgMSkgdmFsdWUgPSB0aGlzKHZhbHVlKTtcblx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcblx0aWYodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSkge1xuXHRcdGlmKChtb2RlICYgNCkgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuXHRcdGlmKChtb2RlICYgMTYpICYmIHR5cGVvZiB2YWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdmFsdWU7XG5cdH1cblx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcblx0dmFyIGRlZiA9IHt9O1xuXHRsZWFmUHJvdG90eXBlcyA9IGxlYWZQcm90b3R5cGVzIHx8IFtudWxsLCBnZXRQcm90byh7fSksIGdldFByb3RvKFtdKSwgZ2V0UHJvdG8oZ2V0UHJvdG8pXTtcblx0Zm9yKHZhciBjdXJyZW50ID0gbW9kZSAmIDIgJiYgdmFsdWU7IHR5cGVvZiBjdXJyZW50ID09ICdvYmplY3QnICYmICF+bGVhZlByb3RvdHlwZXMuaW5kZXhPZihjdXJyZW50KTsgY3VycmVudCA9IGdldFByb3RvKGN1cnJlbnQpKSB7XG5cdFx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3VycmVudCkuZm9yRWFjaCgoa2V5KSA9PiAoZGVmW2tleV0gPSAoKSA9PiAodmFsdWVba2V5XSkpKTtcblx0fVxuXHRkZWZbJ2RlZmF1bHQnXSA9ICgpID0+ICh2YWx1ZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChucywgZGVmKTtcblx0cmV0dXJuIG5zO1xufTsiLCJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJhbHRmbG93LXVpOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCIvKlxuXG5CYXNlZCBvZmYgZ2xhbW9yJ3MgU3R5bGVTaGVldCwgdGhhbmtzIFN1bmlsIOKdpO+4j1xuXG5oaWdoIHBlcmZvcm1hbmNlIFN0eWxlU2hlZXQgZm9yIGNzcy1pbi1qcyBzeXN0ZW1zXG5cbi0gdXNlcyBtdWx0aXBsZSBzdHlsZSB0YWdzIGJlaGluZCB0aGUgc2NlbmVzIGZvciBtaWxsaW9ucyBvZiBydWxlc1xuLSB1c2VzIGBpbnNlcnRSdWxlYCBmb3IgYXBwZW5kaW5nIGluIHByb2R1Y3Rpb24gZm9yICptdWNoKiBmYXN0ZXIgcGVyZm9ybWFuY2VcblxuLy8gdXNhZ2VcblxuaW1wb3J0IHsgU3R5bGVTaGVldCB9IGZyb20gJ0BlbW90aW9uL3NoZWV0J1xuXG5sZXQgc3R5bGVTaGVldCA9IG5ldyBTdHlsZVNoZWV0KHsga2V5OiAnJywgY29udGFpbmVyOiBkb2N1bWVudC5oZWFkIH0pXG5cbnN0eWxlU2hlZXQuaW5zZXJ0KCcjYm94IHsgYm9yZGVyOiAxcHggc29saWQgcmVkOyB9Jylcbi0gYXBwZW5kcyBhIGNzcyBydWxlIGludG8gdGhlIHN0eWxlc2hlZXRcblxuc3R5bGVTaGVldC5mbHVzaCgpXG4tIGVtcHRpZXMgdGhlIHN0eWxlc2hlZXQgb2YgYWxsIGl0cyBjb250ZW50c1xuXG4qL1xuLy8gJEZsb3dGaXhNZVxuZnVuY3Rpb24gc2hlZXRGb3JUYWcodGFnKSB7XG4gIGlmICh0YWcuc2hlZXQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgcmV0dXJuIHRhZy5zaGVldDtcbiAgfSAvLyB0aGlzIHdlaXJkbmVzcyBicm91Z2h0IHRvIHlvdSBieSBmaXJlZm94XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jdW1lbnQuc3R5bGVTaGVldHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoZG9jdW1lbnQuc3R5bGVTaGVldHNbaV0ub3duZXJOb2RlID09PSB0YWcpIHtcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIHJldHVybiBkb2N1bWVudC5zdHlsZVNoZWV0c1tpXTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHRhZy5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIG9wdGlvbnMua2V5KTtcblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBvcHRpb25zLm5vbmNlKTtcbiAgfVxuXG4gIHRhZy5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJykpO1xuICB0YWcuc2V0QXR0cmlidXRlKCdkYXRhLXMnLCAnJyk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNpbmcgTm9kZSBpbnN0ZWFkIG9mIEhUTUxFbGVtZW50IHNpbmNlIGNvbnRhaW5lciBtYXkgYmUgYSBTaGFkb3dSb290XG4gIGZ1bmN0aW9uIFN0eWxlU2hlZXQob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl9pbnNlcnRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICB2YXIgYmVmb3JlO1xuXG4gICAgICBpZiAoX3RoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKF90aGlzLmluc2VydGlvblBvaW50KSB7XG4gICAgICAgICAgYmVmb3JlID0gX3RoaXMuaW5zZXJ0aW9uUG9pbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucHJlcGVuZCkge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJlZm9yZSA9IF90aGlzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmVmb3JlID0gX3RoaXMudGFnc1tfdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5jb250YWluZXIuaW5zZXJ0QmVmb3JlKHRhZywgYmVmb3JlKTtcblxuICAgICAgX3RoaXMudGFncy5wdXNoKHRhZyk7XG4gICAgfTtcblxuICAgIHRoaXMuaXNTcGVlZHkgPSBvcHRpb25zLnNwZWVkeSA9PT0gdW5kZWZpbmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA6IG9wdGlvbnMuc3BlZWR5O1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgICB0aGlzLm5vbmNlID0gb3B0aW9ucy5ub25jZTsgLy8ga2V5IGlzIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YS1lbW90aW9uIGF0dHJpYnV0ZSwgaXQncyB1c2VkIHRvIGlkZW50aWZ5IGRpZmZlcmVudCBzaGVldHNcblxuICAgIHRoaXMua2V5ID0gb3B0aW9ucy5rZXk7XG4gICAgdGhpcy5jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICB0aGlzLnByZXBlbmQgPSBvcHRpb25zLnByZXBlbmQ7XG4gICAgdGhpcy5pbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG4gICAgdGhpcy5iZWZvcmUgPSBudWxsO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oeWRyYXRlID0gZnVuY3Rpb24gaHlkcmF0ZShub2Rlcykge1xuICAgIG5vZGVzLmZvckVhY2godGhpcy5faW5zZXJ0VGFnKTtcbiAgfTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB0aGlzLl9pbnNlcnRUYWcoY3JlYXRlU3R5bGVFbGVtZW50KHRoaXMpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gdGhpcy50YWdzW3RoaXMudGFncy5sZW5ndGggLSAxXTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaXNJbXBvcnRSdWxlID0gcnVsZS5jaGFyQ29kZUF0KDApID09PSA2NCAmJiBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNTtcblxuICAgICAgaWYgKGlzSW1wb3J0UnVsZSAmJiB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSkge1xuICAgICAgICAvLyB0aGlzIHdvdWxkIG9ubHkgY2F1c2UgcHJvYmxlbSBpbiBzcGVlZHkgbW9kZVxuICAgICAgICAvLyBidXQgd2UgZG9uJ3Qgd2FudCBlbmFibGluZyBzcGVlZHkgdG8gYWZmZWN0IHRoZSBvYnNlcnZhYmxlIGJlaGF2aW9yXG4gICAgICAgIC8vIHNvIHdlIHJlcG9ydCB0aGlzIGVycm9yIGF0IGFsbCB0aW1lc1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91J3JlIGF0dGVtcHRpbmcgdG8gaW5zZXJ0IHRoZSBmb2xsb3dpbmcgcnVsZTpcXG5cIiArIHJ1bGUgKyAnXFxuXFxuYEBpbXBvcnRgIHJ1bGVzIG11c3QgYmUgYmVmb3JlIGFsbCBvdGhlciB0eXBlcyBvZiBydWxlcyBpbiBhIHN0eWxlc2hlZXQgYnV0IG90aGVyIHJ1bGVzIGhhdmUgYWxyZWFkeSBiZWVuIGluc2VydGVkLiBQbGVhc2UgZW5zdXJlIHRoYXQgYEBpbXBvcnRgIHJ1bGVzIGFyZSBiZWZvcmUgYWxsIG90aGVyIHJ1bGVzLicpO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSB0aGlzLl9hbHJlYWR5SW5zZXJ0ZWRPcmRlckluc2Vuc2l0aXZlUnVsZSB8fCAhaXNJbXBvcnRSdWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzU3BlZWR5KSB7XG4gICAgICB2YXIgc2hlZXQgPSBzaGVldEZvclRhZyh0YWcpO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG4gICAgICAgIHNoZWV0Lmluc2VydFJ1bGUocnVsZSwgc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIS86KC1tb3otcGxhY2Vob2xkZXJ8LW1vei1mb2N1cy1pbm5lcnwtbW96LWZvY3VzcmluZ3wtbXMtaW5wdXQtcGxhY2Vob2xkZXJ8LW1vei1yZWFkLXdyaXRlfC1tb3otcmVhZC1vbmx5fC1tcy1jbGVhcnwtbXMtZXhwYW5kfC1tcy1yZXZlYWwpey8udGVzdChydWxlKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGVyZSB3YXMgYSBwcm9ibGVtIGluc2VydGluZyB0aGUgZm9sbG93aW5nIHJ1bGU6IFxcXCJcIiArIHJ1bGUgKyBcIlxcXCJcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGUpKTtcbiAgICB9XG5cbiAgICB0aGlzLmN0cisrO1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICB0aGlzLnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnKSB7XG4gICAgICByZXR1cm4gdGFnLnBhcmVudE5vZGUgJiYgdGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFnKTtcbiAgICB9KTtcbiAgICB0aGlzLnRhZ3MgPSBbXTtcbiAgICB0aGlzLmN0ciA9IDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhpcy5fYWxyZWFkeUluc2VydGVkT3JkZXJJbnNlbnNpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlU2hlZXQ7XG59KCk7XG5cbmV4cG9ydCB7IFN0eWxlU2hlZXQgfTtcbiIsIi8qKlxuICogQHBhcmFtIHtudW1iZXJ9XG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnNcblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn1cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IHZhciBmcm9tID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgdmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc2ggKHZhbHVlLCBsZW5ndGgpIHtcblx0cmV0dXJuIGNoYXJhdCh2YWx1ZSwgMCkgXiA0NSA/ICgoKCgoKChsZW5ndGggPDwgMikgXiBjaGFyYXQodmFsdWUsIDApKSA8PCAyKSBeIGNoYXJhdCh2YWx1ZSwgMSkpIDw8IDIpIF4gY2hhcmF0KHZhbHVlLCAyKSkgPDwgMikgXiBjaGFyYXQodmFsdWUsIDMpIDogMFxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpbSAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLnRyaW0oKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtSZWdFeHB9IHBhdHRlcm5cbiAqIEByZXR1cm4ge3N0cmluZz99XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaCAodmFsdWUsIHBhdHRlcm4pIHtcblx0cmV0dXJuICh2YWx1ZSA9IHBhdHRlcm4uZXhlYyh2YWx1ZSkpID8gdmFsdWVbMF0gOiB2YWx1ZVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHsoc3RyaW5nfFJlZ0V4cCl9IHBhdHRlcm5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZSAodmFsdWUsIHBhdHRlcm4sIHJlcGxhY2VtZW50KSB7XG5cdHJldHVybiB2YWx1ZS5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2VtZW50KVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5kZXhvZiAodmFsdWUsIHNlYXJjaCkge1xuXHRyZXR1cm4gdmFsdWUuaW5kZXhPZihzZWFyY2gpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXJhdCAodmFsdWUsIGluZGV4KSB7XG5cdHJldHVybiB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSB8IDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3Vic3RyICh2YWx1ZSwgYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gdmFsdWUuc2xpY2UoYmVnaW4sIGVuZClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmxlbiAodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLmxlbmd0aFxufVxuXG4vKipcbiAqIEBwYXJhbSB7YW55W119IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaXplb2YgKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS5sZW5ndGhcbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7YW55W119IGFycmF5XG4gKiBAcmV0dXJuIHthbnl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmQgKHZhbHVlLCBhcnJheSkge1xuXHRyZXR1cm4gYXJyYXkucHVzaCh2YWx1ZSksIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gYXJyYXlcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lIChhcnJheSwgY2FsbGJhY2spIHtcblx0cmV0dXJuIGFycmF5Lm1hcChjYWxsYmFjaykuam9pbignJylcbn1cbiIsImltcG9ydCB7ZnJvbSwgdHJpbSwgY2hhcmF0LCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCBhc3NpZ259IGZyb20gJy4vVXRpbGl0eS5qcydcblxuZXhwb3J0IHZhciBsaW5lID0gMVxuZXhwb3J0IHZhciBjb2x1bW4gPSAxXG5leHBvcnQgdmFyIGxlbmd0aCA9IDBcbmV4cG9ydCB2YXIgcG9zaXRpb24gPSAwXG5leHBvcnQgdmFyIGNoYXJhY3RlciA9IDBcbmV4cG9ydCB2YXIgY2hhcmFjdGVycyA9ICcnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdCB8IG51bGx9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0IHwgbnVsbH0gcGFyZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXSB8IHN0cmluZ30gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0W10gfCBzdHJpbmd9IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub2RlICh2YWx1ZSwgcm9vdCwgcGFyZW50LCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHRyZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgcm9vdDogcm9vdCwgcGFyZW50OiBwYXJlbnQsIHR5cGU6IHR5cGUsIHByb3BzOiBwcm9wcywgY2hpbGRyZW46IGNoaWxkcmVuLCBsaW5lOiBsaW5lLCBjb2x1bW46IGNvbHVtbiwgbGVuZ3RoOiBsZW5ndGgsIHJldHVybjogJyd9XG59XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29weSAocm9vdCwgcHJvcHMpIHtcblx0cmV0dXJuIGFzc2lnbihub2RlKCcnLCBudWxsLCBudWxsLCAnJywgbnVsbCwgbnVsbCwgMCksIHJvb3QsIHtsZW5ndGg6IC1yb290Lmxlbmd0aH0sIHByb3BzKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYXIgKCkge1xuXHRyZXR1cm4gY2hhcmFjdGVyXG59XG5cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJldiAoKSB7XG5cdGNoYXJhY3RlciA9IHBvc2l0aW9uID4gMCA/IGNoYXJhdChjaGFyYWN0ZXJzLCAtLXBvc2l0aW9uKSA6IDBcblxuXHRpZiAoY29sdW1uLS0sIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZS0tXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5leHQgKCkge1xuXHRjaGFyYWN0ZXIgPSBwb3NpdGlvbiA8IGxlbmd0aCA/IGNoYXJhdChjaGFyYWN0ZXJzLCBwb3NpdGlvbisrKSA6IDBcblxuXHRpZiAoY29sdW1uKyssIGNoYXJhY3RlciA9PT0gMTApXG5cdFx0Y29sdW1uID0gMSwgbGluZSsrXG5cblx0cmV0dXJuIGNoYXJhY3RlclxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBlZWsgKCkge1xuXHRyZXR1cm4gY2hhcmF0KGNoYXJhY3RlcnMsIHBvc2l0aW9uKVxufVxuXG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhcmV0ICgpIHtcblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuXHRyZXR1cm4gc3Vic3RyKGNoYXJhY3RlcnMsIGJlZ2luLCBlbmQpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuICh0eXBlKSB7XG5cdHN3aXRjaCAodHlwZSkge1xuXHRcdC8vIFxcMCBcXHQgXFxuIFxcciBcXHMgd2hpdGVzcGFjZSB0b2tlblxuXHRcdGNhc2UgMDogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuXHRcdFx0cmV0dXJuIDVcblx0XHQvLyAhICsgLCAvID4gQCB+IGlzb2xhdGUgdG9rZW5cblx0XHRjYXNlIDMzOiBjYXNlIDQzOiBjYXNlIDQ0OiBjYXNlIDQ3OiBjYXNlIDYyOiBjYXNlIDY0OiBjYXNlIDEyNjpcblx0XHQvLyA7IHsgfSBicmVha3BvaW50IHRva2VuXG5cdFx0Y2FzZSA1OTogY2FzZSAxMjM6IGNhc2UgMTI1OlxuXHRcdFx0cmV0dXJuIDRcblx0XHQvLyA6IGFjY29tcGFuaWVkIHRva2VuXG5cdFx0Y2FzZSA1ODpcblx0XHRcdHJldHVybiAzXG5cdFx0Ly8gXCIgJyAoIFsgb3BlbmluZyBkZWxpbWl0IHRva2VuXG5cdFx0Y2FzZSAzNDogY2FzZSAzOTogY2FzZSA0MDogY2FzZSA5MTpcblx0XHRcdHJldHVybiAyXG5cdFx0Ly8gKSBdIGNsb3NpbmcgZGVsaW1pdCB0b2tlblxuXHRcdGNhc2UgNDE6IGNhc2UgOTM6XG5cdFx0XHRyZXR1cm4gMVxuXHR9XG5cblx0cmV0dXJuIDBcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEByZXR1cm4ge2FueVtdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBsaW5lID0gY29sdW1uID0gMSwgbGVuZ3RoID0gc3RybGVuKGNoYXJhY3RlcnMgPSB2YWx1ZSksIHBvc2l0aW9uID0gMCwgW11cbn1cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEByZXR1cm4ge2FueX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYWxsb2MgKHZhbHVlKSB7XG5cdHJldHVybiBjaGFyYWN0ZXJzID0gJycsIHZhbHVlXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGltaXQgKHR5cGUpIHtcblx0cmV0dXJuIHRyaW0oc2xpY2UocG9zaXRpb24gLSAxLCBkZWxpbWl0ZXIodHlwZSA9PT0gOTEgPyB0eXBlICsgMiA6IHR5cGUgPT09IDQwID8gdHlwZSArIDEgOiB0eXBlKSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplICh2YWx1ZSkge1xuXHRyZXR1cm4gZGVhbGxvYyh0b2tlbml6ZXIoYWxsb2ModmFsdWUpKSlcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdHlwZVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5leHBvcnQgZnVuY3Rpb24gd2hpdGVzcGFjZSAodHlwZSkge1xuXHR3aGlsZSAoY2hhcmFjdGVyID0gcGVlaygpKVxuXHRcdGlmIChjaGFyYWN0ZXIgPCAzMylcblx0XHRcdG5leHQoKVxuXHRcdGVsc2Vcblx0XHRcdGJyZWFrXG5cblx0cmV0dXJuIHRva2VuKHR5cGUpID4gMiB8fCB0b2tlbihjaGFyYWN0ZXIpID4gMyA/ICcnIDogJyAnXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmdbXX0gY2hpbGRyZW5cbiAqIEByZXR1cm4ge3N0cmluZ1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9rZW5pemVyIChjaGlsZHJlbikge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdHN3aXRjaCAodG9rZW4oY2hhcmFjdGVyKSkge1xuXHRcdFx0Y2FzZSAwOiBhcHBlbmQoaWRlbnRpZmllcihwb3NpdGlvbiAtIDEpLCBjaGlsZHJlbilcblx0XHRcdFx0YnJlYWtcblx0XHRcdGNhc2UgMjogYXBwZW5kKGRlbGltaXQoY2hhcmFjdGVyKSwgY2hpbGRyZW4pXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHRkZWZhdWx0OiBhcHBlbmQoZnJvbShjaGFyYWN0ZXIpLCBjaGlsZHJlbilcblx0XHR9XG5cblx0cmV0dXJuIGNoaWxkcmVuXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwaW5nIChpbmRleCwgY291bnQpIHtcblx0d2hpbGUgKC0tY291bnQgJiYgbmV4dCgpKVxuXHRcdC8vIG5vdCAwLTkgQS1GIGEtZlxuXHRcdGlmIChjaGFyYWN0ZXIgPCA0OCB8fCBjaGFyYWN0ZXIgPiAxMDIgfHwgKGNoYXJhY3RlciA+IDU3ICYmIGNoYXJhY3RlciA8IDY1KSB8fCAoY2hhcmFjdGVyID4gNzAgJiYgY2hhcmFjdGVyIDwgOTcpKVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gc2xpY2UoaW5kZXgsIGNhcmV0KCkgKyAoY291bnQgPCA2ICYmIHBlZWsoKSA9PSAzMiAmJiBuZXh0KCkgPT0gMzIpKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB0eXBlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxpbWl0ZXIgKHR5cGUpIHtcblx0d2hpbGUgKG5leHQoKSlcblx0XHRzd2l0Y2ggKGNoYXJhY3Rlcikge1xuXHRcdFx0Ly8gXSApIFwiICdcblx0XHRcdGNhc2UgdHlwZTpcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uXG5cdFx0XHQvLyBcIiAnXG5cdFx0XHRjYXNlIDM0OiBjYXNlIDM5OlxuXHRcdFx0XHRpZiAodHlwZSAhPT0gMzQgJiYgdHlwZSAhPT0gMzkpXG5cdFx0XHRcdFx0ZGVsaW1pdGVyKGNoYXJhY3Rlcilcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmICh0eXBlID09PSA0MSlcblx0XHRcdFx0XHRkZWxpbWl0ZXIodHlwZSlcblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIFxcXG5cdFx0XHRjYXNlIDkyOlxuXHRcdFx0XHRuZXh0KClcblx0XHRcdFx0YnJlYWtcblx0XHR9XG5cblx0cmV0dXJuIHBvc2l0aW9uXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHR5cGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudGVyICh0eXBlLCBpbmRleCkge1xuXHR3aGlsZSAobmV4dCgpKVxuXHRcdC8vIC8vXG5cdFx0aWYgKHR5cGUgKyBjaGFyYWN0ZXIgPT09IDQ3ICsgMTApXG5cdFx0XHRicmVha1xuXHRcdC8vIC8qXG5cdFx0ZWxzZSBpZiAodHlwZSArIGNoYXJhY3RlciA9PT0gNDIgKyA0MiAmJiBwZWVrKCkgPT09IDQ3KVxuXHRcdFx0YnJlYWtcblxuXHRyZXR1cm4gJy8qJyArIHNsaWNlKGluZGV4LCBwb3NpdGlvbiAtIDEpICsgJyonICsgZnJvbSh0eXBlID09PSA0NyA/IHR5cGUgOiBuZXh0KCkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGlmaWVyIChpbmRleCkge1xuXHR3aGlsZSAoIXRva2VuKHBlZWsoKSkpXG5cdFx0bmV4dCgpXG5cblx0cmV0dXJuIHNsaWNlKGluZGV4LCBwb3NpdGlvbilcbn1cbiIsImV4cG9ydCB2YXIgTVMgPSAnLW1zLSdcbmV4cG9ydCB2YXIgTU9aID0gJy1tb3otJ1xuZXhwb3J0IHZhciBXRUJLSVQgPSAnLXdlYmtpdC0nXG5cbmV4cG9ydCB2YXIgQ09NTUVOVCA9ICdjb21tJ1xuZXhwb3J0IHZhciBSVUxFU0VUID0gJ3J1bGUnXG5leHBvcnQgdmFyIERFQ0xBUkFUSU9OID0gJ2RlY2wnXG5cbmV4cG9ydCB2YXIgUEFHRSA9ICdAcGFnZSdcbmV4cG9ydCB2YXIgTUVESUEgPSAnQG1lZGlhJ1xuZXhwb3J0IHZhciBJTVBPUlQgPSAnQGltcG9ydCdcbmV4cG9ydCB2YXIgQ0hBUlNFVCA9ICdAY2hhcnNldCdcbmV4cG9ydCB2YXIgVklFV1BPUlQgPSAnQHZpZXdwb3J0J1xuZXhwb3J0IHZhciBTVVBQT1JUUyA9ICdAc3VwcG9ydHMnXG5leHBvcnQgdmFyIERPQ1VNRU5UID0gJ0Bkb2N1bWVudCdcbmV4cG9ydCB2YXIgTkFNRVNQQUNFID0gJ0BuYW1lc3BhY2UnXG5leHBvcnQgdmFyIEtFWUZSQU1FUyA9ICdAa2V5ZnJhbWVzJ1xuZXhwb3J0IHZhciBGT05UX0ZBQ0UgPSAnQGZvbnQtZmFjZSdcbmV4cG9ydCB2YXIgQ09VTlRFUl9TVFlMRSA9ICdAY291bnRlci1zdHlsZSdcbmV4cG9ydCB2YXIgRk9OVF9GRUFUVVJFX1ZBTFVFUyA9ICdAZm9udC1mZWF0dXJlLXZhbHVlcydcbiIsImltcG9ydCB7SU1QT1JULCBDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTiwgS0VZRlJBTUVTfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge3N0cmxlbiwgc2l6ZW9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3RbXX0gY2hpbGRyZW5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemUgKGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHR2YXIgb3V0cHV0ID0gJydcblx0dmFyIGxlbmd0aCA9IHNpemVvZihjaGlsZHJlbilcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuXHRcdG91dHB1dCArPSBjYWxsYmFjayhjaGlsZHJlbltpXSwgaSwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdHJldHVybiBvdXRwdXRcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeSAoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuXHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdGNhc2UgSU1QT1JUOiBjYXNlIERFQ0xBUkFUSU9OOiByZXR1cm4gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnJldHVybiB8fCBlbGVtZW50LnZhbHVlXG5cdFx0Y2FzZSBDT01NRU5UOiByZXR1cm4gJydcblx0XHRjYXNlIEtFWUZSQU1FUzogcmV0dXJuIGVsZW1lbnQucmV0dXJuID0gZWxlbWVudC52YWx1ZSArICd7JyArIHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykgKyAnfSdcblx0XHRjYXNlIFJVTEVTRVQ6IGVsZW1lbnQudmFsdWUgPSBlbGVtZW50LnByb3BzLmpvaW4oJywnKVxuXHR9XG5cblx0cmV0dXJuIHN0cmxlbihjaGlsZHJlbiA9IHNlcmlhbGl6ZShlbGVtZW50LmNoaWxkcmVuLCBjYWxsYmFjaykpID8gZWxlbWVudC5yZXR1cm4gPSBlbGVtZW50LnZhbHVlICsgJ3snICsgY2hpbGRyZW4gKyAnfScgOiAnJ1xufVxuIiwiaW1wb3J0IHtDT01NRU5ULCBSVUxFU0VULCBERUNMQVJBVElPTn0gZnJvbSAnLi9FbnVtLmpzJ1xuaW1wb3J0IHthYnMsIGNoYXJhdCwgdHJpbSwgZnJvbSwgc2l6ZW9mLCBzdHJsZW4sIHN1YnN0ciwgYXBwZW5kLCByZXBsYWNlLCBpbmRleG9mfSBmcm9tICcuL1V0aWxpdHkuanMnXG5pbXBvcnQge25vZGUsIGNoYXIsIHByZXYsIG5leHQsIHBlZWssIGNhcmV0LCBhbGxvYywgZGVhbGxvYywgZGVsaW1pdCwgd2hpdGVzcGFjZSwgZXNjYXBpbmcsIGlkZW50aWZpZXIsIGNvbW1lbnRlcn0gZnJvbSAnLi9Ub2tlbml6ZXIuanMnXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtvYmplY3RbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBpbGUgKHZhbHVlKSB7XG5cdHJldHVybiBkZWFsbG9jKHBhcnNlKCcnLCBudWxsLCBudWxsLCBudWxsLCBbJyddLCB2YWx1ZSA9IGFsbG9jKHZhbHVlKSwgMCwgWzBdLCB2YWx1ZSkpXG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vdFxuICogQHBhcmFtIHtvYmplY3Q/fSBwYXJlbnRcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJ1bGVzXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc2V0c1xuICogQHBhcmFtIHtudW1iZXJbXX0gcHNldWRvXG4gKiBAcGFyYW0ge251bWJlcltdfSBwb2ludHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGRlY2xhcmF0aW9uc1xuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UgKHZhbHVlLCByb290LCBwYXJlbnQsIHJ1bGUsIHJ1bGVzLCBydWxlc2V0cywgcHNldWRvLCBwb2ludHMsIGRlY2xhcmF0aW9ucykge1xuXHR2YXIgaW5kZXggPSAwXG5cdHZhciBvZmZzZXQgPSAwXG5cdHZhciBsZW5ndGggPSBwc2V1ZG9cblx0dmFyIGF0cnVsZSA9IDBcblx0dmFyIHByb3BlcnR5ID0gMFxuXHR2YXIgcHJldmlvdXMgPSAwXG5cdHZhciB2YXJpYWJsZSA9IDFcblx0dmFyIHNjYW5uaW5nID0gMVxuXHR2YXIgYW1wZXJzYW5kID0gMVxuXHR2YXIgY2hhcmFjdGVyID0gMFxuXHR2YXIgdHlwZSA9ICcnXG5cdHZhciBwcm9wcyA9IHJ1bGVzXG5cdHZhciBjaGlsZHJlbiA9IHJ1bGVzZXRzXG5cdHZhciByZWZlcmVuY2UgPSBydWxlXG5cdHZhciBjaGFyYWN0ZXJzID0gdHlwZVxuXG5cdHdoaWxlIChzY2FubmluZylcblx0XHRzd2l0Y2ggKHByZXZpb3VzID0gY2hhcmFjdGVyLCBjaGFyYWN0ZXIgPSBuZXh0KCkpIHtcblx0XHRcdC8vIChcblx0XHRcdGNhc2UgNDA6XG5cdFx0XHRcdGlmIChwcmV2aW91cyAhPSAxMDggJiYgY2hhcmF0KGNoYXJhY3RlcnMsIGxlbmd0aCAtIDEpID09IDU4KSB7XG5cdFx0XHRcdFx0aWYgKGluZGV4b2YoY2hhcmFjdGVycyArPSByZXBsYWNlKGRlbGltaXQoY2hhcmFjdGVyKSwgJyYnLCAnJlxcZicpLCAnJlxcZicpICE9IC0xKVxuXHRcdFx0XHRcdFx0YW1wZXJzYW5kID0gLTFcblx0XHRcdFx0XHRicmVha1xuXHRcdFx0XHR9XG5cdFx0XHQvLyBcIiAnIFtcblx0XHRcdGNhc2UgMzQ6IGNhc2UgMzk6IGNhc2UgOTE6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZGVsaW1pdChjaGFyYWN0ZXIpXG5cdFx0XHRcdGJyZWFrXG5cdFx0XHQvLyBcXHQgXFxuIFxcciBcXHNcblx0XHRcdGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjpcblx0XHRcdFx0Y2hhcmFjdGVycyArPSB3aGl0ZXNwYWNlKHByZXZpb3VzKVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8gXFxcblx0XHRcdGNhc2UgOTI6XG5cdFx0XHRcdGNoYXJhY3RlcnMgKz0gZXNjYXBpbmcoY2FyZXQoKSAtIDEsIDcpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHQvLyAvXG5cdFx0XHRjYXNlIDQ3OlxuXHRcdFx0XHRzd2l0Y2ggKHBlZWsoKSkge1xuXHRcdFx0XHRcdGNhc2UgNDI6IGNhc2UgNDc6XG5cdFx0XHRcdFx0XHRhcHBlbmQoY29tbWVudChjb21tZW50ZXIobmV4dCgpLCBjYXJldCgpKSwgcm9vdCwgcGFyZW50KSwgZGVjbGFyYXRpb25zKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0Y2hhcmFjdGVycyArPSAnLydcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVha1xuXHRcdFx0Ly8ge1xuXHRcdFx0Y2FzZSAxMjMgKiB2YXJpYWJsZTpcblx0XHRcdFx0cG9pbnRzW2luZGV4KytdID0gc3RybGVuKGNoYXJhY3RlcnMpICogYW1wZXJzYW5kXG5cdFx0XHQvLyB9IDsgXFwwXG5cdFx0XHRjYXNlIDEyNSAqIHZhcmlhYmxlOiBjYXNlIDU5OiBjYXNlIDA6XG5cdFx0XHRcdHN3aXRjaCAoY2hhcmFjdGVyKSB7XG5cdFx0XHRcdFx0Ly8gXFwwIH1cblx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgMTI1OiBzY2FubmluZyA9IDBcblx0XHRcdFx0XHQvLyA7XG5cdFx0XHRcdFx0Y2FzZSA1OSArIG9mZnNldDpcblx0XHRcdFx0XHRcdGlmIChwcm9wZXJ0eSA+IDAgJiYgKHN0cmxlbihjaGFyYWN0ZXJzKSAtIGxlbmd0aCkpXG5cdFx0XHRcdFx0XHRcdGFwcGVuZChwcm9wZXJ0eSA+IDMyID8gZGVjbGFyYXRpb24oY2hhcmFjdGVycyArICc7JywgcnVsZSwgcGFyZW50LCBsZW5ndGggLSAxKSA6IGRlY2xhcmF0aW9uKHJlcGxhY2UoY2hhcmFjdGVycywgJyAnLCAnJykgKyAnOycsIHJ1bGUsIHBhcmVudCwgbGVuZ3RoIC0gMiksIGRlY2xhcmF0aW9ucylcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gQCA7XG5cdFx0XHRcdFx0Y2FzZSA1OTogY2hhcmFjdGVycyArPSAnOydcblx0XHRcdFx0XHQvLyB7IHJ1bGUvYXQtcnVsZVxuXHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRhcHBlbmQocmVmZXJlbmNlID0gcnVsZXNldChjaGFyYWN0ZXJzLCByb290LCBwYXJlbnQsIGluZGV4LCBvZmZzZXQsIHJ1bGVzLCBwb2ludHMsIHR5cGUsIHByb3BzID0gW10sIGNoaWxkcmVuID0gW10sIGxlbmd0aCksIHJ1bGVzZXRzKVxuXG5cdFx0XHRcdFx0XHRpZiAoY2hhcmFjdGVyID09PSAxMjMpXG5cdFx0XHRcdFx0XHRcdGlmIChvZmZzZXQgPT09IDApXG5cdFx0XHRcdFx0XHRcdFx0cGFyc2UoY2hhcmFjdGVycywgcm9vdCwgcmVmZXJlbmNlLCByZWZlcmVuY2UsIHByb3BzLCBydWxlc2V0cywgbGVuZ3RoLCBwb2ludHMsIGNoaWxkcmVuKVxuXHRcdFx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0XHRcdFx0c3dpdGNoIChhdHJ1bGUgPT09IDk5ICYmIGNoYXJhdChjaGFyYWN0ZXJzLCAzKSA9PT0gMTEwID8gMTAwIDogYXRydWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBkIG0gc1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2FzZSAxMDA6IGNhc2UgMTA5OiBjYXNlIDExNTpcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyc2UodmFsdWUsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBydWxlICYmIGFwcGVuZChydWxlc2V0KHZhbHVlLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgMCwgMCwgcnVsZXMsIHBvaW50cywgdHlwZSwgcnVsZXMsIHByb3BzID0gW10sIGxlbmd0aCksIGNoaWxkcmVuKSwgcnVsZXMsIGNoaWxkcmVuLCBsZW5ndGgsIHBvaW50cywgcnVsZSA/IHByb3BzIDogY2hpbGRyZW4pXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJzZShjaGFyYWN0ZXJzLCByZWZlcmVuY2UsIHJlZmVyZW5jZSwgcmVmZXJlbmNlLCBbJyddLCBjaGlsZHJlbiwgMCwgcG9pbnRzLCBjaGlsZHJlbilcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbmRleCA9IG9mZnNldCA9IHByb3BlcnR5ID0gMCwgdmFyaWFibGUgPSBhbXBlcnNhbmQgPSAxLCB0eXBlID0gY2hhcmFjdGVycyA9ICcnLCBsZW5ndGggPSBwc2V1ZG9cblx0XHRcdFx0YnJlYWtcblx0XHRcdC8vIDpcblx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdGxlbmd0aCA9IDEgKyBzdHJsZW4oY2hhcmFjdGVycyksIHByb3BlcnR5ID0gcHJldmlvdXNcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdGlmICh2YXJpYWJsZSA8IDEpXG5cdFx0XHRcdFx0aWYgKGNoYXJhY3RlciA9PSAxMjMpXG5cdFx0XHRcdFx0XHQtLXZhcmlhYmxlXG5cdFx0XHRcdFx0ZWxzZSBpZiAoY2hhcmFjdGVyID09IDEyNSAmJiB2YXJpYWJsZSsrID09IDAgJiYgcHJldigpID09IDEyNSlcblx0XHRcdFx0XHRcdGNvbnRpbnVlXG5cblx0XHRcdFx0c3dpdGNoIChjaGFyYWN0ZXJzICs9IGZyb20oY2hhcmFjdGVyKSwgY2hhcmFjdGVyICogdmFyaWFibGUpIHtcblx0XHRcdFx0XHQvLyAmXG5cdFx0XHRcdFx0Y2FzZSAzODpcblx0XHRcdFx0XHRcdGFtcGVyc2FuZCA9IG9mZnNldCA+IDAgPyAxIDogKGNoYXJhY3RlcnMgKz0gJ1xcZicsIC0xKVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyAsXG5cdFx0XHRcdFx0Y2FzZSA0NDpcblx0XHRcdFx0XHRcdHBvaW50c1tpbmRleCsrXSA9IChzdHJsZW4oY2hhcmFjdGVycykgLSAxKSAqIGFtcGVyc2FuZCwgYW1wZXJzYW5kID0gMVxuXHRcdFx0XHRcdFx0YnJlYWtcblx0XHRcdFx0XHQvLyBAXG5cdFx0XHRcdFx0Y2FzZSA2NDpcblx0XHRcdFx0XHRcdC8vIC1cblx0XHRcdFx0XHRcdGlmIChwZWVrKCkgPT09IDQ1KVxuXHRcdFx0XHRcdFx0XHRjaGFyYWN0ZXJzICs9IGRlbGltaXQobmV4dCgpKVxuXG5cdFx0XHRcdFx0XHRhdHJ1bGUgPSBwZWVrKCksIG9mZnNldCA9IGxlbmd0aCA9IHN0cmxlbih0eXBlID0gY2hhcmFjdGVycyArPSBpZGVudGlmaWVyKGNhcmV0KCkpKSwgY2hhcmFjdGVyKytcblx0XHRcdFx0XHRcdGJyZWFrXG5cdFx0XHRcdFx0Ly8gLVxuXHRcdFx0XHRcdGNhc2UgNDU6XG5cdFx0XHRcdFx0XHRpZiAocHJldmlvdXMgPT09IDQ1ICYmIHN0cmxlbihjaGFyYWN0ZXJzKSA9PSAyKVxuXHRcdFx0XHRcdFx0XHR2YXJpYWJsZSA9IDBcblx0XHRcdFx0fVxuXHRcdH1cblxuXHRyZXR1cm4gcnVsZXNldHNcbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBydWxlc1xuICogQHBhcmFtIHtudW1iZXJbXX0gcG9pbnRzXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHBhcmFtIHtzdHJpbmdbXX0gcHJvcHNcbiAqIEBwYXJhbSB7c3RyaW5nW119IGNoaWxkcmVuXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydWxlc2V0ICh2YWx1ZSwgcm9vdCwgcGFyZW50LCBpbmRleCwgb2Zmc2V0LCBydWxlcywgcG9pbnRzLCB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aCkge1xuXHR2YXIgcG9zdCA9IG9mZnNldCAtIDFcblx0dmFyIHJ1bGUgPSBvZmZzZXQgPT09IDAgPyBydWxlcyA6IFsnJ11cblx0dmFyIHNpemUgPSBzaXplb2YocnVsZSlcblxuXHRmb3IgKHZhciBpID0gMCwgaiA9IDAsIGsgPSAwOyBpIDwgaW5kZXg7ICsraSlcblx0XHRmb3IgKHZhciB4ID0gMCwgeSA9IHN1YnN0cih2YWx1ZSwgcG9zdCArIDEsIHBvc3QgPSBhYnMoaiA9IHBvaW50c1tpXSkpLCB6ID0gdmFsdWU7IHggPCBzaXplOyArK3gpXG5cdFx0XHRpZiAoeiA9IHRyaW0oaiA+IDAgPyBydWxlW3hdICsgJyAnICsgeSA6IHJlcGxhY2UoeSwgLyZcXGYvZywgcnVsZVt4XSkpKVxuXHRcdFx0XHRwcm9wc1trKytdID0gelxuXG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIG9mZnNldCA9PT0gMCA/IFJVTEVTRVQgOiB0eXBlLCBwcm9wcywgY2hpbGRyZW4sIGxlbmd0aClcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7b2JqZWN0fSByb290XG4gKiBAcGFyYW0ge29iamVjdD99IHBhcmVudFxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29tbWVudCAodmFsdWUsIHJvb3QsIHBhcmVudCkge1xuXHRyZXR1cm4gbm9kZSh2YWx1ZSwgcm9vdCwgcGFyZW50LCBDT01NRU5ULCBmcm9tKGNoYXIoKSksIHN1YnN0cih2YWx1ZSwgMiwgLTIpLCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IHJvb3RcbiAqIEBwYXJhbSB7b2JqZWN0P30gcGFyZW50XG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAodmFsdWUsIHJvb3QsIHBhcmVudCwgbGVuZ3RoKSB7XG5cdHJldHVybiBub2RlKHZhbHVlLCByb290LCBwYXJlbnQsIERFQ0xBUkFUSU9OLCBzdWJzdHIodmFsdWUsIDAsIGxlbmd0aCksIHN1YnN0cih2YWx1ZSwgbGVuZ3RoICsgMSwgLTEpLCBsZW5ndGgpXG59XG4iLCJpbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IHsgZGVhbGxvYywgYWxsb2MsIG5leHQsIHRva2VuLCBmcm9tLCBwZWVrLCBkZWxpbWl0LCBzbGljZSwgcG9zaXRpb24sIFJVTEVTRVQsIGNvbWJpbmUsIG1hdGNoLCBzZXJpYWxpemUsIGNvcHksIHJlcGxhY2UsIFdFQktJVCwgTU9aLCBNUywgS0VZRlJBTUVTLCBERUNMQVJBVElPTiwgaGFzaCwgY2hhcmF0LCBzdHJsZW4sIGluZGV4b2YsIHN0cmluZ2lmeSwgQ09NTUVOVCwgcnVsZXNoZWV0LCBtaWRkbGV3YXJlLCBjb21waWxlIH0gZnJvbSAnc3R5bGlzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcgPSBmdW5jdGlvbiBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcoYmVnaW4sIHBvaW50cywgaW5kZXgpIHtcbiAgdmFyIHByZXZpb3VzID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IDA7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSBwZWVrKCk7IC8vICZcXGZcblxuICAgIGlmIChwcmV2aW91cyA9PT0gMzggJiYgY2hhcmFjdGVyID09PSAxMikge1xuICAgICAgcG9pbnRzW2luZGV4XSA9IDE7XG4gICAgfVxuXG4gICAgaWYgKHRva2VuKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHJldHVybiBzbGljZShiZWdpbiwgcG9zaXRpb24pO1xufTtcblxudmFyIHRvUnVsZXMgPSBmdW5jdGlvbiB0b1J1bGVzKHBhcnNlZCwgcG9pbnRzKSB7XG4gIC8vIHByZXRlbmQgd2UndmUgc3RhcnRlZCB3aXRoIGEgY29tbWFcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjaGFyYWN0ZXIgPSA0NDtcblxuICBkbyB7XG4gICAgc3dpdGNoICh0b2tlbihjaGFyYWN0ZXIpKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIC8vICZcXGZcbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gMzggJiYgcGVlaygpID09PSAxMikge1xuICAgICAgICAgIC8vIHRoaXMgaXMgbm90IDEwMCUgY29ycmVjdCwgd2UgZG9uJ3QgYWNjb3VudCBmb3IgbGl0ZXJhbCBzZXF1ZW5jZXMgaGVyZSAtIGxpa2UgZm9yIGV4YW1wbGUgcXVvdGVkIHN0cmluZ3NcbiAgICAgICAgICAvLyBzdHlsaXMgaW5zZXJ0cyBcXGYgYWZ0ZXIgJiB0byBrbm93IHdoZW4gJiB3aGVyZSBpdCBzaG91bGQgcmVwbGFjZSB0aGlzIHNlcXVlbmNlIHdpdGggdGhlIGNvbnRleHQgc2VsZWN0b3JcbiAgICAgICAgICAvLyBhbmQgd2hlbiBpdCBzaG91bGQganVzdCBjb25jYXRlbmF0ZSB0aGUgb3V0ZXIgYW5kIGlubmVyIHNlbGVjdG9yc1xuICAgICAgICAgIC8vIGl0J3MgdmVyeSB1bmxpa2VseSBmb3IgdGhpcyBzZXF1ZW5jZSB0byBhY3R1YWxseSBhcHBlYXIgaW4gYSBkaWZmZXJlbnQgY29udGV4dCwgc28gd2UganVzdCBsZXZlcmFnZSB0aGlzIGZhY3QgaGVyZVxuICAgICAgICAgIHBvaW50c1tpbmRleF0gPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmcocG9zaXRpb24gLSAxLCBwb2ludHMsIGluZGV4KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcGFyc2VkW2luZGV4XSArPSBkZWxpbWl0KGNoYXJhY3Rlcik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDQ6XG4gICAgICAgIC8vIGNvbW1hXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IDQ0KSB7XG4gICAgICAgICAgLy8gY29sb25cbiAgICAgICAgICBwYXJzZWRbKytpbmRleF0gPSBwZWVrKCkgPT09IDU4ID8gJyZcXGYnIDogJyc7XG4gICAgICAgICAgcG9pbnRzW2luZGV4XSA9IHBhcnNlZFtpbmRleF0ubGVuZ3RoO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlZFtpbmRleF0gKz0gZnJvbShjaGFyYWN0ZXIpO1xuICAgIH1cbiAgfSB3aGlsZSAoY2hhcmFjdGVyID0gbmV4dCgpKTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxudmFyIGdldFJ1bGVzID0gZnVuY3Rpb24gZ2V0UnVsZXModmFsdWUsIHBvaW50cykge1xuICByZXR1cm4gZGVhbGxvYyh0b1J1bGVzKGFsbG9jKHZhbHVlKSwgcG9pbnRzKSk7XG59OyAvLyBXZWFrU2V0IHdvdWxkIGJlIG1vcmUgYXBwcm9wcmlhdGUsIGJ1dCBvbmx5IFdlYWtNYXAgaXMgc3VwcG9ydGVkIGluIElFMTFcblxuXG52YXIgZml4ZWRFbGVtZW50cyA9IC8qICNfX1BVUkVfXyAqL25ldyBXZWFrTWFwKCk7XG52YXIgY29tcGF0ID0gZnVuY3Rpb24gY29tcGF0KGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQudHlwZSAhPT0gJ3J1bGUnIHx8ICFlbGVtZW50LnBhcmVudCB8fCAvLyBwb3NpdGl2ZSAubGVuZ3RoIGluZGljYXRlcyB0aGF0IHRoaXMgcnVsZSBjb250YWlucyBwc2V1ZG9cbiAgLy8gbmVnYXRpdmUgLmxlbmd0aCBpbmRpY2F0ZXMgdGhhdCB0aGlzIHJ1bGUgaGFzIGJlZW4gYWxyZWFkeSBwcmVmaXhlZFxuICBlbGVtZW50Lmxlbmd0aCA8IDEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlLFxuICAgICAgcGFyZW50ID0gZWxlbWVudC5wYXJlbnQ7XG4gIHZhciBpc0ltcGxpY2l0UnVsZSA9IGVsZW1lbnQuY29sdW1uID09PSBwYXJlbnQuY29sdW1uICYmIGVsZW1lbnQubGluZSA9PT0gcGFyZW50LmxpbmU7XG5cbiAgd2hpbGUgKHBhcmVudC50eXBlICE9PSAncnVsZScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIGlmICghcGFyZW50KSByZXR1cm47XG4gIH0gLy8gc2hvcnQtY2lyY3VpdCBmb3IgdGhlIHNpbXBsZXN0IGNhc2VcblxuXG4gIGlmIChlbGVtZW50LnByb3BzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZS5jaGFyQ29kZUF0KDApICE9PSA1OFxuICAvKiBjb2xvbiAqL1xuICAmJiAhZml4ZWRFbGVtZW50cy5nZXQocGFyZW50KSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBpZiB0aGlzIGlzIGFuIGltcGxpY2l0bHkgaW5zZXJ0ZWQgcnVsZSAodGhlIG9uZSBlYWdlcmx5IGluc2VydGVkIGF0IHRoZSBlYWNoIG5ldyBuZXN0ZWQgbGV2ZWwpXG4gIC8vIHRoZW4gdGhlIHByb3BzIGhhcyBhbHJlYWR5IGJlZW4gbWFuaXB1bGF0ZWQgYmVmb3JlaGFuZCBhcyB0aGV5IHRoYXQgYXJyYXkgaXMgc2hhcmVkIGJldHdlZW4gaXQgYW5kIGl0cyBcInJ1bGUgcGFyZW50XCJcblxuXG4gIGlmIChpc0ltcGxpY2l0UnVsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZpeGVkRWxlbWVudHMuc2V0KGVsZW1lbnQsIHRydWUpO1xuICB2YXIgcG9pbnRzID0gW107XG4gIHZhciBydWxlcyA9IGdldFJ1bGVzKHZhbHVlLCBwb2ludHMpO1xuICB2YXIgcGFyZW50UnVsZXMgPSBwYXJlbnQucHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcmVudFJ1bGVzLmxlbmd0aDsgaisrLCBrKyspIHtcbiAgICAgIGVsZW1lbnQucHJvcHNba10gPSBwb2ludHNbaV0gPyBydWxlc1tpXS5yZXBsYWNlKC8mXFxmL2csIHBhcmVudFJ1bGVzW2pdKSA6IHBhcmVudFJ1bGVzW2pdICsgXCIgXCIgKyBydWxlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgcmVtb3ZlTGFiZWwgPSBmdW5jdGlvbiByZW1vdmVMYWJlbChlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50LnR5cGUgPT09ICdkZWNsJykge1xuICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICBpZiAoIC8vIGNoYXJjb2RlIGZvciBsXG4gICAgdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMTA4ICYmIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgdmFsdWUuY2hhckNvZGVBdCgyKSA9PT0gOTgpIHtcbiAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgZWxlbWVudFtcInJldHVyblwiXSA9ICcnO1xuICAgICAgZWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfVxufTtcbnZhciBpZ25vcmVGbGFnID0gJ2Vtb3Rpb24tZGlzYWJsZS1zZXJ2ZXItcmVuZGVyaW5nLXVuc2FmZS1zZWxlY3Rvci13YXJuaW5nLXBsZWFzZS1kby1ub3QtdXNlLXRoaXMtdGhlLXdhcm5pbmctZXhpc3RzLWZvci1hLXJlYXNvbic7XG5cbnZhciBpc0lnbm9yaW5nQ29tbWVudCA9IGZ1bmN0aW9uIGlzSWdub3JpbmdDb21tZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQudHlwZSA9PT0gJ2NvbW0nICYmIGVsZW1lbnQuY2hpbGRyZW4uaW5kZXhPZihpZ25vcmVGbGFnKSA+IC0xO1xufTtcblxudmFyIGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtID0gZnVuY3Rpb24gY3JlYXRlVW5zYWZlU2VsZWN0b3JzQWxhcm0oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgICBpZiAoZWxlbWVudC50eXBlICE9PSAncnVsZScgfHwgY2FjaGUuY29tcGF0KSByZXR1cm47XG4gICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBlbGVtZW50LnZhbHVlLm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgIGlmICh1bnNhZmVQc2V1ZG9DbGFzc2VzKSB7XG4gICAgICB2YXIgaXNOZXN0ZWQgPSBlbGVtZW50LnBhcmVudCA9PT0gY2hpbGRyZW5bMF07IC8vIGluIG5lc3RlZCBydWxlcyBjb21tZW50cyBiZWNvbWUgY2hpbGRyZW4gb2YgdGhlIFwiYXV0by1pbnNlcnRlZFwiIHJ1bGVcbiAgICAgIC8vXG4gICAgICAvLyBjb25zaWRlcmluZyB0aGlzIGlucHV0OlxuICAgICAgLy8gLmEge1xuICAgICAgLy8gICAuYiAvKiBjb21tICovIHt9XG4gICAgICAvLyAgIGNvbG9yOiBob3RwaW5rO1xuICAgICAgLy8gfVxuICAgICAgLy8gd2UgZ2V0IG91dHB1dCBjb3JyZXNwb25kaW5nIHRvIHRoaXM6XG4gICAgICAvLyAuYSB7XG4gICAgICAvLyAgICYge1xuICAgICAgLy8gICAgIC8qIGNvbW0gKi9cbiAgICAgIC8vICAgICBjb2xvcjogaG90cGluaztcbiAgICAgIC8vICAgfVxuICAgICAgLy8gICAuYiB7fVxuICAgICAgLy8gfVxuXG4gICAgICB2YXIgY29tbWVudENvbnRhaW5lciA9IGlzTmVzdGVkID8gY2hpbGRyZW5bMF0uY2hpbGRyZW4gOiAvLyBnbG9iYWwgcnVsZSBhdCB0aGUgcm9vdCBsZXZlbFxuICAgICAgY2hpbGRyZW47XG5cbiAgICAgIGZvciAodmFyIGkgPSBjb21tZW50Q29udGFpbmVyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHZhciBub2RlID0gY29tbWVudENvbnRhaW5lcltpXTtcblxuICAgICAgICBpZiAobm9kZS5saW5lIDwgZWxlbWVudC5saW5lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gaXQgaXMgcXVpdGUgd2VpcmQgYnV0IGNvbW1lbnRzIGFyZSAqdXN1YWxseSogcHV0IGF0IGBjb2x1bW46IGVsZW1lbnQuY29sdW1uIC0gMWBcbiAgICAgICAgLy8gc28gd2Ugc2VlayAqZnJvbSB0aGUgZW5kKiBmb3IgdGhlIG5vZGUgdGhhdCBpcyBlYXJsaWVyIHRoYW4gdGhlIHJ1bGUncyBgZWxlbWVudGAgYW5kIGNoZWNrIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIGFsc28gbWF0Y2ggaW5wdXRzIGxpa2UgdGhpczpcbiAgICAgICAgLy8gLmEge1xuICAgICAgICAvLyAgIC8qIGNvbW0gKi9cbiAgICAgICAgLy8gICAuYiB7fVxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIGJ1dCB0aGF0IGlzIGZpbmVcbiAgICAgICAgLy9cbiAgICAgICAgLy8gaXQgd291bGQgYmUgdGhlIGVhc2llc3QgdG8gY2hhbmdlIHRoZSBwbGFjZW1lbnQgb2YgdGhlIGNvbW1lbnQgdG8gYmUgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBydWxlOlxuICAgICAgICAvLyAuYSB7XG4gICAgICAgIC8vICAgLmIgeyAvKiBjb21tICovIH1cbiAgICAgICAgLy8gfVxuICAgICAgICAvLyB3aXRoIHN1Y2ggaW5wdXRzIHdlIHdvdWxkbid0IGhhdmUgdG8gc2VhcmNoIGZvciB0aGUgY29tbWVudCBhdCBhbGxcbiAgICAgICAgLy8gVE9ETzogY29uc2lkZXIgY2hhbmdpbmcgdGhpcyBjb21tZW50IHBsYWNlbWVudCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uXG5cblxuICAgICAgICBpZiAobm9kZS5jb2x1bW4gPCBlbGVtZW50LmNvbHVtbikge1xuICAgICAgICAgIGlmIChpc0lnbm9yaW5nQ29tbWVudChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIlRoZSBwc2V1ZG8gY2xhc3MgXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3MgKyBcIlxcXCIgaXMgcG90ZW50aWFsbHkgdW5zYWZlIHdoZW4gZG9pbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBUcnkgY2hhbmdpbmcgaXQgdG8gXFxcIlwiICsgdW5zYWZlUHNldWRvQ2xhc3Muc3BsaXQoJy1jaGlsZCcpWzBdICsgXCItb2YtdHlwZVxcXCIuXCIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGlzSW1wb3J0UnVsZSA9IGZ1bmN0aW9uIGlzSW1wb3J0UnVsZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LnR5cGUuY2hhckNvZGVBdCgxKSA9PT0gMTA1ICYmIGVsZW1lbnQudHlwZS5jaGFyQ29kZUF0KDApID09PSA2NDtcbn07XG5cbnZhciBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMgPSBmdW5jdGlvbiBpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCFpc0ltcG9ydFJ1bGUoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59OyAvLyB1c2UgdGhpcyB0byByZW1vdmUgaW5jb3JyZWN0IGVsZW1lbnRzIGZyb20gZnVydGhlciBwcm9jZXNzaW5nXG4vLyBzbyB0aGV5IGRvbid0IGdldCBoYW5kZWQgdG8gdGhlIGBzaGVldGAgKG9yIGFueXRoaW5nIGVsc2UpXG4vLyBhcyB0aGF0IGNvdWxkIHBvdGVudGlhbGx5IGxlYWQgdG8gYWRkaXRpb25hbCBsb2dzIHdoaWNoIGluIHR1cm4gY291bGQgYmUgb3ZlcmhlbG1pbmcgdG8gdGhlIHVzZXJcblxuXG52YXIgbnVsbGlmeUVsZW1lbnQgPSBmdW5jdGlvbiBudWxsaWZ5RWxlbWVudChlbGVtZW50KSB7XG4gIGVsZW1lbnQudHlwZSA9ICcnO1xuICBlbGVtZW50LnZhbHVlID0gJyc7XG4gIGVsZW1lbnRbXCJyZXR1cm5cIl0gPSAnJztcbiAgZWxlbWVudC5jaGlsZHJlbiA9ICcnO1xuICBlbGVtZW50LnByb3BzID0gJyc7XG59O1xuXG52YXIgaW5jb3JyZWN0SW1wb3J0QWxhcm0gPSBmdW5jdGlvbiBpbmNvcnJlY3RJbXBvcnRBbGFybShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4pIHtcbiAgaWYgKCFpc0ltcG9ydFJ1bGUoZWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZWxlbWVudC5wYXJlbnQpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYEBpbXBvcnRgIHJ1bGVzIGNhbid0IGJlIG5lc3RlZCBpbnNpZGUgb3RoZXIgcnVsZXMuIFBsZWFzZSBtb3ZlIGl0IHRvIHRoZSB0b3AgbGV2ZWwgYW5kIHB1dCBpdCBiZWZvcmUgcmVndWxhciBydWxlcy4gS2VlcCBpbiBtaW5kIHRoYXQgdGhleSBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiBnbG9iYWwgc3R5bGVzLlwiKTtcbiAgICBudWxsaWZ5RWxlbWVudChlbGVtZW50KTtcbiAgfSBlbHNlIGlmIChpc1ByZXBlbmRlZFdpdGhSZWd1bGFyUnVsZXMoaW5kZXgsIGNoaWxkcmVuKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJgQGltcG9ydGAgcnVsZXMgY2FuJ3QgYmUgYWZ0ZXIgb3RoZXIgcnVsZXMuIFBsZWFzZSBwdXQgeW91ciBgQGltcG9ydGAgcnVsZXMgYmVmb3JlIHlvdXIgb3RoZXIgcnVsZXMuXCIpO1xuICAgIG51bGxpZnlFbGVtZW50KGVsZW1lbnQpO1xuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1mYWxsdGhyb3VnaCAqL1xuXG5mdW5jdGlvbiBwcmVmaXgodmFsdWUsIGxlbmd0aCkge1xuICBzd2l0Y2ggKGhhc2godmFsdWUsIGxlbmd0aCkpIHtcbiAgICAvLyBjb2xvci1hZGp1c3RcbiAgICBjYXNlIDUxMDM6XG4gICAgICByZXR1cm4gV0VCS0lUICsgJ3ByaW50LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFuaW1hdGlvbiwgYW5pbWF0aW9uLShkZWxheXxkaXJlY3Rpb258ZHVyYXRpb258ZmlsbC1tb2RlfGl0ZXJhdGlvbi1jb3VudHxuYW1lfHBsYXktc3RhdGV8dGltaW5nLWZ1bmN0aW9uKVxuXG4gICAgY2FzZSA1NzM3OlxuICAgIGNhc2UgNDIwMTpcbiAgICBjYXNlIDMxNzc6XG4gICAgY2FzZSAzNDMzOlxuICAgIGNhc2UgMTY0MTpcbiAgICBjYXNlIDQ0NTc6XG4gICAgY2FzZSAyOTIxOiAvLyB0ZXh0LWRlY29yYXRpb24sIGZpbHRlciwgY2xpcC1wYXRoLCBiYWNrZmFjZS12aXNpYmlsaXR5LCBjb2x1bW4sIGJveC1kZWNvcmF0aW9uLWJyZWFrXG5cbiAgICBjYXNlIDU1NzI6XG4gICAgY2FzZSA2MzU2OlxuICAgIGNhc2UgNTg0NDpcbiAgICBjYXNlIDMxOTE6XG4gICAgY2FzZSA2NjQ1OlxuICAgIGNhc2UgMzAwNTogLy8gbWFzaywgbWFzay1pbWFnZSwgbWFzay0obW9kZXxjbGlwfHNpemUpLCBtYXNrLShyZXBlYXR8b3JpZ2luKSwgbWFzay1wb3NpdGlvbiwgbWFzay1jb21wb3NpdGUsXG5cbiAgICBjYXNlIDYzOTE6XG4gICAgY2FzZSA1ODc5OlxuICAgIGNhc2UgNTYyMzpcbiAgICBjYXNlIDYxMzU6XG4gICAgY2FzZSA0NTk5OlxuICAgIGNhc2UgNDg1NTogLy8gYmFja2dyb3VuZC1jbGlwLCBjb2x1bW5zLCBjb2x1bW4tKGNvdW50fGZpbGx8Z2FwfHJ1bGV8cnVsZS1jb2xvcnxydWxlLXN0eWxlfHJ1bGUtd2lkdGh8c3Bhbnx3aWR0aClcblxuICAgIGNhc2UgNDIxNTpcbiAgICBjYXNlIDYzODk6XG4gICAgY2FzZSA1MTA5OlxuICAgIGNhc2UgNTM2NTpcbiAgICBjYXNlIDU2MjE6XG4gICAgY2FzZSAzODI5OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgdmFsdWU7XG4gICAgLy8gYXBwZWFyYW5jZSwgdXNlci1zZWxlY3QsIHRyYW5zZm9ybSwgaHlwaGVucywgdGV4dC1zaXplLWFkanVzdFxuXG4gICAgY2FzZSA1MzQ5OlxuICAgIGNhc2UgNDI0NjpcbiAgICBjYXNlIDQ4MTA6XG4gICAgY2FzZSA2OTY4OlxuICAgIGNhc2UgMjc1NjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1PWiArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGZsZXgsIGZsZXgtZGlyZWN0aW9uXG5cbiAgICBjYXNlIDY4Mjg6XG4gICAgY2FzZSA0MjY4OlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIG9yZGVyXG5cbiAgICBjYXNlIDYxNjU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LScgKyB2YWx1ZSArIHZhbHVlO1xuICAgIC8vIGFsaWduLWl0ZW1zXG5cbiAgICBjYXNlIDUxODc6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyByZXBsYWNlKHZhbHVlLCAvKFxcdyspLisoOlteXSspLywgV0VCS0lUICsgJ2JveC0kMSQyJyArIE1TICsgJ2ZsZXgtJDEkMicpICsgdmFsdWU7XG4gICAgLy8gYWxpZ24tc2VsZlxuXG4gICAgY2FzZSA1NDQzOlxuICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyAnZmxleC1pdGVtLScgKyByZXBsYWNlKHZhbHVlLCAvZmxleC18LXNlbGYvLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBhbGlnbi1jb250ZW50XG5cbiAgICBjYXNlIDQ2NzU6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArICdmbGV4LWxpbmUtcGFjaycgKyByZXBsYWNlKHZhbHVlLCAvYWxpZ24tY29udGVudHxmbGV4LXwtc2VsZi8sICcnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtc2hyaW5rXG5cbiAgICBjYXNlIDU1NDg6XG4gICAgICByZXR1cm4gV0VCS0lUICsgdmFsdWUgKyBNUyArIHJlcGxhY2UodmFsdWUsICdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIGZsZXgtYmFzaXNcblxuICAgIGNhc2UgNTI5MjpcbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyB2YWx1ZTtcbiAgICAvLyBmbGV4LWdyb3dcblxuICAgIGNhc2UgNjA2MDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyAnYm94LScgKyByZXBsYWNlKHZhbHVlLCAnLWdyb3cnLCAnJykgKyBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgJ2dyb3cnLCAncG9zaXRpdmUnKSArIHZhbHVlO1xuICAgIC8vIHRyYW5zaXRpb25cblxuICAgIGNhc2UgNDU1NDpcbiAgICAgIHJldHVybiBXRUJLSVQgKyByZXBsYWNlKHZhbHVlLCAvKFteLV0pKHRyYW5zZm9ybSkvZywgJyQxJyArIFdFQktJVCArICckMicpICsgdmFsdWU7XG4gICAgLy8gY3Vyc29yXG5cbiAgICBjYXNlIDYxODc6XG4gICAgICByZXR1cm4gcmVwbGFjZShyZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oem9vbS18Z3JhYikvLCBXRUJLSVQgKyAnJDEnKSwgLyhpbWFnZS1zZXQpLywgV0VCS0lUICsgJyQxJyksIHZhbHVlLCAnJykgKyB2YWx1ZTtcbiAgICAvLyBiYWNrZ3JvdW5kLCBiYWNrZ3JvdW5kLWltYWdlXG5cbiAgICBjYXNlIDU0OTU6XG4gICAgY2FzZSAzOTU5OlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oaW1hZ2Utc2V0XFwoW15dKikvLCBXRUJLSVQgKyAnJDEnICsgJyRgJDEnKTtcbiAgICAvLyBqdXN0aWZ5LWNvbnRlbnRcblxuICAgIGNhc2UgNDk2ODpcbiAgICAgIHJldHVybiByZXBsYWNlKHJlcGxhY2UodmFsdWUsIC8oLis6KShmbGV4LSk/KC4qKS8sIFdFQktJVCArICdib3gtcGFjazokMycgKyBNUyArICdmbGV4LXBhY2s6JDMnKSwgL3MuKy1iW147XSsvLCAnanVzdGlmeScpICsgV0VCS0lUICsgdmFsdWUgKyB2YWx1ZTtcbiAgICAvLyAobWFyZ2lufHBhZGRpbmcpLWlubGluZS0oc3RhcnR8ZW5kKVxuXG4gICAgY2FzZSA0MDk1OlxuICAgIGNhc2UgMzU4MzpcbiAgICBjYXNlIDQwNjg6XG4gICAgY2FzZSAyNTMyOlxuICAgICAgcmV0dXJuIHJlcGxhY2UodmFsdWUsIC8oLispLWlubGluZSguKykvLCBXRUJLSVQgKyAnJDEkMicpICsgdmFsdWU7XG4gICAgLy8gKG1pbnxtYXgpPyh3aWR0aHxoZWlnaHR8aW5saW5lLXNpemV8YmxvY2stc2l6ZSlcblxuICAgIGNhc2UgODExNjpcbiAgICBjYXNlIDcwNTk6XG4gICAgY2FzZSA1NzUzOlxuICAgIGNhc2UgNTUzNTpcbiAgICBjYXNlIDU0NDU6XG4gICAgY2FzZSA1NzAxOlxuICAgIGNhc2UgNDkzMzpcbiAgICBjYXNlIDQ2Nzc6XG4gICAgY2FzZSA1NTMzOlxuICAgIGNhc2UgNTc4OTpcbiAgICBjYXNlIDUwMjE6XG4gICAgY2FzZSA0NzY1OlxuICAgICAgLy8gc3RyZXRjaCwgbWF4LWNvbnRlbnQsIG1pbi1jb250ZW50LCBmaWxsLWF2YWlsYWJsZVxuICAgICAgaWYgKHN0cmxlbih2YWx1ZSkgLSAxIC0gbGVuZ3RoID4gNikgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDEpKSB7XG4gICAgICAgIC8vIChtKWF4LWNvbnRlbnQsIChtKWluLWNvbnRlbnRcbiAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgLy8gLVxuICAgICAgICAgIGlmIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDQpICE9PSA0NSkgYnJlYWs7XG4gICAgICAgIC8vIChmKWlsbC1hdmFpbGFibGUsIChmKWl0LWNvbnRlbnRcblxuICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKC4rKS0oW15dKykvLCAnJDEnICsgV0VCS0lUICsgJyQyLSQzJyArICckMScgKyBNT1ogKyAoY2hhcmF0KHZhbHVlLCBsZW5ndGggKyAzKSA9PSAxMDggPyAnJDMnIDogJyQyLSQzJykpICsgdmFsdWU7XG4gICAgICAgIC8vIChzKXRyZXRjaFxuXG4gICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgIHJldHVybiB+aW5kZXhvZih2YWx1ZSwgJ3N0cmV0Y2gnKSA/IHByZWZpeChyZXBsYWNlKHZhbHVlLCAnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBsZW5ndGgpICsgdmFsdWUgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIC8vIHBvc2l0aW9uOiBzdGlja3lcblxuICAgIGNhc2UgNDk0OTpcbiAgICAgIC8vIChzKXRpY2t5P1xuICAgICAgaWYgKGNoYXJhdCh2YWx1ZSwgbGVuZ3RoICsgMSkgIT09IDExNSkgYnJlYWs7XG4gICAgLy8gZGlzcGxheTogKGZsZXh8aW5saW5lLWZsZXgpXG5cbiAgICBjYXNlIDY0NDQ6XG4gICAgICBzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgc3RybGVuKHZhbHVlKSAtIDMgLSAofmluZGV4b2YodmFsdWUsICchaW1wb3J0YW50JykgJiYgMTApKSkge1xuICAgICAgICAvLyBzdGljKGspeVxuICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgJzonLCAnOicgKyBXRUJLSVQpICsgdmFsdWU7XG4gICAgICAgIC8vIChpbmxpbmUtKT9mbChlKXhcblxuICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICByZXR1cm4gcmVwbGFjZSh2YWx1ZSwgLyguKzopKFteOyFdKykoO3whLispPy8sICckMScgKyBXRUJLSVQgKyAoY2hhcmF0KHZhbHVlLCAxNCkgPT09IDQ1ID8gJ2lubGluZS0nIDogJycpICsgJ2JveCQzJyArICckMScgKyBXRUJLSVQgKyAnJDIkMycgKyAnJDEnICsgTVMgKyAnJDJib3gkMycpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIC8vIHdyaXRpbmctbW9kZVxuXG4gICAgY2FzZSA1OTM2OlxuICAgICAgc3dpdGNoIChjaGFyYXQodmFsdWUsIGxlbmd0aCArIDExKSkge1xuICAgICAgICAvLyB2ZXJ0aWNhbC1sKHIpXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgcmVwbGFjZSh2YWx1ZSwgL1tzdmhdXFx3Ky1bdGJscl17Mn0vLCAndGInKSArIHZhbHVlO1xuICAgICAgICAvLyB2ZXJ0aWNhbC1yKGwpXG5cbiAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICd0Yi1ybCcpICsgdmFsdWU7XG4gICAgICAgIC8vIGhvcml6b250YWwoLSl0YlxuXG4gICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgcmV0dXJuIFdFQktJVCArIHZhbHVlICsgTVMgKyByZXBsYWNlKHZhbHVlLCAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sICdscicpICsgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBXRUJLSVQgKyB2YWx1ZSArIE1TICsgdmFsdWUgKyB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIHByZWZpeGVyID0gZnVuY3Rpb24gcHJlZml4ZXIoZWxlbWVudCwgaW5kZXgsIGNoaWxkcmVuLCBjYWxsYmFjaykge1xuICBpZiAoZWxlbWVudC5sZW5ndGggPiAtMSkgaWYgKCFlbGVtZW50W1wicmV0dXJuXCJdKSBzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuICAgIGNhc2UgREVDTEFSQVRJT046XG4gICAgICBlbGVtZW50W1wicmV0dXJuXCJdID0gcHJlZml4KGVsZW1lbnQudmFsdWUsIGVsZW1lbnQubGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBLRVlGUkFNRVM6XG4gICAgICByZXR1cm4gc2VyaWFsaXplKFtjb3B5KGVsZW1lbnQsIHtcbiAgICAgICAgdmFsdWU6IHJlcGxhY2UoZWxlbWVudC52YWx1ZSwgJ0AnLCAnQCcgKyBXRUJLSVQpXG4gICAgICB9KV0sIGNhbGxiYWNrKTtcblxuICAgIGNhc2UgUlVMRVNFVDpcbiAgICAgIGlmIChlbGVtZW50Lmxlbmd0aCkgcmV0dXJuIGNvbWJpbmUoZWxlbWVudC5wcm9wcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAobWF0Y2godmFsdWUsIC8oOjpwbGFjXFx3K3w6cmVhZC1cXHcrKS8pKSB7XG4gICAgICAgICAgLy8gOnJlYWQtKG9ubHl8d3JpdGUpXG4gICAgICAgICAgY2FzZSAnOnJlYWQtb25seSc6XG4gICAgICAgICAgY2FzZSAnOnJlYWQtd3JpdGUnOlxuICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHByb3BzOiBbcmVwbGFjZSh2YWx1ZSwgLzoocmVhZC1cXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSldLCBjYWxsYmFjayk7XG4gICAgICAgICAgLy8gOnBsYWNlaG9sZGVyXG5cbiAgICAgICAgICBjYXNlICc6OnBsYWNlaG9sZGVyJzpcbiAgICAgICAgICAgIHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXVxuICAgICAgICAgICAgfSksIGNvcHkoZWxlbWVudCwge1xuICAgICAgICAgICAgICBwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldXG4gICAgICAgICAgICB9KV0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0pO1xuICB9XG59O1xuXG52YXIgZGVmYXVsdFN0eWxpc1BsdWdpbnMgPSBbcHJlZml4ZXJdO1xuXG52YXIgY3JlYXRlQ2FjaGUgPSBmdW5jdGlvbiBjcmVhdGVDYWNoZShvcHRpb25zKSB7XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAha2V5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGhhdmUgdG8gY29uZmlndXJlIGBrZXlgIGZvciB5b3VyIGNhY2hlLiBQbGVhc2UgbWFrZSBzdXJlIGl0J3MgdW5pcXVlIChhbmQgbm90IGVxdWFsIHRvICdjc3MnKSBhcyBpdCdzIHVzZWQgZm9yIGxpbmtpbmcgc3R5bGVzIHRvIHlvdXIgY2FjaGUuXFxuXCIgKyBcIklmIG11bHRpcGxlIGNhY2hlcyBzaGFyZSB0aGUgc2FtZSBrZXkgdGhleSBtaWdodCBcXFwiZmlnaHRcXFwiIGZvciBlYWNoIG90aGVyJ3Mgc3R5bGUgZWxlbWVudHMuXCIpO1xuICB9XG5cbiAgaWYgKCBrZXkgPT09ICdjc3MnKSB7XG4gICAgdmFyIHNzclN0eWxlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb25dOm5vdChbZGF0YS1zXSlcIik7IC8vIGdldCBTU1JlZCBzdHlsZXMgb3V0IG9mIHRoZSB3YXkgb2YgUmVhY3QncyBoeWRyYXRpb25cbiAgICAvLyBkb2N1bWVudC5oZWFkIGlzIGEgc2FmZSBwbGFjZSB0byBtb3ZlIHRoZW0gdG8odGhvdWdoIG5vdGUgZG9jdW1lbnQuaGVhZCBpcyBub3QgbmVjZXNzYXJpbHkgdGhlIGxhc3QgcGxhY2UgdGhleSB3aWxsIGJlKVxuICAgIC8vIG5vdGUgdGhpcyB2ZXJ5IHZlcnkgaW50ZW50aW9uYWxseSB0YXJnZXRzIGFsbCBzdHlsZSBlbGVtZW50cyByZWdhcmRsZXNzIG9mIHRoZSBrZXkgdG8gZW5zdXJlXG4gICAgLy8gdGhhdCBjcmVhdGluZyBhIGNhY2hlIHdvcmtzIGluc2lkZSBvZiByZW5kZXIgb2YgYSBSZWFjdCBjb21wb25lbnRcblxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoc3NyU3R5bGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgLy8gd2Ugd2FudCB0byBvbmx5IG1vdmUgZWxlbWVudHMgd2hpY2ggaGF2ZSBhIHNwYWNlIGluIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlIHZhbHVlXG4gICAgICAvLyBiZWNhdXNlIHRoYXQgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYW4gRW1vdGlvbiAxMSBzZXJ2ZXItc2lkZSByZW5kZXJlZCBzdHlsZSBlbGVtZW50c1xuICAgICAgLy8gd2hpbGUgd2Ugd2lsbCBhbHJlYWR5IGlnbm9yZSBFbW90aW9uIDExIGNsaWVudC1zaWRlIGluc2VydGVkIHN0eWxlcyBiZWNhdXNlIG9mIHRoZSA6bm90KFtkYXRhLXNdKSBwYXJ0IGluIHRoZSBzZWxlY3RvclxuICAgICAgLy8gRW1vdGlvbiAxMCBjbGllbnQtc2lkZSBpbnNlcnRlZCBzdHlsZXMgZGlkIG5vdCBoYXZlIGRhdGEtcyAoYnV0IGltcG9ydGFudGx5IGRpZCBub3QgaGF2ZSBhIHNwYWNlIGluIHRoZWlyIGRhdGEtZW1vdGlvbiBhdHRyaWJ1dGVzKVxuICAgICAgLy8gc28gY2hlY2tpbmcgZm9yIHRoZSBzcGFjZSBlbnN1cmVzIHRoYXQgbG9hZGluZyBFbW90aW9uIDExIGFmdGVyIEVtb3Rpb24gMTAgaGFzIGluc2VydGVkIHNvbWUgc3R5bGVzXG4gICAgICAvLyB3aWxsIG5vdCByZXN1bHQgaW4gdGhlIEVtb3Rpb24gMTAgc3R5bGVzIGJlaW5nIGRlc3Ryb3llZFxuICAgICAgdmFyIGRhdGFFbW90aW9uQXR0cmlidXRlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicpO1xuXG4gICAgICBpZiAoZGF0YUVtb3Rpb25BdHRyaWJ1dGUuaW5kZXhPZignICcpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcycsICcnKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBzdHlsaXNQbHVnaW5zID0gb3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IGRlZmF1bHRTdHlsaXNQbHVnaW5zO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGlmICgvW15hLXotXS8udGVzdChrZXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFbW90aW9uIGtleSBtdXN0IG9ubHkgY29udGFpbiBsb3dlciBjYXNlIGFscGhhYmV0aWNhbCBjaGFyYWN0ZXJzIGFuZCAtIGJ1dCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIHBhc3NlZFwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5zZXJ0ZWQgPSB7fTtcbiAgdmFyIGNvbnRhaW5lcjtcbiAgdmFyIG5vZGVzVG9IeWRyYXRlID0gW107XG5cbiAge1xuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyIHx8IGRvY3VtZW50LmhlYWQ7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbCggLy8gdGhpcyBtZWFucyB3ZSB3aWxsIGlnbm9yZSBlbGVtZW50cyB3aGljaCBkb24ndCBoYXZlIGEgc3BhY2UgaW4gdGhlbSB3aGljaFxuICAgIC8vIG1lYW5zIHRoYXQgdGhlIHN0eWxlIGVsZW1lbnRzIHdlJ3JlIGxvb2tpbmcgYXQgYXJlIG9ubHkgRW1vdGlvbiAxMSBzZXJ2ZXItcmVuZGVyZWQgc3R5bGUgZWxlbWVudHNcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3R5bGVbZGF0YS1lbW90aW9uXj1cXFwiXCIgKyBrZXkgKyBcIiBcXFwiXVwiKSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvblwiKS5zcGxpdCgnICcpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXR0cmliLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydGVkW2F0dHJpYltpXV0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBub2Rlc1RvSHlkcmF0ZS5wdXNoKG5vZGUpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgdmFyIG9tbmlwcmVzZW50UGx1Z2lucyA9IFtjb21wYXQsIHJlbW92ZUxhYmVsXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIG9tbmlwcmVzZW50UGx1Z2lucy5wdXNoKGNyZWF0ZVVuc2FmZVNlbGVjdG9yc0FsYXJtKHtcbiAgICAgIGdldCBjb21wYXQoKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5jb21wYXQ7XG4gICAgICB9XG5cbiAgICB9KSwgaW5jb3JyZWN0SW1wb3J0QWxhcm0pO1xuICB9XG5cbiAge1xuICAgIHZhciBjdXJyZW50U2hlZXQ7XG4gICAgdmFyIGZpbmFsaXppbmdQbHVnaW5zID0gW3N0cmluZ2lmeSwgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIWVsZW1lbnQucm9vdCkge1xuICAgICAgICBpZiAoZWxlbWVudFtcInJldHVyblwiXSkge1xuICAgICAgICAgIGN1cnJlbnRTaGVldC5pbnNlcnQoZWxlbWVudFtcInJldHVyblwiXSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC52YWx1ZSAmJiBlbGVtZW50LnR5cGUgIT09IENPTU1FTlQpIHtcbiAgICAgICAgICAvLyBpbnNlcnQgZW1wdHkgcnVsZSBpbiBub24tcHJvZHVjdGlvbiBlbnZpcm9ubWVudHNcbiAgICAgICAgICAvLyBzbyBAZW1vdGlvbi9qZXN0IGNhbiBncmFiIGBrZXlgIGZyb20gdGhlIChKUylET00gZm9yIGNhY2hlcyB3aXRob3V0IGFueSBydWxlcyBpbnNlcnRlZCB5ZXRcbiAgICAgICAgICBjdXJyZW50U2hlZXQuaW5zZXJ0KGVsZW1lbnQudmFsdWUgKyBcInt9XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA6IHJ1bGVzaGVldChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgY3VycmVudFNoZWV0Lmluc2VydChydWxlKTtcbiAgICB9KV07XG4gICAgdmFyIHNlcmlhbGl6ZXIgPSBtaWRkbGV3YXJlKG9tbmlwcmVzZW50UGx1Z2lucy5jb25jYXQoc3R5bGlzUGx1Z2lucywgZmluYWxpemluZ1BsdWdpbnMpKTtcblxuICAgIHZhciBzdHlsaXMgPSBmdW5jdGlvbiBzdHlsaXMoc3R5bGVzKSB7XG4gICAgICByZXR1cm4gc2VyaWFsaXplKGNvbXBpbGUoc3R5bGVzKSwgc2VyaWFsaXplcik7XG4gICAgfTtcblxuICAgIF9pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgY3VycmVudFNoZWV0ID0gc2hlZXQ7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3VycmVudFNoZWV0ID0ge1xuICAgICAgICAgIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAgICAgICAgIHNoZWV0Lmluc2VydChydWxlICsgc2VyaWFsaXplZC5tYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yID8gc2VsZWN0b3IgKyBcIntcIiArIHNlcmlhbGl6ZWQuc3R5bGVzICsgXCJ9XCIgOiBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIGNhY2hlID0ge1xuICAgIGtleToga2V5LFxuICAgIHNoZWV0OiBuZXcgU3R5bGVTaGVldCh7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgbm9uY2U6IG9wdGlvbnMubm9uY2UsXG4gICAgICBzcGVlZHk6IG9wdGlvbnMuc3BlZWR5LFxuICAgICAgcHJlcGVuZDogb3B0aW9ucy5wcmVwZW5kLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnRcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIGNhY2hlLnNoZWV0Lmh5ZHJhdGUobm9kZXNUb0h5ZHJhdGUpO1xuICByZXR1cm4gY2FjaGU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDYWNoZTtcbiIsImltcG9ydCB7TVMsIE1PWiwgV0VCS0lULCBSVUxFU0VULCBLRVlGUkFNRVMsIERFQ0xBUkFUSU9OfSBmcm9tICcuL0VudW0uanMnXG5pbXBvcnQge21hdGNoLCBjaGFyYXQsIHN1YnN0ciwgc3RybGVuLCBzaXplb2YsIHJlcGxhY2UsIGNvbWJpbmV9IGZyb20gJy4vVXRpbGl0eS5qcydcbmltcG9ydCB7Y29weSwgdG9rZW5pemV9IGZyb20gJy4vVG9rZW5pemVyLmpzJ1xuaW1wb3J0IHtzZXJpYWxpemV9IGZyb20gJy4vU2VyaWFsaXplci5qcydcbmltcG9ydCB7cHJlZml4fSBmcm9tICcuL1ByZWZpeGVyLmpzJ1xuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb25bXX0gY29sbGVjdGlvblxuICogQHJldHVybiB7ZnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaWRkbGV3YXJlIChjb2xsZWN0aW9uKSB7XG5cdHZhciBsZW5ndGggPSBzaXplb2YoY29sbGVjdGlvbilcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4LCBjaGlsZHJlbiwgY2FsbGJhY2spIHtcblx0XHR2YXIgb3V0cHV0ID0gJydcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG5cdFx0XHRvdXRwdXQgKz0gY29sbGVjdGlvbltpXShlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB8fCAnJ1xuXG5cdFx0cmV0dXJuIG91dHB1dFxuXHR9XG59XG5cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNoZWV0IChjYWxsYmFjaykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRpZiAoIWVsZW1lbnQucm9vdClcblx0XHRcdGlmIChlbGVtZW50ID0gZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRcdGNhbGxiYWNrKGVsZW1lbnQpXG5cdH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge29iamVjdFtdfSBjaGlsZHJlblxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWZpeGVyIChlbGVtZW50LCBpbmRleCwgY2hpbGRyZW4sIGNhbGxiYWNrKSB7XG5cdGlmIChlbGVtZW50Lmxlbmd0aCA+IC0xKVxuXHRcdGlmICghZWxlbWVudC5yZXR1cm4pXG5cdFx0XHRzd2l0Y2ggKGVsZW1lbnQudHlwZSkge1xuXHRcdFx0XHRjYXNlIERFQ0xBUkFUSU9OOiBlbGVtZW50LnJldHVybiA9IHByZWZpeChlbGVtZW50LnZhbHVlLCBlbGVtZW50Lmxlbmd0aCwgY2hpbGRyZW4pXG5cdFx0XHRcdFx0cmV0dXJuXG5cdFx0XHRcdGNhc2UgS0VZRlJBTUVTOlxuXHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW2NvcHkoZWxlbWVudCwge3ZhbHVlOiByZXBsYWNlKGVsZW1lbnQudmFsdWUsICdAJywgJ0AnICsgV0VCS0lUKX0pXSwgY2FsbGJhY2spXG5cdFx0XHRcdGNhc2UgUlVMRVNFVDpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5sZW5ndGgpXG5cdFx0XHRcdFx0XHRyZXR1cm4gY29tYmluZShlbGVtZW50LnByb3BzLCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChtYXRjaCh2YWx1ZSwgLyg6OnBsYWNcXHcrfDpyZWFkLVxcdyspLykpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyA6cmVhZC0ob25seXx3cml0ZSlcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6cmVhZC1vbmx5JzogY2FzZSAnOnJlYWQtd3JpdGUnOlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZShbY29weShlbGVtZW50LCB7cHJvcHM6IFtyZXBsYWNlKHZhbHVlLCAvOihyZWFkLVxcdyspLywgJzonICsgTU9aICsgJyQxJyldfSldLCBjYWxsYmFjaylcblx0XHRcdFx0XHRcdFx0XHQvLyA6cGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdFx0XHRjYXNlICc6OnBsYWNlaG9sZGVyJzpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzZXJpYWxpemUoW1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIFdFQktJVCArICdpbnB1dC0kMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sICc6JyArIE1PWiArICckMScpXX0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb3B5KGVsZW1lbnQsIHtwcm9wczogW3JlcGxhY2UodmFsdWUsIC86KHBsYWNcXHcrKS8sIE1TICsgJ2lucHV0LSQxJyldfSlcblx0XHRcdFx0XHRcdFx0XHRcdF0sIGNhbGxiYWNrKVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuICcnXG5cdFx0XHRcdFx0XHR9KVxuXHRcdFx0fVxufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBlbGVtZW50XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7b2JqZWN0W119IGNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuYW1lc3BhY2UgKGVsZW1lbnQpIHtcblx0c3dpdGNoIChlbGVtZW50LnR5cGUpIHtcblx0XHRjYXNlIFJVTEVTRVQ6XG5cdFx0XHRlbGVtZW50LnByb3BzID0gZWxlbWVudC5wcm9wcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBjb21iaW5lKHRva2VuaXplKHZhbHVlKSwgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgY2hpbGRyZW4pIHtcblx0XHRcdFx0XHRzd2l0Y2ggKGNoYXJhdCh2YWx1ZSwgMCkpIHtcblx0XHRcdFx0XHRcdC8vIFxcZlxuXHRcdFx0XHRcdFx0Y2FzZSAxMjpcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHN1YnN0cih2YWx1ZSwgMSwgc3RybGVuKHZhbHVlKSlcblx0XHRcdFx0XHRcdC8vIFxcMCAoICsgPiB+XG5cdFx0XHRcdFx0XHRjYXNlIDA6IGNhc2UgNDA6IGNhc2UgNDM6IGNhc2UgNjI6IGNhc2UgMTI2OlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWVcblx0XHRcdFx0XHRcdC8vIDpcblx0XHRcdFx0XHRcdGNhc2UgNTg6XG5cdFx0XHRcdFx0XHRcdGlmIChjaGlsZHJlblsrK2luZGV4XSA9PT0gJ2dsb2JhbCcpXG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGRyZW5baW5kZXhdID0gJycsIGNoaWxkcmVuWysraW5kZXhdID0gJ1xcZicgKyBzdWJzdHIoY2hpbGRyZW5baW5kZXhdLCBpbmRleCA9IDEsIC0xKVxuXHRcdFx0XHRcdFx0Ly8gXFxzXG5cdFx0XHRcdFx0XHRjYXNlIDMyOlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaW5kZXggPT09IDEgPyAnJyA6IHZhbHVlXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRzd2l0Y2ggKGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSAwOiBlbGVtZW50ID0gdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBzaXplb2YoY2hpbGRyZW4pID4gMSA/ICcnIDogdmFsdWVcblx0XHRcdFx0XHRcdFx0XHRjYXNlIGluZGV4ID0gc2l6ZW9mKGNoaWxkcmVuKSAtIDE6IGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBpbmRleCA9PT0gMiA/IHZhbHVlICsgZWxlbWVudCArIGVsZW1lbnQgOiB2YWx1ZSArIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9KVxuXHR9XG59XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50LCBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVDYWNoZSBmcm9tICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgcmVnaXN0ZXJTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrIH0gZnJvbSAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSAvKiAjX19QVVJFX18gKi9jcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAvKiAjX19QVVJFX18gKi9jcmVhdGVDYWNoZSh7XG4gIGtleTogJ2Nzcydcbn0pIDogbnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIEVtb3Rpb25DYWNoZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkNhY2hlQ29udGV4dCc7XG59XG5cbnZhciBDYWNoZVByb3ZpZGVyID0gRW1vdGlvbkNhY2hlQ29udGV4dC5Qcm92aWRlcjtcbnZhciBfX3Vuc2FmZV91c2VFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB1c2VFbW90aW9uQ2FjaGUoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KEVtb3Rpb25DYWNoZUNvbnRleHQpO1xufTtcblxudmFyIHdpdGhFbW90aW9uQ2FjaGUgPSBmdW5jdGlvbiB3aXRoRW1vdGlvbkNhY2hlKGZ1bmMpIHtcbiAgLy8gJEZsb3dGaXhNZVxuICByZXR1cm4gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gKHByb3BzLCByZWYpIHtcbiAgICAvLyB0aGUgY2FjaGUgd2lsbCBuZXZlciBiZSBudWxsIGluIHRoZSBicm93c2VyXG4gICAgdmFyIGNhY2hlID0gdXNlQ29udGV4dChFbW90aW9uQ2FjaGVDb250ZXh0KTtcbiAgICByZXR1cm4gZnVuYyhwcm9wcywgY2FjaGUsIHJlZik7XG4gIH0pO1xufTtcblxudmFyIFRoZW1lQ29udGV4dCA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZUNvbnRleHQoe30pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnRW1vdGlvblRoZW1lQ29udGV4dCc7XG59XG5cbnZhciB1c2VUaGVtZSA9IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICByZXR1cm4gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xufTtcblxudmFyIGdldFRoZW1lID0gZnVuY3Rpb24gZ2V0VGhlbWUob3V0ZXJUaGVtZSwgdGhlbWUpIHtcbiAgaWYgKHR5cGVvZiB0aGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IHRoZW1lKG91dGVyVGhlbWUpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKG1lcmdlZFRoZW1lID09IG51bGwgfHwgdHlwZW9mIG1lcmdlZFRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG1lcmdlZFRoZW1lKSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1RoZW1lUHJvdmlkZXJdIFBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IGZyb20geW91ciB0aGVtZSBmdW5jdGlvbiwgaS5lLiB0aGVtZT17KCkgPT4gKHt9KX0hJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlZFRoZW1lO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgKHRoZW1lID09IG51bGwgfHwgdHlwZW9mIHRoZW1lICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KHRoZW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tUaGVtZVByb3ZpZGVyXSBQbGVhc2UgbWFrZSB5b3VyIHRoZW1lIHByb3AgYSBwbGFpbiBvYmplY3QnKTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgdGhlbWUpO1xufTtcblxudmFyIGNyZWF0ZUNhY2hlV2l0aFRoZW1lID0gLyogI19fUFVSRV9fICovd2Vha01lbW9pemUoZnVuY3Rpb24gKG91dGVyVGhlbWUpIHtcbiAgcmV0dXJuIHdlYWtNZW1vaXplKGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHJldHVybiBnZXRUaGVtZShvdXRlclRoZW1lLCB0aGVtZSk7XG4gIH0pO1xufSk7XG52YXIgVGhlbWVQcm92aWRlciA9IGZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuXG4gIGlmIChwcm9wcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICB0aGVtZSA9IGNyZWF0ZUNhY2hlV2l0aFRoZW1lKHRoZW1lKShwcm9wcy50aGVtZSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIHByb3BzLmNoaWxkcmVuKTtcbn07XG5mdW5jdGlvbiB3aXRoVGhlbWUoQ29tcG9uZW50KSB7XG4gIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuXG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHZhciB0aGVtZSA9IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgICB0aGVtZTogdGhlbWUsXG4gICAgICByZWY6IHJlZlxuICAgIH0sIHByb3BzKSk7XG4gIH07IC8vICRGbG93Rml4TWVcblxuXG4gIHZhciBXaXRoVGhlbWUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihyZW5kZXIpO1xuICBXaXRoVGhlbWUuZGlzcGxheU5hbWUgPSBcIldpdGhUaGVtZShcIiArIGNvbXBvbmVudE5hbWUgKyBcIilcIjtcbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFdpdGhUaGVtZSwgQ29tcG9uZW50KTtcbn1cblxudmFyIGdldExhc3RQYXJ0ID0gZnVuY3Rpb24gZ2V0TGFzdFBhcnQoZnVuY3Rpb25OYW1lKSB7XG4gIC8vIFRoZSBtYXRjaCBtYXkgYmUgc29tZXRoaW5nIGxpa2UgJ09iamVjdC5jcmVhdGVFbW90aW9uUHJvcHMnIG9yXG4gIC8vICdMb2FkZXIucHJvdG90eXBlLnJlbmRlcidcbiAgdmFyIHBhcnRzID0gZnVuY3Rpb25OYW1lLnNwbGl0KCcuJyk7XG4gIHJldHVybiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXTtcbn07XG5cbnZhciBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUgPSBmdW5jdGlvbiBnZXRGdW5jdGlvbk5hbWVGcm9tU3RhY2tUcmFjZUxpbmUobGluZSkge1xuICAvLyBWOFxuICB2YXIgbWF0Y2ggPSAvXlxccythdFxccysoW0EtWmEtejAtOSQuXSspXFxzLy5leGVjKGxpbmUpO1xuICBpZiAobWF0Y2gpIHJldHVybiBnZXRMYXN0UGFydChtYXRjaFsxXSk7IC8vIFNhZmFyaSAvIEZpcmVmb3hcblxuICBtYXRjaCA9IC9eKFtBLVphLXowLTkkLl0rKUAvLmV4ZWMobGluZSk7XG4gIGlmIChtYXRjaCkgcmV0dXJuIGdldExhc3RQYXJ0KG1hdGNoWzFdKTtcbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciBpbnRlcm5hbFJlYWN0RnVuY3Rpb25OYW1lcyA9IC8qICNfX1BVUkVfXyAqL25ldyBTZXQoWydyZW5kZXJXaXRoSG9va3MnLCAncHJvY2Vzc0NoaWxkJywgJ2ZpbmlzaENsYXNzQ29tcG9uZW50JywgJ3JlbmRlclRvU3RyaW5nJ10pOyAvLyBUaGVzZSBpZGVudGlmaWVycyBjb21lIGZyb20gZXJyb3Igc3RhY2tzLCBzbyB0aGV5IGhhdmUgdG8gYmUgdmFsaWQgSlNcbi8vIGlkZW50aWZpZXJzLCB0aHVzIHdlIG9ubHkgbmVlZCB0byByZXBsYWNlIHdoYXQgaXMgYSB2YWxpZCBjaGFyYWN0ZXIgZm9yIEpTLFxuLy8gYnV0IG5vdCBmb3IgQ1NTLlxuXG52YXIgc2FuaXRpemVJZGVudGlmaWVyID0gZnVuY3Rpb24gc2FuaXRpemVJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgcmV0dXJuIGlkZW50aWZpZXIucmVwbGFjZSgvXFwkL2csICctJyk7XG59O1xuXG52YXIgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGdldExhYmVsRnJvbVN0YWNrVHJhY2Uoc3RhY2tUcmFjZSkge1xuICBpZiAoIXN0YWNrVHJhY2UpIHJldHVybiB1bmRlZmluZWQ7XG4gIHZhciBsaW5lcyA9IHN0YWNrVHJhY2Uuc3BsaXQoJ1xcbicpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0YWNrVHJhY2VMaW5lKGxpbmVzW2ldKTsgLy8gVGhlIGZpcnN0IGxpbmUgb2YgVjggc3RhY2sgdHJhY2VzIGlzIGp1c3QgXCJFcnJvclwiXG5cbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkgY29udGludWU7IC8vIElmIHdlIHJlYWNoIG9uZSBvZiB0aGVzZSwgd2UgaGF2ZSBnb25lIHRvbyBmYXIgYW5kIHNob3VsZCBxdWl0XG5cbiAgICBpZiAoaW50ZXJuYWxSZWFjdEZ1bmN0aW9uTmFtZXMuaGFzKGZ1bmN0aW9uTmFtZSkpIGJyZWFrOyAvLyBUaGUgY29tcG9uZW50IG5hbWUgaXMgdGhlIGZpcnN0IGZ1bmN0aW9uIGluIHRoZSBzdGFjayB0aGF0IHN0YXJ0cyB3aXRoIGFuXG4gICAgLy8gdXBwZXJjYXNlIGxldHRlclxuXG4gICAgaWYgKC9eW0EtWl0vLnRlc3QoZnVuY3Rpb25OYW1lKSkgcmV0dXJuIHNhbml0aXplSWRlbnRpZmllcihmdW5jdGlvbk5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgY3JlYXRlRW1vdGlvblByb3BzID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBwcm9wcy5jc3MgPT09ICdzdHJpbmcnICYmIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGEgY3NzIGRlY2xhcmF0aW9uXG4gIHByb3BzLmNzcy5pbmRleE9mKCc6JykgIT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5ncyBhcmUgbm90IGFsbG93ZWQgYXMgY3NzIHByb3AgdmFsdWVzLCBwbGVhc2Ugd3JhcCBpdCBpbiBhIGNzcyB0ZW1wbGF0ZSBsaXRlcmFsIGZyb20gJ0BlbW90aW9uL3JlYWN0JyBsaWtlIHRoaXM6IGNzc2BcIiArIHByb3BzLmNzcyArIFwiYFwiKTtcbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICBuZXdQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gIH1cblxuICBuZXdQcm9wc1t0eXBlUHJvcE5hbWVdID0gdHlwZTsgLy8gRm9yIHBlcmZvcm1hbmNlLCBvbmx5IGNhbGwgZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZSBpbiBkZXZlbG9wbWVudCBhbmQgd2hlblxuICAvLyB0aGUgbGFiZWwgaGFzbid0IGFscmVhZHkgYmVlbiBjb21wdXRlZFxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICEhcHJvcHMuY3NzICYmICh0eXBlb2YgcHJvcHMuY3NzICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgcHJvcHMuY3NzLm5hbWUgIT09ICdzdHJpbmcnIHx8IHByb3BzLmNzcy5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpKSB7XG4gICAgdmFyIGxhYmVsID0gZ2V0TGFiZWxGcm9tU3RhY2tUcmFjZShuZXcgRXJyb3IoKS5zdGFjayk7XG4gICAgaWYgKGxhYmVsKSBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IGxhYmVsO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Byb3BzO1xufTtcblxudmFyIEluc2VydGlvbiA9IGZ1bmN0aW9uIEluc2VydGlvbihfcmVmKSB7XG4gIHZhciBjYWNoZSA9IF9yZWYuY2FjaGUsXG4gICAgICBzZXJpYWxpemVkID0gX3JlZi5zZXJpYWxpemVkLFxuICAgICAgaXNTdHJpbmdUYWcgPSBfcmVmLmlzU3RyaW5nVGFnO1xuICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpO1xuICB2YXIgcnVsZXMgPSB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufTtcblxudmFyIEVtb3Rpb24gPSAvKiAjX19QVVJFX18gKi93aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHByb3BzLmNzczsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIFdyYXBwZWRDb21wb25lbnQgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcywgdW5kZWZpbmVkLCB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCkpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHNlcmlhbGl6ZWQubmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgdmFyIGxhYmVsRnJvbVN0YWNrID0gcHJvcHNbbGFiZWxQcm9wTmFtZV07XG5cbiAgICBpZiAobGFiZWxGcm9tU3RhY2spIHtcbiAgICAgIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3NlcmlhbGl6ZWQsICdsYWJlbDonICsgbGFiZWxGcm9tU3RhY2sgKyAnOyddKTtcbiAgICB9XG4gIH1cblxuICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gIHZhciBuZXdQcm9wcyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpICYmIGtleSAhPT0gJ2NzcycgJiYga2V5ICE9PSB0eXBlUHJvcE5hbWUgJiYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwga2V5ICE9PSBsYWJlbFByb3BOYW1lKSkge1xuICAgICAgbmV3UHJvcHNba2V5XSA9IHByb3BzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbmV3UHJvcHMucmVmID0gcmVmO1xuICBuZXdQcm9wcy5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgY2FjaGU6IGNhY2hlLFxuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBXcmFwcGVkQ29tcG9uZW50ID09PSAnc3RyaW5nJ1xuICB9KSwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgbmV3UHJvcHMpKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufVxuXG5leHBvcnQgeyBDYWNoZVByb3ZpZGVyIGFzIEMsIEVtb3Rpb24gYXMgRSwgVGhlbWVDb250ZXh0IGFzIFQsIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSBhcyBfLCBUaGVtZVByb3ZpZGVyIGFzIGEsIHdpdGhUaGVtZSBhcyBiLCBjcmVhdGVFbW90aW9uUHJvcHMgYXMgYywgaGFzT3duUHJvcGVydHkgYXMgaCwgdXNlVGhlbWUgYXMgdSwgd2l0aEVtb3Rpb25DYWNoZSBhcyB3IH07XG4iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCB1c2VDb250ZXh0LCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9jYWNoZSc7XG5pbXBvcnQgeyBoIGFzIGhhc093blByb3BlcnR5LCBFIGFzIEVtb3Rpb24sIGMgYXMgY3JlYXRlRW1vdGlvblByb3BzLCB3IGFzIHdpdGhFbW90aW9uQ2FjaGUsIFQgYXMgVGhlbWVDb250ZXh0IH0gZnJvbSAnLi9lbW90aW9uLWVsZW1lbnQtNmE4ODNkYTkuYnJvd3Nlci5lc20uanMnO1xuZXhwb3J0IHsgQyBhcyBDYWNoZVByb3ZpZGVyLCBUIGFzIFRoZW1lQ29udGV4dCwgYSBhcyBUaGVtZVByb3ZpZGVyLCBfIGFzIF9fdW5zYWZlX3VzZUVtb3Rpb25DYWNoZSwgdSBhcyB1c2VUaGVtZSwgdyBhcyB3aXRoRW1vdGlvbkNhY2hlLCBiIGFzIHdpdGhUaGVtZSB9IGZyb20gJy4vZW1vdGlvbi1lbGVtZW50LTZhODgzZGE5LmJyb3dzZXIuZXNtLmpzJztcbmltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcbmltcG9ydCAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0ICcuLi9faXNvbGF0ZWQtaG5ycy9kaXN0L2Vtb3Rpb24tcmVhY3QtX2lzb2xhdGVkLWhucnMuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0IHsgaW5zZXJ0U3R5bGVzLCByZWdpc3RlclN0eWxlcywgZ2V0UmVnaXN0ZXJlZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2ssIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciBwa2cgPSB7XG5cdG5hbWU6IFwiQGVtb3Rpb24vcmVhY3RcIixcblx0dmVyc2lvbjogXCIxMS4xMC41XCIsXG5cdG1haW46IFwiZGlzdC9lbW90aW9uLXJlYWN0LmNqcy5qc1wiLFxuXHRtb2R1bGU6IFwiZGlzdC9lbW90aW9uLXJlYWN0LmVzbS5qc1wiLFxuXHRicm93c2VyOiB7XG5cdFx0XCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5lc20uanNcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5icm93c2VyLmVzbS5qc1wiXG5cdH0sXG5cdGV4cG9ydHM6IHtcblx0XHRcIi5cIjoge1xuXHRcdFx0bW9kdWxlOiB7XG5cdFx0XHRcdHdvcmtlcjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuYnJvd3Nlci5lc20uanNcIixcblx0XHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9kaXN0L2Vtb3Rpb24tcmVhY3QuZXNtLmpzXCJcblx0XHRcdH0sXG5cdFx0XHRcImRlZmF1bHRcIjogXCIuL2Rpc3QvZW1vdGlvbi1yZWFjdC5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL2pzeC1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUud29ya2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRicm93c2VyOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmJyb3dzZXIuZXNtLmpzXCIsXG5cdFx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vanN4LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LXJ1bnRpbWUuY2pzLmpzXCJcblx0XHR9LFxuXHRcdFwiLi9faXNvbGF0ZWQtaG5yc1wiOiB7XG5cdFx0XHRtb2R1bGU6IHtcblx0XHRcdFx0d29ya2VyOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLndvcmtlci5lc20uanNcIixcblx0XHRcdFx0YnJvd3NlcjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL19pc29sYXRlZC1obnJzL2Rpc3QvZW1vdGlvbi1yZWFjdC1faXNvbGF0ZWQtaG5ycy5lc20uanNcIlxuXHRcdFx0fSxcblx0XHRcdFwiZGVmYXVsdFwiOiBcIi4vX2lzb2xhdGVkLWhucnMvZGlzdC9lbW90aW9uLXJlYWN0LV9pc29sYXRlZC1obnJzLmNqcy5qc1wiXG5cdFx0fSxcblx0XHRcIi4vanN4LWRldi1ydW50aW1lXCI6IHtcblx0XHRcdG1vZHVsZToge1xuXHRcdFx0XHR3b3JrZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS53b3JrZXIuZXNtLmpzXCIsXG5cdFx0XHRcdGJyb3dzZXI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5icm93c2VyLmVzbS5qc1wiLFxuXHRcdFx0XHRcImRlZmF1bHRcIjogXCIuL2pzeC1kZXYtcnVudGltZS9kaXN0L2Vtb3Rpb24tcmVhY3QtanN4LWRldi1ydW50aW1lLmVzbS5qc1wiXG5cdFx0XHR9LFxuXHRcdFx0XCJkZWZhdWx0XCI6IFwiLi9qc3gtZGV2LXJ1bnRpbWUvZGlzdC9lbW90aW9uLXJlYWN0LWpzeC1kZXYtcnVudGltZS5janMuanNcIlxuXHRcdH0sXG5cdFx0XCIuL3BhY2thZ2UuanNvblwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG5cdFx0XCIuL3R5cGVzL2Nzcy1wcm9wXCI6IFwiLi90eXBlcy9jc3MtcHJvcC5kLnRzXCIsXG5cdFx0XCIuL21hY3JvXCI6IFwiLi9tYWNyby5qc1wiXG5cdH0sXG5cdHR5cGVzOiBcInR5cGVzL2luZGV4LmQudHNcIixcblx0ZmlsZXM6IFtcblx0XHRcInNyY1wiLFxuXHRcdFwiZGlzdFwiLFxuXHRcdFwianN4LXJ1bnRpbWVcIixcblx0XHRcImpzeC1kZXYtcnVudGltZVwiLFxuXHRcdFwiX2lzb2xhdGVkLWhucnNcIixcblx0XHRcInR5cGVzLyouZC50c1wiLFxuXHRcdFwibWFjcm8uanNcIixcblx0XHRcIm1hY3JvLmQudHNcIixcblx0XHRcIm1hY3JvLmpzLmZsb3dcIlxuXHRdLFxuXHRzaWRlRWZmZWN0czogZmFsc2UsXG5cdGF1dGhvcjogXCJFbW90aW9uIENvbnRyaWJ1dG9yc1wiLFxuXHRsaWNlbnNlOiBcIk1JVFwiLFxuXHRzY3JpcHRzOiB7XG5cdFx0XCJ0ZXN0OnR5cGVzY3JpcHRcIjogXCJkdHNsaW50IHR5cGVzXCJcblx0fSxcblx0ZGVwZW5kZW5jaWVzOiB7XG5cdFx0XCJAYmFiZWwvcnVudGltZVwiOiBcIl43LjE4LjNcIixcblx0XHRcIkBlbW90aW9uL2JhYmVsLXBsdWdpblwiOiBcIl4xMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9jYWNoZVwiOiBcIl4xMS4xMC41XCIsXG5cdFx0XCJAZW1vdGlvbi9zZXJpYWxpemVcIjogXCJeMS4xLjFcIixcblx0XHRcIkBlbW90aW9uL3VzZS1pbnNlcnRpb24tZWZmZWN0LXdpdGgtZmFsbGJhY2tzXCI6IFwiXjEuMC4wXCIsXG5cdFx0XCJAZW1vdGlvbi91dGlsc1wiOiBcIl4xLjIuMFwiLFxuXHRcdFwiQGVtb3Rpb24vd2Vhay1tZW1vaXplXCI6IFwiXjAuMy4wXCIsXG5cdFx0XCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiOiBcIl4zLjMuMVwiXG5cdH0sXG5cdHBlZXJEZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMC4wXCIsXG5cdFx0cmVhY3Q6IFwiPj0xNi44LjBcIlxuXHR9LFxuXHRwZWVyRGVwZW5kZW5jaWVzTWV0YToge1xuXHRcdFwiQGJhYmVsL2NvcmVcIjoge1xuXHRcdFx0b3B0aW9uYWw6IHRydWVcblx0XHR9LFxuXHRcdFwiQHR5cGVzL3JlYWN0XCI6IHtcblx0XHRcdG9wdGlvbmFsOiB0cnVlXG5cdFx0fVxuXHR9LFxuXHRkZXZEZXBlbmRlbmNpZXM6IHtcblx0XHRcIkBiYWJlbC9jb3JlXCI6IFwiXjcuMTguNVwiLFxuXHRcdFwiQGRlZmluaXRlbHl0eXBlZC9kdHNsaW50XCI6IFwiMC4wLjExMlwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzXCI6IFwiMTEuMTAuNVwiLFxuXHRcdFwiQGVtb3Rpb24vY3NzLXByZXR0aWZpZXJcIjogXCIxLjEuMVwiLFxuXHRcdFwiQGVtb3Rpb24vc2VydmVyXCI6IFwiMTEuMTAuMFwiLFxuXHRcdFwiQGVtb3Rpb24vc3R5bGVkXCI6IFwiMTEuMTAuNVwiLFxuXHRcdFwiaHRtbC10YWctbmFtZXNcIjogXCJeMS4xLjJcIixcblx0XHRyZWFjdDogXCIxNi4xNC4wXCIsXG5cdFx0XCJzdmctdGFnLW5hbWVzXCI6IFwiXjEuMS4xXCIsXG5cdFx0dHlwZXNjcmlwdDogXCJeNC41LjVcIlxuXHR9LFxuXHRyZXBvc2l0b3J5OiBcImh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vdHJlZS9tYWluL3BhY2thZ2VzL3JlYWN0XCIsXG5cdHB1Ymxpc2hDb25maWc6IHtcblx0XHRhY2Nlc3M6IFwicHVibGljXCJcblx0fSxcblx0XCJ1bWQ6bWFpblwiOiBcImRpc3QvZW1vdGlvbi1yZWFjdC51bWQubWluLmpzXCIsXG5cdHByZWNvbnN0cnVjdDoge1xuXHRcdGVudHJ5cG9pbnRzOiBbXG5cdFx0XHRcIi4vaW5kZXguanNcIixcblx0XHRcdFwiLi9qc3gtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL2pzeC1kZXYtcnVudGltZS5qc1wiLFxuXHRcdFx0XCIuL19pc29sYXRlZC1obnJzLmpzXCJcblx0XHRdLFxuXHRcdHVtZE5hbWU6IFwiZW1vdGlvblJlYWN0XCIsXG5cdFx0ZXhwb3J0czoge1xuXHRcdFx0ZW52Q29uZGl0aW9uczogW1xuXHRcdFx0XHRcImJyb3dzZXJcIixcblx0XHRcdFx0XCJ3b3JrZXJcIlxuXHRcdFx0XSxcblx0XHRcdGV4dHJhOiB7XG5cdFx0XHRcdFwiLi90eXBlcy9jc3MtcHJvcFwiOiBcIi4vdHlwZXMvY3NzLXByb3AuZC50c1wiLFxuXHRcdFx0XHRcIi4vbWFjcm9cIjogXCIuL21hY3JvLmpzXCJcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbnZhciBqc3ggPSBmdW5jdGlvbiBqc3godHlwZSwgcHJvcHMpIHtcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgaWYgKHByb3BzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5LmNhbGwocHJvcHMsICdjc3MnKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gY3JlYXRlRW1vdGlvblByb3BzKHR5cGUsIHByb3BzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3NMZW5ndGg7IGkrKykge1xuICAgIGNyZWF0ZUVsZW1lbnRBcmdBcnJheVtpXSA9IGFyZ3NbaV07XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkobnVsbCwgY3JlYXRlRWxlbWVudEFyZ0FycmF5KTtcbn07XG5cbnZhciB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSBmYWxzZTsgLy8gbWFpbnRhaW4gcGxhY2Ugb3ZlciByZXJlbmRlcnMuXG4vLyBpbml0aWFsIHJlbmRlciBmcm9tIGJyb3dzZXIsIGluc2VydEJlZm9yZSBjb250ZXh0LnNoZWV0LnRhZ3NbMF0gb3IgaWYgYSBzdHlsZSBoYXNuJ3QgYmVlbiBpbnNlcnRlZCB0aGVyZSB5ZXQsIGFwcGVuZENoaWxkXG4vLyBpbml0aWFsIGNsaWVudC1zaWRlIHJlbmRlciBmcm9tIFNTUiwgdXNlIHBsYWNlIG9mIGh5ZHJhdGluZyB0YWdcblxudmFyIEdsb2JhbCA9IC8qICNfX1BVUkVfXyAqL3dpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsICYmICggLy8gY2hlY2sgZm9yIGNsYXNzTmFtZSBhcyB3ZWxsIHNpbmNlIHRoZSB1c2VyIGlzXG4gIC8vIHByb2JhYmx5IHVzaW5nIHRoZSBjdXN0b20gY3JlYXRlRWxlbWVudCB3aGljaFxuICAvLyBtZWFucyBpdCB3aWxsIGJlIHR1cm5lZCBpbnRvIGEgY2xhc3NOYW1lIHByb3BcbiAgLy8gJEZsb3dGaXhNZSBJIGRvbid0IHJlYWxseSB3YW50IHRvIGFkZCBpdCB0byB0aGUgdHlwZSBzaW5jZSBpdCBzaG91bGRuJ3QgYmUgdXNlZFxuICBwcm9wcy5jbGFzc05hbWUgfHwgcHJvcHMuY3NzKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyB0aGUgY3NzIHByb3Agb24gR2xvYmFsLCBkaWQgeW91IG1lYW4gdG8gdXNlIHRoZSBzdHlsZXMgcHJvcCBpbnN0ZWFkP1wiKTtcbiAgICB3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IHByb3BzLnN0eWxlcztcbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10sIHVuZGVmaW5lZCwgdXNlQ29udGV4dChUaGVtZUNvbnRleHQpKTtcbiAgLy8gYnV0IGl0IGlzIGJhc2VkIG9uIGEgY29uc3RhbnQgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSBhdCBydW50aW1lXG4gIC8vIGl0J3MgZWZmZWN0aXZlbHkgbGlrZSBoYXZpbmcgdHdvIGltcGxlbWVudGF0aW9ucyBhbmQgc3dpdGNoaW5nIHRoZW0gb3V0XG4gIC8vIHNvIGl0J3Mgbm90IGFjdHVhbGx5IGJyZWFraW5nIGFueXRoaW5nXG5cblxuICB2YXIgc2hlZXRSZWYgPSB1c2VSZWYoKTtcbiAgdXNlSW5zZXJ0aW9uRWZmZWN0V2l0aExheW91dEZhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIga2V5ID0gY2FjaGUua2V5ICsgXCItZ2xvYmFsXCI7IC8vIHVzZSBjYXNlIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9lbW90aW9uLWpzL2Vtb3Rpb24vaXNzdWVzLzI2NzVcblxuICAgIHZhciBzaGVldCA9IG5ldyBjYWNoZS5zaGVldC5jb25zdHJ1Y3Rvcih7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5vbmNlOiBjYWNoZS5zaGVldC5ub25jZSxcbiAgICAgIGNvbnRhaW5lcjogY2FjaGUuc2hlZXQuY29udGFpbmVyLFxuICAgICAgc3BlZWR5OiBjYWNoZS5zaGVldC5pc1NwZWVkeVxuICAgIH0pO1xuICAgIHZhciByZWh5ZHJhdGluZyA9IGZhbHNlOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb249XFxcIlwiICsga2V5ICsgXCIgXCIgKyBzZXJpYWxpemVkLm5hbWUgKyBcIlxcXCJdXCIpO1xuXG4gICAgaWYgKGNhY2hlLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICBzaGVldC5iZWZvcmUgPSBjYWNoZS5zaGVldC50YWdzWzBdO1xuICAgIH1cblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICByZWh5ZHJhdGluZyA9IHRydWU7IC8vIGNsZWFyIHRoZSBoYXNoIHNvIHRoaXMgbm9kZSB3b24ndCBiZSByZWNvZ25pemFibGUgYXMgcmVoeWRyYXRhYmxlIGJ5IG90aGVyIDxHbG9iYWwvPnNcblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZW1vdGlvbicsIGtleSk7XG4gICAgICBzaGVldC5oeWRyYXRlKFtub2RlXSk7XG4gICAgfVxuXG4gICAgc2hlZXRSZWYuY3VycmVudCA9IFtzaGVldCwgcmVoeWRyYXRpbmddO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH07XG4gIH0sIFtjYWNoZV0pO1xuICB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBzaGVldFJlZkN1cnJlbnQgPSBzaGVldFJlZi5jdXJyZW50O1xuICAgIHZhciBzaGVldCA9IHNoZWV0UmVmQ3VycmVudFswXSxcbiAgICAgICAgcmVoeWRyYXRpbmcgPSBzaGVldFJlZkN1cnJlbnRbMV07XG5cbiAgICBpZiAocmVoeWRyYXRpbmcpIHtcbiAgICAgIHNoZWV0UmVmQ3VycmVudFsxXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzZXJpYWxpemVkLm5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gaW5zZXJ0IGtleWZyYW1lc1xuICAgICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChzaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgLy8gaWYgdGhpcyBkb2Vzbid0IGV4aXN0IHRoZW4gaXQgd2lsbCBiZSBudWxsIHNvIHRoZSBzdHlsZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgIHZhciBlbGVtZW50ID0gc2hlZXQudGFnc1tzaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHNoZWV0LmJlZm9yZSA9IGVsZW1lbnQ7XG4gICAgICBzaGVldC5mbHVzaCgpO1xuICAgIH1cblxuICAgIGNhY2hlLmluc2VydChcIlwiLCBzZXJpYWxpemVkLCBzaGVldCwgZmFsc2UpO1xuICB9LCBbY2FjaGUsIHNlcmlhbGl6ZWQubmFtZV0pO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBHbG9iYWwuZGlzcGxheU5hbWUgPSAnRW1vdGlvbkdsb2JhbCc7XG59XG5cbmZ1bmN0aW9uIGNzcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVTdHlsZXMoYXJncyk7XG59XG5cbnZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gIHZhciBpbnNlcnRhYmxlID0gY3NzLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgdmFyIG5hbWUgPSBcImFuaW1hdGlvbi1cIiArIGluc2VydGFibGUubmFtZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIG5hbWUgKyBcIntcIiArIGluc2VydGFibGUuc3R5bGVzICsgXCJ9XCIsXG4gICAgYW5pbTogMSxcbiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJfRU1PX1wiICsgdGhpcy5uYW1lICsgXCJfXCIgKyB0aGlzLnN0eWxlcyArIFwiX0VNT19cIjtcbiAgICB9XG4gIH07XG59O1xuXG52YXIgY2xhc3NuYW1lcyA9IGZ1bmN0aW9uIGNsYXNzbmFtZXMoYXJncykge1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIGNscyA9ICcnO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFyZy5zdHlsZXMgIT09IHVuZGVmaW5lZCAmJiBhcmcubmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdSBoYXZlIHBhc3NlZCBzdHlsZXMgY3JlYXRlZCB3aXRoIGBjc3NgIGZyb20gYEBlbW90aW9uL3JlYWN0YCBwYWNrYWdlIHRvIHRoZSBgY3hgLlxcbicgKyAnYGN4YCBpcyBtZWFudCB0byBjb21wb3NlIGNsYXNzIG5hbWVzIChzdHJpbmdzKSBzbyB5b3Ugc2hvdWxkIGNvbnZlcnQgdGhvc2Ugc3R5bGVzIHRvIGEgY2xhc3MgbmFtZSBieSBwYXNzaW5nIHRoZW0gdG8gdGhlIGBjc3NgIHJlY2VpdmVkIGZyb20gPENsYXNzTmFtZXMvPiBjb21wb25lbnQuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmZ1bmN0aW9uIG1lcmdlKHJlZ2lzdGVyZWQsIGNzcywgY2xhc3NOYW1lKSB7XG4gIHZhciByZWdpc3RlcmVkU3R5bGVzID0gW107XG4gIHZhciByYXdDbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKHJlZ2lzdGVyZWQsIHJlZ2lzdGVyZWRTdHlsZXMsIGNsYXNzTmFtZSk7XG5cbiAgaWYgKHJlZ2lzdGVyZWRTdHlsZXMubGVuZ3RoIDwgMikge1xuICAgIHJldHVybiBjbGFzc05hbWU7XG4gIH1cblxuICByZXR1cm4gcmF3Q2xhc3NOYW1lICsgY3NzKHJlZ2lzdGVyZWRTdHlsZXMpO1xufVxuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWRBcnIgPSBfcmVmLnNlcmlhbGl6ZWRBcnI7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXJpYWxpemVkQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmVzID0gaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkQXJyW2ldLCBmYWxzZSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbnVsbDtcbn07XG5cbnZhciBDbGFzc05hbWVzID0gLyogI19fUFVSRV9fICovd2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIHZhciBoYXNSZW5kZXJlZCA9IGZhbHNlO1xuICB2YXIgc2VyaWFsaXplZEFyciA9IFtdO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3NzIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIHJlbmRlcicpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBzZXJpYWxpemVkQXJyLnB1c2goc2VyaWFsaXplZCk7IC8vIHJlZ2lzdHJhdGlvbiBoYXMgdG8gaGFwcGVuIGhlcmUgYXMgdGhlIHJlc3VsdCBvZiB0aGlzIG1pZ2h0IGdldCBjb25zdW1lZCBieSBgY3hgXG5cbiAgICByZWdpc3RlclN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgZmFsc2UpO1xuICAgIHJldHVybiBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgfTtcblxuICB2YXIgY3ggPSBmdW5jdGlvbiBjeCgpIHtcbiAgICBpZiAoaGFzUmVuZGVyZWQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVyZ2UoY2FjaGUucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgfTtcblxuICB2YXIgY29udGVudCA9IHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgdGhlbWU6IHVzZUNvbnRleHQoVGhlbWVDb250ZXh0KVxuICB9O1xuICB2YXIgZWxlID0gcHJvcHMuY2hpbGRyZW4oY29udGVudCk7XG4gIGhhc1JlbmRlcmVkID0gdHJ1ZTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChJbnNlcnRpb24sIHtcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgc2VyaWFsaXplZEFycjogc2VyaWFsaXplZEFyclxuICB9KSwgZWxlKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBDbGFzc05hbWVzLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25DbGFzc05hbWVzJztcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGlzQnJvd3NlciA9IFwib2JqZWN0XCIgIT09ICd1bmRlZmluZWQnOyAvLyAjMTcyNywgIzI5MDUgZm9yIHNvbWUgcmVhc29uIEplc3QgYW5kIFZpdGVzdCBldmFsdWF0ZSBtb2R1bGVzIHR3aWNlIGlmIHNvbWUgY29uc3VtaW5nIG1vZHVsZSBnZXRzIG1vY2tlZFxuXG4gIHZhciBpc1Rlc3RFbnYgPSB0eXBlb2YgamVzdCAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHZpICE9PSAndW5kZWZpbmVkJztcblxuICBpZiAoaXNCcm93c2VyICYmICFpc1Rlc3RFbnYpIHtcbiAgICAvLyBnbG9iYWxUaGlzIGhhcyB3aWRlIGJyb3dzZXIgc3VwcG9ydCAtIGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1nbG9iYWxUaGlzLCBOb2RlLmpzIDEyIGFuZCBsYXRlclxuICAgIHZhciBnbG9iYWxDb250ZXh0ID0gLy8gJEZsb3dJZ25vcmVcbiAgICB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICA6IGlzQnJvd3NlciA/IHdpbmRvdyA6IGdsb2JhbDtcbiAgICB2YXIgZ2xvYmFsS2V5ID0gXCJfX0VNT1RJT05fUkVBQ1RfXCIgKyBwa2cudmVyc2lvbi5zcGxpdCgnLicpWzBdICsgXCJfX1wiO1xuXG4gICAgaWYgKGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSkge1xuICAgICAgY29uc29sZS53YXJuKCdZb3UgYXJlIGxvYWRpbmcgQGVtb3Rpb24vcmVhY3Qgd2hlbiBpdCBpcyBhbHJlYWR5IGxvYWRlZC4gUnVubmluZyAnICsgJ211bHRpcGxlIGluc3RhbmNlcyBtYXkgY2F1c2UgcHJvYmxlbXMuIFRoaXMgY2FuIGhhcHBlbiBpZiBtdWx0aXBsZSAnICsgJ3ZlcnNpb25zIGFyZSB1c2VkLCBvciBpZiBtdWx0aXBsZSBidWlsZHMgb2YgdGhlIHNhbWUgdmVyc2lvbiBhcmUgJyArICd1c2VkLicpO1xuICAgIH1cblxuICAgIGdsb2JhbENvbnRleHRbZ2xvYmFsS2V5XSA9IHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IHsgQ2xhc3NOYW1lcywgR2xvYmFsLCBqc3ggYXMgY3JlYXRlRWxlbWVudCwgY3NzLCBqc3gsIGtleWZyYW1lcyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiaW1wb3J0IGhhc2hTdHJpbmcgZnJvbSAnQGVtb3Rpb24vaGFzaCc7XG5pbXBvcnQgdW5pdGxlc3MgZnJvbSAnQGVtb3Rpb24vdW5pdGxlc3MnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciBJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUiA9IFwiWW91IGhhdmUgaWxsZWdhbCBlc2NhcGUgc2VxdWVuY2UgaW4geW91ciB0ZW1wbGF0ZSBsaXRlcmFsLCBtb3N0IGxpa2VseSBpbnNpZGUgY29udGVudCdzIHByb3BlcnR5IHZhbHVlLlxcbkJlY2F1c2UgeW91IHdyaXRlIHlvdXIgQ1NTIGluc2lkZSBhIEphdmFTY3JpcHQgc3RyaW5nIHlvdSBhY3R1YWxseSBoYXZlIHRvIGRvIGRvdWJsZSBlc2NhcGluZywgc28gZm9yIGV4YW1wbGUgXFxcImNvbnRlbnQ6ICdcXFxcMDBkNyc7XFxcIiBzaG91bGQgYmVjb21lIFxcXCJjb250ZW50OiAnXFxcXFxcXFwwMGQ3JztcXFwiLlxcbllvdSBjYW4gcmVhZCBtb3JlIGFib3V0IHRoaXMgaGVyZTpcXG5odHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9UZW1wbGF0ZV9saXRlcmFscyNFUzIwMThfcmV2aXNpb25fb2ZfaWxsZWdhbF9lc2NhcGVfc2VxdWVuY2VzXCI7XG52YXIgVU5ERUZJTkVEX0FTX09CSkVDVF9LRVlfRVJST1IgPSBcIllvdSBoYXZlIHBhc3NlZCBpbiBmYWxzeSB2YWx1ZSBhcyBzdHlsZSBvYmplY3QncyBrZXkgKGNhbiBoYXBwZW4gd2hlbiBpbiBleGFtcGxlIHlvdSBwYXNzIHVuZXhwb3J0ZWQgY29tcG9uZW50IGFzIGNvbXB1dGVkIGtleSkuXCI7XG52YXIgaHlwaGVuYXRlUmVnZXggPSAvW0EtWl18Xm1zL2c7XG52YXIgYW5pbWF0aW9uUmVnZXggPSAvX0VNT18oW15fXSs/KV8oW15dKj8pX0VNT18vZztcblxudmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBmdW5jdGlvbiBpc0N1c3RvbVByb3BlcnR5KHByb3BlcnR5KSB7XG4gIHJldHVybiBwcm9wZXJ0eS5jaGFyQ29kZUF0KDEpID09PSA0NTtcbn07XG5cbnZhciBpc1Byb2Nlc3NhYmxlVmFsdWUgPSBmdW5jdGlvbiBpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbic7XG59O1xuXG52YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaXNDdXN0b21Qcm9wZXJ0eShzdHlsZU5hbWUpID8gc3R5bGVOYW1lIDogc3R5bGVOYW1lLnJlcGxhY2UoaHlwaGVuYXRlUmVnZXgsICctJCYnKS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbnZhciBwcm9jZXNzU3R5bGVWYWx1ZSA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpIHtcbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdhbmltYXRpb24nOlxuICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKGFuaW1hdGlvblJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gsIHAxLCBwMikge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICBuYW1lOiBwMSxcbiAgICAgICAgICAgICAgc3R5bGVzOiBwMixcbiAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHAxO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBpZiAodW5pdGxlc3Nba2V5XSAhPT0gMSAmJiAhaXNDdXN0b21Qcm9wZXJ0eShrZXkpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGNvbnRlbnRWYWx1ZVBhdHRlcm4gPSAvKHZhcnxhdHRyfGNvdW50ZXJzP3x1cmx8ZWxlbWVudHwoKChyZXBlYXRpbmctKT8obGluZWFyfHJhZGlhbCkpfGNvbmljKS1ncmFkaWVudClcXCh8KG5vLSk/KG9wZW58Y2xvc2UpLXF1b3RlLztcbiAgdmFyIGNvbnRlbnRWYWx1ZXMgPSBbJ25vcm1hbCcsICdub25lJywgJ2luaXRpYWwnLCAnaW5oZXJpdCcsICd1bnNldCddO1xuICB2YXIgb2xkUHJvY2Vzc1N0eWxlVmFsdWUgPSBwcm9jZXNzU3R5bGVWYWx1ZTtcbiAgdmFyIG1zUGF0dGVybiA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgdmFyIGh5cGhlbmF0ZWRDYWNoZSA9IHt9O1xuXG4gIHByb2Nlc3NTdHlsZVZhbHVlID0gZnVuY3Rpb24gcHJvY2Vzc1N0eWxlVmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgPT09ICdjb250ZW50Jykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgY29udGVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA9PT0gLTEgJiYgIWNvbnRlbnRWYWx1ZVBhdHRlcm4udGVzdCh2YWx1ZSkgJiYgKHZhbHVlLmNoYXJBdCgwKSAhPT0gdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpIHx8IHZhbHVlLmNoYXJBdCgwKSAhPT0gJ1wiJyAmJiB2YWx1ZS5jaGFyQXQoMCkgIT09IFwiJ1wiKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlID0gJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoICcgKyAnQGVtb3Rpb24vYmFiZWwtcGx1Z2luLCB0aGUgc3djIEVtb3Rpb24gcGx1Z2luLCBvciBhbm90aGVyIEVtb3Rpb24tYXdhcmUgJyArICdjb21waWxlciB0cmFuc2Zvcm0uJztcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0pICsgXCI7XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIF9rZXkgaW4gb2JqKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvYmpbX2tleV07XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkICE9IG51bGwgJiYgcmVnaXN0ZXJlZFt2YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHN0cmluZyArPSBfa2V5ICsgXCJ7XCIgKyByZWdpc3RlcmVkW3ZhbHVlXSArIFwifVwiO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvY2Vzc2FibGVWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWUpICsgXCI7XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfa2V5ID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJyAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG5vQ29tcG9uZW50U2VsZWN0b3JNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWVbMF0gPT09ICdzdHJpbmcnICYmIChyZWdpc3RlcmVkID09IG51bGwgfHwgcmVnaXN0ZXJlZFt2YWx1ZVswXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgdmFsdWUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlW19pXSkpIHtcbiAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIHByb2Nlc3NTdHlsZVZhbHVlKF9rZXksIHZhbHVlW19pXSkgKyBcIjtcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGludGVycG9sYXRlZCA9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIHZhbHVlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqKDt8JCkvZztcbnZhciBzb3VyY2VNYXBQYXR0ZXJuO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzb3VyY2VNYXBQYXR0ZXJuID0gL1xcL1xcKiNcXHNzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb25cXC9qc29uO1xcUytcXHMrXFwqXFwvL2c7XG59IC8vIHRoaXMgaXMgdGhlIGN1cnNvciBmb3Iga2V5ZnJhbWVzXG4vLyBrZXlmcmFtZXMgYXJlIHN0b3JlZCBvbiB0aGUgU2VyaWFsaXplZFN0eWxlcyBvYmplY3QgYXMgYSBsaW5rZWQgbGlzdFxuXG5cbnZhciBjdXJzb3I7XG52YXIgc2VyaWFsaXplU3R5bGVzID0gZnVuY3Rpb24gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIHJlZ2lzdGVyZWQsIG1lcmdlZFByb3BzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJnc1swXSA9PT0gJ29iamVjdCcgJiYgYXJnc1swXSAhPT0gbnVsbCAmJiBhcmdzWzBdLnN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cblxuICB2YXIgc3RyaW5nTW9kZSA9IHRydWU7XG4gIHZhciBzdHlsZXMgPSAnJztcbiAgY3Vyc29yID0gdW5kZWZpbmVkO1xuICB2YXIgc3RyaW5ncyA9IGFyZ3NbMF07XG5cbiAgaWYgKHN0cmluZ3MgPT0gbnVsbCB8fCBzdHJpbmdzLnJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RyaW5nTW9kZSA9IGZhbHNlO1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBzdHJpbmdzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgIH1cblxuICAgIHN0eWxlcyArPSBzdHJpbmdzWzBdO1xuICB9IC8vIHdlIHN0YXJ0IGF0IDEgc2luY2Ugd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBmaXJzdCBhcmdcblxuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIHN0eWxlcyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBhcmdzW2ldKTtcblxuICAgIGlmIChzdHJpbmdNb2RlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBzdHJpbmdzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHN0eWxlcyArPSBzdHJpbmdzW2ldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzb3VyY2VNYXA7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBzdHlsZXMgPSBzdHlsZXMucmVwbGFjZShzb3VyY2VNYXBQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNvdXJjZU1hcCA9IG1hdGNoO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICB9IC8vIHVzaW5nIGEgZ2xvYmFsIHJlZ2V4IHdpdGggLmV4ZWMgaXMgc3RhdGVmdWwgc28gbGFzdEluZGV4IGhhcyB0byBiZSByZXNldCBlYWNoIHRpbWVcblxuXG4gIGxhYmVsUGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICB2YXIgaWRlbnRpZmllck5hbWUgPSAnJztcbiAgdmFyIG1hdGNoOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViODA5YzJjZjI5NDk4MDBhMGY2MWZiNVxuXG4gIHdoaWxlICgobWF0Y2ggPSBsYWJlbFBhdHRlcm4uZXhlYyhzdHlsZXMpKSAhPT0gbnVsbCkge1xuICAgIGlkZW50aWZpZXJOYW1lICs9ICctJyArIC8vICRGbG93Rml4TWUgd2Uga25vdyBpdCdzIG5vdCBudWxsXG4gICAgbWF0Y2hbMV07XG4gIH1cblxuICB2YXIgbmFtZSA9IGhhc2hTdHJpbmcoc3R5bGVzKSArIGlkZW50aWZpZXJOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZSBTZXJpYWxpemVkU3R5bGVzIHR5cGUgZG9lc24ndCBoYXZlIHRvU3RyaW5nIHByb3BlcnR5IChhbmQgd2UgZG9uJ3Qgd2FudCB0byBhZGQgaXQpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICAgIG1hcDogc291cmNlTWFwLFxuICAgICAgbmV4dDogY3Vyc29yLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJZb3UgaGF2ZSB0cmllZCB0byBzdHJpbmdpZnkgb2JqZWN0IHJldHVybmVkIGZyb20gYGNzc2AgZnVuY3Rpb24uIEl0IGlzbid0IHN1cHBvc2VkIHRvIGJlIHVzZWQgZGlyZWN0bHkgKGUuZy4gYXMgdmFsdWUgb2YgdGhlIGBjbGFzc05hbWVgIHByb3ApLCBidXQgcmF0aGVyIGhhbmRlZCB0byBlbW90aW9uIHNvIGl0IGNhbiBoYW5kbGUgaXQgKGUuZy4gYXMgdmFsdWUgb2YgYGNzc2AgcHJvcCkuXCI7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBzdHlsZXM6IHN0eWxlcyxcbiAgICBuZXh0OiBjdXJzb3JcbiAgfTtcbn07XG5cbmV4cG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG52YXIgc3luY0ZhbGxiYWNrID0gZnVuY3Rpb24gc3luY0ZhbGxiYWNrKGNyZWF0ZSkge1xuICByZXR1cm4gY3JlYXRlKCk7XG59O1xuXG52YXIgdXNlSW5zZXJ0aW9uRWZmZWN0ID0gUmVhY3RbJ3VzZUluc2VydGlvbicgKyAnRWZmZWN0J10gPyBSZWFjdFsndXNlSW5zZXJ0aW9uJyArICdFZmZlY3QnXSA6IGZhbHNlO1xudmFyIHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgPSAgdXNlSW5zZXJ0aW9uRWZmZWN0IHx8IHN5bmNGYWxsYmFjaztcbnZhciB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgPSB1c2VJbnNlcnRpb25FZmZlY3QgfHwgdXNlTGF5b3V0RWZmZWN0O1xuXG5leHBvcnQgeyB1c2VJbnNlcnRpb25FZmZlY3RBbHdheXNXaXRoU3luY0ZhbGxiYWNrLCB1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2sgfTtcbiIsInZhciBpc0Jyb3dzZXIgPSBcIm9iamVjdFwiICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0gKyBcIjtcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhd0NsYXNzTmFtZSArPSBjbGFzc05hbWUgKyBcIiBcIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3Q2xhc3NOYW1lO1xufVxudmFyIHJlZ2lzdGVyU3R5bGVzID0gZnVuY3Rpb24gcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgKSAmJiBjYWNoZS5yZWdpc3RlcmVkW2NsYXNzTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9IHNlcmlhbGl6ZWQuc3R5bGVzO1xuICB9XG59O1xudmFyIGluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgaXNTdHJpbmdUYWcpIHtcbiAgcmVnaXN0ZXJTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgdmFyIGNsYXNzTmFtZSA9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuXG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VycmVudCA9IHNlcmlhbGl6ZWQ7XG5cbiAgICBkbyB7XG4gICAgICB2YXIgbWF5YmVTdHlsZXMgPSBjYWNoZS5pbnNlcnQoc2VyaWFsaXplZCA9PT0gY3VycmVudCA/IFwiLlwiICsgY2xhc3NOYW1lIDogJycsIGN1cnJlbnQsIGNhY2hlLnNoZWV0LCB0cnVlKTtcblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuICB9XG59O1xuXG5leHBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMsIHJlZ2lzdGVyU3R5bGVzIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbnZhciBfZGVmYXVsdCA9IGJsdWU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbnZhciBfZGVmYXVsdCA9IGNvbW1vbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbnZhciBfZGVmYXVsdCA9IGdyZWVuO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5jb25zdCBncmV5ID0ge1xuICA1MDogJyNmYWZhZmEnLFxuICAxMDA6ICcjZjVmNWY1JyxcbiAgMjAwOiAnI2VlZWVlZScsXG4gIDMwMDogJyNlMGUwZTAnLFxuICA0MDA6ICcjYmRiZGJkJyxcbiAgNTAwOiAnIzllOWU5ZScsXG4gIDYwMDogJyM3NTc1NzUnLFxuICA3MDA6ICcjNjE2MTYxJyxcbiAgODAwOiAnIzQyNDI0MicsXG4gIDkwMDogJyMyMTIxMjEnLFxuICBBMTAwOiAnI2Y1ZjVmNScsXG4gIEEyMDA6ICcjZWVlZWVlJyxcbiAgQTQwMDogJyNiZGJkYmQnLFxuICBBNzAwOiAnIzYxNjE2MSdcbn07XG52YXIgX2RlZmF1bHQgPSBncmV5O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5jb25zdCBsaWdodEJsdWUgPSB7XG4gIDUwOiAnI2UxZjVmZScsXG4gIDEwMDogJyNiM2U1ZmMnLFxuICAyMDA6ICcjODFkNGZhJyxcbiAgMzAwOiAnIzRmYzNmNycsXG4gIDQwMDogJyMyOWI2ZjYnLFxuICA1MDA6ICcjMDNhOWY0JyxcbiAgNjAwOiAnIzAzOWJlNScsXG4gIDcwMDogJyMwMjg4ZDEnLFxuICA4MDA6ICcjMDI3N2JkJyxcbiAgOTAwOiAnIzAxNTc5YicsXG4gIEExMDA6ICcjODBkOGZmJyxcbiAgQTIwMDogJyM0MGM0ZmYnLFxuICBBNDAwOiAnIzAwYjBmZicsXG4gIEE3MDA6ICcjMDA5MWVhJ1xufTtcbnZhciBfZGVmYXVsdCA9IGxpZ2h0Qmx1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuY29uc3Qgb3JhbmdlID0ge1xuICA1MDogJyNmZmYzZTAnLFxuICAxMDA6ICcjZmZlMGIyJyxcbiAgMjAwOiAnI2ZmY2M4MCcsXG4gIDMwMDogJyNmZmI3NGQnLFxuICA0MDA6ICcjZmZhNzI2JyxcbiAgNTAwOiAnI2ZmOTgwMCcsXG4gIDYwMDogJyNmYjhjMDAnLFxuICA3MDA6ICcjZjU3YzAwJyxcbiAgODAwOiAnI2VmNmMwMCcsXG4gIDkwMDogJyNlNjUxMDAnLFxuICBBMTAwOiAnI2ZmZDE4MCcsXG4gIEEyMDA6ICcjZmZhYjQwJyxcbiAgQTQwMDogJyNmZjkxMDAnLFxuICBBNzAwOiAnI2ZmNmQwMCdcbn07XG52YXIgX2RlZmF1bHQgPSBvcmFuZ2U7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xudmFyIF9kZWZhdWx0ID0gcHVycGxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5jb25zdCByZWQgPSB7XG4gIDUwOiAnI2ZmZWJlZScsXG4gIDEwMDogJyNmZmNkZDInLFxuICAyMDA6ICcjZWY5YTlhJyxcbiAgMzAwOiAnI2U1NzM3MycsXG4gIDQwMDogJyNlZjUzNTAnLFxuICA1MDA6ICcjZjQ0MzM2JyxcbiAgNjAwOiAnI2U1MzkzNScsXG4gIDcwMDogJyNkMzJmMmYnLFxuICA4MDA6ICcjYzYyODI4JyxcbiAgOTAwOiAnI2I3MWMxYycsXG4gIEExMDA6ICcjZmY4YTgwJyxcbiAgQTIwMDogJyNmZjUyNTInLFxuICBBNDAwOiAnI2ZmMTc0NCcsXG4gIEE3MDA6ICcjZDUwMDAwJ1xufTtcbnZhciBfZGVmYXVsdCA9IHJlZDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCB7IGNyZWF0ZUJveCB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9DbGFzc05hbWVHZW5lcmF0b3IgYXMgQ2xhc3NOYW1lR2VuZXJhdG9yIH0gZnJvbSAnLi4vY2xhc3NOYW1lJztcbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnLi4vc3R5bGVzJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBCb3ggPSBjcmVhdGVCb3goe1xuICBkZWZhdWx0VGhlbWUsXG4gIGRlZmF1bHRDbGFzc05hbWU6ICdNdWlCb3gtcm9vdCcsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBDbGFzc05hbWVHZW5lcmF0b3IuZ2VuZXJhdGVcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQm94LnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQm94OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IEdsb2JhbFN0eWxlcyBhcyBTeXN0ZW1HbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N5c3RlbSc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4uL3N0eWxlcy9kZWZhdWx0VGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3lzdGVtR2xvYmFsU3R5bGVzLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICBkZWZhdWx0VGhlbWU6IGRlZmF1bHRUaGVtZVxuICB9KSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHbG9iYWxTdHlsZXMucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIHN0eWxlcyB5b3Ugd2FudCB0byBhcHBseSBnbG9iYWxseS5cbiAgICovXG4gIHN0eWxlczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgX19lbW90aW9uX3N0eWxlczogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkXG4gIH0pLCBQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYm9vbF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgR2xvYmFsU3R5bGVzOyIsImNvbnN0IGdyZXkgPSB7XG4gIDUwOiAnI2ZhZmFmYScsXG4gIDEwMDogJyNmNWY1ZjUnLFxuICAyMDA6ICcjZWVlZWVlJyxcbiAgMzAwOiAnI2UwZTBlMCcsXG4gIDQwMDogJyNiZGJkYmQnLFxuICA1MDA6ICcjOWU5ZTllJyxcbiAgNjAwOiAnIzc1NzU3NScsXG4gIDcwMDogJyM2MTYxNjEnLFxuICA4MDA6ICcjNDI0MjQyJyxcbiAgOTAwOiAnIzIxMjEyMScsXG4gIEExMDA6ICcjZjVmNWY1JyxcbiAgQTIwMDogJyNlZWVlZWUnLFxuICBBNDAwOiAnI2JkYmRiZCcsXG4gIEE3MDA6ICcjNjE2MTYxJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZXk7IiwiY29uc3QgY29tbW9uID0ge1xuICBibGFjazogJyMwMDAnLFxuICB3aGl0ZTogJyNmZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgY29tbW9uOyIsImNvbnN0IHB1cnBsZSA9IHtcbiAgNTA6ICcjZjNlNWY1JyxcbiAgMTAwOiAnI2UxYmVlNycsXG4gIDIwMDogJyNjZTkzZDgnLFxuICAzMDA6ICcjYmE2OGM4JyxcbiAgNDAwOiAnI2FiNDdiYycsXG4gIDUwMDogJyM5YzI3YjAnLFxuICA2MDA6ICcjOGUyNGFhJyxcbiAgNzAwOiAnIzdiMWZhMicsXG4gIDgwMDogJyM2YTFiOWEnLFxuICA5MDA6ICcjNGExNDhjJyxcbiAgQTEwMDogJyNlYTgwZmMnLFxuICBBMjAwOiAnI2UwNDBmYicsXG4gIEE0MDA6ICcjZDUwMGY5JyxcbiAgQTcwMDogJyNhYTAwZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgcHVycGxlOyIsImNvbnN0IHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsImNvbnN0IG9yYW5nZSA9IHtcbiAgNTA6ICcjZmZmM2UwJyxcbiAgMTAwOiAnI2ZmZTBiMicsXG4gIDIwMDogJyNmZmNjODAnLFxuICAzMDA6ICcjZmZiNzRkJyxcbiAgNDAwOiAnI2ZmYTcyNicsXG4gIDUwMDogJyNmZjk4MDAnLFxuICA2MDA6ICcjZmI4YzAwJyxcbiAgNzAwOiAnI2Y1N2MwMCcsXG4gIDgwMDogJyNlZjZjMDAnLFxuICA5MDA6ICcjZTY1MTAwJyxcbiAgQTEwMDogJyNmZmQxODAnLFxuICBBMjAwOiAnI2ZmYWI0MCcsXG4gIEE0MDA6ICcjZmY5MTAwJyxcbiAgQTcwMDogJyNmZjZkMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgb3JhbmdlOyIsImNvbnN0IGJsdWUgPSB7XG4gIDUwOiAnI2UzZjJmZCcsXG4gIDEwMDogJyNiYmRlZmInLFxuICAyMDA6ICcjOTBjYWY5JyxcbiAgMzAwOiAnIzY0YjVmNicsXG4gIDQwMDogJyM0MmE1ZjUnLFxuICA1MDA6ICcjMjE5NmYzJyxcbiAgNjAwOiAnIzFlODhlNScsXG4gIDcwMDogJyMxOTc2ZDInLFxuICA4MDA6ICcjMTU2NWMwJyxcbiAgOTAwOiAnIzBkNDdhMScsXG4gIEExMDA6ICcjODJiMWZmJyxcbiAgQTIwMDogJyM0NDhhZmYnLFxuICBBNDAwOiAnIzI5NzlmZicsXG4gIEE3MDA6ICcjMjk2MmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGJsdWU7IiwiY29uc3QgbGlnaHRCbHVlID0ge1xuICA1MDogJyNlMWY1ZmUnLFxuICAxMDA6ICcjYjNlNWZjJyxcbiAgMjAwOiAnIzgxZDRmYScsXG4gIDMwMDogJyM0ZmMzZjcnLFxuICA0MDA6ICcjMjliNmY2JyxcbiAgNTAwOiAnIzAzYTlmNCcsXG4gIDYwMDogJyMwMzliZTUnLFxuICA3MDA6ICcjMDI4OGQxJyxcbiAgODAwOiAnIzAyNzdiZCcsXG4gIDkwMDogJyMwMTU3OWInLFxuICBBMTAwOiAnIzgwZDhmZicsXG4gIEEyMDA6ICcjNDBjNGZmJyxcbiAgQTQwMDogJyMwMGIwZmYnLFxuICBBNzAwOiAnIzAwOTFlYSdcbn07XG5leHBvcnQgZGVmYXVsdCBsaWdodEJsdWU7IiwiY29uc3QgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbXVpL3V0aWxzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJtb2RlXCIsIFwiY29udHJhc3RUaHJlc2hvbGRcIiwgXCJ0b25hbE9mZnNldFwiXTtcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHsgZGFya2VuLCBnZXRDb250cmFzdFJhdGlvLCBsaWdodGVuIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGNvbW1vbiBmcm9tICcuLi9jb2xvcnMvY29tbW9uJztcbmltcG9ydCBncmV5IGZyb20gJy4uL2NvbG9ycy9ncmV5JztcbmltcG9ydCBwdXJwbGUgZnJvbSAnLi4vY29sb3JzL3B1cnBsZSc7XG5pbXBvcnQgcmVkIGZyb20gJy4uL2NvbG9ycy9yZWQnO1xuaW1wb3J0IG9yYW5nZSBmcm9tICcuLi9jb2xvcnMvb3JhbmdlJztcbmltcG9ydCBibHVlIGZyb20gJy4uL2NvbG9ycy9ibHVlJztcbmltcG9ydCBsaWdodEJsdWUgZnJvbSAnLi4vY29sb3JzL2xpZ2h0Qmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmV4cG9ydCBjb25zdCBsaWdodCA9IHtcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSB0ZXh0LlxuICB0ZXh0OiB7XG4gICAgLy8gVGhlIG1vc3QgaW1wb3J0YW50IHRleHQuXG4gICAgcHJpbWFyeTogJ3JnYmEoMCwgMCwgMCwgMC44NyknLFxuICAgIC8vIFNlY29uZGFyeSB0ZXh0LlxuICAgIHNlY29uZGFyeTogJ3JnYmEoMCwgMCwgMCwgMC42KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBjb21tb24ud2hpdGVcbiAgfSxcbiAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBhY3Rpb24gZWxlbWVudHMuXG4gIGFjdGlvbjoge1xuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBhY3RpdmUgYWN0aW9uIGxpa2UgYW4gaWNvbiBidXR0b24uXG4gICAgYWN0aXZlOiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGhvdmVyZWQgYWN0aW9uLlxuICAgIGhvdmVyOiAncmdiYSgwLCAwLCAwLCAwLjA0KScsXG4gICAgaG92ZXJPcGFjaXR5OiAwLjA0LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIHNlbGVjdGVkIGFjdGlvbi5cbiAgICBzZWxlY3RlZDogJ3JnYmEoMCwgMCwgMCwgMC4wOCknLFxuICAgIHNlbGVjdGVkT3BhY2l0eTogMC4wOCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMjYpJyxcbiAgICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZEJhY2tncm91bmQ6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBkaXNhYmxlZE9wYWNpdHk6IDAuMzgsXG4gICAgZm9jdXM6ICdyZ2JhKDAsIDAsIDAsIDAuMTIpJyxcbiAgICBmb2N1c09wYWNpdHk6IDAuMTIsXG4gICAgYWN0aXZhdGVkT3BhY2l0eTogMC4xMlxuICB9XG59O1xuZXhwb3J0IGNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5mdW5jdGlvbiBhZGRMaWdodE9yRGFyayhpbnRlbnQsIGRpcmVjdGlvbiwgc2hhZGUsIHRvbmFsT2Zmc2V0KSB7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgY29uc3QgdG9uYWxPZmZzZXREYXJrID0gdG9uYWxPZmZzZXQuZGFyayB8fCB0b25hbE9mZnNldCAqIDEuNTtcbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBibHVlWzIwMF0sXG4gICAgICBsaWdodDogYmx1ZVs1MF0sXG4gICAgICBkYXJrOiBibHVlWzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogYmx1ZVs3MDBdLFxuICAgIGxpZ2h0OiBibHVlWzQwMF0sXG4gICAgZGFyazogYmx1ZVs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcHVycGxlWzIwMF0sXG4gICAgICBsaWdodDogcHVycGxlWzUwXSxcbiAgICAgIGRhcms6IHB1cnBsZVs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IHB1cnBsZVs1MDBdLFxuICAgIGxpZ2h0OiBwdXJwbGVbMzAwXSxcbiAgICBkYXJrOiBwdXJwbGVbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogcmVkWzUwMF0sXG4gICAgICBsaWdodDogcmVkWzMwMF0sXG4gICAgICBkYXJrOiByZWRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiByZWRbNzAwXSxcbiAgICBsaWdodDogcmVkWzQwMF0sXG4gICAgZGFyazogcmVkWzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogbGlnaHRCbHVlWzQwMF0sXG4gICAgICBsaWdodDogbGlnaHRCbHVlWzMwMF0sXG4gICAgICBkYXJrOiBsaWdodEJsdWVbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBsaWdodEJsdWVbNzAwXSxcbiAgICBsaWdodDogbGlnaHRCbHVlWzUwMF0sXG4gICAgZGFyazogbGlnaHRCbHVlWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogZ3JlZW5bNDAwXSxcbiAgICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgICAgZGFyazogZ3JlZW5bNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBncmVlbls4MDBdLFxuICAgIGxpZ2h0OiBncmVlbls1MDBdLFxuICAgIGRhcms6IGdyZWVuWzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogb3JhbmdlWzQwMF0sXG4gICAgICBsaWdodDogb3JhbmdlWzMwMF0sXG4gICAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbOTAwXVxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHBhbGV0dGUsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnkgfHwgZ2V0RGVmYXVsdFByaW1hcnkobW9kZSk7XG4gIGNvbnN0IHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5IHx8IGdldERlZmF1bHRTZWNvbmRhcnkobW9kZSk7XG4gIGNvbnN0IGVycm9yID0gcGFsZXR0ZS5lcnJvciB8fCBnZXREZWZhdWx0RXJyb3IobW9kZSk7XG4gIGNvbnN0IGluZm8gPSBwYWxldHRlLmluZm8gfHwgZ2V0RGVmYXVsdEluZm8obW9kZSk7XG4gIGNvbnN0IHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MgfHwgZ2V0RGVmYXVsdFN1Y2Nlc3MobW9kZSk7XG4gIGNvbnN0IHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcgfHwgZ2V0RGVmYXVsdFdhcm5pbmcobW9kZSk7XG5cbiAgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuICBmdW5jdGlvbiBnZXRDb250cmFzdFRleHQoYmFja2dyb3VuZCkge1xuICAgIGNvbnN0IGNvbnRyYXN0VGV4dCA9IGdldENvbnRyYXN0UmF0aW8oYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBjb250cmFzdFRleHQpO1xuICAgICAgaWYgKGNvbnRyYXN0IDwgMykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgY29udHJhc3QgcmF0aW8gb2YgJHtjb250cmFzdH06MSBmb3IgJHtjb250cmFzdFRleHR9IG9uICR7YmFja2dyb3VuZH1gLCAnZmFsbHMgYmVsb3cgdGhlIFdDQUcgcmVjb21tZW5kZWQgYWJzb2x1dGUgbWluaW11bSBjb250cmFzdCByYXRpbyBvZiAzOjEuJywgJ2h0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDA4L1JFQy1XQ0FHMjAtMjAwODEyMTEvI3Zpc3VhbC1hdWRpby1jb250cmFzdC1jb250cmFzdCddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyYXN0VGV4dDtcbiAgfVxuICBjb25zdCBhdWdtZW50Q29sb3IgPSAoe1xuICAgIGNvbG9yLFxuICAgIG5hbWUsXG4gICAgbWFpblNoYWRlID0gNTAwLFxuICAgIGxpZ2h0U2hhZGUgPSAzMDAsXG4gICAgZGFya1NoYWRlID0gNzAwXG4gIH0pID0+IHtcbiAgICBjb2xvciA9IF9leHRlbmRzKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMSwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBtYWluU2hhZGUpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xvci5tYWluICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFRoZSBjb2xvciR7bmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnfSBwcm92aWRlZCB0byBhdWdtZW50Q29sb3IoY29sb3IpIGlzIGludmFsaWQuXG5cXGBjb2xvci5tYWluXFxgIHNob3VsZCBiZSBhIHN0cmluZywgYnV0IFxcYCR7SlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbil9XFxgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxuXG5EaWQgeW91IGludGVuZCB0byB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgYXBwcm9hY2hlcz9cblxuaW1wb3J0IHsgZ3JlZW4gfSBmcm9tIFwiQG11aS9tYXRlcmlhbC9jb2xvcnNcIjtcblxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IGdyZWVuLFxufSB9KTtcblxuY29uc3QgdGhlbWUyID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XG4gIHByaW1hcnk6IHsgbWFpbjogZ3JlZW5bNTAwXSB9LFxufSB9KTtgIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSgxMiwgbmFtZSA/IGAgKCR7bmFtZX0pYCA6ICcnLCBKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSkpO1xuICAgIH1cbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2xpZ2h0JywgbGlnaHRTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGFkZExpZ2h0T3JEYXJrKGNvbG9yLCAnZGFyaycsIGRhcmtTaGFkZSwgdG9uYWxPZmZzZXQpO1xuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuICAgIHJldHVybiBjb2xvcjtcbiAgfTtcbiAgY29uc3QgbW9kZXMgPSB7XG4gICAgZGFyayxcbiAgICBsaWdodFxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghbW9kZXNbbW9kZV0pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHBhbGV0dGUgbW9kZSBcXGAke21vZGV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuYCk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhbGV0dGVPdXRwdXQgPSBkZWVwbWVyZ2UoX2V4dGVuZHMoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogX2V4dGVuZHMoe30sIGNvbW1vbiksXG4gICAgLy8gcHJldmVudCBtdXRhYmxlIG9iamVjdC5cbiAgICAvLyBUaGUgcGFsZXR0ZSBtb2RlLCBjYW4gYmUgbGlnaHQgb3IgZGFyay5cbiAgICBtb2RlLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcHJpbWFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBwcmltYXJ5OiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHByaW1hcnksXG4gICAgICBuYW1lOiAncHJpbWFyeSdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHNlY29uZGFyeSBpbnRlcmZhY2UgZWxlbWVudHMgZm9yIGEgdXNlci5cbiAgICBzZWNvbmRhcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogc2Vjb25kYXJ5LFxuICAgICAgbmFtZTogJ3NlY29uZGFyeScsXG4gICAgICBtYWluU2hhZGU6ICdBNDAwJyxcbiAgICAgIGxpZ2h0U2hhZGU6ICdBMjAwJyxcbiAgICAgIGRhcmtTaGFkZTogJ0E3MDAnXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBlcnJvcixcbiAgICAgIG5hbWU6ICdlcnJvcidcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHdhcm5pbmcsXG4gICAgICBuYW1lOiAnd2FybmluZydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcHJlc2VudCBpbmZvcm1hdGlvbiB0byB0aGUgdXNlciB0aGF0IGlzIG5ldXRyYWwgYW5kIG5vdCBuZWNlc3NhcmlseSBpbXBvcnRhbnQuXG4gICAgaW5mbzogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBpbmZvLFxuICAgICAgbmFtZTogJ2luZm8nXG4gICAgfSksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIGluZGljYXRlIHRoZSBzdWNjZXNzZnVsIGNvbXBsZXRpb24gb2YgYW4gYWN0aW9uIHRoYXQgdXNlciB0cmlnZ2VyZWQuXG4gICAgc3VjY2VzczogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzdWNjZXNzLFxuICAgICAgbmFtZTogJ3N1Y2Nlc3MnXG4gICAgfSksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkLFxuICAgIC8vIFRha2VzIGEgYmFja2dyb3VuZCBjb2xvciBhbmQgcmV0dXJucyB0aGUgdGV4dCBjb2xvciB0aGF0IG1heGltaXplcyB0aGUgY29udHJhc3QuXG4gICAgZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yLFxuICAgIC8vIFVzZWQgYnkgdGhlIGZ1bmN0aW9ucyBiZWxvdyB0byBzaGlmdCBhIGNvbG9yJ3MgbHVtaW5hbmNlIGJ5IGFwcHJveGltYXRlbHlcbiAgICAvLyB0d28gaW5kZXhlcyB3aXRoaW4gaXRzIHRvbmFsIHBhbGV0dGUuXG4gICAgLy8gRS5nLiwgc2hpZnQgZnJvbSBSZWQgNTAwIHRvIFJlZCAzMDAgb3IgUmVkIDcwMC5cbiAgICB0b25hbE9mZnNldFxuICB9LCBtb2Rlc1ttb2RlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIDFlNSkgLyAxZTU7XG59XG5jb25zdCBjYXNlQWxsQ2FwcyA9IHtcbiAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn07XG5jb25zdCBkZWZhdWx0Rm9udEZhbWlseSA9ICdcIlJvYm90b1wiLCBcIkhlbHZldGljYVwiLCBcIkFyaWFsXCIsIHNhbnMtc2VyaWYnO1xuXG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5KSB7XG4gIGNvbnN0IF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgIHtcbiAgICAgIGZvbnRGYW1pbHkgPSBkZWZhdWx0Rm9udEZhbWlseSxcbiAgICAgIC8vIFRoZSBkZWZhdWx0IGZvbnQgc2l6ZSBvZiB0aGUgTWF0ZXJpYWwgU3BlY2lmaWNhdGlvbi5cbiAgICAgIGZvbnRTaXplID0gMTQsXG4gICAgICAvLyBweFxuICAgICAgZm9udFdlaWdodExpZ2h0ID0gMzAwLFxuICAgICAgZm9udFdlaWdodFJlZ3VsYXIgPSA0MDAsXG4gICAgICBmb250V2VpZ2h0TWVkaXVtID0gNTAwLFxuICAgICAgZm9udFdlaWdodEJvbGQgPSA3MDAsXG4gICAgICAvLyBUZWxsIE1VSSB3aGF0J3MgdGhlIGZvbnQtc2l6ZSBvbiB0aGUgaHRtbCBlbGVtZW50LlxuICAgICAgLy8gMTZweCBpcyB0aGUgZGVmYXVsdCBmb250LXNpemUgdXNlZCBieSBicm93c2Vycy5cbiAgICAgIGh0bWxGb250U2l6ZSA9IDE2LFxuICAgICAgLy8gQXBwbHkgdGhlIENTUyBwcm9wZXJ0aWVzIHRvIGFsbCB0aGUgdmFyaWFudHMuXG4gICAgICBhbGxWYXJpYW50cyxcbiAgICAgIHB4VG9SZW06IHB4VG9SZW0yXG4gICAgfSA9IF9yZWYsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gX2V4dGVuZHMoe1xuICAgIGZvbnRGYW1pbHksXG4gICAgZm9udFdlaWdodCxcbiAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAvLyBVbml0bGVzcyBmb2xsb3dpbmcgaHR0cHM6Ly9tZXllcndlYi5jb20vZXJpYy90aG91Z2h0cy8yMDA2LzAyLzA4L3VuaXRsZXNzLWxpbmUtaGVpZ2h0cy9cbiAgICBsaW5lSGVpZ2h0XG4gIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgIGxldHRlclNwYWNpbmc6IGAke3JvdW5kKGxldHRlclNwYWNpbmcgLyBzaXplKX1lbWBcbiAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgY29uc3QgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemUsXG4gICAgcHhUb1JlbSxcbiAgICBmb250RmFtaWx5LFxuICAgIGZvbnRTaXplLFxuICAgIGZvbnRXZWlnaHRMaWdodCxcbiAgICBmb250V2VpZ2h0UmVndWxhcixcbiAgICBmb250V2VpZ2h0TWVkaXVtLFxuICAgIGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG4gIH0pO1xufSIsImNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImR1cmF0aW9uXCIsIFwiZWFzaW5nXCIsIFwiZGVsYXlcIl07XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCBjb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydCBjb25zdCBkdXJhdGlvbiA9IHtcbiAgc2hvcnRlc3Q6IDE1MCxcbiAgc2hvcnRlcjogMjAwLFxuICBzaG9ydDogMjUwLFxuICAvLyBtb3N0IGJhc2ljIHJlY29tbWVuZGVkIHRpbWluZ1xuICBzdGFuZGFyZDogMzAwLFxuICAvLyB0aGlzIGlzIHRvIGJlIHVzZWQgaW4gY29tcGxleCBhbmltYXRpb25zXG4gIGNvbXBsZXg6IDM3NSxcbiAgLy8gcmVjb21tZW5kZWQgd2hlbiBzb21ldGhpbmcgaXMgZW50ZXJpbmcgc2NyZWVuXG4gIGVudGVyaW5nU2NyZWVuOiAyMjUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGxlYXZpbmcgc2NyZWVuXG4gIGxlYXZpbmdTY3JlZW46IDE5NVxufTtcbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gYCR7TWF0aC5yb3VuZChtaWxsaXNlY29uZHMpfW1zYDtcbn1cbmZ1bmN0aW9uIGdldEF1dG9IZWlnaHREdXJhdGlvbihoZWlnaHQpIHtcbiAgaWYgKCFoZWlnaHQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBjb25zdGFudCA9IGhlaWdodCAvIDM2O1xuXG4gIC8vIGh0dHBzOi8vd3d3LndvbGZyYW1hbHBoYS5jb20vaW5wdXQvP2k9KDQrJTJCKzE1KyorKHgrJTJGKzM2KykrKiorMC4yNSslMkIrKHgrJTJGKzM2KSslMkYrNSkrKisxMFxuICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogY29uc3RhbnQgKiogMC4yNSArIGNvbnN0YW50IC8gNSkgKiAxMCk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9ucyhpbnB1dFRyYW5zaXRpb25zKSB7XG4gIGNvbnN0IG1lcmdlZEVhc2luZyA9IF9leHRlbmRzKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSBfZXh0ZW5kcyh7fSwgZHVyYXRpb24sIGlucHV0VHJhbnNpdGlvbnMuZHVyYXRpb24pO1xuICBjb25zdCBjcmVhdGUgPSAocHJvcHMgPSBbJ2FsbCddLCBvcHRpb25zID0ge30pID0+IHtcbiAgICBjb25zdCB7XG4gICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbk9wdGlvbiA9IG1lcmdlZER1cmF0aW9uLnN0YW5kYXJkLFxuICAgICAgICBlYXNpbmc6IGVhc2luZ09wdGlvbiA9IG1lcmdlZEVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGRlbGF5ID0gMFxuICAgICAgfSA9IG9wdGlvbnMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGlzU3RyaW5nID0gdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbiAgICAgIC8vIElFMTEgc3VwcG9ydCwgcmVwbGFjZSB3aXRoIE51bWJlci5pc05hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgICAgY29uc3QgaXNOdW1iZXIgPSB2YWx1ZSA9PiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpO1xuICAgICAgaWYgKCFpc1N0cmluZyhwcm9wcykgJiYgIUFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVtYmVyKGR1cmF0aW9uT3B0aW9uKSAmJiAhaXNTdHJpbmcoZHVyYXRpb25PcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogQXJndW1lbnQgXCJkdXJhdGlvblwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kICR7ZHVyYXRpb25PcHRpb259LmApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01VSTogQXJndW1lbnQgXCJlYXNpbmdcIiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkZWxheSkgJiYgIWlzU3RyaW5nKGRlbGF5KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5rZXlzKG90aGVyKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiBVbnJlY29nbml6ZWQgYXJndW1lbnQocykgWyR7T2JqZWN0LmtleXMob3RoZXIpLmpvaW4oJywnKX1dLmApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdKS5tYXAoYW5pbWF0ZWRQcm9wID0+IGAke2FuaW1hdGVkUHJvcH0gJHt0eXBlb2YgZHVyYXRpb25PcHRpb24gPT09ICdzdHJpbmcnID8gZHVyYXRpb25PcHRpb24gOiBmb3JtYXRNcyhkdXJhdGlvbk9wdGlvbil9ICR7ZWFzaW5nT3B0aW9ufSAke3R5cGVvZiBkZWxheSA9PT0gJ3N0cmluZycgPyBkZWxheSA6IGZvcm1hdE1zKGRlbGF5KX1gKS5qb2luKCcsJyk7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBmYWI6IDEwNTAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbmV4cG9ydCBkZWZhdWx0IHpJbmRleDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgZm9ybWF0TXVpRXJyb3JNZXNzYWdlIGFzIF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UgfSBmcm9tIFwiQG11aS91dGlsc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJzcGFjaW5nXCIsIFwicGFsZXR0ZVwiLCBcInRyYW5zaXRpb25zXCIsIFwidHlwb2dyYXBoeVwiLCBcInNoYXBlXCJdO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBjcmVhdGVUaGVtZSBhcyBzeXN0ZW1DcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvc3lzdGVtJztcbmltcG9ydCBnZW5lcmF0ZVV0aWxpdHlDbGFzcyBmcm9tICcuLi9nZW5lcmF0ZVV0aWxpdHlDbGFzcyc7XG5pbXBvcnQgY3JlYXRlTWl4aW5zIGZyb20gJy4vY3JlYXRlTWl4aW5zJztcbmltcG9ydCBjcmVhdGVQYWxldHRlIGZyb20gJy4vY3JlYXRlUGFsZXR0ZSc7XG5pbXBvcnQgY3JlYXRlVHlwb2dyYXBoeSBmcm9tICcuL2NyZWF0ZVR5cG9ncmFwaHknO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9ucyBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuZnVuY3Rpb24gY3JlYXRlVGhlbWUob3B0aW9ucyA9IHt9LCAuLi5hcmdzKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1peGluczogbWl4aW5zSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zSW5wdXQgPSB7fSxcbiAgICAgIHR5cG9ncmFwaHk6IHR5cG9ncmFwaHlJbnB1dCA9IHt9XG4gICAgfSA9IG9wdGlvbnMsXG4gICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICBpZiAob3B0aW9ucy52YXJzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IFxcYHZhcnNcXGAgaXMgYSBwcml2YXRlIGZpZWxkIHVzZWQgZm9yIENTUyB2YXJpYWJsZXMgc3VwcG9ydC5cblBsZWFzZSB1c2UgYW5vdGhlciBuYW1lLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDE4KSk7XG4gIH1cbiAgY29uc3QgcGFsZXR0ZSA9IGNyZWF0ZVBhbGV0dGUocGFsZXR0ZUlucHV0KTtcbiAgY29uc3Qgc3lzdGVtVGhlbWUgPSBzeXN0ZW1DcmVhdGVUaGVtZShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoc3lzdGVtVGhlbWUuYnJlYWtwb2ludHMsIG1peGluc0lucHV0KSxcbiAgICBwYWxldHRlLFxuICAgIC8vIERvbid0IHVzZSBbLi4uc2hhZG93c10gdW50aWwgeW91J3ZlIHZlcmlmaWVkIGl0cyB0cmFuc3BpbGVkIGNvZGUgaXMgbm90IGludm9raW5nIHRoZSBpdGVyYXRvciBwcm90b2NvbC5cbiAgICBzaGFkb3dzOiBzaGFkb3dzLnNsaWNlKCksXG4gICAgdHlwb2dyYXBoeTogY3JlYXRlVHlwb2dyYXBoeShwYWxldHRlLCB0eXBvZ3JhcGh5SW5wdXQpLFxuICAgIHRyYW5zaXRpb25zOiBjcmVhdGVUcmFuc2l0aW9ucyh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6IF9leHRlbmRzKHt9LCB6SW5kZXgpXG4gIH0pO1xuICBtdWlUaGVtZSA9IGRlZXBtZXJnZShtdWlUaGVtZSwgb3RoZXIpO1xuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKChhY2MsIGFyZ3VtZW50KSA9PiBkZWVwbWVyZ2UoYWNjLCBhcmd1bWVudCksIG11aVRoZW1lKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25zdCBzdGF0ZUNsYXNzZXMgPSBbJ2FjdGl2ZScsICdjaGVja2VkJywgJ2NvbXBsZXRlZCcsICdkaXNhYmxlZCcsICdlcnJvcicsICdleHBhbmRlZCcsICdmb2N1c2VkJywgJ2ZvY3VzVmlzaWJsZScsICdyZXF1aXJlZCcsICdzZWxlY3RlZCddO1xuICAgIGNvbnN0IHRyYXZlcnNlID0gKG5vZGUsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgbGV0IGtleTtcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgIGZvciAoa2V5IGluIG5vZGUpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2tleV07XG4gICAgICAgIGlmIChzdGF0ZUNsYXNzZXMuaW5kZXhPZihrZXkpICE9PSAtMSAmJiBPYmplY3Qua2V5cyhjaGlsZCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zdCBzdGF0ZUNsYXNzID0gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJycsIGtleSk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBUaGUgXFxgJHtjb21wb25lbnR9XFxgIGNvbXBvbmVudCBpbmNyZWFzZXMgYCArIGB0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBcXGAke2tleX1cXGAgaW50ZXJuYWwgc3RhdGUuYCwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCBgSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAnJi4ke3N0YXRlQ2xhc3N9JyBzeW50YXg6YCwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICByb290OiB7XG4gICAgICAgICAgICAgICAgW2AmLiR7c3RhdGVDbGFzc31gXTogY2hpbGRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tdWkuY29tL3Ivc3RhdGUtY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBzdHlsZSB0byBwcmV2ZW50IGdsb2JhbCBjb25mbGljdHMuXG4gICAgICAgICAgbm9kZVtrZXldID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5rZXlzKG11aVRoZW1lLmNvbXBvbmVudHMpLmZvckVhY2goY29tcG9uZW50ID0+IHtcbiAgICAgIGNvbnN0IHN0eWxlT3ZlcnJpZGVzID0gbXVpVGhlbWUuY29tcG9uZW50c1tjb21wb25lbnRdLnN0eWxlT3ZlcnJpZGVzO1xuICAgICAgaWYgKHN0eWxlT3ZlcnJpZGVzICYmIGNvbXBvbmVudC5pbmRleE9mKCdNdWknKSA9PT0gMCkge1xuICAgICAgICB0cmF2ZXJzZShzdHlsZU92ZXJyaWRlcywgY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbXVpVGhlbWU7XG59XG5sZXQgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlVGhlbWUoLi4uYXJncyk7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgdG9vbGJhcjoge1xuICAgICAgbWluSGVpZ2h0OiA1NixcbiAgICAgIFticmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgICAgJ0BtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSknOiB7XG4gICAgICAgICAgbWluSGVpZ2h0OiA0OFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgICBtaW5IZWlnaHQ6IDY0XG4gICAgICB9XG4gICAgfVxuICB9LCBtaXhpbnMpO1xufSIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0VGhlbWU7IiwiaW1wb3J0IHsgdXNlVGhlbWVQcm9wcyBhcyBzeXN0ZW1Vc2VUaGVtZVByb3BzIH0gZnJvbSAnQG11aS9zeXN0ZW0nO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZVByb3BzKHtcbiAgcHJvcHMsXG4gIG5hbWVcbn0pIHtcbiAgcmV0dXJuIHN5c3RlbVVzZVRoZW1lUHJvcHMoe1xuICAgIHByb3BzLFxuICAgIG5hbWUsXG4gICAgZGVmYXVsdFRoZW1lXG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNaXhpbnM7XG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcbmZ1bmN0aW9uIGNyZWF0ZU1peGlucyhicmVha3BvaW50cywgbWl4aW5zKSB7XG4gIHJldHVybiAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHtcbiAgICB0b29sYmFyOiB7XG4gICAgICBtaW5IZWlnaHQ6IDU2LFxuICAgICAgW2JyZWFrcG9pbnRzLnVwKCd4cycpXToge1xuICAgICAgICAnQG1lZGlhIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSc6IHtcbiAgICAgICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XG4gICAgICAgIG1pbkhlaWdodDogNjRcbiAgICAgIH1cbiAgICB9XG4gIH0sIG1peGlucyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGFyayA9IHZvaWQgMDtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVBhbGV0dGU7XG5leHBvcnRzLmxpZ2h0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbnZhciBfc3lzdGVtID0gcmVxdWlyZShcIkBtdWkvc3lzdGVtXCIpO1xudmFyIF9jb21tb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvY29tbW9uXCIpKTtcbnZhciBfZ3JleSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9ncmV5XCIpKTtcbnZhciBfcHVycGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL3B1cnBsZVwiKSk7XG52YXIgX3JlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9yZWRcIikpO1xudmFyIF9vcmFuZ2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9jb2xvcnMvb3JhbmdlXCIpKTtcbnZhciBfYmx1ZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2NvbG9ycy9ibHVlXCIpKTtcbnZhciBfbGlnaHRCbHVlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2xpZ2h0Qmx1ZVwiKSk7XG52YXIgX2dyZWVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vY29sb3JzL2dyZWVuXCIpKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcIm1vZGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdO1xuY29uc3QgbGlnaHQgPSB7XG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgdGV4dC5cbiAgdGV4dDoge1xuICAgIC8vIFRoZSBtb3N0IGltcG9ydGFudCB0ZXh0LlxuICAgIHByaW1hcnk6ICdyZ2JhKDAsIDAsIDAsIDAuODcpJyxcbiAgICAvLyBTZWNvbmRhcnkgdGV4dC5cbiAgICBzZWNvbmRhcnk6ICdyZ2JhKDAsIDAsIDAsIDAuNiknLFxuICAgIC8vIERpc2FibGVkIHRleHQgaGF2ZSBldmVuIGxvd2VyIHZpc3VhbCBwcm9taW5lbmNlLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjM4KSdcbiAgfSxcbiAgLy8gVGhlIGNvbG9yIHVzZWQgdG8gZGl2aWRlIGRpZmZlcmVudCBlbGVtZW50cy5cbiAgZGl2aWRlcjogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAvLyBUaGUgYmFja2dyb3VuZCBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgc3VyZmFjZXMuXG4gIC8vIENvbnNpc3RlbmN5IGJldHdlZW4gdGhlc2UgdmFsdWVzIGlzIGltcG9ydGFudC5cbiAgYmFja2dyb3VuZDoge1xuICAgIHBhcGVyOiBfY29tbW9uLmRlZmF1bHQud2hpdGUsXG4gICAgZGVmYXVsdDogX2NvbW1vbi5kZWZhdWx0LndoaXRlXG4gIH0sXG4gIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBzdHlsZSB0aGUgYWN0aW9uIGVsZW1lbnRzLlxuICBhY3Rpb246IHtcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gYWN0aXZlIGFjdGlvbiBsaWtlIGFuIGljb24gYnV0dG9uLlxuICAgIGFjdGl2ZTogJ3JnYmEoMCwgMCwgMCwgMC41NCknLFxuICAgIC8vIFRoZSBjb2xvciBvZiBhbiBob3ZlcmVkIGFjdGlvbi5cbiAgICBob3ZlcjogJ3JnYmEoMCwgMCwgMCwgMC4wNCknLFxuICAgIGhvdmVyT3BhY2l0eTogMC4wNCxcbiAgICAvLyBUaGUgY29sb3Igb2YgYSBzZWxlY3RlZCBhY3Rpb24uXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMDgpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMDgsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkOiAncmdiYSgwLCAwLCAwLCAwLjI2KScsXG4gICAgLy8gVGhlIGJhY2tncm91bmQgY29sb3Igb2YgYSBkaXNhYmxlZCBhY3Rpb24uXG4gICAgZGlzYWJsZWRCYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZGlzYWJsZWRPcGFjaXR5OiAwLjM4LFxuICAgIGZvY3VzOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gICAgZm9jdXNPcGFjaXR5OiAwLjEyLFxuICAgIGFjdGl2YXRlZE9wYWNpdHk6IDAuMTJcbiAgfVxufTtcbmV4cG9ydHMubGlnaHQgPSBsaWdodDtcbmNvbnN0IGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBfY29tbW9uLmRlZmF1bHQud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6ICcjMTIxMjEyJyxcbiAgICBkZWZhdWx0OiAnIzEyMTIxMidcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBfY29tbW9uLmRlZmF1bHQud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5leHBvcnRzLmRhcmsgPSBkYXJrO1xuZnVuY3Rpb24gYWRkTGlnaHRPckRhcmsoaW50ZW50LCBkaXJlY3Rpb24sIHNoYWRlLCB0b25hbE9mZnNldCkge1xuICBjb25zdCB0b25hbE9mZnNldExpZ2h0ID0gdG9uYWxPZmZzZXQubGlnaHQgfHwgdG9uYWxPZmZzZXQ7XG4gIGNvbnN0IHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG4gIGlmICghaW50ZW50W2RpcmVjdGlvbl0pIHtcbiAgICBpZiAoaW50ZW50Lmhhc093blByb3BlcnR5KHNoYWRlKSkge1xuICAgICAgaW50ZW50W2RpcmVjdGlvbl0gPSBpbnRlbnRbc2hhZGVdO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnbGlnaHQnKSB7XG4gICAgICBpbnRlbnQubGlnaHQgPSAoMCwgX3N5c3RlbS5saWdodGVuKShpbnRlbnQubWFpbiwgdG9uYWxPZmZzZXRMaWdodCk7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdkYXJrJykge1xuICAgICAgaW50ZW50LmRhcmsgPSAoMCwgX3N5c3RlbS5kYXJrZW4pKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFByaW1hcnkobW9kZSA9ICdsaWdodCcpIHtcbiAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgIHJldHVybiB7XG4gICAgICBtYWluOiBfYmx1ZS5kZWZhdWx0WzIwMF0sXG4gICAgICBsaWdodDogX2JsdWUuZGVmYXVsdFs1MF0sXG4gICAgICBkYXJrOiBfYmx1ZS5kZWZhdWx0WzQwMF1cbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbWFpbjogX2JsdWUuZGVmYXVsdFs3MDBdLFxuICAgIGxpZ2h0OiBfYmx1ZS5kZWZhdWx0WzQwMF0sXG4gICAgZGFyazogX2JsdWUuZGVmYXVsdFs4MDBdXG4gIH07XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2Vjb25kYXJ5KG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogX3B1cnBsZS5kZWZhdWx0WzIwMF0sXG4gICAgICBsaWdodDogX3B1cnBsZS5kZWZhdWx0WzUwXSxcbiAgICAgIGRhcms6IF9wdXJwbGUuZGVmYXVsdFs0MDBdXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG1haW46IF9wdXJwbGUuZGVmYXVsdFs1MDBdLFxuICAgIGxpZ2h0OiBfcHVycGxlLmRlZmF1bHRbMzAwXSxcbiAgICBkYXJrOiBfcHVycGxlLmRlZmF1bHRbNzAwXVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEVycm9yKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogX3JlZC5kZWZhdWx0WzUwMF0sXG4gICAgICBsaWdodDogX3JlZC5kZWZhdWx0WzMwMF0sXG4gICAgICBkYXJrOiBfcmVkLmRlZmF1bHRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBfcmVkLmRlZmF1bHRbNzAwXSxcbiAgICBsaWdodDogX3JlZC5kZWZhdWx0WzQwMF0sXG4gICAgZGFyazogX3JlZC5kZWZhdWx0WzgwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRJbmZvKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogX2xpZ2h0Qmx1ZS5kZWZhdWx0WzQwMF0sXG4gICAgICBsaWdodDogX2xpZ2h0Qmx1ZS5kZWZhdWx0WzMwMF0sXG4gICAgICBkYXJrOiBfbGlnaHRCbHVlLmRlZmF1bHRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBfbGlnaHRCbHVlLmRlZmF1bHRbNzAwXSxcbiAgICBsaWdodDogX2xpZ2h0Qmx1ZS5kZWZhdWx0WzUwMF0sXG4gICAgZGFyazogX2xpZ2h0Qmx1ZS5kZWZhdWx0WzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRTdWNjZXNzKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogX2dyZWVuLmRlZmF1bHRbNDAwXSxcbiAgICAgIGxpZ2h0OiBfZ3JlZW4uZGVmYXVsdFszMDBdLFxuICAgICAgZGFyazogX2dyZWVuLmRlZmF1bHRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiBfZ3JlZW4uZGVmYXVsdFs4MDBdLFxuICAgIGxpZ2h0OiBfZ3JlZW4uZGVmYXVsdFs1MDBdLFxuICAgIGRhcms6IF9ncmVlbi5kZWZhdWx0WzkwMF1cbiAgfTtcbn1cbmZ1bmN0aW9uIGdldERlZmF1bHRXYXJuaW5nKG1vZGUgPSAnbGlnaHQnKSB7XG4gIGlmIChtb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFpbjogX29yYW5nZS5kZWZhdWx0WzQwMF0sXG4gICAgICBsaWdodDogX29yYW5nZS5kZWZhdWx0WzMwMF0sXG4gICAgICBkYXJrOiBfb3JhbmdlLmRlZmF1bHRbNzAwXVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtYWluOiAnI2VkNmMwMicsXG4gICAgLy8gY2xvc2VzdCB0byBvcmFuZ2VbODAwXSB0aGF0IHBhc3MgMzoxLlxuICAgIGxpZ2h0OiBfb3JhbmdlLmRlZmF1bHRbNTAwXSxcbiAgICBkYXJrOiBfb3JhbmdlLmRlZmF1bHRbOTAwXVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGFsZXR0ZShwYWxldHRlKSB7XG4gIGNvbnN0IHtcbiAgICAgIG1vZGUgPSAnbGlnaHQnLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSAzLFxuICAgICAgdG9uYWxPZmZzZXQgPSAwLjJcbiAgICB9ID0gcGFsZXR0ZSxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkocGFsZXR0ZSwgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgcHJpbWFyeSA9IHBhbGV0dGUucHJpbWFyeSB8fCBnZXREZWZhdWx0UHJpbWFyeShtb2RlKTtcbiAgY29uc3Qgc2Vjb25kYXJ5ID0gcGFsZXR0ZS5zZWNvbmRhcnkgfHwgZ2V0RGVmYXVsdFNlY29uZGFyeShtb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBwYWxldHRlLmVycm9yIHx8IGdldERlZmF1bHRFcnJvcihtb2RlKTtcbiAgY29uc3QgaW5mbyA9IHBhbGV0dGUuaW5mbyB8fCBnZXREZWZhdWx0SW5mbyhtb2RlKTtcbiAgY29uc3Qgc3VjY2VzcyA9IHBhbGV0dGUuc3VjY2VzcyB8fCBnZXREZWZhdWx0U3VjY2Vzcyhtb2RlKTtcbiAgY29uc3Qgd2FybmluZyA9IHBhbGV0dGUud2FybmluZyB8fCBnZXREZWZhdWx0V2FybmluZyhtb2RlKTtcblxuICAvLyBVc2UgdGhlIHNhbWUgbG9naWMgYXNcbiAgLy8gQm9vdHN0cmFwOiBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi8xZDZlMzcxMGRkNDQ3ZGUxYTIwMGYyOWU4ZmE1MjFmOGEwOTA4ZjcwL3Njc3MvX2Z1bmN0aW9ucy5zY3NzI0w1OVxuICAvLyBhbmQgbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIgaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9hYzQ2Yjg4NjNjNGRhYjlmYzIyYzRjNjYyZGM2YmQxYjY1ZGQ2NTJmL3BhY2thZ2VzL21kYy10aGVtZS9fZnVuY3Rpb25zLnNjc3MjTDU0XG4gIGZ1bmN0aW9uIGdldENvbnRyYXN0VGV4dChiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgY29udHJhc3RUZXh0ID0gKDAsIF9zeXN0ZW0uZ2V0Q29udHJhc3RSYXRpbykoYmFja2dyb3VuZCwgZGFyay50ZXh0LnByaW1hcnkpID49IGNvbnRyYXN0VGhyZXNob2xkID8gZGFyay50ZXh0LnByaW1hcnkgOiBsaWdodC50ZXh0LnByaW1hcnk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnN0IGNvbnRyYXN0ID0gKDAsIF9zeXN0ZW0uZ2V0Q29udHJhc3RSYXRpbykoYmFja2dyb3VuZCwgY29udHJhc3RUZXh0KTtcbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mICR7Y29udHJhc3R9OjEgZm9yICR7Y29udHJhc3RUZXh0fSBvbiAke2JhY2tncm91bmR9YCwgJ2ZhbGxzIGJlbG93IHRoZSBXQ0FHIHJlY29tbWVuZGVkIGFic29sdXRlIG1pbmltdW0gY29udHJhc3QgcmF0aW8gb2YgMzoxLicsICdodHRwczovL3d3dy53My5vcmcvVFIvMjAwOC9SRUMtV0NBRzIwLTIwMDgxMjExLyN2aXN1YWwtYXVkaW8tY29udHJhc3QtY29udHJhc3QnXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cbiAgY29uc3QgYXVnbWVudENvbG9yID0gKHtcbiAgICBjb2xvcixcbiAgICBuYW1lLFxuICAgIG1haW5TaGFkZSA9IDUwMCxcbiAgICBsaWdodFNoYWRlID0gMzAwLFxuICAgIGRhcmtTaGFkZSA9IDcwMFxuICB9KSA9PiB7XG4gICAgY29sb3IgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBjb2xvcik7XG4gICAgaWYgKCFjb2xvci5tYWluICYmIGNvbG9yW21haW5TaGFkZV0pIHtcbiAgICAgIGNvbG9yLm1haW4gPSBjb2xvclttYWluU2hhZGVdO1xuICAgIH1cbiAgICBpZiAoIWNvbG9yLmhhc093blByb3BlcnR5KCdtYWluJykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBUaGUgY29sb3Ike25hbWUgPyBgICgke25hbWV9KWAgOiAnJ30gcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxuVGhlIGNvbG9yIG9iamVjdCBuZWVkcyB0byBoYXZlIGEgXFxgbWFpblxcYCBwcm9wZXJ0eSBvciBhIFxcYCR7bWFpblNoYWRlfVxcYCBwcm9wZXJ0eS5gIDogKDAsIF91dGlscy5mb3JtYXRNdWlFcnJvck1lc3NhZ2UpKDExLCBuYW1lID8gYCAoJHtuYW1lfSlgIDogJycsIG1haW5TaGFkZSkpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogVGhlIGNvbG9yJHtuYW1lID8gYCAoJHtuYW1lfSlgIDogJyd9IHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cblxcYGNvbG9yLm1haW5cXGAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgXFxgJHtKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKX1cXGAgd2FzIHByb3ZpZGVkIGluc3RlYWQuXG5cbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xuXG5pbXBvcnQgeyBncmVlbiB9IGZyb20gXCJAbXVpL21hdGVyaWFsL2NvbG9yc1wiO1xuXG5jb25zdCB0aGVtZTEgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogZ3JlZW4sXG59IH0pO1xuXG5jb25zdCB0aGVtZTIgPSBjcmVhdGVUaGVtZSh7IHBhbGV0dGU6IHtcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXG59IH0pO2AgOiAoMCwgX3V0aWxzLmZvcm1hdE11aUVycm9yTWVzc2FnZSkoMTIsIG5hbWUgPyBgICgke25hbWV9KWAgOiAnJywgSlNPTi5zdHJpbmdpZnkoY29sb3IubWFpbikpKTtcbiAgICB9XG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBpZiAoIWNvbG9yLmNvbnRyYXN0VGV4dCkge1xuICAgICAgY29sb3IuY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RUZXh0KGNvbG9yLm1haW4pO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG4gIGNvbnN0IG1vZGVzID0ge1xuICAgIGRhcmssXG4gICAgbGlnaHRcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIW1vZGVzW21vZGVdKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRoZSBwYWxldHRlIG1vZGUgXFxgJHttb2RlfVxcYCBpcyBub3Qgc3VwcG9ydGVkLmApO1xuICAgIH1cbiAgfVxuICBjb25zdCBwYWxldHRlT3V0cHV0ID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKCgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe1xuICAgIC8vIEEgY29sbGVjdGlvbiBvZiBjb21tb24gY29sb3JzLlxuICAgIGNvbW1vbjogKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7fSwgX2NvbW1vbi5kZWZhdWx0KSxcbiAgICAvLyBwcmV2ZW50IG11dGFibGUgb2JqZWN0LlxuICAgIC8vIFRoZSBwYWxldHRlIG1vZGUsIGNhbiBiZSBsaWdodCBvciBkYXJrLlxuICAgIG1vZGUsXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBwcmltYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHByaW1hcnk6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogcHJpbWFyeSxcbiAgICAgIG5hbWU6ICdwcmltYXJ5J1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHtcbiAgICAgIGNvbG9yOiBzZWNvbmRhcnksXG4gICAgICBuYW1lOiAnc2Vjb25kYXJ5JyxcbiAgICAgIG1haW5TaGFkZTogJ0E0MDAnLFxuICAgICAgbGlnaHRTaGFkZTogJ0EyMDAnLFxuICAgICAgZGFya1NoYWRlOiAnQTcwMCdcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IGludGVyZmFjZSBlbGVtZW50cyB0aGF0IHRoZSB1c2VyIHNob3VsZCBiZSBtYWRlIGF3YXJlIG9mLlxuICAgIGVycm9yOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGVycm9yLFxuICAgICAgbmFtZTogJ2Vycm9yJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGFjdGlvbnMgb3IgaW1wb3J0YW50IG1lc3NhZ2VzLlxuICAgIHdhcm5pbmc6IGF1Z21lbnRDb2xvcih7XG4gICAgICBjb2xvcjogd2FybmluZyxcbiAgICAgIG5hbWU6ICd3YXJuaW5nJ1xuICAgIH0pLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byBwcmVzZW50IGluZm9ybWF0aW9uIHRvIHRoZSB1c2VyIHRoYXQgaXMgbmV1dHJhbCBhbmQgbm90IG5lY2Vzc2FyaWx5IGltcG9ydGFudC5cbiAgICBpbmZvOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IGluZm8sXG4gICAgICBuYW1lOiAnaW5mbydcbiAgICB9KSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioe1xuICAgICAgY29sb3I6IHN1Y2Nlc3MsXG4gICAgICBuYW1lOiAnc3VjY2VzcydcbiAgICB9KSxcbiAgICAvLyBUaGUgZ3JleSBjb2xvcnMuXG4gICAgZ3JleTogX2dyZXkuZGVmYXVsdCxcbiAgICAvLyBVc2VkIGJ5IGBnZXRDb250cmFzdFRleHQoKWAgdG8gbWF4aW1pemUgdGhlIGNvbnRyYXN0IGJldHdlZW5cbiAgICAvLyB0aGUgYmFja2dyb3VuZCBhbmQgdGhlIHRleHQuXG4gICAgY29udHJhc3RUaHJlc2hvbGQsXG4gICAgLy8gVGFrZXMgYSBiYWNrZ3JvdW5kIGNvbG9yIGFuZCByZXR1cm5zIHRoZSB0ZXh0IGNvbG9yIHRoYXQgbWF4aW1pemVzIHRoZSBjb250cmFzdC5cbiAgICBnZXRDb250cmFzdFRleHQsXG4gICAgLy8gR2VuZXJhdGUgYSByaWNoIGNvbG9yIG9iamVjdC5cbiAgICBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0XG4gIH0sIG1vZGVzW21vZGVdKSwgb3RoZXIpO1xuICByZXR1cm4gcGFsZXR0ZU91dHB1dDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jcmVhdGVNdWlUaGVtZSA9IGNyZWF0ZU11aVRoZW1lO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbnZhciBfc3lzdGVtID0gcmVxdWlyZShcIkBtdWkvc3lzdGVtXCIpO1xudmFyIF9nZW5lcmF0ZVV0aWxpdHlDbGFzcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2dlbmVyYXRlVXRpbGl0eUNsYXNzXCIpKTtcbnZhciBfY3JlYXRlTWl4aW5zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVNaXhpbnNcIikpO1xudmFyIF9jcmVhdGVQYWxldHRlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVQYWxldHRlXCIpKTtcbnZhciBfY3JlYXRlVHlwb2dyYXBoeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlVHlwb2dyYXBoeVwiKSk7XG52YXIgX3NoYWRvd3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYWRvd3NcIikpO1xudmFyIF9jcmVhdGVUcmFuc2l0aW9ucyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlVHJhbnNpdGlvbnNcIikpO1xudmFyIF96SW5kZXggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3pJbmRleFwiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcIm1peGluc1wiLCBcInNwYWNpbmdcIiwgXCJwYWxldHRlXCIsIFwidHJhbnNpdGlvbnNcIiwgXCJ0eXBvZ3JhcGh5XCIsIFwic2hhcGVcIl07XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgbWl4aW5zOiBtaXhpbnNJbnB1dCA9IHt9LFxuICAgICAgcGFsZXR0ZTogcGFsZXR0ZUlucHV0ID0ge30sXG4gICAgICB0cmFuc2l0aW9uczogdHJhbnNpdGlvbnNJbnB1dCA9IHt9LFxuICAgICAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeUlucHV0ID0ge31cbiAgICB9ID0gb3B0aW9ucyxcbiAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIuZGVmYXVsdCkob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgaWYgKG9wdGlvbnMudmFycykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB2YXJzXFxgIGlzIGEgcHJpdmF0ZSBmaWVsZCB1c2VkIGZvciBDU1MgdmFyaWFibGVzIHN1cHBvcnQuXG5QbGVhc2UgdXNlIGFub3RoZXIgbmFtZS5gIDogKDAsIF91dGlscy5mb3JtYXRNdWlFcnJvck1lc3NhZ2UpKDE4KSk7XG4gIH1cbiAgY29uc3QgcGFsZXR0ZSA9ICgwLCBfY3JlYXRlUGFsZXR0ZS5kZWZhdWx0KShwYWxldHRlSW5wdXQpO1xuICBjb25zdCBzeXN0ZW1UaGVtZSA9ICgwLCBfc3lzdGVtLmNyZWF0ZVRoZW1lKShvcHRpb25zKTtcbiAgbGV0IG11aVRoZW1lID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKHN5c3RlbVRoZW1lLCB7XG4gICAgbWl4aW5zOiAoMCwgX2NyZWF0ZU1peGlucy5kZWZhdWx0KShzeXN0ZW1UaGVtZS5icmVha3BvaW50cywgbWl4aW5zSW5wdXQpLFxuICAgIHBhbGV0dGUsXG4gICAgLy8gRG9uJ3QgdXNlIFsuLi5zaGFkb3dzXSB1bnRpbCB5b3UndmUgdmVyaWZpZWQgaXRzIHRyYW5zcGlsZWQgY29kZSBpcyBub3QgaW52b2tpbmcgdGhlIGl0ZXJhdG9yIHByb3RvY29sLlxuICAgIHNoYWRvd3M6IF9zaGFkb3dzLmRlZmF1bHQuc2xpY2UoKSxcbiAgICB0eXBvZ3JhcGh5OiAoMCwgX2NyZWF0ZVR5cG9ncmFwaHkuZGVmYXVsdCkocGFsZXR0ZSwgdHlwb2dyYXBoeUlucHV0KSxcbiAgICB0cmFuc2l0aW9uczogKDAsIF9jcmVhdGVUcmFuc2l0aW9ucy5kZWZhdWx0KSh0cmFuc2l0aW9uc0lucHV0KSxcbiAgICB6SW5kZXg6ICgwLCBfZXh0ZW5kczIuZGVmYXVsdCkoe30sIF96SW5kZXguZGVmYXVsdClcbiAgfSk7XG4gIG11aVRoZW1lID0gKDAsIF91dGlscy5kZWVwbWVyZ2UpKG11aVRoZW1lLCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+ICgwLCBfdXRpbHMuZGVlcG1lcmdlKShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnN0IHN0YXRlQ2xhc3NlcyA9IFsnYWN0aXZlJywgJ2NoZWNrZWQnLCAnY29tcGxldGVkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2V4cGFuZGVkJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ3NlbGVjdGVkJ107XG4gICAgY29uc3QgdHJhdmVyc2UgPSAobm9kZSwgY29tcG9uZW50KSA9PiB7XG4gICAgICBsZXQga2V5O1xuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ3VhcmQtZm9yLWluLCBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVba2V5XTtcbiAgICAgICAgaWYgKHN0YXRlQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlQ2xhc3MgPSAoMCwgX2dlbmVyYXRlVXRpbGl0eUNsYXNzLmRlZmF1bHQpKCcnLCBrZXkpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIFxcYCR7Y29tcG9uZW50fVxcYCBjb21wb25lbnQgaW5jcmVhc2VzIGAgKyBgdGhlIENTUyBzcGVjaWZpY2l0eSBvZiB0aGUgXFxgJHtrZXl9XFxgIGludGVybmFsIHN0YXRlLmAsICdZb3UgY2FuIG5vdCBvdmVycmlkZSBpdCBsaWtlIHRoaXM6ICcsIEpTT04uc3RyaW5naWZ5KG5vZGUsIG51bGwsIDIpLCAnJywgYEluc3RlYWQsIHlvdSBuZWVkIHRvIHVzZSB0aGUgJyYuJHtzdGF0ZUNsYXNzfScgc3ludGF4OmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDoge1xuICAgICAgICAgICAgICAgIFtgJi4ke3N0YXRlQ2xhc3N9YF06IGNoaWxkXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIG51bGwsIDIpLCAnJywgJ2h0dHBzOi8vbXVpLmNvbS9yL3N0YXRlLWNsYXNzZXMtZ3VpZGUnXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuICAgICAgICAgIG5vZGVba2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyhtdWlUaGVtZS5jb21wb25lbnRzKS5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XG4gICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IG11aVRoZW1lLmNvbXBvbmVudHNbY29tcG9uZW50XS5zdHlsZU92ZXJyaWRlcztcbiAgICAgIGlmIChzdHlsZU92ZXJyaWRlcyAmJiBjb21wb25lbnQuaW5kZXhPZignTXVpJykgPT09IDApIHtcbiAgICAgICAgdHJhdmVyc2Uoc3R5bGVPdmVycmlkZXMsIGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxubGV0IHdhcm5lZE9uY2UgPSBmYWxzZTtcbmZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogdGhlIGNyZWF0ZU11aVRoZW1lIGZ1bmN0aW9uIHdhcyByZW5hbWVkIHRvIGNyZWF0ZVRoZW1lLicsICcnLCBcIllvdSBzaG91bGQgdXNlIGBpbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY3JlYXRlVGhlbWUoLi4uYXJncyk7XG59XG52YXIgX2RlZmF1bHQgPSBjcmVhdGVUaGVtZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9ucztcbmV4cG9ydHMuZWFzaW5nID0gZXhwb3J0cy5kdXJhdGlvbiA9IHZvaWQgMDtcbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIikpO1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJkdXJhdGlvblwiLCBcImVhc2luZ1wiLCBcImRlbGF5XCJdO1xuLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuZ29vZ2xlLmNvbS9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLW5hdHVyYWwtZWFzaW5nLWN1cnZlc1xuLy8gdG8gbGVhcm4gdGhlIGNvbnRleHQgaW4gd2hpY2ggZWFjaCBlYXNpbmcgc2hvdWxkIGJlIHVzZWQuXG5jb25zdCBlYXNpbmcgPSB7XG4gIC8vIFRoaXMgaXMgdGhlIG1vc3QgY29tbW9uIGVhc2luZyBjdXJ2ZS5cbiAgZWFzZUluT3V0OiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgZW50ZXIgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5IGZyb20gb2ZmLXNjcmVlbiBhbmRcbiAgLy8gc2xvd2x5IGRlY2VsZXJhdGUgdG8gYSByZXN0aW5nIHBvaW50LlxuICBlYXNlT3V0OiAnY3ViaWMtYmV6aWVyKDAuMCwgMCwgMC4yLCAxKScsXG4gIC8vIE9iamVjdHMgbGVhdmUgdGhlIHNjcmVlbiBhdCBmdWxsIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCBkZWNlbGVyYXRlIHdoZW4gb2ZmLXNjcmVlbi5cbiAgZWFzZUluOiAnY3ViaWMtYmV6aWVyKDAuNCwgMCwgMSwgMSknLFxuICAvLyBUaGUgc2hhcnAgY3VydmUgaXMgdXNlZCBieSBvYmplY3RzIHRoYXQgbWF5IHJldHVybiB0byB0aGUgc2NyZWVuIGF0IGFueSB0aW1lLlxuICBzaGFycDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknXG59O1xuXG4vLyBGb2xsb3cgaHR0cHM6Ly9tMi5tYXRlcmlhbC5pby9ndWlkZWxpbmVzL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctY29tbW9uLWR1cmF0aW9uc1xuLy8gdG8gbGVhcm4gd2hlbiB1c2Ugd2hhdCB0aW1pbmdcbmV4cG9ydHMuZWFzaW5nID0gZWFzaW5nO1xuY29uc3QgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5leHBvcnRzLmR1cmF0aW9uID0gZHVyYXRpb247XG5mdW5jdGlvbiBmb3JtYXRNcyhtaWxsaXNlY29uZHMpIHtcbiAgcmV0dXJuIGAke01hdGgucm91bmQobWlsbGlzZWNvbmRzKX1tc2A7XG59XG5mdW5jdGlvbiBnZXRBdXRvSGVpZ2h0RHVyYXRpb24oaGVpZ2h0KSB7XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgY29uc3QgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjtcblxuICAvLyBodHRwczovL3d3dy53b2xmcmFtYWxwaGEuY29tL2lucHV0Lz9pPSg0KyUyQisxNSsqKyh4KyUyRiszNispKyoqKzAuMjUrJTJCKyh4KyUyRiszNikrJTJGKzUpKyorMTBcbiAgcmV0dXJuIE1hdGgucm91bmQoKDQgKyAxNSAqIGNvbnN0YW50ICoqIDAuMjUgKyBjb25zdGFudCAvIDUpICogMTApO1xufVxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbnMoaW5wdXRUcmFuc2l0aW9ucykge1xuICBjb25zdCBtZXJnZWRFYXNpbmcgPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBlYXNpbmcsIGlucHV0VHJhbnNpdGlvbnMuZWFzaW5nKTtcbiAgY29uc3QgbWVyZ2VkRHVyYXRpb24gPSAoMCwgX2V4dGVuZHMyLmRlZmF1bHQpKHt9LCBkdXJhdGlvbiwgaW5wdXRUcmFuc2l0aW9ucy5kdXJhdGlvbik7XG4gIGNvbnN0IGNyZWF0ZSA9IChwcm9wcyA9IFsnYWxsJ10sIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uT3B0aW9uID0gbWVyZ2VkRHVyYXRpb24uc3RhbmRhcmQsXG4gICAgICAgIGVhc2luZzogZWFzaW5nT3B0aW9uID0gbWVyZ2VkRWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZGVsYXkgPSAwXG4gICAgICB9ID0gb3B0aW9ucyxcbiAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShvcHRpb25zLCBfZXhjbHVkZWQpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zdCBpc1N0cmluZyA9IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICAvLyBJRTExIHN1cHBvcnQsIHJlcGxhY2Ugd2l0aCBOdW1iZXIuaXNOYU5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgICAgIGNvbnN0IGlzTnVtYmVyID0gdmFsdWUgPT4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwicHJvcHNcIiBtdXN0IGJlIGEgc3RyaW5nIG9yIEFycmF5LicpO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bWJlcihkdXJhdGlvbk9wdGlvbikgJiYgIWlzU3RyaW5nKGR1cmF0aW9uT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEFyZ3VtZW50IFwiZHVyYXRpb25cIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nIGJ1dCBmb3VuZCAke2R1cmF0aW9uT3B0aW9ufS5gKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNTdHJpbmcoZWFzaW5nT3B0aW9uKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNVUk6IEFyZ3VtZW50IFwiZWFzaW5nXCIgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTVVJOiBBcmd1bWVudCBcImRlbGF5XCIgbXVzdCBiZSBhIG51bWJlciBvciBhIHN0cmluZy4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVW5yZWNvZ25pemVkIGFyZ3VtZW50KHMpIFske09iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyl9XS5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChBcnJheS5pc0FycmF5KHByb3BzKSA/IHByb3BzIDogW3Byb3BzXSkubWFwKGFuaW1hdGVkUHJvcCA9PiBgJHthbmltYXRlZFByb3B9ICR7dHlwZW9mIGR1cmF0aW9uT3B0aW9uID09PSAnc3RyaW5nJyA/IGR1cmF0aW9uT3B0aW9uIDogZm9ybWF0TXMoZHVyYXRpb25PcHRpb24pfSAke2Vhc2luZ09wdGlvbn0gJHt0eXBlb2YgZGVsYXkgPT09ICdzdHJpbmcnID8gZGVsYXkgOiBmb3JtYXRNcyhkZWxheSl9YCkuam9pbignLCcpO1xuICB9O1xuICByZXR1cm4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgZ2V0QXV0b0hlaWdodER1cmF0aW9uLFxuICAgIGNyZWF0ZVxuICB9LCBpbnB1dFRyYW5zaXRpb25zLCB7XG4gICAgZWFzaW5nOiBtZXJnZWRFYXNpbmcsXG4gICAgZHVyYXRpb246IG1lcmdlZER1cmF0aW9uXG4gIH0pO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUeXBvZ3JhcGh5O1xudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG11aS91dGlsc1wiKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdO1xuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuY29uc3QgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xuY29uc3QgZGVmYXVsdEZvbnRGYW1pbHkgPSAnXCJSb2JvdG9cIiwgXCJIZWx2ZXRpY2FcIiwgXCJBcmlhbFwiLCBzYW5zLXNlcmlmJztcblxuLyoqXG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdGhlLXR5cGUtc3lzdGVtLmh0bWx9XG4gKiBAc2VlIEBsaW5re2h0dHBzOi8vbTIubWF0ZXJpYWwuaW8vZGVzaWduL3R5cG9ncmFwaHkvdW5kZXJzdGFuZGluZy10eXBvZ3JhcGh5Lmh0bWx9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVR5cG9ncmFwaHkocGFsZXR0ZSwgdHlwb2dyYXBoeSkge1xuICBjb25zdCBfcmVmID0gdHlwZW9mIHR5cG9ncmFwaHkgPT09ICdmdW5jdGlvbicgPyB0eXBvZ3JhcGh5KHBhbGV0dGUpIDogdHlwb2dyYXBoeSxcbiAgICB7XG4gICAgICBmb250RmFtaWx5ID0gZGVmYXVsdEZvbnRGYW1pbHksXG4gICAgICAvLyBUaGUgZGVmYXVsdCBmb250IHNpemUgb2YgdGhlIE1hdGVyaWFsIFNwZWNpZmljYXRpb24uXG4gICAgICBmb250U2l6ZSA9IDE0LFxuICAgICAgLy8gcHhcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IDMwMCxcbiAgICAgIGZvbnRXZWlnaHRSZWd1bGFyID0gNDAwLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IDUwMCxcbiAgICAgIGZvbnRXZWlnaHRCb2xkID0gNzAwLFxuICAgICAgLy8gVGVsbCBNVUkgd2hhdCdzIHRoZSBmb250LXNpemUgb24gdGhlIGh0bWwgZWxlbWVudC5cbiAgICAgIC8vIDE2cHggaXMgdGhlIGRlZmF1bHQgZm9udC1zaXplIHVzZWQgYnkgYnJvd3NlcnMuXG4gICAgICBodG1sRm9udFNpemUgPSAxNixcbiAgICAgIC8vIEFwcGx5IHRoZSBDU1MgcHJvcGVydGllcyB0byBhbGwgdGhlIHZhcmlhbnRzLlxuICAgICAgYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtOiBweFRvUmVtMlxuICAgIH0gPSBfcmVmLFxuICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlMi5kZWZhdWx0KShfcmVmLCBfZXhjbHVkZWQpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNVUk6IGBmb250U2l6ZWAgaXMgcmVxdWlyZWQgdG8gYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaHRtbEZvbnRTaXplICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc29sZS5lcnJvcignTVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG4gIGNvbnN0IHB4VG9SZW0gPSBweFRvUmVtMiB8fCAoc2l6ZSA9PiBgJHtzaXplIC8gaHRtbEZvbnRTaXplICogY29lZn1yZW1gKTtcbiAgY29uc3QgYnVpbGRWYXJpYW50ID0gKGZvbnRXZWlnaHQsIHNpemUsIGxpbmVIZWlnaHQsIGxldHRlclNwYWNpbmcsIGNhc2luZykgPT4gKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgZm9udEZhbWlseSxcbiAgICBmb250V2VpZ2h0LFxuICAgIGZvbnRTaXplOiBweFRvUmVtKHNpemUpLFxuICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgIGxpbmVIZWlnaHRcbiAgfSwgZm9udEZhbWlseSA9PT0gZGVmYXVsdEZvbnRGYW1pbHkgPyB7XG4gICAgbGV0dGVyU3BhY2luZzogYCR7cm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpfWVtYFxuICB9IDoge30sIGNhc2luZywgYWxsVmFyaWFudHMpO1xuICBjb25zdCB2YXJpYW50cyA9IHtcbiAgICBoMTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgOTYsIDEuMTY3LCAtMS41KSxcbiAgICBoMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRMaWdodCwgNjAsIDEuMiwgLTAuNSksXG4gICAgaDM6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgNDgsIDEuMTY3LCAwKSxcbiAgICBoNDogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAzNCwgMS4yMzUsIDAuMjUpLFxuICAgIGg1OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDI0LCAxLjMzNCwgMCksXG4gICAgaDY6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAyMCwgMS42LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTYsIDEuNzUsIDAuMTUpLFxuICAgIHN1YnRpdGxlMjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRNZWRpdW0sIDE0LCAxLjU3LCAwLjEpLFxuICAgIGJvZHkxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjUsIDAuMTUpLFxuICAgIGJvZHkyOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE0LCAxLjQzLCAwLjE1KSxcbiAgICBidXR0b246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS43NSwgMC40LCBjYXNlQWxsQ2FwcyksXG4gICAgY2FwdGlvbjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMS42NiwgMC40KSxcbiAgICBvdmVybGluZTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxMiwgMi42NiwgMSwgY2FzZUFsbENhcHMpXG4gIH07XG4gIHJldHVybiAoMCwgX3V0aWxzLmRlZXBtZXJnZSkoKDAsIF9leHRlbmRzMi5kZWZhdWx0KSh7XG4gICAgaHRtbEZvbnRTaXplLFxuICAgIHB4VG9SZW0sXG4gICAgZm9udEZhbWlseSxcbiAgICBmb250U2l6ZSxcbiAgICBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgZm9udFdlaWdodE1lZGl1bSxcbiAgICBmb250V2VpZ2h0Qm9sZFxuICB9LCB2YXJpYW50cyksIG90aGVyLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcFxuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbmNvbnN0IHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbmNvbnN0IHNoYWRvd0tleVBlbnVtYnJhT3BhY2l0eSA9IDAuMTQ7XG5jb25zdCBzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eSA9IDAuMTI7XG5mdW5jdGlvbiBjcmVhdGVTaGFkb3coLi4ucHgpIHtcbiAgcmV0dXJuIFtgJHtweFswXX1weCAke3B4WzFdfXB4ICR7cHhbMl19cHggJHtweFszXX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5VW1icmFPcGFjaXR5fSlgLCBgJHtweFs0XX1weCAke3B4WzVdfXB4ICR7cHhbNl19cHggJHtweFs3XX1weCByZ2JhKDAsMCwwLCR7c2hhZG93S2V5UGVudW1icmFPcGFjaXR5fSlgLCBgJHtweFs4XX1weCAke3B4WzldfXB4ICR7cHhbMTBdfXB4ICR7cHhbMTFdfXB4IHJnYmEoMCwwLDAsJHtzaGFkb3dBbWJpZW50U2hhZG93T3BhY2l0eX0pYF0uam9pbignLCcpO1xufVxuXG4vLyBWYWx1ZXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWF0ZXJpYWwtY29tcG9uZW50cy9tYXRlcmlhbC1jb21wb25lbnRzLXdlYi9ibG9iL2JlODc0N2Y5NDU3NDY2OWNiNWU3YWRkMWE3YzU0ZmE0MWE4OWNlYzcvcGFja2FnZXMvbWRjLWVsZXZhdGlvbi9fdmFyaWFibGVzLnNjc3NcbmNvbnN0IHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbnZhciBfZGVmYXVsdCA9IHNoYWRvd3M7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxuY29uc3QgekluZGV4ID0ge1xuICBtb2JpbGVTdGVwcGVyOiAxMDAwLFxuICBmYWI6IDEwNTAsXG4gIHNwZWVkRGlhbDogMTA1MCxcbiAgYXBwQmFyOiAxMTAwLFxuICBkcmF3ZXI6IDEyMDAsXG4gIG1vZGFsOiAxMzAwLFxuICBzbmFja2JhcjogMTQwMCxcbiAgdG9vbHRpcDogMTUwMFxufTtcbnZhciBfZGVmYXVsdCA9IHpJbmRleDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmNvbnN0IFRoZW1lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgVGhlbWVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1RoZW1lQ29udGV4dCc7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZUNvbnRleHQ7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuL1RoZW1lQ29udGV4dCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUaGVtZSgpIHtcbiAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cbiAgcmV0dXJuIHRoZW1lO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZnVuY3Rpb24gaXNFbXB0eShvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbCB8fCBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdsb2JhbFN0eWxlcyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgc3R5bGVzLFxuICAgIGRlZmF1bHRUaGVtZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgZ2xvYmFsU3R5bGVzID0gdHlwZW9mIHN0eWxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoZW1lSW5wdXQgPT4gc3R5bGVzKGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0KSA6IHN0eWxlcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KEdsb2JhbCwge1xuICAgIHN0eWxlczogZ2xvYmFsU3R5bGVzXG4gIH0pO1xufVxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gR2xvYmFsU3R5bGVzLnByb3BUeXBlcyA9IHtcbiAgZGVmYXVsdFRoZW1lOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSlcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvcFZhbGlkO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgY3JlYXRlRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNQcm9wVmFsaWQgZnJvbSAnQGVtb3Rpb24vaXMtcHJvcC12YWxpZCc7XG5pbXBvcnQgeyB3aXRoRW1vdGlvbkNhY2hlLCBUaGVtZUNvbnRleHQgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCByZWdpc3RlclN0eWxlcywgaW5zZXJ0U3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vdXRpbHMnO1xuaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCB7IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2sgfSBmcm9tICdAZW1vdGlvbi91c2UtaW5zZXJ0aW9uLWVmZmVjdC13aXRoLWZhbGxiYWNrcyc7XG5cbnZhciB0ZXN0T21pdFByb3BzT25TdHJpbmdUYWcgPSBpc1Byb3BWYWxpZDtcblxudmFyIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudCA9IGZ1bmN0aW9uIHRlc3RPbWl0UHJvcHNPbkNvbXBvbmVudChrZXkpIHtcbiAgcmV0dXJuIGtleSAhPT0gJ3RoZW1lJztcbn07XG5cbnZhciBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AgPSBmdW5jdGlvbiBnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AodGFnKSB7XG4gIHJldHVybiB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyAmJiAvLyA5NiBpcyBvbmUgbGVzcyB0aGFuIHRoZSBjaGFyIGNvZGVcbiAgLy8gZm9yIFwiYVwiIHNvIHRoaXMgaXMgY2hlY2tpbmcgdGhhdFxuICAvLyBpdCdzIGEgbG93ZXJjYXNlIGNoYXJhY3RlclxuICB0YWcuY2hhckNvZGVBdCgwKSA+IDk2ID8gdGVzdE9taXRQcm9wc09uU3RyaW5nVGFnIDogdGVzdE9taXRQcm9wc09uQ29tcG9uZW50O1xufTtcbnZhciBjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzID0gZnVuY3Rpb24gY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyh0YWcsIG9wdGlvbnMsIGlzUmVhbCkge1xuICB2YXIgc2hvdWxkRm9yd2FyZFByb3A7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID0gb3B0aW9ucy5zaG91bGRGb3J3YXJkUHJvcDtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3AgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wID8gZnVuY3Rpb24gKHByb3BOYW1lKSB7XG4gICAgICByZXR1cm4gdGFnLl9fZW1vdGlvbl9mb3J3YXJkUHJvcChwcm9wTmFtZSkgJiYgb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wKHByb3BOYW1lKTtcbiAgICB9IDogb3B0aW9uc1Nob3VsZEZvcndhcmRQcm9wO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzaG91bGRGb3J3YXJkUHJvcCAhPT0gJ2Z1bmN0aW9uJyAmJiBpc1JlYWwpIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcCA9IHRhZy5fX2Vtb3Rpb25fZm9yd2FyZFByb3A7XG4gIH1cblxuICByZXR1cm4gc2hvdWxkRm9yd2FyZFByb3A7XG59O1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xuXG52YXIgSW5zZXJ0aW9uID0gZnVuY3Rpb24gSW5zZXJ0aW9uKF9yZWYpIHtcbiAgdmFyIGNhY2hlID0gX3JlZi5jYWNoZSxcbiAgICAgIHNlcmlhbGl6ZWQgPSBfcmVmLnNlcmlhbGl6ZWQsXG4gICAgICBpc1N0cmluZ1RhZyA9IF9yZWYuaXNTdHJpbmdUYWc7XG4gIHJlZ2lzdGVyU3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBpc1N0cmluZ1RhZyk7XG4gIHZhciBydWxlcyA9IHVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKTtcbiAgfSk7XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG52YXIgY3JlYXRlU3R5bGVkID0gZnVuY3Rpb24gY3JlYXRlU3R5bGVkKHRhZywgb3B0aW9ucykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzdHlsZWQgZWxlbWVudCB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuXFxuWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBpbXBvcnQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzUmVhbCA9IHRhZy5fX2Vtb3Rpb25fcmVhbCA9PT0gdGFnO1xuICB2YXIgYmFzZVRhZyA9IGlzUmVhbCAmJiB0YWcuX19lbW90aW9uX2Jhc2UgfHwgdGFnO1xuICB2YXIgaWRlbnRpZmllck5hbWU7XG4gIHZhciB0YXJnZXRDbGFzc05hbWU7XG5cbiAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgIGlkZW50aWZpZXJOYW1lID0gb3B0aW9ucy5sYWJlbDtcbiAgICB0YXJnZXRDbGFzc05hbWUgPSBvcHRpb25zLnRhcmdldDtcbiAgfVxuXG4gIHZhciBzaG91bGRGb3J3YXJkUHJvcCA9IGNvbXBvc2VTaG91bGRGb3J3YXJkUHJvcHModGFnLCBvcHRpb25zLCBpc1JlYWwpO1xuICB2YXIgZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkRm9yd2FyZFByb3AgfHwgZ2V0RGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKGJhc2VUYWcpO1xuICB2YXIgc2hvdWxkVXNlQXMgPSAhZGVmYXVsdFNob3VsZEZvcndhcmRQcm9wKCdhcycpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdHlsZXMgPSBpc1JlYWwgJiYgdGFnLl9fZW1vdGlvbl9zdHlsZXMgIT09IHVuZGVmaW5lZCA/IHRhZy5fX2Vtb3Rpb25fc3R5bGVzLnNsaWNlKDApIDogW107XG5cbiAgICBpZiAoaWRlbnRpZmllck5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2goXCJsYWJlbDpcIiArIGlkZW50aWZpZXJOYW1lICsgXCI7XCIpO1xuICAgIH1cblxuICAgIGlmIChhcmdzWzBdID09IG51bGwgfHwgYXJnc1swXS5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgc3R5bGVzLnB1c2guYXBwbHkoc3R5bGVzLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXJnc1swXVswXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXMucHVzaChhcmdzWzBdWzBdKTtcbiAgICAgIHZhciBsZW4gPSBhcmdzLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMTtcblxuICAgICAgZm9yICg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhcmdzWzBdW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlcy5wdXNoKGFyZ3NbaV0sIGFyZ3NbMF1baV0pO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZTogd2UgbmVlZCB0byBjYXN0IFN0YXRlbGVzc0Z1bmN0aW9uYWxDb21wb25lbnQgdG8gb3VyIFByaXZhdGVTdHlsZWRDb21wb25lbnQgY2xhc3NcblxuXG4gICAgdmFyIFN0eWxlZCA9IHdpdGhFbW90aW9uQ2FjaGUoZnVuY3Rpb24gKHByb3BzLCBjYWNoZSwgcmVmKSB7XG4gICAgICB2YXIgRmluYWxUYWcgPSBzaG91bGRVc2VBcyAmJiBwcm9wcy5hcyB8fCBiYXNlVGFnO1xuICAgICAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuICAgICAgdmFyIGNsYXNzSW50ZXJwb2xhdGlvbnMgPSBbXTtcbiAgICAgIHZhciBtZXJnZWRQcm9wcyA9IHByb3BzO1xuXG4gICAgICBpZiAocHJvcHMudGhlbWUgPT0gbnVsbCkge1xuICAgICAgICBtZXJnZWRQcm9wcyA9IHt9O1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgICAgIG1lcmdlZFByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVyZ2VkUHJvcHMudGhlbWUgPSB1c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWUgPSBnZXRSZWdpc3RlcmVkU3R5bGVzKGNhY2hlLnJlZ2lzdGVyZWQsIGNsYXNzSW50ZXJwb2xhdGlvbnMsIHByb3BzLmNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BzLmNsYXNzTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhzdHlsZXMuY29uY2F0KGNsYXNzSW50ZXJwb2xhdGlvbnMpLCBjYWNoZS5yZWdpc3RlcmVkLCBtZXJnZWRQcm9wcyk7XG4gICAgICBjbGFzc05hbWUgKz0gY2FjaGUua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmICh0YXJnZXRDbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbGFzc05hbWUgKz0gXCIgXCIgKyB0YXJnZXRDbGFzc05hbWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBmaW5hbFNob3VsZEZvcndhcmRQcm9wID0gc2hvdWxkVXNlQXMgJiYgc2hvdWxkRm9yd2FyZFByb3AgPT09IHVuZGVmaW5lZCA/IGdldERlZmF1bHRTaG91bGRGb3J3YXJkUHJvcChGaW5hbFRhZykgOiBkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICAgICAgZm9yICh2YXIgX2tleSBpbiBwcm9wcykge1xuICAgICAgICBpZiAoc2hvdWxkVXNlQXMgJiYgX2tleSA9PT0gJ2FzJykgY29udGludWU7XG5cbiAgICAgICAgaWYgKCAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGZpbmFsU2hvdWxkRm9yd2FyZFByb3AoX2tleSkpIHtcbiAgICAgICAgICBuZXdQcm9wc1tfa2V5XSA9IHByb3BzW19rZXldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5ld1Byb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoSW5zZXJ0aW9uLCB7XG4gICAgICAgIGNhY2hlOiBjYWNoZSxcbiAgICAgICAgc2VyaWFsaXplZDogc2VyaWFsaXplZCxcbiAgICAgICAgaXNTdHJpbmdUYWc6IHR5cGVvZiBGaW5hbFRhZyA9PT0gJ3N0cmluZydcbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChGaW5hbFRhZywgbmV3UHJvcHMpKTtcbiAgICB9KTtcbiAgICBTdHlsZWQuZGlzcGxheU5hbWUgPSBpZGVudGlmaWVyTmFtZSAhPT0gdW5kZWZpbmVkID8gaWRlbnRpZmllck5hbWUgOiBcIlN0eWxlZChcIiArICh0eXBlb2YgYmFzZVRhZyA9PT0gJ3N0cmluZycgPyBiYXNlVGFnIDogYmFzZVRhZy5kaXNwbGF5TmFtZSB8fCBiYXNlVGFnLm5hbWUgfHwgJ0NvbXBvbmVudCcpICsgXCIpXCI7XG4gICAgU3R5bGVkLmRlZmF1bHRQcm9wcyA9IHRhZy5kZWZhdWx0UHJvcHM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9yZWFsID0gU3R5bGVkO1xuICAgIFN0eWxlZC5fX2Vtb3Rpb25fYmFzZSA9IGJhc2VUYWc7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9zdHlsZXMgPSBzdHlsZXM7XG4gICAgU3R5bGVkLl9fZW1vdGlvbl9mb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdHlsZWQsICd0b1N0cmluZycsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiB2YWx1ZSgpIHtcbiAgICAgICAgaWYgKHRhcmdldENsYXNzTmFtZSA9PT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gJ05PX0NPTVBPTkVOVF9TRUxFQ1RPUic7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZTogY29lcmNlIHVuZGVmaW5lZCB0byBzdHJpbmdcblxuXG4gICAgICAgIHJldHVybiBcIi5cIiArIHRhcmdldENsYXNzTmFtZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIFN0eWxlZC53aXRoQ29tcG9uZW50ID0gZnVuY3Rpb24gKG5leHRUYWcsIG5leHRPcHRpb25zKSB7XG4gICAgICByZXR1cm4gY3JlYXRlU3R5bGVkKG5leHRUYWcsIF9leHRlbmRzKHt9LCBvcHRpb25zLCBuZXh0T3B0aW9ucywge1xuICAgICAgICBzaG91bGRGb3J3YXJkUHJvcDogY29tcG9zZVNob3VsZEZvcndhcmRQcm9wcyhTdHlsZWQsIG5leHRPcHRpb25zLCB0cnVlKVxuICAgICAgfSkpLmFwcGx5KHZvaWQgMCwgc3R5bGVzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0eWxlZDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVN0eWxlZDtcbiIsImltcG9ydCAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCAncmVhY3QnO1xuaW1wb3J0ICdAZW1vdGlvbi9pcy1wcm9wLXZhbGlkJztcbmltcG9ydCBjcmVhdGVTdHlsZWQgZnJvbSAnLi4vYmFzZS9kaXN0L2Vtb3Rpb24tc3R5bGVkLWJhc2UuYnJvd3Nlci5lc20uanMnO1xuaW1wb3J0ICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCAnQGVtb3Rpb24vc2VyaWFsaXplJztcbmltcG9ydCAnQGVtb3Rpb24vdXNlLWluc2VydGlvbi1lZmZlY3Qtd2l0aC1mYWxsYmFja3MnO1xuXG52YXIgdGFncyA9IFsnYScsICdhYmJyJywgJ2FkZHJlc3MnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2F1ZGlvJywgJ2InLCAnYmFzZScsICdiZGknLCAnYmRvJywgJ2JpZycsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhbnZhcycsICdjYXB0aW9uJywgJ2NpdGUnLCAnY29kZScsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGF0YScsICdkYXRhbGlzdCcsICdkZCcsICdkZWwnLCAnZGV0YWlscycsICdkZm4nLCAnZGlhbG9nJywgJ2RpdicsICdkbCcsICdkdCcsICdlbScsICdlbWJlZCcsICdmaWVsZHNldCcsICdmaWdjYXB0aW9uJywgJ2ZpZ3VyZScsICdmb290ZXInLCAnZm9ybScsICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdoZWFkJywgJ2hlYWRlcicsICdoZ3JvdXAnLCAnaHInLCAnaHRtbCcsICdpJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaW5zJywgJ2tiZCcsICdrZXlnZW4nLCAnbGFiZWwnLCAnbGVnZW5kJywgJ2xpJywgJ2xpbmsnLCAnbWFpbicsICdtYXAnLCAnbWFyaycsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICdtZXRlcicsICduYXYnLCAnbm9zY3JpcHQnLCAnb2JqZWN0JywgJ29sJywgJ29wdGdyb3VwJywgJ29wdGlvbicsICdvdXRwdXQnLCAncCcsICdwYXJhbScsICdwaWN0dXJlJywgJ3ByZScsICdwcm9ncmVzcycsICdxJywgJ3JwJywgJ3J0JywgJ3J1YnknLCAncycsICdzYW1wJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzbWFsbCcsICdzb3VyY2UnLCAnc3BhbicsICdzdHJvbmcnLCAnc3R5bGUnLCAnc3ViJywgJ3N1bW1hcnknLCAnc3VwJywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpbWUnLCAndGl0bGUnLCAndHInLCAndHJhY2snLCAndScsICd1bCcsICd2YXInLCAndmlkZW8nLCAnd2JyJywgLy8gU1ZHXG4nY2lyY2xlJywgJ2NsaXBQYXRoJywgJ2RlZnMnLCAnZWxsaXBzZScsICdmb3JlaWduT2JqZWN0JywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICdzdmcnLCAndGV4dCcsICd0c3BhbiddO1xuXG52YXIgbmV3U3R5bGVkID0gY3JlYXRlU3R5bGVkLmJpbmQoKTtcbnRhZ3MuZm9yRWFjaChmdW5jdGlvbiAodGFnTmFtZSkge1xuICAvLyAkRmxvd0ZpeE1lOiB3ZSBjYW4gaWdub3JlIHRoaXMgYmVjYXVzZSBpdHMgZXhwb3NlZCB0eXBlIGlzIGRlZmluZWQgYnkgdGhlIENyZWF0ZVN0eWxlZCB0eXBlXG4gIG5ld1N0eWxlZFt0YWdOYW1lXSA9IG5ld1N0eWxlZCh0YWdOYW1lKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBuZXdTdHlsZWQ7XG4iLCIvKiogQGxpY2Vuc2UgTVVJIHY1LjEwLjE2XG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5pbXBvcnQgZW1TdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0eWxlZCh0YWcsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3R5bGVzRmFjdG9yeSA9IGVtU3R5bGVkKHRhZywgb3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICguLi5zdHlsZXMpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnID8gYFwiJHt0YWd9XCJgIDogJ2NvbXBvbmVudCc7XG4gICAgICBpZiAoc3R5bGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBTZWVtcyBsaWtlIHlvdSBjYWxsZWQgXFxgc3R5bGVkKCR7Y29tcG9uZW50fSkoKVxcYCB3aXRob3V0IGEgXFxgc3R5bGVcXGAgYXJndW1lbnQuYCwgJ1lvdSBtdXN0IHByb3ZpZGUgYSBgc3R5bGVzYCBhcmd1bWVudDogYHN0eWxlZChcImRpdlwiKShzdHlsZVlvdUZvcmdvdFRvUGFzcylgLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLnNvbWUoc3R5bGUgPT4gc3R5bGUgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgTVVJOiB0aGUgc3R5bGVkKCR7Y29tcG9uZW50fSkoLi4uYXJncykgQVBJIHJlcXVpcmVzIGFsbCBpdHMgYXJncyB0byBiZSBkZWZpbmVkLmApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlc0ZhY3RvcnkoLi4uc3R5bGVzKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBzdHlsZXNGYWN0b3J5O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyA9ICh0YWcsIHByb2Nlc3NvcikgPT4ge1xuICAvLyBFbW90aW9uIGF0dGFjaGVzIGFsbCB0aGUgc3R5bGVzIGFzIGBfX2Vtb3Rpb25fc3R5bGVzYC5cbiAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vZW1vdGlvbi1qcy9lbW90aW9uL2Jsb2IvMTZkOTcxZDBkYTIyOTU5NmQ2YmNjMzlkMjgyYmE5NzUzYzllZTdjZi9wYWNrYWdlcy9zdHlsZWQvc3JjL2Jhc2UuanMjTDE4NlxuICBpZiAoQXJyYXkuaXNBcnJheSh0YWcuX19lbW90aW9uX3N0eWxlcykpIHtcbiAgICB0YWcuX19lbW90aW9uX3N0eWxlcyA9IHByb2Nlc3Nvcih0YWcuX19lbW90aW9uX3N0eWxlcyk7XG4gIH1cbn07XG5leHBvcnQgeyBUaGVtZUNvbnRleHQsIGtleWZyYW1lcywgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTdHlsZWRFbmdpbmVQcm92aWRlciB9IGZyb20gJy4vU3R5bGVkRW5naW5lUHJvdmlkZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBHbG9iYWxTdHlsZXMgfSBmcm9tICcuL0dsb2JhbFN0eWxlcyc7IiwiY29uc3QgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuZXhwb3J0IGRlZmF1bHQgaGFzU3ltYm9sID8gU3ltYm9sLmZvcignbXVpLm5lc3RlZCcpIDogJ19fVEhFTUVfTkVTVEVEX18nOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGV4YWN0UHJvcCB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuLi91c2VUaGVtZS9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnLi9uZXN0ZWQnO1xuXG4vLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmZ1bmN0aW9uIG1lcmdlT3V0ZXJMb2NhbFRoZW1lKG91dGVyVGhlbWUsIGxvY2FsVGhlbWUpIHtcbiAgaWYgKHR5cGVvZiBsb2NhbFRoZW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgbWVyZ2VkVGhlbWUgPSBsb2NhbFRoZW1lKG91dGVyVGhlbWUpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW1lcmdlZFRoZW1lKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNVUk6IFlvdSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4nLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9eygpID0+ICh7fSl9IC8+J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkVGhlbWU7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB0YWtlcyBhIGB0aGVtZWAgcHJvcC5cbiAqIEl0IG1ha2VzIHRoZSBgdGhlbWVgIGF2YWlsYWJsZSBkb3duIHRoZSBSZWFjdCB0cmVlIHRoYW5rcyB0byBSZWFjdCBjb250ZXh0LlxuICogVGhpcyBjb21wb25lbnQgc2hvdWxkIHByZWZlcmFibHkgYmUgdXNlZCBhdCAqKnRoZSByb290IG9mIHlvdXIgY29tcG9uZW50IHRyZWUqKi5cbiAqL1xuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgdGhlbWU6IGxvY2FsVGhlbWVcbiAgfSA9IHByb3BzO1xuICBjb25zdCBvdXRlclRoZW1lID0gdXNlVGhlbWUoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAob3V0ZXJUaGVtZSA9PT0gbnVsbCAmJiB0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01VSTogWW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wIHRvIHRoZSBUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnJywgJ0hvd2V2ZXIsIG5vIG91dGVyIHRoZW1lIGlzIHByZXNlbnQuJywgJ01ha2Ugc3VyZSBhIHRoZW1lIGlzIGFscmVhZHkgaW5qZWN0ZWQgaGlnaGVyIGluIHRoZSBSZWFjdCB0cmVlICcgKyAnb3IgcHJvdmlkZSBhIHRoZW1lIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG4gIGNvbnN0IHRoZW1lID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgb3V0cHV0ID0gb3V0ZXJUaGVtZSA9PT0gbnVsbCA/IGxvY2FsVGhlbWUgOiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKTtcbiAgICBpZiAob3V0cHV0ICE9IG51bGwpIHtcbiAgICAgIG91dHB1dFtuZXN0ZWRdID0gb3V0ZXJUaGVtZSAhPT0gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSwgW2xvY2FsVGhlbWUsIG91dGVyVGhlbWVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0aGVtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBBIHRoZW1lIG9iamVjdC4gWW91IGNhbiBwcm92aWRlIGEgZnVuY3Rpb24gdG8gZXh0ZW5kIHRoZSBvdXRlciB0aGVtZS5cbiAgICovXG4gIHRoZW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBUaGVtZVByb3ZpZGVyLnByb3BUeXBlcyA9IGV4YWN0UHJvcChUaGVtZVByb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59XG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUaGVtZVByb3ZpZGVyIGFzIE11aVRoZW1lUHJvdmlkZXIgfSBmcm9tICdAbXVpL3ByaXZhdGUtdGhlbWluZyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IFRoZW1lQ29udGV4dCBhcyBTdHlsZWRFbmdpbmVUaGVtZUNvbnRleHQgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBFTVBUWV9USEVNRSA9IHt9O1xuZnVuY3Rpb24gSW5uZXJUaGVtZVByb3ZpZGVyKHByb3BzKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFN0eWxlZEVuZ2luZVRoZW1lQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB0eXBlb2YgdGhlbWUgPT09ICdvYmplY3QnID8gdGhlbWUgOiBFTVBUWV9USEVNRSxcbiAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW5cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJbm5lclRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufSA6IHZvaWQgMDtcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBtYWtlcyB0aGUgYHRoZW1lYCBhdmFpbGFibGUgZG93biB0aGUgUmVhY3QgdHJlZS5cbiAqIEl0IHNob3VsZCBwcmVmZXJhYmx5IGJlIHVzZWQgYXQgKip0aGUgcm9vdCBvZiB5b3VyIGNvbXBvbmVudCB0cmVlKiouXG4gKi9cbmZ1bmN0aW9uIFRoZW1lUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiBsb2NhbFRoZW1lXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KE11aVRoZW1lUHJvdmlkZXIsIHtcbiAgICB0aGVtZTogbG9jYWxUaGVtZSxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goSW5uZXJUaGVtZVByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9KVxuICB9KTtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogWW91ciBjb21wb25lbnQgdHJlZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LiBZb3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBleHRlbmQgdGhlIG91dGVyIHRoZW1lLlxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFRoZW1lUHJvdmlkZXIucHJvcFR5cGVzKSA6IHZvaWQgMDtcbn1cbmV4cG9ydCBkZWZhdWx0IFRoZW1lUHJvdmlkZXI7IiwiaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgY3JlYXRlVW5hcnlVbml0LCBnZXRWYWx1ZSB9IGZyb20gJy4vc3BhY2luZyc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZnVuY3Rpb24gZ2V0Qm9yZGVyKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBgJHt2YWx1ZX1weCBzb2xpZGA7XG59XG5leHBvcnQgY29uc3QgYm9yZGVyID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyJyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclRvcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclRvcCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJSaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlclJpZ2h0JyxcbiAgdGhlbWVLZXk6ICdib3JkZXJzJyxcbiAgdHJhbnNmb3JtOiBnZXRCb3JkZXJcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckJvdHRvbSA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckJvdHRvbScsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJMZWZ0ID0gc3R5bGUoe1xuICBwcm9wOiAnYm9yZGVyTGVmdCcsXG4gIHRoZW1lS2V5OiAnYm9yZGVycycsXG4gIHRyYW5zZm9ybTogZ2V0Qm9yZGVyXG59KTtcbmV4cG9ydCBjb25zdCBib3JkZXJDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckNvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyVG9wQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJUb3BDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJpZ2h0Q29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJSaWdodENvbG9yJyxcbiAgdGhlbWVLZXk6ICdwYWxldHRlJ1xufSk7XG5leHBvcnQgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdib3JkZXJCb3R0b21Db2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlckxlZnRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JvcmRlckxlZnRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZSdcbn0pO1xuZXhwb3J0IGNvbnN0IGJvcmRlclJhZGl1cyA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmJvcmRlclJhZGl1cyAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmJvcmRlclJhZGl1cyAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc2hhcGUuYm9yZGVyUmFkaXVzJywgNCwgJ2JvcmRlclJhZGl1cycpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgYm9yZGVyUmFkaXVzOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuYm9yZGVyUmFkaXVzLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmJvcmRlclJhZGl1cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBib3JkZXJSYWRpdXM6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuYm9yZGVyUmFkaXVzLmZpbHRlclByb3BzID0gWydib3JkZXJSYWRpdXMnXTtcbmNvbnN0IGJvcmRlcnMgPSBjb21wb3NlKGJvcmRlciwgYm9yZGVyVG9wLCBib3JkZXJSaWdodCwgYm9yZGVyQm90dG9tLCBib3JkZXJMZWZ0LCBib3JkZXJDb2xvciwgYm9yZGVyVG9wQ29sb3IsIGJvcmRlclJpZ2h0Q29sb3IsIGJvcmRlckJvdHRvbUNvbG9yLCBib3JkZXJMZWZ0Q29sb3IsIGJvcmRlclJhZGl1cyk7XG5leHBvcnQgZGVmYXVsdCBib3JkZXJzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuXG4vLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cbmV4cG9ydCBjb25zdCB2YWx1ZXMgPSB7XG4gIHhzOiAwLFxuICAvLyBwaG9uZVxuICBzbTogNjAwLFxuICAvLyB0YWJsZXRcbiAgbWQ6IDkwMCxcbiAgLy8gc21hbGwgbGFwdG9wXG4gIGxnOiAxMjAwLFxuICAvLyBkZXNrdG9wXG4gIHhsOiAxNTM2IC8vIGxhcmdlIHNjcmVlblxufTtcblxuY29uc3QgZGVmYXVsdEJyZWFrcG9pbnRzID0ge1xuICAvLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4gIC8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbiAga2V5czogWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddLFxuICB1cDoga2V5ID0+IGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlc1trZXldfXB4KWBcbn07XG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKSB7XG4gIGNvbnN0IHRoZW1lID0gcHJvcHMudGhlbWUgfHwge307XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKChhY2MsIGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCB0aGVtZUJyZWFrcG9pbnRzID0gdGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wVmFsdWUpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50KSA9PiB7XG4gICAgICAvLyBrZXkgaXMgYnJlYWtwb2ludFxuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoZW1lQnJlYWtwb2ludHMudmFsdWVzIHx8IHZhbHVlcykuaW5kZXhPZihicmVha3BvaW50KSAhPT0gLTEpIHtcbiAgICAgICAgY29uc3QgbWVkaWFLZXkgPSB0aGVtZUJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpO1xuICAgICAgICBhY2NbbWVkaWFLZXldID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZVticmVha3BvaW50XSwgYnJlYWtwb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjc3NLZXkgPSBicmVha3BvaW50O1xuICAgICAgICBhY2NbY3NzS2V5XSA9IHByb3BWYWx1ZVtjc3NLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH1cbiAgY29uc3Qgb3V0cHV0ID0gc3R5bGVGcm9tUHJvcFZhbHVlKHByb3BWYWx1ZSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIGNvbnN0IG5ld1N0eWxlRnVuY3Rpb24gPSBwcm9wcyA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZSB8fCB7fTtcbiAgICBjb25zdCBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgY29uc3QgdGhlbWVCcmVha3BvaW50cyA9IHRoZW1lLmJyZWFrcG9pbnRzIHx8IGRlZmF1bHRCcmVha3BvaW50cztcbiAgICBjb25zdCBleHRlbmRlZCA9IHRoZW1lQnJlYWtwb2ludHMua2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgICBpZiAocHJvcHNba2V5XSkge1xuICAgICAgICBhY2MgPSBhY2MgfHwge307XG4gICAgICAgIGFjY1t0aGVtZUJyZWFrcG9pbnRzLnVwKGtleSldID0gc3R5bGVGdW5jdGlvbihfZXh0ZW5kcyh7XG4gICAgICAgICAgdGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBudWxsKTtcbiAgICByZXR1cm4gbWVyZ2UoYmFzZSwgZXh0ZW5kZWQpO1xuICB9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBfZXh0ZW5kcyh7fSwgc3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMsIHtcbiAgICB4czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzbTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBtZDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsZzogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB4bDogUHJvcFR5cGVzLm9iamVjdFxuICB9KSA6IHt9O1xuICBuZXdTdHlsZUZ1bmN0aW9uLmZpbHRlclByb3BzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsIC4uLnN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHNdO1xuICByZXR1cm4gbmV3U3R5bGVGdW5jdGlvbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QoYnJlYWtwb2ludHNJbnB1dCA9IHt9KSB7XG4gIHZhciBfYnJlYWtwb2ludHNJbnB1dCRrZXk7XG4gIGNvbnN0IGJyZWFrcG9pbnRzSW5PcmRlciA9IChfYnJlYWtwb2ludHNJbnB1dCRrZXkgPSBicmVha3BvaW50c0lucHV0LmtleXMpID09IG51bGwgPyB2b2lkIDAgOiBfYnJlYWtwb2ludHNJbnB1dCRrZXkucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgIGNvbnN0IGJyZWFrcG9pbnRTdHlsZUtleSA9IGJyZWFrcG9pbnRzSW5wdXQudXAoa2V5KTtcbiAgICBhY2NbYnJlYWtwb2ludFN0eWxlS2V5XSA9IHt9O1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIGJyZWFrcG9pbnRzSW5PcmRlciB8fCB7fTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50S2V5cywgc3R5bGUpIHtcbiAgcmV0dXJuIGJyZWFrcG9pbnRLZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50T3V0cHV0ID0gYWNjW2tleV07XG4gICAgY29uc3QgaXNCcmVha3BvaW50VW51c2VkID0gIWJyZWFrcG9pbnRPdXRwdXQgfHwgT2JqZWN0LmtleXMoYnJlYWtwb2ludE91dHB1dCkubGVuZ3RoID09PSAwO1xuICAgIGlmIChpc0JyZWFrcG9pbnRVbnVzZWQpIHtcbiAgICAgIGRlbGV0ZSBhY2Nba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgc3R5bGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyKGJyZWFrcG9pbnRzSW5wdXQsIC4uLnN0eWxlcykge1xuICBjb25zdCBlbXB0eUJyZWFrcG9pbnRzID0gY3JlYXRlRW1wdHlCcmVha3BvaW50T2JqZWN0KGJyZWFrcG9pbnRzSW5wdXQpO1xuICBjb25zdCBtZXJnZWRPdXRwdXQgPSBbZW1wdHlCcmVha3BvaW50cywgLi4uc3R5bGVzXS5yZWR1Y2UoKHByZXYsIG5leHQpID0+IGRlZXBtZXJnZShwcmV2LCBuZXh0KSwge30pO1xuICByZXR1cm4gcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMoT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyksIG1lcmdlZE91dHB1dCk7XG59XG5cbi8vIGNvbXB1dGUgYmFzZSBmb3IgcmVzcG9uc2l2ZSB2YWx1ZXM7IGUuZy4sXG4vLyBbMSwyLDNdID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuLy8ge3hzOiAxLCBzbTogMiwgbWQ6IDN9ID0+IHt4czogdHJ1ZSwgc206IHRydWUsIG1kOiB0cnVlfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVCcmVha3BvaW50c0Jhc2UoYnJlYWtwb2ludFZhbHVlcywgdGhlbWVCcmVha3BvaW50cykge1xuICAvLyBmaXhlZCB2YWx1ZVxuICBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IGJhc2UgPSB7fTtcbiAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXModGhlbWVCcmVha3BvaW50cyk7XG4gIGlmIChBcnJheS5pc0FycmF5KGJyZWFrcG9pbnRWYWx1ZXMpKSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goKGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICAgIGlmIChpIDwgYnJlYWtwb2ludFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgYmFzZVticmVha3BvaW50XSA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgYnJlYWtwb2ludHNLZXlzLmZvckVhY2goYnJlYWtwb2ludCA9PiB7XG4gICAgICBpZiAoYnJlYWtwb2ludFZhbHVlc1ticmVha3BvaW50XSAhPSBudWxsKSB7XG4gICAgICAgIGJhc2VbYnJlYWtwb2ludF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgdmFsdWVzOiBicmVha3BvaW50VmFsdWVzLFxuICBicmVha3BvaW50czogdGhlbWVCcmVha3BvaW50cyxcbiAgYmFzZTogY3VzdG9tQmFzZVxufSkge1xuICBjb25zdCBiYXNlID0gY3VzdG9tQmFzZSB8fCBjb21wdXRlQnJlYWtwb2ludHNCYXNlKGJyZWFrcG9pbnRWYWx1ZXMsIHRoZW1lQnJlYWtwb2ludHMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYmFzZSk7XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBicmVha3BvaW50VmFsdWVzO1xuICB9XG4gIGxldCBwcmV2aW91cztcbiAgcmV0dXJuIGtleXMucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQsIGkpID0+IHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShicmVha3BvaW50VmFsdWVzKSkge1xuICAgICAgYWNjW2JyZWFrcG9pbnRdID0gYnJlYWtwb2ludFZhbHVlc1tpXSAhPSBudWxsID8gYnJlYWtwb2ludFZhbHVlc1tpXSA6IGJyZWFrcG9pbnRWYWx1ZXNbcHJldmlvdXNdO1xuICAgICAgcHJldmlvdXMgPSBpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGJyZWFrcG9pbnRWYWx1ZXMgPT09ICdvYmplY3QnKSB7XG4gICAgICBhY2NbYnJlYWtwb2ludF0gPSBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdICE9IG51bGwgPyBicmVha3BvaW50VmFsdWVzW2JyZWFrcG9pbnRdIDogYnJlYWtwb2ludFZhbHVlc1twcmV2aW91c107XG4gICAgICBwcmV2aW91cyA9IGJyZWFrcG9pbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY1ticmVha3BvaW50XSA9IGJyZWFrcG9pbnRWYWx1ZXM7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbi8qKlxuICogUmV0dXJucyBhIG51bWJlciB3aG9zZSB2YWx1ZSBpcyBsaW1pdGVkIHRvIHRoZSBnaXZlbiByYW5nZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUsIG1pbiA9IDAsIG1heCA9IDEpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodmFsdWUgPCBtaW4gfHwgdmFsdWUgPiBtYXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICR7dmFsdWV9IGlzIG91dCBvZiByYW5nZSBbJHttaW59LCAke21heH1dLmApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobWluLCB2YWx1ZSksIG1heCk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSGV4IGNvbG9yLCBpLmUuICNubm4gb3IgI25ubm5ublxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgcmdiIGNvbG9yIHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gaGV4VG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBjb2xvci5zbGljZSgxKTtcbiAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGAuezEsJHtjb2xvci5sZW5ndGggPj0gNiA/IDIgOiAxfX1gLCAnZycpO1xuICBsZXQgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1swXS5sZW5ndGggPT09IDEpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKG4gPT4gbiArIG4pO1xuICB9XG4gIHJldHVybiBjb2xvcnMgPyBgcmdiJHtjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJyd9KCR7Y29sb3JzLm1hcCgobiwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyl9KWAgOiAnJztcbn1cbmZ1bmN0aW9uIGludFRvSGV4KGludCkge1xuICBjb25zdCBoZXggPSBpbnQudG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/IGAwJHtoZXh9YCA6IGhleDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSB0eXBlIGFuZCB2YWx1ZXMgb2YgYSBjb2xvci5cbiAqXG4gKiBOb3RlOiBEb2VzIG5vdCBzdXBwb3J0IHJnYiAlIHZhbHVlcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgLy8gSWRlbXBvdGVudFxuICBpZiAoY29sb3IudHlwZSkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHtcbiAgICByZXR1cm4gZGVjb21wb3NlQ29sb3IoaGV4VG9SZ2IoY29sb3IpKTtcbiAgfVxuICBjb25zdCBtYXJrZXIgPSBjb2xvci5pbmRleE9mKCcoJyk7XG4gIGNvbnN0IHR5cGUgPSBjb2xvci5zdWJzdHJpbmcoMCwgbWFya2VyKTtcbiAgaWYgKFsncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXS5pbmRleE9mKHR5cGUpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBVbnN1cHBvcnRlZCBcXGAke2NvbG9yfVxcYCBjb2xvci5cblRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDksIGNvbG9yKSk7XG4gIH1cbiAgbGV0IHZhbHVlcyA9IGNvbG9yLnN1YnN0cmluZyhtYXJrZXIgKyAxLCBjb2xvci5sZW5ndGggLSAxKTtcbiAgbGV0IGNvbG9yU3BhY2U7XG4gIGlmICh0eXBlID09PSAnY29sb3InKSB7XG4gICAgdmFsdWVzID0gdmFsdWVzLnNwbGl0KCcgJyk7XG4gICAgY29sb3JTcGFjZSA9IHZhbHVlcy5zaGlmdCgpO1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSA0ICYmIHZhbHVlc1szXS5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgdmFsdWVzWzNdID0gdmFsdWVzWzNdLnNsaWNlKDEpO1xuICAgIH1cbiAgICBpZiAoWydzcmdiJywgJ2Rpc3BsYXktcDMnLCAnYTk4LXJnYicsICdwcm9waG90by1yZ2InLCAncmVjLTIwMjAnXS5pbmRleE9mKGNvbG9yU3BhY2UpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGBNVUk6IHVuc3VwcG9ydGVkIFxcYCR7Y29sb3JTcGFjZX1cXGAgY29sb3Igc3BhY2UuXG5UaGUgZm9sbG93aW5nIGNvbG9yIHNwYWNlcyBhcmUgc3VwcG9ydGVkOiBzcmdiLCBkaXNwbGF5LXAzLCBhOTgtcmdiLCBwcm9waG90by1yZ2IsIHJlYy0yMDIwLmAgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDEwLCBjb2xvclNwYWNlKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlcyA9IHZhbHVlcy5zcGxpdCgnLCcpO1xuICB9XG4gIHZhbHVlcyA9IHZhbHVlcy5tYXAodmFsdWUgPT4gcGFyc2VGbG9hdCh2YWx1ZSkpO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdmFsdWVzLFxuICAgIGNvbG9yU3BhY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgY2hhbm5lbCBjcmVhdGVkIGZyb20gdGhlIGlucHV0IGNvbG9yLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNoYW5uZWwgZm9yIHRoZSBjb2xvciwgdGhhdCBjYW4gYmUgdXNlZCBpbiByZ2JhIG9yIGhzbGEgY29sb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBjb2xvckNoYW5uZWwgPSBjb2xvciA9PiB7XG4gIGNvbnN0IGRlY29tcG9zZWRDb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgcmV0dXJuIGRlY29tcG9zZWRDb2xvci52YWx1ZXMuc2xpY2UoMCwgMykubWFwKCh2YWwsIGlkeCkgPT4gZGVjb21wb3NlZENvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xICYmIGlkeCAhPT0gMCA/IGAke3ZhbH0lYCA6IHZhbCkuam9pbignICcpO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIG9iamVjdCB3aXRoIHR5cGUgYW5kIHZhbHVlcyB0byBhIHN0cmluZy5cbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2xvciAtIERlY29tcG9zZWQgY29sb3JcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvci50eXBlIC0gT25lIG9mOiAncmdiJywgJ3JnYmEnLCAnaHNsJywgJ2hzbGEnLCAnY29sb3InXG4gKiBAcGFyYW0ge2FycmF5fSBjb2xvci52YWx1ZXMgLSBbbixuLG5dIG9yIFtuLG4sbixuXVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICBjb25zdCB7XG4gICAgdHlwZSxcbiAgICBjb2xvclNwYWNlXG4gIH0gPSBjb2xvcjtcbiAgbGV0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBpZiAodHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICAvLyBPbmx5IGNvbnZlcnQgdGhlIGZpcnN0IDMgdmFsdWVzIHRvIGludCAoaS5lLiBub3QgYWxwaGEpXG4gICAgdmFsdWVzID0gdmFsdWVzLm1hcCgobiwgaSkgPT4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuKTtcbiAgfSBlbHNlIGlmICh0eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIHZhbHVlc1sxXSA9IGAke3ZhbHVlc1sxXX0lYDtcbiAgICB2YWx1ZXNbMl0gPSBgJHt2YWx1ZXNbMl19JWA7XG4gIH1cbiAgaWYgKHR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICB2YWx1ZXMgPSBgJHtjb2xvclNwYWNlfSAke3ZhbHVlcy5qb2luKCcgJyl9YDtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZXMgPSBgJHt2YWx1ZXMuam9pbignLCAnKX1gO1xuICB9XG4gIHJldHVybiBgJHt0eXBlfSgke3ZhbHVlc30pYDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gQ1NTIHJnYiBmb3JtYXQgdG8gQ1NTIGhleCBmb3JtYXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJnYlRvSGV4KGNvbG9yKSB7XG4gIC8vIElkZW1wb3RlbnRcbiAgaWYgKGNvbG9yLmluZGV4T2YoJyMnKSA9PT0gMCkge1xuICAgIHJldHVybiBjb2xvcjtcbiAgfVxuICBjb25zdCB7XG4gICAgdmFsdWVzXG4gIH0gPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHJldHVybiBgIyR7dmFsdWVzLm1hcCgobiwgaSkgPT4gaW50VG9IZXgoaSA9PT0gMyA/IE1hdGgucm91bmQoMjU1ICogbikgOiBuKSkuam9pbignJyl9YDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIGNvbG9yIGZyb20gaHNsIGZvcm1hdCB0byByZ2IgZm9ybWF0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gSFNMIGNvbG9yIHZhbHVlc1xuICogQHJldHVybnMge3N0cmluZ30gcmdiIGNvbG9yIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHNsVG9SZ2IoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGNvbnN0IHtcbiAgICB2YWx1ZXNcbiAgfSA9IGNvbG9yO1xuICBjb25zdCBoID0gdmFsdWVzWzBdO1xuICBjb25zdCBzID0gdmFsdWVzWzFdIC8gMTAwO1xuICBjb25zdCBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICBjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICBsZXQgdHlwZSA9ICdyZ2InO1xuICBjb25zdCByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG4gIGlmIChjb2xvci50eXBlID09PSAnaHNsYScpIHtcbiAgICB0eXBlICs9ICdhJztcbiAgICByZ2IucHVzaCh2YWx1ZXNbM10pO1xuICB9XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcih7XG4gICAgdHlwZSxcbiAgICB2YWx1ZXM6IHJnYlxuICB9KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgcmVsYXRpdmUgYnJpZ2h0bmVzcyBvZiB0aGUgY29sb3IgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIGxldCByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyB8fCBjb2xvci50eXBlID09PSAnaHNsYScgPyBkZWNvbXBvc2VDb2xvcihoc2xUb1JnYihjb2xvcikpLnZhbHVlcyA6IGNvbG9yLnZhbHVlcztcbiAgcmdiID0gcmdiLm1hcCh2YWwgPT4ge1xuICAgIGlmIChjb2xvci50eXBlICE9PSAnY29sb3InKSB7XG4gICAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbCA8PSAwLjAzOTI4ID8gdmFsIC8gMTIuOTIgOiAoKHZhbCArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQ7XG4gIH0pO1xuXG4gIC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG4gIHJldHVybiBOdW1iZXIoKDAuMjEyNiAqIHJnYlswXSArIDAuNzE1MiAqIHJnYlsxXSArIDAuMDcyMiAqIHJnYlsyXSkudG9GaXhlZCgzKSk7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY29udHJhc3QgcmF0aW8gYmV0d2VlbiB0d28gY29sb3JzLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29udHJhc3RSYXRpbyhmb3JlZ3JvdW5kLCBiYWNrZ3JvdW5kKSB7XG4gIGNvbnN0IGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIGNvbnN0IGx1bUIgPSBnZXRMdW1pbmFuY2UoYmFja2dyb3VuZCk7XG4gIHJldHVybiAoTWF0aC5tYXgobHVtQSwgbHVtQikgKyAwLjA1KSAvIChNYXRoLm1pbihsdW1BLCBsdW1CKSArIDAuMDUpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB2YWx1ZSB0byBzZXQgdGhlIGFscGhhIGNoYW5uZWwgdG8gaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxwaGEoY29sb3IsIHZhbHVlKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YWx1ZSA9IGNsYW1wKHZhbHVlKTtcbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdyZ2InIHx8IGNvbG9yLnR5cGUgPT09ICdoc2wnKSB7XG4gICAgY29sb3IudHlwZSArPSAnYSc7XG4gIH1cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdjb2xvcicpIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSBgLyR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICBjb2xvci52YWx1ZXNbM10gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuXG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudCAtIG11bHRpcGxpZXIgaW4gdGhlIHJhbmdlIDAgLSAxXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG4gIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ2hzbCcpICE9PSAtMSkge1xuICAgIGNvbG9yLnZhbHVlc1syXSAqPSAxIC0gY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEgfHwgY29sb3IudHlwZS5pbmRleE9mKCdjb2xvcicpICE9PSAtMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuXG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLCBjb2xvcigpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICs9ICgxMDAgLSBjb2xvci52YWx1ZXNbMl0pICogY29lZmZpY2llbnQ7XG4gIH0gZWxzZSBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdyZ2InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgyNTUgLSBjb2xvci52YWx1ZXNbaV0pICogY29lZmZpY2llbnQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignY29sb3InKSAhPT0gLTEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkgKz0gMSkge1xuICAgICAgY29sb3IudmFsdWVzW2ldICs9ICgxIC0gY29sb3IudmFsdWVzW2ldKSAqIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufVxuXG4vKipcbiAqIERhcmtlbiBvciBsaWdodGVuIGEgY29sb3IsIGRlcGVuZGluZyBvbiBpdHMgbHVtaW5hbmNlLlxuICogTGlnaHQgY29sb3JzIGFyZSBkYXJrZW5lZCwgZGFyayBjb2xvcnMgYXJlIGxpZ2h0ZW5lZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKCksIGNvbG9yKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXBoYXNpemUoY29sb3IsIGNvZWZmaWNpZW50ID0gMC4xNSkge1xuICByZXR1cm4gZ2V0THVtaW5hbmNlKGNvbG9yKSA+IDAuNSA/IGRhcmtlbihjb2xvciwgY29lZmZpY2llbnQpIDogbGlnaHRlbihjb2xvciwgY29lZmZpY2llbnQpO1xufSIsImltcG9ydCBtZXJnZSBmcm9tICcuL21lcmdlJztcbmZ1bmN0aW9uIGNvbXBvc2UoLi4uc3R5bGVzKSB7XG4gIGNvbnN0IGhhbmRsZXJzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4ge1xuICAgIHN0eWxlLmZpbHRlclByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBhY2NbcHJvcF0gPSBzdHlsZTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKChhY2MsIHByb3ApID0+IHtcbiAgICAgIGlmIChoYW5kbGVyc1twcm9wXSkge1xuICAgICAgICByZXR1cm4gbWVyZ2UoYWNjLCBoYW5kbGVyc1twcm9wXShwcm9wcykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gIH07XG4gIGZuLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzdHlsZXMucmVkdWNlKChhY2MsIHN0eWxlKSA9PiBPYmplY3QuYXNzaWduKGFjYywgc3R5bGUucHJvcFR5cGVzKSwge30pIDoge307XG4gIGZuLmZpbHRlclByb3BzID0gc3R5bGVzLnJlZHVjZSgoYWNjLCBzdHlsZSkgPT4gYWNjLmNvbmNhdChzdHlsZS5maWx0ZXJQcm9wcyksIFtdKTtcbiAgcmV0dXJuIGZuO1xufVxuZXhwb3J0IGRlZmF1bHQgY29tcG9zZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY2xhc3NOYW1lXCIsIFwiY29tcG9uZW50XCJdO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BtdWkvc3R5bGVkLWVuZ2luZSc7XG5pbXBvcnQgZGVmYXVsdFN0eWxlRnVuY3Rpb25TeCwgeyBleHRlbmRTeFByb3AgfSBmcm9tICcuL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQm94KG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lLFxuICAgIGRlZmF1bHRDbGFzc05hbWUgPSAnTXVpQm94LXJvb3QnLFxuICAgIGdlbmVyYXRlQ2xhc3NOYW1lLFxuICAgIHN0eWxlRnVuY3Rpb25TeCA9IGRlZmF1bHRTdHlsZUZ1bmN0aW9uU3hcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IEJveFJvb3QgPSBzdHlsZWQoJ2RpdicsIHtcbiAgICBzaG91bGRGb3J3YXJkUHJvcDogcHJvcCA9PiBwcm9wICE9PSAndGhlbWUnICYmIHByb3AgIT09ICdzeCcgJiYgcHJvcCAhPT0gJ2FzJ1xuICB9KShzdHlsZUZ1bmN0aW9uU3gpO1xuICBjb25zdCBCb3ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCb3goaW5Qcm9wcywgcmVmKSB7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICAgIGNvbnN0IF9leHRlbmRTeFByb3AgPSBleHRlbmRTeFByb3AoaW5Qcm9wcyksXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdidcbiAgICAgIH0gPSBfZXh0ZW5kU3hQcm9wLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfZXh0ZW5kU3hQcm9wLCBfZXhjbHVkZWQpO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChCb3hSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgcmVmOiByZWYsXG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3NOYW1lLCBnZW5lcmF0ZUNsYXNzTmFtZSA/IGdlbmVyYXRlQ2xhc3NOYW1lKGRlZmF1bHRDbGFzc05hbWUpIDogZGVmYXVsdENsYXNzTmFtZSksXG4gICAgICB0aGVtZTogdGhlbWVcbiAgICB9LCBvdGhlcikpO1xuICB9KTtcbiAgcmV0dXJuIEJveDtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcInZhcmlhbnRcIl07XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIGlzRW1wdHkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAwO1xufVxuXG4vKipcbiAqIEdlbmVyYXRlcyBzdHJpbmcgY2xhc3NLZXkgYmFzZWQgb24gdGhlIHByb3BlcnRpZXMgcHJvdmlkZWQuIEl0IHN0YXJ0cyB3aXRoIHRoZVxuICogdmFyaWFudCBpZiBkZWZpbmVkLCBhbmQgdGhlbiBpdCBhcHBlbmRzIGFsbCBvdGhlciBwcm9wZXJ0aWVzIGluIGFscGhhYmV0aWNhbCBvcmRlci5cbiAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wcyAtIHRoZSBwcm9wZXJ0aWVzIGZvciB3aGljaCB0aGUgY2xhc3NLZXkgc2hvdWxkIGJlIGNyZWF0ZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BzVG9DbGFzc0tleShwcm9wcykge1xuICBjb25zdCB7XG4gICAgICB2YXJpYW50XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGxldCBjbGFzc0tleSA9IHZhcmlhbnQgfHwgJyc7XG4gIE9iamVjdC5rZXlzKG90aGVyKS5zb3J0KCkuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgPT09ICdjb2xvcicpIHtcbiAgICAgIGNsYXNzS2V5ICs9IGlzRW1wdHkoY2xhc3NLZXkpID8gcHJvcHNba2V5XSA6IGNhcGl0YWxpemUocHJvcHNba2V5XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzS2V5ICs9IGAke2lzRW1wdHkoY2xhc3NLZXkpID8ga2V5IDogY2FwaXRhbGl6ZShrZXkpfSR7Y2FwaXRhbGl6ZShwcm9wc1trZXldLnRvU3RyaW5nKCkpfWA7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsYXNzS2V5O1xufSIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJuYW1lXCIsIFwic2xvdFwiLCBcInNraXBWYXJpYW50c1Jlc29sdmVyXCIsIFwic2tpcFN4XCIsIFwib3ZlcnJpZGVzUmVzb2x2ZXJcIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJ0aGVtZVwiXSxcbiAgX2V4Y2x1ZGVkMyA9IFtcInRoZW1lXCJdO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmltcG9ydCBzdHlsZWRFbmdpbmVTdHlsZWQsIHsgaW50ZXJuYWxfcHJvY2Vzc1N0eWxlcyBhcyBwcm9jZXNzU3R5bGVzIH0gZnJvbSAnQG11aS9zdHlsZWQtZW5naW5lJztcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi9jcmVhdGVUaGVtZSc7XG5pbXBvcnQgcHJvcHNUb0NsYXNzS2V5IGZyb20gJy4vcHJvcHNUb0NsYXNzS2V5JztcbmltcG9ydCBkZWZhdWx0U3R5bGVGdW5jdGlvblN4IGZyb20gJy4vc3R5bGVGdW5jdGlvblN4JztcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Vtb3Rpb24tanMvZW1vdGlvbi9ibG9iLzI2ZGVkNjEwOWZjZDhjYTk4NzVjYzJjZTQ1NjRmZWU2NzhhM2YzYzUvcGFja2FnZXMvc3R5bGVkL3NyYy91dGlscy5qcyNMNDBcbmZ1bmN0aW9uIGlzU3RyaW5nVGFnKHRhZykge1xuICByZXR1cm4gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZycgJiZcbiAgLy8gOTYgaXMgb25lIGxlc3MgdGhhbiB0aGUgY2hhciBjb2RlXG4gIC8vIGZvciBcImFcIiBzbyB0aGlzIGlzIGNoZWNraW5nIHRoYXRcbiAgLy8gaXQncyBhIGxvd2VyY2FzZSBjaGFyYWN0ZXJcbiAgdGFnLmNoYXJDb2RlQXQoMCkgPiA5Njtcbn1cbmNvbnN0IGdldFN0eWxlT3ZlcnJpZGVzID0gKG5hbWUsIHRoZW1lKSA9PiB7XG4gIGlmICh0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS5zdHlsZU92ZXJyaWRlcykge1xuICAgIHJldHVybiB0aGVtZS5jb21wb25lbnRzW25hbWVdLnN0eWxlT3ZlcnJpZGVzO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbnN0IGdldFZhcmlhbnRTdHlsZXMgPSAobmFtZSwgdGhlbWUpID0+IHtcbiAgbGV0IHZhcmlhbnRzID0gW107XG4gIGlmICh0aGVtZSAmJiB0aGVtZS5jb21wb25lbnRzICYmIHRoZW1lLmNvbXBvbmVudHNbbmFtZV0gJiYgdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cykge1xuICAgIHZhcmlhbnRzID0gdGhlbWUuY29tcG9uZW50c1tuYW1lXS52YXJpYW50cztcbiAgfVxuICBjb25zdCB2YXJpYW50c1N0eWxlcyA9IHt9O1xuICB2YXJpYW50cy5mb3JFYWNoKGRlZmluaXRpb24gPT4ge1xuICAgIGNvbnN0IGtleSA9IHByb3BzVG9DbGFzc0tleShkZWZpbml0aW9uLnByb3BzKTtcbiAgICB2YXJpYW50c1N0eWxlc1trZXldID0gZGVmaW5pdGlvbi5zdHlsZTtcbiAgfSk7XG4gIHJldHVybiB2YXJpYW50c1N0eWxlcztcbn07XG5jb25zdCB2YXJpYW50c1Jlc29sdmVyID0gKHByb3BzLCBzdHlsZXMsIHRoZW1lLCBuYW1lKSA9PiB7XG4gIHZhciBfdGhlbWUkY29tcG9uZW50cywgX3RoZW1lJGNvbXBvbmVudHMkbmFtO1xuICBjb25zdCB7XG4gICAgb3duZXJTdGF0ZSA9IHt9XG4gIH0gPSBwcm9wcztcbiAgY29uc3QgdmFyaWFudHNTdHlsZXMgPSBbXTtcbiAgY29uc3QgdGhlbWVWYXJpYW50cyA9IHRoZW1lID09IG51bGwgPyB2b2lkIDAgOiAoX3RoZW1lJGNvbXBvbmVudHMgPSB0aGVtZS5jb21wb25lbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF90aGVtZSRjb21wb25lbnRzJG5hbSA9IF90aGVtZSRjb21wb25lbnRzW25hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoZW1lJGNvbXBvbmVudHMkbmFtLnZhcmlhbnRzO1xuICBpZiAodGhlbWVWYXJpYW50cykge1xuICAgIHRoZW1lVmFyaWFudHMuZm9yRWFjaCh0aGVtZVZhcmlhbnQgPT4ge1xuICAgICAgbGV0IGlzTWF0Y2ggPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXModGhlbWVWYXJpYW50LnByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmIChvd25lclN0YXRlW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldICYmIHByb3BzW2tleV0gIT09IHRoZW1lVmFyaWFudC5wcm9wc1trZXldKSB7XG4gICAgICAgICAgaXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChpc01hdGNoKSB7XG4gICAgICAgIHZhcmlhbnRzU3R5bGVzLnB1c2goc3R5bGVzW3Byb3BzVG9DbGFzc0tleSh0aGVtZVZhcmlhbnQucHJvcHMpXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHZhcmlhbnRzU3R5bGVzO1xufTtcblxuLy8gVXBkYXRlIC9zeXN0ZW0vc3R5bGVkLyNhcGkgaW4gY2FzZSBpZiB0aGlzIGNoYW5nZXNcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRGb3J3YXJkUHJvcChwcm9wKSB7XG4gIHJldHVybiBwcm9wICE9PSAnb3duZXJTdGF0ZScgJiYgcHJvcCAhPT0gJ3RoZW1lJyAmJiBwcm9wICE9PSAnc3gnICYmIHByb3AgIT09ICdhcyc7XG59XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmNvbnN0IGxvd2VyY2FzZUZpcnN0TGV0dGVyID0gc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTdHlsZWQoaW5wdXQgPSB7fSkge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdFRoZW1lID0gc3lzdGVtRGVmYXVsdFRoZW1lLFxuICAgIHJvb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHNsb3RTaG91bGRGb3J3YXJkUHJvcCA9IHNob3VsZEZvcndhcmRQcm9wLFxuICAgIHN0eWxlRnVuY3Rpb25TeCA9IGRlZmF1bHRTdHlsZUZ1bmN0aW9uU3hcbiAgfSA9IGlucHV0O1xuICBjb25zdCBzeXN0ZW1TeCA9IHByb3BzID0+IHtcbiAgICBjb25zdCB0aGVtZSA9IGlzRW1wdHkocHJvcHMudGhlbWUpID8gZGVmYXVsdFRoZW1lIDogcHJvcHMudGhlbWU7XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeChfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIHRoZW1lXG4gICAgfSkpO1xuICB9O1xuICBzeXN0ZW1TeC5fX211aV9zeXN0ZW1TeCA9IHRydWU7XG4gIHJldHVybiAodGFnLCBpbnB1dE9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIC8vIEZpbHRlciBvdXQgdGhlIGBzeGAgc3R5bGUgZnVuY3Rpb24gZnJvbSB0aGUgcHJldmlvdXMgc3R5bGVkIGNvbXBvbmVudCB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IHN0eWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBvc2l0ZSBjb21wb25lbnRzLlxuICAgIHByb2Nlc3NTdHlsZXModGFnLCBzdHlsZXMgPT4gc3R5bGVzLmZpbHRlcihzdHlsZSA9PiAhKHN0eWxlICE9IG51bGwgJiYgc3R5bGUuX19tdWlfc3lzdGVtU3gpKSk7XG4gICAgY29uc3Qge1xuICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxuICAgICAgICBzbG90OiBjb21wb25lbnRTbG90LFxuICAgICAgICBza2lwVmFyaWFudHNSZXNvbHZlcjogaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlcixcbiAgICAgICAgc2tpcFN4OiBpbnB1dFNraXBTeCxcbiAgICAgICAgb3ZlcnJpZGVzUmVzb2x2ZXJcbiAgICAgIH0gPSBpbnB1dE9wdGlvbnMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoaW5wdXRPcHRpb25zLCBfZXhjbHVkZWQpO1xuXG4gICAgLy8gaWYgc2tpcFZhcmlhbnRzUmVzb2x2ZXIgb3B0aW9uIGlzIGRlZmluZWQsIHRha2UgdGhlIHZhbHVlLCBvdGhlcndpc2UsIHRydWUgZm9yIHJvb3QgYW5kIGZhbHNlIGZvciBvdGhlciBzbG90cy5cbiAgICBjb25zdCBza2lwVmFyaWFudHNSZXNvbHZlciA9IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgIT09IHVuZGVmaW5lZCA/IGlucHV0U2tpcFZhcmlhbnRzUmVzb2x2ZXIgOiBjb21wb25lbnRTbG90ICYmIGNvbXBvbmVudFNsb3QgIT09ICdSb290JyB8fCBmYWxzZTtcbiAgICBjb25zdCBza2lwU3ggPSBpbnB1dFNraXBTeCB8fCBmYWxzZTtcbiAgICBsZXQgbGFiZWw7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChjb21wb25lbnROYW1lKSB7XG4gICAgICAgIGxhYmVsID0gYCR7Y29tcG9uZW50TmFtZX0tJHtsb3dlcmNhc2VGaXJzdExldHRlcihjb21wb25lbnRTbG90IHx8ICdSb290Jyl9YDtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2hvdWxkRm9yd2FyZFByb3A7XG4gICAgaWYgKGNvbXBvbmVudFNsb3QgPT09ICdSb290Jykge1xuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSByb290U2hvdWxkRm9yd2FyZFByb3A7XG4gICAgfSBlbHNlIGlmIChjb21wb25lbnRTbG90KSB7XG4gICAgICAvLyBhbnkgb3RoZXIgc2xvdCBzcGVjaWZpZWRcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wT3B0aW9uID0gc2xvdFNob3VsZEZvcndhcmRQcm9wO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdUYWcodGFnKSkge1xuICAgICAgLy8gZm9yIHN0cmluZyAoaHRtbCkgdGFnLCBwcmVzZXJ2ZSB0aGUgYmVoYXZpb3IgaW4gZW1vdGlvbiAmIHN0eWxlZC1jb21wb25lbnRzLlxuICAgICAgc2hvdWxkRm9yd2FyZFByb3BPcHRpb24gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGNvbnN0IGRlZmF1bHRTdHlsZWRSZXNvbHZlciA9IHN0eWxlZEVuZ2luZVN0eWxlZCh0YWcsIF9leHRlbmRzKHtcbiAgICAgIHNob3VsZEZvcndhcmRQcm9wOiBzaG91bGRGb3J3YXJkUHJvcE9wdGlvbixcbiAgICAgIGxhYmVsXG4gICAgfSwgb3B0aW9ucykpO1xuICAgIGNvbnN0IG11aVN0eWxlZFJlc29sdmVyID0gKHN0eWxlQXJnLCAuLi5leHByZXNzaW9ucykgPT4ge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lID0gZXhwcmVzc2lvbnMgPyBleHByZXNzaW9ucy5tYXAoc3R5bGVzQXJnID0+IHtcbiAgICAgICAgLy8gT24gdGhlIHNlcnZlciBFbW90aW9uIGRvZXNuJ3QgdXNlIFJlYWN0LmZvcndhcmRSZWYgZm9yIGNyZWF0aW5nIGNvbXBvbmVudHMsIHNvIHRoZSBjcmVhdGVkXG4gICAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyB3aGljaCBhcmUgYmFzaWNhbGx5IGNvbXBvbmVudHMgdXNlZCBhcyBhIHNlbGVjdG9ycy5cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHlsZXNBcmcgPT09ICdmdW5jdGlvbicgJiYgc3R5bGVzQXJnLl9fZW1vdGlvbl9yZWFsICE9PSBzdHlsZXNBcmcgPyBfcmVmID0+IHtcbiAgICAgICAgICBsZXQge1xuICAgICAgICAgICAgICB0aGVtZTogdGhlbWVJbnB1dFxuICAgICAgICAgICAgfSA9IF9yZWYsXG4gICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIF9leGNsdWRlZDIpO1xuICAgICAgICAgIHJldHVybiBzdHlsZXNBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfSA6IHN0eWxlc0FyZztcbiAgICAgIH0pIDogW107XG4gICAgICBsZXQgdHJhbnNmb3JtZWRTdHlsZUFyZyA9IHN0eWxlQXJnO1xuICAgICAgaWYgKGNvbXBvbmVudE5hbWUgJiYgb3ZlcnJpZGVzUmVzb2x2ZXIpIHtcbiAgICAgICAgZXhwcmVzc2lvbnNXaXRoRGVmYXVsdFRoZW1lLnB1c2gocHJvcHMgPT4ge1xuICAgICAgICAgIGNvbnN0IHRoZW1lID0gaXNFbXB0eShwcm9wcy50aGVtZSkgPyBkZWZhdWx0VGhlbWUgOiBwcm9wcy50aGVtZTtcbiAgICAgICAgICBjb25zdCBzdHlsZU92ZXJyaWRlcyA9IGdldFN0eWxlT3ZlcnJpZGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKTtcbiAgICAgICAgICBpZiAoc3R5bGVPdmVycmlkZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkU3R5bGVPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHN0eWxlT3ZlcnJpZGVzKS5mb3JFYWNoKChbc2xvdEtleSwgc2xvdFN0eWxlXSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlZFN0eWxlT3ZlcnJpZGVzW3Nsb3RLZXldID0gdHlwZW9mIHNsb3RTdHlsZSA9PT0gJ2Z1bmN0aW9uJyA/IHNsb3RTdHlsZShfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9KSkgOiBzbG90U3R5bGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBvdmVycmlkZXNSZXNvbHZlcihwcm9wcywgcmVzb2x2ZWRTdHlsZU92ZXJyaWRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wb25lbnROYW1lICYmICFza2lwVmFyaWFudHNSZXNvbHZlcikge1xuICAgICAgICBleHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUucHVzaChwcm9wcyA9PiB7XG4gICAgICAgICAgY29uc3QgdGhlbWUgPSBpc0VtcHR5KHByb3BzLnRoZW1lKSA/IGRlZmF1bHRUaGVtZSA6IHByb3BzLnRoZW1lO1xuICAgICAgICAgIHJldHVybiB2YXJpYW50c1Jlc29sdmVyKHByb3BzLCBnZXRWYXJpYW50U3R5bGVzKGNvbXBvbmVudE5hbWUsIHRoZW1lKSwgdGhlbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICghc2tpcFN4KSB7XG4gICAgICAgIGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5wdXNoKHN5c3RlbVN4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG51bU9mQ3VzdG9tRm5zQXBwbGllZCA9IGV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZS5sZW5ndGggLSBleHByZXNzaW9ucy5sZW5ndGg7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZUFyZykgJiYgbnVtT2ZDdXN0b21GbnNBcHBsaWVkID4gMCkge1xuICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBuZXcgQXJyYXkobnVtT2ZDdXN0b21GbnNBcHBsaWVkKS5maWxsKCcnKTtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgYXJyYXksIHRoYW4gd2UgbmVlZCB0byBhZGQgcGxhY2Vob2xkZXJzIGluIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIG92ZXJyaWRlcywgdmFyaWFudHMgYW5kIHRoZSBzeCBzdHlsZXMuXG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcgPSBbLi4uc3R5bGVBcmcsIC4uLnBsYWNlaG9sZGVyc107XG4gICAgICAgIHRyYW5zZm9ybWVkU3R5bGVBcmcucmF3ID0gWy4uLnN0eWxlQXJnLnJhdywgLi4ucGxhY2Vob2xkZXJzXTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlQXJnID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAvLyBPbiB0aGUgc2VydmVyIEVtb3Rpb24gZG9lc24ndCB1c2UgUmVhY3QuZm9yd2FyZFJlZiBmb3IgY3JlYXRpbmcgY29tcG9uZW50cywgc28gdGhlIGNyZWF0ZWRcbiAgICAgIC8vIGNvbXBvbmVudCBzdGF5cyBhcyBhIGZ1bmN0aW9uLiBUaGlzIGNvbmRpdGlvbiBtYWtlcyBzdXJlIHRoYXQgd2UgZG8gbm90IGludGVycG9sYXRlIGZ1bmN0aW9uc1xuICAgICAgLy8gd2hpY2ggYXJlIGJhc2ljYWxseSBjb21wb25lbnRzIHVzZWQgYXMgYSBzZWxlY3RvcnMuXG4gICAgICBzdHlsZUFyZy5fX2Vtb3Rpb25fcmVhbCAhPT0gc3R5bGVBcmcpIHtcbiAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgZnVuY3Rpb24sIHdlIG5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IHRoZW1lLlxuICAgICAgICB0cmFuc2Zvcm1lZFN0eWxlQXJnID0gX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZUlucHV0XG4gICAgICAgICAgICB9ID0gX3JlZjIsXG4gICAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBfZXhjbHVkZWQzKTtcbiAgICAgICAgICByZXR1cm4gc3R5bGVBcmcoX2V4dGVuZHMoe1xuICAgICAgICAgICAgdGhlbWU6IGlzRW1wdHkodGhlbWVJbnB1dCkgPyBkZWZhdWx0VGhlbWUgOiB0aGVtZUlucHV0XG4gICAgICAgICAgfSwgb3RoZXIpKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IGRlZmF1bHRTdHlsZWRSZXNvbHZlcih0cmFuc2Zvcm1lZFN0eWxlQXJnLCAuLi5leHByZXNzaW9uc1dpdGhEZWZhdWx0VGhlbWUpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbGV0IGRpc3BsYXlOYW1lO1xuICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYCR7Y29tcG9uZW50TmFtZX0ke2NvbXBvbmVudFNsb3QgfHwgJyd9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzcGxheU5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRpc3BsYXlOYW1lID0gYFN0eWxlZCgke2dldERpc3BsYXlOYW1lKHRhZyl9KWA7XG4gICAgICAgIH1cbiAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ29tcG9uZW50O1xuICAgIH07XG4gICAgaWYgKGRlZmF1bHRTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnKSB7XG4gICAgICBtdWlTdHlsZWRSZXNvbHZlci53aXRoQ29uZmlnID0gZGVmYXVsdFN0eWxlZFJlc29sdmVyLndpdGhDb25maWc7XG4gICAgfVxuICAgIHJldHVybiBtdWlTdHlsZWRSZXNvbHZlcjtcbiAgfTtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl07XG4vLyBTb3J0ZWQgQVNDIGJ5IHNpemUuIFRoYXQncyBpbXBvcnRhbnQuXG4vLyBJdCBjYW4ndCBiZSBjb25maWd1cmVkIGFzIGl0J3MgdXNlZCBzdGF0aWNhbGx5IGZvciBwcm9wVHlwZXMuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludEtleXMgPSBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ107XG5jb25zdCBzb3J0QnJlYWtwb2ludHNWYWx1ZXMgPSB2YWx1ZXMgPT4ge1xuICBjb25zdCBicmVha3BvaW50c0FzQXJyYXkgPSBPYmplY3Qua2V5cyh2YWx1ZXMpLm1hcChrZXkgPT4gKHtcbiAgICBrZXksXG4gICAgdmFsOiB2YWx1ZXNba2V5XVxuICB9KSkgfHwgW107XG4gIC8vIFNvcnQgaW4gYXNjZW5kaW5nIG9yZGVyXG4gIGJyZWFrcG9pbnRzQXNBcnJheS5zb3J0KChicmVha3BvaW50MSwgYnJlYWtwb2ludDIpID0+IGJyZWFrcG9pbnQxLnZhbCAtIGJyZWFrcG9pbnQyLnZhbCk7XG4gIHJldHVybiBicmVha3BvaW50c0FzQXJyYXkucmVkdWNlKChhY2MsIG9iaikgPT4ge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYWNjLCB7XG4gICAgICBbb2JqLmtleV06IG9iai52YWxcbiAgICB9KTtcbiAgfSwge30pO1xufTtcblxuLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xuICBjb25zdCB7XG4gICAgICAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbiAgICAgIC8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtKS5cbiAgICAgIHZhbHVlcyA9IHtcbiAgICAgICAgeHM6IDAsXG4gICAgICAgIC8vIHBob25lXG4gICAgICAgIHNtOiA2MDAsXG4gICAgICAgIC8vIHRhYmxldFxuICAgICAgICBtZDogOTAwLFxuICAgICAgICAvLyBzbWFsbCBsYXB0b3BcbiAgICAgICAgbGc6IDEyMDAsXG4gICAgICAgIC8vIGRlc2t0b3BcbiAgICAgICAgeGw6IDE1MzYgLy8gbGFyZ2Ugc2NyZWVuXG4gICAgICB9LFxuXG4gICAgICB1bml0ID0gJ3B4JyxcbiAgICAgIHN0ZXAgPSA1XG4gICAgfSA9IGJyZWFrcG9pbnRzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoYnJlYWtwb2ludHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHNvcnRlZFZhbHVlcyA9IHNvcnRCcmVha3BvaW50c1ZhbHVlcyh2YWx1ZXMpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc29ydGVkVmFsdWVzKTtcbiAgZnVuY3Rpb24gdXAoa2V5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgdmFsdWVzW2tleV0gPT09ICdudW1iZXInID8gdmFsdWVzW2tleV0gOiBrZXk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3ZhbHVlfSR7dW5pdH0pYDtcbiAgfVxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIGNvbnN0IHZhbHVlID0gdHlwZW9mIHZhbHVlc1trZXldID09PSAnbnVtYmVyJyA/IHZhbHVlc1trZXldIDoga2V5O1xuICAgIHJldHVybiBgQG1lZGlhIChtYXgtd2lkdGg6JHt2YWx1ZSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIGNvbnN0IGVuZEluZGV4ID0ga2V5cy5pbmRleE9mKGVuZCk7XG4gICAgcmV0dXJuIGBAbWVkaWEgKG1pbi13aWR0aDoke3R5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydH0ke3VuaXR9KSBhbmQgYCArIGAobWF4LXdpZHRoOiR7KGVuZEluZGV4ICE9PSAtMSAmJiB0eXBlb2YgdmFsdWVzW2tleXNbZW5kSW5kZXhdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleF1dIDogZW5kKSAtIHN0ZXAgLyAxMDB9JHt1bml0fSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9ubHkoa2V5KSB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpICsgMSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSk7XG4gICAgfVxuICAgIHJldHVybiB1cChrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIG5vdChrZXkpIHtcbiAgICAvLyBoYW5kbGUgZmlyc3QgYW5kIGxhc3Qga2V5IHNlcGFyYXRlbHksIGZvciBiZXR0ZXIgcmVhZGFiaWxpdHlcbiAgICBjb25zdCBrZXlJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpO1xuICAgIGlmIChrZXlJbmRleCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHVwKGtleXNbMV0pO1xuICAgIH1cbiAgICBpZiAoa2V5SW5kZXggPT09IGtleXMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIGRvd24oa2V5c1trZXlJbmRleF0pO1xuICAgIH1cbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleXNba2V5cy5pbmRleE9mKGtleSkgKyAxXSkucmVwbGFjZSgnQG1lZGlhJywgJ0BtZWRpYSBub3QgYWxsIGFuZCcpO1xuICB9XG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5cyxcbiAgICB2YWx1ZXM6IHNvcnRlZFZhbHVlcyxcbiAgICB1cCxcbiAgICBkb3duLFxuICAgIGJldHdlZW4sXG4gICAgb25seSxcbiAgICBub3QsXG4gICAgdW5pdFxuICB9LCBvdGhlcik7XG59IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnLi4vc3BhY2luZyc7XG4vKiB0c2xpbnQ6ZW5hYmxlOnVuaWZpZWQtc2lnbmF0dXJlcyAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCA9IDgpIHtcbiAgLy8gQWxyZWFkeSB0cmFuc2Zvcm1lZC5cbiAgaWYgKHNwYWNpbmdJbnB1dC5tdWkpIHtcbiAgICByZXR1cm4gc3BhY2luZ0lucHV0O1xuICB9XG5cbiAgLy8gTWF0ZXJpYWwgRGVzaWduIGxheW91dHMgYXJlIHZpc3VhbGx5IGJhbGFuY2VkLiBNb3N0IG1lYXN1cmVtZW50cyBhbGlnbiB0byBhbiA4ZHAgZ3JpZCwgd2hpY2ggYWxpZ25zIGJvdGggc3BhY2luZyBhbmQgdGhlIG92ZXJhbGwgbGF5b3V0LlxuICAvLyBTbWFsbGVyIGNvbXBvbmVudHMsIHN1Y2ggYXMgaWNvbnMsIGNhbiBhbGlnbiB0byBhIDRkcCBncmlkLlxuICAvLyBodHRwczovL20yLm1hdGVyaWFsLmlvL2Rlc2lnbi9sYXlvdXQvdW5kZXJzdGFuZGluZy1sYXlvdXQuaHRtbFxuICBjb25zdCB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcbiAgY29uc3Qgc3BhY2luZyA9ICguLi5hcmdzSW5wdXQpID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCEoYXJnc0lucHV0Lmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgJHthcmdzSW5wdXQubGVuZ3RofWApO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhcmdzID0gYXJnc0lucHV0Lmxlbmd0aCA9PT0gMCA/IFsxXSA6IGFyZ3NJbnB1dDtcbiAgICByZXR1cm4gYXJncy5tYXAoYXJndW1lbnQgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0ID0gdHJhbnNmb3JtKGFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0eXBlb2Ygb3V0cHV0ID09PSAnbnVtYmVyJyA/IGAke291dHB1dH1weGAgOiBvdXRwdXQ7XG4gICAgfSkuam9pbignICcpO1xuICB9O1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJicmVha3BvaW50c1wiLCBcInBhbGV0dGVcIiwgXCJzcGFjaW5nXCIsIFwic2hhcGVcIl07XG5pbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBzaGFwZSBmcm9tICcuL3NoYXBlJztcbmltcG9ydCBjcmVhdGVTcGFjaW5nIGZyb20gJy4vY3JlYXRlU3BhY2luZyc7XG5mdW5jdGlvbiBjcmVhdGVUaGVtZShvcHRpb25zID0ge30sIC4uLmFyZ3MpIHtcbiAgY29uc3Qge1xuICAgICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzSW5wdXQgPSB7fSxcbiAgICAgIHBhbGV0dGU6IHBhbGV0dGVJbnB1dCA9IHt9LFxuICAgICAgc3BhY2luZzogc3BhY2luZ0lucHV0LFxuICAgICAgc2hhcGU6IHNoYXBlSW5wdXQgPSB7fVxuICAgIH0gPSBvcHRpb25zLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uob3B0aW9ucywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgY29uc3Qgc3BhY2luZyA9IGNyZWF0ZVNwYWNpbmcoc3BhY2luZ0lucHV0KTtcbiAgbGV0IG11aVRoZW1lID0gZGVlcG1lcmdlKHtcbiAgICBicmVha3BvaW50cyxcbiAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgIGNvbXBvbmVudHM6IHt9LFxuICAgIC8vIEluamVjdCBjb21wb25lbnQgZGVmaW5pdGlvbnMuXG4gICAgcGFsZXR0ZTogX2V4dGVuZHMoe1xuICAgICAgbW9kZTogJ2xpZ2h0J1xuICAgIH0sIHBhbGV0dGVJbnB1dCksXG4gICAgc3BhY2luZyxcbiAgICBzaGFwZTogX2V4dGVuZHMoe30sIHNoYXBlLCBzaGFwZUlucHV0KVxuICB9LCBvdGhlcik7XG4gIG11aVRoZW1lID0gYXJncy5yZWR1Y2UoKGFjYywgYXJndW1lbnQpID0+IGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KSwgbXVpVGhlbWUpO1xuICByZXR1cm4gbXVpVGhlbWU7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVUaGVtZTsiLCJjb25zdCBzaGFwZSA9IHtcbiAgYm9yZGVyUmFkaXVzOiA0XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hhcGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5VW5pdCwgZ2V0VmFsdWUgfSBmcm9tICcuL3NwYWNpbmcnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMgfSBmcm9tICcuL2JyZWFrcG9pbnRzJztcbmltcG9ydCByZXNwb25zaXZlUHJvcFR5cGUgZnJvbSAnLi9yZXNwb25zaXZlUHJvcFR5cGUnO1xuZXhwb3J0IGNvbnN0IGdhcCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLmdhcCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmdhcCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlVbml0KHByb3BzLnRoZW1lLCAnc3BhY2luZycsIDgsICdnYXAnKTtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4gKHtcbiAgICAgIGdhcDogZ2V0VmFsdWUodHJhbnNmb3JtZXIsIHByb3BWYWx1ZSlcbiAgICB9KTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLmdhcCwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5nYXAucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHtcbiAgZ2FwOiByZXNwb25zaXZlUHJvcFR5cGVcbn0gOiB7fTtcbmdhcC5maWx0ZXJQcm9wcyA9IFsnZ2FwJ107XG5leHBvcnQgY29uc3QgY29sdW1uR2FwID0gcHJvcHMgPT4ge1xuICBpZiAocHJvcHMuY29sdW1uR2FwICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuY29sdW1uR2FwICE9PSBudWxsKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVVuaXQocHJvcHMudGhlbWUsICdzcGFjaW5nJywgOCwgJ2NvbHVtbkdhcCcpO1xuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IHByb3BWYWx1ZSA9PiAoe1xuICAgICAgY29sdW1uR2FwOiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKVxuICAgIH0pO1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcHMuY29sdW1uR2FwLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbmNvbHVtbkdhcC5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICBjb2x1bW5HYXA6IHJlc3BvbnNpdmVQcm9wVHlwZVxufSA6IHt9O1xuY29sdW1uR2FwLmZpbHRlclByb3BzID0gWydjb2x1bW5HYXAnXTtcbmV4cG9ydCBjb25zdCByb3dHYXAgPSBwcm9wcyA9PiB7XG4gIGlmIChwcm9wcy5yb3dHYXAgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5yb3dHYXAgIT09IG51bGwpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5VW5pdChwcm9wcy50aGVtZSwgJ3NwYWNpbmcnLCA4LCAncm93R2FwJyk7XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlID0+ICh7XG4gICAgICByb3dHYXA6IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgfSk7XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wcy5yb3dHYXAsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xucm93R2FwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7XG4gIHJvd0dhcDogcmVzcG9uc2l2ZVByb3BUeXBlXG59IDoge307XG5yb3dHYXAuZmlsdGVyUHJvcHMgPSBbJ3Jvd0dhcCddO1xuZXhwb3J0IGNvbnN0IGdyaWRDb2x1bW4gPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQ29sdW1uJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFJvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2dyaWRSb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0Zsb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0Zsb3cnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b0NvbHVtbnMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b0NvbHVtbnMnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkQXV0b1Jvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkQXV0b1Jvd3MnXG59KTtcbmV4cG9ydCBjb25zdCBncmlkVGVtcGxhdGVDb2x1bW5zID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZFRlbXBsYXRlQ29sdW1ucydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRUZW1wbGF0ZVJvd3MgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVSb3dzJ1xufSk7XG5leHBvcnQgY29uc3QgZ3JpZFRlbXBsYXRlQXJlYXMgPSBzdHlsZSh7XG4gIHByb3A6ICdncmlkVGVtcGxhdGVBcmVhcydcbn0pO1xuZXhwb3J0IGNvbnN0IGdyaWRBcmVhID0gc3R5bGUoe1xuICBwcm9wOiAnZ3JpZEFyZWEnXG59KTtcbmNvbnN0IGdyaWQgPSBjb21wb3NlKGdhcCwgY29sdW1uR2FwLCByb3dHYXAsIGdyaWRDb2x1bW4sIGdyaWRSb3csIGdyaWRBdXRvRmxvdywgZ3JpZEF1dG9Db2x1bW5zLCBncmlkQXV0b1Jvd3MsIGdyaWRUZW1wbGF0ZUNvbHVtbnMsIGdyaWRUZW1wbGF0ZVJvd3MsIGdyaWRUZW1wbGF0ZUFyZWFzLCBncmlkQXJlYSk7XG5leHBvcnQgZGVmYXVsdCBncmlkOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZGlzcGxheVByaW50ID0gc3R5bGUoe1xuICBwcm9wOiAnZGlzcGxheVByaW50JyxcbiAgY3NzUHJvcGVydHk6IGZhbHNlLFxuICB0cmFuc2Zvcm06IHZhbHVlID0+ICh7XG4gICAgJ0BtZWRpYSBwcmludCc6IHtcbiAgICAgIGRpc3BsYXk6IHZhbHVlXG4gICAgfVxuICB9KVxufSk7XG5leHBvcnQgY29uc3QgZGlzcGxheVJhdyA9IHN0eWxlKHtcbiAgcHJvcDogJ2Rpc3BsYXknXG59KTtcbmV4cG9ydCBjb25zdCBvdmVyZmxvdyA9IHN0eWxlKHtcbiAgcHJvcDogJ292ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdGV4dE92ZXJmbG93ID0gc3R5bGUoe1xuICBwcm9wOiAndGV4dE92ZXJmbG93J1xufSk7XG5leHBvcnQgY29uc3QgdmlzaWJpbGl0eSA9IHN0eWxlKHtcbiAgcHJvcDogJ3Zpc2liaWxpdHknXG59KTtcbmV4cG9ydCBjb25zdCB3aGl0ZVNwYWNlID0gc3R5bGUoe1xuICBwcm9wOiAnd2hpdGVTcGFjZSdcbn0pO1xuZXhwb3J0IGRlZmF1bHQgY29tcG9zZShkaXNwbGF5UHJpbnQsIGRpc3BsYXlSYXcsIG92ZXJmbG93LCB0ZXh0T3ZlcmZsb3csIHZpc2liaWxpdHksIHdoaXRlU3BhY2UpOyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZmxleEJhc2lzID0gc3R5bGUoe1xuICBwcm9wOiAnZmxleEJhc2lzJ1xufSk7XG5leHBvcnQgY29uc3QgZmxleERpcmVjdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhEaXJlY3Rpb24nXG59KTtcbmV4cG9ydCBjb25zdCBmbGV4V3JhcCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZsZXhXcmFwJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUNvbnRlbnQgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5Q29udGVudCdcbn0pO1xuZXhwb3J0IGNvbnN0IGFsaWduSXRlbXMgPSBzdHlsZSh7XG4gIHByb3A6ICdhbGlnbkl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25Db250ZW50ID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25Db250ZW50J1xufSk7XG5leHBvcnQgY29uc3Qgb3JkZXIgPSBzdHlsZSh7XG4gIHByb3A6ICdvcmRlcidcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXggPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4J1xufSk7XG5leHBvcnQgY29uc3QgZmxleEdyb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4R3Jvdydcbn0pO1xuZXhwb3J0IGNvbnN0IGZsZXhTaHJpbmsgPSBzdHlsZSh7XG4gIHByb3A6ICdmbGV4U2hyaW5rJ1xufSk7XG5leHBvcnQgY29uc3QgYWxpZ25TZWxmID0gc3R5bGUoe1xuICBwcm9wOiAnYWxpZ25TZWxmJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeUl0ZW1zID0gc3R5bGUoe1xuICBwcm9wOiAnanVzdGlmeUl0ZW1zJ1xufSk7XG5leHBvcnQgY29uc3QganVzdGlmeVNlbGYgPSBzdHlsZSh7XG4gIHByb3A6ICdqdXN0aWZ5U2VsZidcbn0pO1xuY29uc3QgZmxleGJveCA9IGNvbXBvc2UoZmxleEJhc2lzLCBmbGV4RGlyZWN0aW9uLCBmbGV4V3JhcCwganVzdGlmeUNvbnRlbnQsIGFsaWduSXRlbXMsIGFsaWduQ29udGVudCwgb3JkZXIsIGZsZXgsIGZsZXhHcm93LCBmbGV4U2hyaW5rLCBhbGlnblNlbGYsIGp1c3RpZnlJdGVtcywganVzdGlmeVNlbGYpO1xuZXhwb3J0IGRlZmF1bHQgZmxleGJveDsiLCJpbXBvcnQgYm9yZGVycyBmcm9tICcuL2JvcmRlcnMnO1xuaW1wb3J0IGRpc3BsYXkgZnJvbSAnLi9kaXNwbGF5JztcbmltcG9ydCBmbGV4Ym94IGZyb20gJy4vZmxleGJveCc7XG5pbXBvcnQgZ3JpZCBmcm9tICcuL2Nzc0dyaWQnO1xuaW1wb3J0IHBvc2l0aW9ucyBmcm9tICcuL3Bvc2l0aW9ucyc7XG5pbXBvcnQgcGFsZXR0ZSBmcm9tICcuL3BhbGV0dGUnO1xuaW1wb3J0IHNoYWRvd3MgZnJvbSAnLi9zaGFkb3dzJztcbmltcG9ydCBzaXppbmcgZnJvbSAnLi9zaXppbmcnO1xuaW1wb3J0IHNwYWNpbmcgZnJvbSAnLi9zcGFjaW5nJztcbmltcG9ydCB0eXBvZ3JhcGh5IGZyb20gJy4vdHlwb2dyYXBoeSc7XG5jb25zdCBmaWx0ZXJQcm9wc01hcHBpbmcgPSB7XG4gIGJvcmRlcnM6IGJvcmRlcnMuZmlsdGVyUHJvcHMsXG4gIGRpc3BsYXk6IGRpc3BsYXkuZmlsdGVyUHJvcHMsXG4gIGZsZXhib3g6IGZsZXhib3guZmlsdGVyUHJvcHMsXG4gIGdyaWQ6IGdyaWQuZmlsdGVyUHJvcHMsXG4gIHBvc2l0aW9uczogcG9zaXRpb25zLmZpbHRlclByb3BzLFxuICBwYWxldHRlOiBwYWxldHRlLmZpbHRlclByb3BzLFxuICBzaGFkb3dzOiBzaGFkb3dzLmZpbHRlclByb3BzLFxuICBzaXppbmc6IHNpemluZy5maWx0ZXJQcm9wcyxcbiAgc3BhY2luZzogc3BhY2luZy5maWx0ZXJQcm9wcyxcbiAgdHlwb2dyYXBoeTogdHlwb2dyYXBoeS5maWx0ZXJQcm9wc1xufTtcbmV4cG9ydCBjb25zdCBzdHlsZUZ1bmN0aW9uTWFwcGluZyA9IHtcbiAgYm9yZGVycyxcbiAgZGlzcGxheSxcbiAgZmxleGJveCxcbiAgZ3JpZCxcbiAgcG9zaXRpb25zLFxuICBwYWxldHRlLFxuICBzaGFkb3dzLFxuICBzaXppbmcsXG4gIHNwYWNpbmcsXG4gIHR5cG9ncmFwaHlcbn07XG5leHBvcnQgY29uc3QgcHJvcFRvU3R5bGVGdW5jdGlvbiA9IE9iamVjdC5rZXlzKGZpbHRlclByb3BzTWFwcGluZykucmVkdWNlKChhY2MsIHN0eWxlRm5OYW1lKSA9PiB7XG4gIGZpbHRlclByb3BzTWFwcGluZ1tzdHlsZUZuTmFtZV0uZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgYWNjW3Byb3BOYW1lXSA9IHN0eWxlRnVuY3Rpb25NYXBwaW5nW3N0eWxlRm5OYW1lXTtcbiAgfSk7XG4gIHJldHVybiBhY2M7XG59LCB7fSk7XG5mdW5jdGlvbiBnZXRUaGVtZVZhbHVlKHByb3AsIHZhbHVlLCB0aGVtZSkge1xuICBjb25zdCBpbnB1dFByb3BzID0ge1xuICAgIFtwcm9wXTogdmFsdWUsXG4gICAgdGhlbWVcbiAgfTtcbiAgY29uc3Qgc3R5bGVGdW5jdGlvbiA9IHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF07XG4gIHJldHVybiBzdHlsZUZ1bmN0aW9uID8gc3R5bGVGdW5jdGlvbihpbnB1dFByb3BzKSA6IHtcbiAgICBbcHJvcF06IHZhbHVlXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBnZXRUaGVtZVZhbHVlOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBDYWNoZVByb3ZpZGVyIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcblxuLy8gcHJlcGVuZDogdHJ1ZSBtb3ZlcyBNVUkgc3R5bGVzIHRvIHRoZSB0b3Agb2YgdGhlIDxoZWFkPiBzbyB0aGV5J3JlIGxvYWRlZCBmaXJzdC5cbi8vIEl0IGFsbG93cyBkZXZlbG9wZXJzIHRvIGVhc2lseSBvdmVycmlkZSBNVUkgc3R5bGVzIHdpdGggb3RoZXIgc3R5bGluZyBzb2x1dGlvbnMsIGxpa2UgQ1NTIG1vZHVsZXMuXG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgY2FjaGUgPSBjcmVhdGVDYWNoZSh7XG4gIGtleTogJ2NzcycsXG4gIHByZXBlbmQ6IHRydWVcbn0pO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3R5bGVkRW5naW5lUHJvdmlkZXIocHJvcHMpIHtcbiAgY29uc3Qge1xuICAgIGluamVjdEZpcnN0LFxuICAgIGNoaWxkcmVuXG4gIH0gPSBwcm9wcztcbiAgcmV0dXJuIGluamVjdEZpcnN0ID8gLyojX19QVVJFX18qL19qc3goQ2FjaGVQcm92aWRlciwge1xuICAgIHZhbHVlOiBjYWNoZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSkgOiBjaGlsZHJlbjtcbn1cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0eWxlZEVuZ2luZVByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFlvdXIgY29tcG9uZW50IHRyZWUuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0LCB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBsYXN0IGluIHRoZSA8aGVhZD4gZWxlbWVudCBvZiB0aGUgcGFnZS5cbiAgICogQXMgYSByZXN1bHQsIHRoZXkgZ2FpbiBtb3JlIHNwZWNpZmljaXR5IHRoYW4gYW55IG90aGVyIHN0eWxlIHNoZWV0LlxuICAgKiBJZiB5b3Ugd2FudCB0byBvdmVycmlkZSBNVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7IiwiaW1wb3J0IHN0eWxlRnVuY3Rpb25TeCBmcm9tICcuLi9zdHlsZUZ1bmN0aW9uU3gnO1xuZnVuY3Rpb24gc3goc3R5bGVzKSB7XG4gIHJldHVybiAoe1xuICAgIHRoZW1lXG4gIH0pID0+IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgc3g6IHN0eWxlcyxcbiAgICB0aGVtZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IHN4OyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlQm94IGZyb20gJy4uL2NyZWF0ZUJveCc7XG5jb25zdCBCb3ggPSBjcmVhdGVCb3goKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJveC5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5lbGVtZW50VHlwZSxcbiAgLyoqXG4gICAqIFRoZSBzeXN0ZW0gcHJvcCB0aGF0IGFsbG93cyBkZWZpbmluZyBzeXN0ZW0gb3ZlcnJpZGVzIGFzIHdlbGwgYXMgYWRkaXRpb25hbCBDU1Mgc3R5bGVzLlxuICAgKi9cbiAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IEJveDsiLCJpbXBvcnQgY3JlYXRlU3R5bGVkIGZyb20gJy4vY3JlYXRlU3R5bGVkJztcbmNvbnN0IHN0eWxlZCA9IGNyZWF0ZVN0eWxlZCgpO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVkOyIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBjcmVhdGUgYW4gb2JqZWN0IGZyb20ga2V5cywgdmFsdWUgYW5kIHRoZW4gYXNzaWduIHRvIHRhcmdldFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiB0aGUgdGFyZ2V0IG9iamVjdCB0byBiZSBhc3NpZ25lZFxuICogQHBhcmFtIHtzdHJpbmdbXX0ga2V5c1xuICogQHBhcmFtIHtzdHJpbmcgfCBudW1iZXJ9IHZhbHVlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNvdXJjZSA9IHt9XG4gKiBhc3NpZ25OZXN0ZWRLZXlzKHNvdXJjZSwgWydwYWxldHRlJywgJ3ByaW1hcnknXSwgJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknKVxuICogY29uc29sZS5sb2coc291cmNlKSAvLyB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzb3VyY2UgPSB7IHBhbGV0dGU6IHsgcHJpbWFyeTogJ3ZhcigtLXBhbGV0dGUtcHJpbWFyeSknIH0gfVxuICogYXNzaWduTmVzdGVkS2V5cyhzb3VyY2UsIFsncGFsZXR0ZScsICdzZWNvbmRhcnknXSwgJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScpXG4gKiBjb25zb2xlLmxvZyhzb3VyY2UpIC8vIHsgcGFsZXR0ZTogeyBwcmltYXJ5OiAndmFyKC0tcGFsZXR0ZS1wcmltYXJ5KScsIHNlY29uZGFyeTogJ3ZhcigtLXBhbGV0dGUtc2Vjb25kYXJ5KScgfSB9XG4gKi9cbmV4cG9ydCBjb25zdCBhc3NpZ25OZXN0ZWRLZXlzID0gKG9iaiwga2V5cywgdmFsdWUsIGFycmF5S2V5cyA9IFtdKSA9PiB7XG4gIGxldCB0ZW1wID0gb2JqO1xuICBrZXlzLmZvckVhY2goKGssIGluZGV4KSA9PiB7XG4gICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRlbXApKSB7XG4gICAgICAgIHRlbXBbTnVtYmVyKGspXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgICB0ZW1wW2tdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0ZW1wICYmIHR5cGVvZiB0ZW1wID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCF0ZW1wW2tdKSB7XG4gICAgICAgIHRlbXBba10gPSBhcnJheUtleXMuaW5jbHVkZXMoaykgPyBbXSA6IHt9O1xuICAgICAgfVxuICAgICAgdGVtcCA9IHRlbXBba107XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogOiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayA6IGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gKiAgICAgICAgICAgICAgICAgICAtIHRoZSBkZWVwZXN0IGtleSBpbiBzb3VyY2Ugb2JqZWN0IGlzIHJlYWNoZWRcbiAqICAgICAgICAgICAgICAgICAgIC0gdGhlIHZhbHVlIG9mIHRoZSBkZWVwZXN0IGtleSBpcyBOT1QgYHVuZGVmaW5lZGAgfCBgbnVsbGBcbiAqXG4gKiBAZXhhbXBsZVxuICogd2Fsa09iamVjdERlZXAoeyBwYWxldHRlOiB7IHByaW1hcnk6IHsgbWFpbjogJyMwMDAwMDAnIH0gfSB9LCBjb25zb2xlLmxvZylcbiAqIC8vIFsncGFsZXR0ZScsICdwcmltYXJ5JywgJ21haW4nXSAnIzAwMDAwMCdcbiAqL1xuZXhwb3J0IGNvbnN0IHdhbGtPYmplY3REZWVwID0gKG9iaiwgY2FsbGJhY2ssIHNob3VsZFNraXBQYXRocykgPT4ge1xuICBmdW5jdGlvbiByZWN1cnNlKG9iamVjdCwgcGFyZW50S2V5cyA9IFtdLCBhcnJheUtleXMgPSBbXSkge1xuICAgIE9iamVjdC5lbnRyaWVzKG9iamVjdCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBpZiAoIXNob3VsZFNraXBQYXRocyB8fCBzaG91bGRTa2lwUGF0aHMgJiYgIXNob3VsZFNraXBQYXRocyhbLi4ucGFyZW50S2V5cywga2V5XSkpIHtcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVjdXJzZSh2YWx1ZSwgWy4uLnBhcmVudEtleXMsIGtleV0sIEFycmF5LmlzQXJyYXkodmFsdWUpID8gWy4uLmFycmF5S2V5cywga2V5XSA6IGFycmF5S2V5cyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKFsuLi5wYXJlbnRLZXlzLCBrZXldLCB2YWx1ZSwgYXJyYXlLZXlzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZWN1cnNlKG9iaik7XG59O1xuY29uc3QgZ2V0Q3NzVmFsdWUgPSAoa2V5cywgdmFsdWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoWydsaW5lSGVpZ2h0JywgJ2ZvbnRXZWlnaHQnLCAnb3BhY2l0eScsICd6SW5kZXgnXS5zb21lKHByb3AgPT4ga2V5cy5pbmNsdWRlcyhwcm9wKSkpIHtcbiAgICAgIC8vIENTUyBwcm9wZXJ0eSB0aGF0IGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBsYXN0S2V5ID0ga2V5c1trZXlzLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0S2V5LnRvTG93ZXJDYXNlKCkuaW5kZXhPZignb3BhY2l0eScpID49IDApIHtcbiAgICAgIC8vIG9wYWNpdHkgdmFsdWVzIGFyZSB1bml0bGVzc1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYCR7dmFsdWV9cHhgO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogYSBmdW5jdGlvbiB0aGF0IHBhcnNlIHRoZW1lIGFuZCByZXR1cm4geyBjc3MsIHZhcnMgfVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGVtZVxuICogQHBhcmFtIHt7XG4gKiAgcHJlZml4Pzogc3RyaW5nLFxuICogIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyPzogKG9iamVjdFBhdGhLZXlzOiBBcnJheTxzdHJpbmc+LCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiBib29sZWFuXG4gKiB9fSBvcHRpb25zLlxuICogIGBwcmVmaXhgOiBUaGUgcHJlZml4IG9mIHRoZSBnZW5lcmF0ZWQgQ1NTIHZhcmlhYmxlcy4gVGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjaGFuZ2UgdGhlIHZhbHVlLlxuICpcbiAqIEByZXR1cm5zIHt7IGNzczogT2JqZWN0LCB2YXJzOiBPYmplY3QgfX0gYGNzc2AgaXMgdGhlIHN0eWxlc2hlZXQsIGB2YXJzYCBpcyBhbiBvYmplY3QgdG8gZ2V0IGNzcyB2YXJpYWJsZSAoc2FtZSBzdHJ1Y3R1cmUgYXMgdGhlbWUpLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB7IGNzcywgdmFycyB9ID0gcGFyc2VyKHtcbiAqICAgZm9udFNpemU6IDEyLFxuICogICBsaW5lSGVpZ2h0OiAxLjIsXG4gKiAgIHBhbGV0dGU6IHsgcHJpbWFyeTogeyA1MDA6ICd2YXIoLS1jb2xvciknIH0gfVxuICogfSwgeyBwcmVmaXg6ICdmb28nIH0pXG4gKlxuICogY29uc29sZS5sb2coY3NzKSAvLyB7ICctLWZvby1mb250U2l6ZSc6ICcxMnB4JywgJy0tZm9vLWxpbmVIZWlnaHQnOiAxLjIsICctLWZvby1wYWxldHRlLXByaW1hcnktNTAwJzogJ3ZhcigtLWNvbG9yKScgfVxuICogY29uc29sZS5sb2codmFycykgLy8geyBmb250U2l6ZTogJ3ZhcigtLWZvby1mb250U2l6ZSknLCBsaW5lSGVpZ2h0OiAndmFyKC0tZm9vLWxpbmVIZWlnaHQpJywgcGFsZXR0ZTogeyBwcmltYXJ5OiB7IDUwMDogJ3ZhcigtLWZvby1wYWxldHRlLXByaW1hcnktNTAwKScgfSB9IH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3NzVmFyc1BhcnNlcih0aGVtZSwgb3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJlZml4LFxuICAgIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjc3MgPSB7fTtcbiAgY29uc3QgdmFycyA9IHt9O1xuICB3YWxrT2JqZWN0RGVlcCh0aGVtZSwgKGtleXMsIHZhbHVlLCBhcnJheUtleXMpID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoIXNob3VsZFNraXBHZW5lcmF0aW5nVmFyIHx8ICFzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcihrZXlzLCB2YWx1ZSkpIHtcbiAgICAgICAgLy8gb25seSBjcmVhdGUgY3NzICYgdmFyIGlmIGBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcmAgcmV0dXJuIGZhbHNlXG4gICAgICAgIGNvbnN0IGNzc1ZhciA9IGAtLSR7cHJlZml4ID8gYCR7cHJlZml4fS1gIDogJyd9JHtrZXlzLmpvaW4oJy0nKX1gO1xuICAgICAgICBPYmplY3QuYXNzaWduKGNzcywge1xuICAgICAgICAgIFtjc3NWYXJdOiBnZXRDc3NWYWx1ZShrZXlzLCB2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgICAgIGFzc2lnbk5lc3RlZEtleXModmFycywga2V5cywgYHZhcigke2Nzc1Zhcn0pYCwgYXJyYXlLZXlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGtleXMgPT4ga2V5c1swXSA9PT0gJ3ZhcnMnIC8vIHNraXAgJ3ZhcnMvKicgcGF0aHNcbiAgKTtcblxuICByZXR1cm4ge1xuICAgIGNzcyxcbiAgICB2YXJzXG4gIH07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX01PREVfU1RPUkFHRV9LRVkgPSAnbW9kZSc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVkgPSAnY29sb3Itc2NoZW1lJztcbmV4cG9ydCBjb25zdCBERUZBVUxUX0FUVFJJQlVURSA9ICdkYXRhLWNvbG9yLXNjaGVtZSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgZGVmYXVsdE1vZGUgPSAnbGlnaHQnLFxuICAgIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lID0gJ2xpZ2h0JyxcbiAgICBkZWZhdWx0RGFya0NvbG9yU2NoZW1lID0gJ2RhcmsnLFxuICAgIG1vZGVTdG9yYWdlS2V5ID0gREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLFxuICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleSA9IERFRkFVTFRfQ09MT1JfU0NIRU1FX1NUT1JBR0VfS0VZLFxuICAgIGF0dHJpYnV0ZSA9IERFRkFVTFRfQVRUUklCVVRFLFxuICAgIGNvbG9yU2NoZW1lTm9kZSA9ICdkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQnXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJzY3JpcHRcIiwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kYW5nZXJcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDoge1xuICAgICAgX19odG1sOiBgKGZ1bmN0aW9uKCkgeyB0cnkge1xuICAgICAgICB2YXIgbW9kZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCcke21vZGVTdG9yYWdlS2V5fScpIHx8ICcke2RlZmF1bHRNb2RlfSc7XG4gICAgICAgIHZhciBjc3NDb2xvclNjaGVtZSA9IG1vZGU7XG4gICAgICAgIHZhciBjb2xvclNjaGVtZSA9ICcnO1xuICAgICAgICBpZiAobW9kZSA9PT0gJ3N5c3RlbScpIHtcbiAgICAgICAgICAvLyBoYW5kbGUgc3lzdGVtIG1vZGVcbiAgICAgICAgICB2YXIgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICAgICAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgICAgICAgIGNzc0NvbG9yU2NoZW1lID0gJ2RhcmsnO1xuICAgICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmsnKSB8fCAnJHtkZWZhdWx0RGFya0NvbG9yU2NoZW1lfSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzc0NvbG9yU2NoZW1lID0gJ2xpZ2h0JztcbiAgICAgICAgICAgIGNvbG9yU2NoZW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJyR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodCcpIHx8ICcke2RlZmF1bHRMaWdodENvbG9yU2NoZW1lfSc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RlID09PSAnbGlnaHQnKSB7XG4gICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWxpZ2h0JykgfHwgJyR7ZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWV9JztcbiAgICAgICAgfVxuICAgICAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgY29sb3JTY2hlbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmsnKSB8fCAnJHtkZWZhdWx0RGFya0NvbG9yU2NoZW1lfSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbG9yU2NoZW1lKSB7XG4gICAgICAgICAgJHtjb2xvclNjaGVtZU5vZGV9LnNldEF0dHJpYnV0ZSgnJHthdHRyaWJ1dGV9JywgY29sb3JTY2hlbWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7fSB9KSgpO2BcbiAgICB9XG4gIH0sIFwibXVpLWNvbG9yLXNjaGVtZS1pbml0XCIpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZLCBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSB9IGZyb20gJy4vZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0JztcbmV4cG9ydCBmdW5jdGlvbiBnZXRTeXN0ZW1Nb2RlKG1vZGUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIG1vZGUgPT09ICdzeXN0ZW0nKSB7XG4gICAgY29uc3QgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoJyhwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyayknKTtcbiAgICBpZiAobXFsLm1hdGNoZXMpIHtcbiAgICAgIHJldHVybiAnZGFyayc7XG4gICAgfVxuICAgIHJldHVybiAnbGlnaHQnO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBwcm9jZXNzU3RhdGUoc3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmIChzdGF0ZS5tb2RlID09PSAnbGlnaHQnIHx8IHN0YXRlLm1vZGUgPT09ICdzeXN0ZW0nICYmIHN0YXRlLnN5c3RlbU1vZGUgPT09ICdsaWdodCcpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJ2xpZ2h0Jyk7XG4gIH1cbiAgaWYgKHN0YXRlLm1vZGUgPT09ICdkYXJrJyB8fCBzdGF0ZS5tb2RlID09PSAnc3lzdGVtJyAmJiBzdGF0ZS5zeXN0ZW1Nb2RlID09PSAnZGFyaycpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJ2RhcmsnKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbG9yU2NoZW1lKHN0YXRlKSB7XG4gIHJldHVybiBwcm9jZXNzU3RhdGUoc3RhdGUsIG1vZGUgPT4ge1xuICAgIGlmIChtb2RlID09PSAnbGlnaHQnKSB7XG4gICAgICByZXR1cm4gc3RhdGUubGlnaHRDb2xvclNjaGVtZTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICdkYXJrJykge1xuICAgICAgcmV0dXJuIHN0YXRlLmRhcmtDb2xvclNjaGVtZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSk7XG59XG5mdW5jdGlvbiBpbml0aWFsaXplVmFsdWUoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBsZXQgdmFsdWU7XG4gIHRyeSB7XG4gICAgdmFsdWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpIHx8IHVuZGVmaW5lZDtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAvLyB0aGUgZmlyc3QgdGltZSB0aGF0IHVzZXIgZW50ZXJzIHRoZSBzaXRlLlxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBkZWZhdWx0VmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFVuc3VwcG9ydGVkXG4gIH1cbiAgcmV0dXJuIHZhbHVlIHx8IGRlZmF1bHRWYWx1ZTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUN1cnJlbnRDb2xvclNjaGVtZShvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBkZWZhdWx0TW9kZSA9ICdsaWdodCcsXG4gICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsXG4gICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICBzdXBwb3J0ZWRDb2xvclNjaGVtZXMgPSBbXSxcbiAgICBtb2RlU3RvcmFnZUtleSA9IERFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSxcbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXkgPSBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSxcbiAgICBzdG9yYWdlV2luZG93ID0gdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiB3aW5kb3dcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGpvaW5lZENvbG9yU2NoZW1lcyA9IHN1cHBvcnRlZENvbG9yU2NoZW1lcy5qb2luKCcsJyk7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxNb2RlID0gaW5pdGlhbGl6ZVZhbHVlKG1vZGVTdG9yYWdlS2V5LCBkZWZhdWx0TW9kZSk7XG4gICAgY29uc3QgbGlnaHRDb2xvclNjaGVtZSA9IGluaXRpYWxpemVWYWx1ZShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWxpZ2h0YCwgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUpO1xuICAgIGNvbnN0IGRhcmtDb2xvclNjaGVtZSA9IGluaXRpYWxpemVWYWx1ZShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmtgLCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lKTtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZTogaW5pdGlhbE1vZGUsXG4gICAgICBzeXN0ZW1Nb2RlOiBnZXRTeXN0ZW1Nb2RlKGluaXRpYWxNb2RlKSxcbiAgICAgIGxpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBkYXJrQ29sb3JTY2hlbWVcbiAgICB9O1xuICB9KTtcbiAgY29uc3QgY29sb3JTY2hlbWUgPSBnZXRDb2xvclNjaGVtZShzdGF0ZSk7XG4gIGNvbnN0IHNldE1vZGUgPSBSZWFjdC51c2VDYWxsYmFjayhtb2RlID0+IHtcbiAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgaWYgKG1vZGUgPT09IGN1cnJlbnRTdGF0ZS5tb2RlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgbW9kZSBkb2VzIG5vdCBjaGFuZ2VcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld01vZGUgPSAhbW9kZSA/IGRlZmF1bHRNb2RlIDogbW9kZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG1vZGVTdG9yYWdlS2V5LCBuZXdNb2RlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgIH1cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY3VycmVudFN0YXRlLCB7XG4gICAgICAgIG1vZGU6IG5ld01vZGUsXG4gICAgICAgIHN5c3RlbU1vZGU6IGdldFN5c3RlbU1vZGUobmV3TW9kZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbbW9kZVN0b3JhZ2VLZXksIGRlZmF1bHRNb2RlXSk7XG4gIGNvbnN0IHNldENvbG9yU2NoZW1lID0gUmVhY3QudXNlQ2FsbGJhY2sodmFsdWUgPT4ge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lKTtcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LWRhcmtgLCBkZWZhdWx0RGFya0NvbG9yU2NoZW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjdXJyZW50U3RhdGUsIHtcbiAgICAgICAgICBsaWdodENvbG9yU2NoZW1lOiBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSxcbiAgICAgICAgICBkYXJrQ29sb3JTY2hlbWU6IGRlZmF1bHREYXJrQ29sb3JTY2hlbWVcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh2YWx1ZSAmJiAham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBcXGAke3ZhbHVlfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRTdGF0ZShjdXJyZW50U3RhdGUgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgICAgcHJvY2Vzc1N0YXRlKGN1cnJlbnRTdGF0ZSwgbW9kZSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShgJHtjb2xvclNjaGVtZVN0b3JhZ2VLZXl9LSR7bW9kZX1gLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIC8vIFVuc3VwcG9ydGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2xpZ2h0Jykge1xuICAgICAgICAgICAgICBuZXdTdGF0ZS5saWdodENvbG9yU2NoZW1lID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2RhcmsnKSB7XG4gICAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0YXRlKGN1cnJlbnRTdGF0ZSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gX2V4dGVuZHMoe30sIGN1cnJlbnRTdGF0ZSk7XG4gICAgICAgIGNvbnN0IG5ld0xpZ2h0Q29sb3JTY2hlbWUgPSB2YWx1ZS5saWdodCA9PT0gbnVsbCA/IGRlZmF1bHRMaWdodENvbG9yU2NoZW1lIDogdmFsdWUubGlnaHQ7XG4gICAgICAgIGNvbnN0IG5ld0RhcmtDb2xvclNjaGVtZSA9IHZhbHVlLmRhcmsgPT09IG51bGwgPyBkZWZhdWx0RGFya0NvbG9yU2NoZW1lIDogdmFsdWUuZGFyaztcbiAgICAgICAgaWYgKG5ld0xpZ2h0Q29sb3JTY2hlbWUpIHtcbiAgICAgICAgICBpZiAoIWpvaW5lZENvbG9yU2NoZW1lcy5pbmNsdWRlcyhuZXdMaWdodENvbG9yU2NoZW1lKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgXFxgJHtuZXdMaWdodENvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmxpZ2h0Q29sb3JTY2hlbWUgPSBuZXdMaWdodENvbG9yU2NoZW1lO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7Y29sb3JTY2hlbWVTdG9yYWdlS2V5fS1saWdodGAsIG5ld0xpZ2h0Q29sb3JTY2hlbWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gVW5zdXBwb3J0ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld0RhcmtDb2xvclNjaGVtZSkge1xuICAgICAgICAgIGlmICgham9pbmVkQ29sb3JTY2hlbWVzLmluY2x1ZGVzKG5ld0RhcmtDb2xvclNjaGVtZSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFxcYCR7bmV3RGFya0NvbG9yU2NoZW1lfVxcYCBkb2VzIG5vdCBleGlzdCBpbiBcXGB0aGVtZS5jb2xvclNjaGVtZXNcXGAuYCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1N0YXRlLmRhcmtDb2xvclNjaGVtZSA9IG5ld0RhcmtDb2xvclNjaGVtZTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke2NvbG9yU2NoZW1lU3RvcmFnZUtleX0tZGFya2AsIG5ld0RhcmtDb2xvclNjaGVtZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyBVbnN1cHBvcnRlZFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RhdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtqb2luZWRDb2xvclNjaGVtZXMsIGNvbG9yU2NoZW1lU3RvcmFnZUtleSwgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsIGRlZmF1bHREYXJrQ29sb3JTY2hlbWVdKTtcbiAgY29uc3QgaGFuZGxlTWVkaWFRdWVyeSA9IFJlYWN0LnVzZUNhbGxiYWNrKGUgPT4ge1xuICAgIGlmIChzdGF0ZS5tb2RlID09PSAnc3lzdGVtJykge1xuICAgICAgc2V0U3RhdGUoY3VycmVudFN0YXRlID0+IF9leHRlbmRzKHt9LCBjdXJyZW50U3RhdGUsIHtcbiAgICAgICAgc3lzdGVtTW9kZTogZSAhPSBudWxsICYmIGUubWF0Y2hlcyA/ICdkYXJrJyA6ICdsaWdodCdcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIFtzdGF0ZS5tb2RlXSk7XG5cbiAgLy8gUmVmIGhhY2sgdG8gYXZvaWQgYWRkaW5nIGhhbmRsZU1lZGlhUXVlcnkgYXMgYSBkZXBcbiAgY29uc3QgbWVkaWFMaXN0ZW5lciA9IFJlYWN0LnVzZVJlZihoYW5kbGVNZWRpYVF1ZXJ5KTtcbiAgbWVkaWFMaXN0ZW5lci5jdXJyZW50ID0gaGFuZGxlTWVkaWFRdWVyeTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gKC4uLmFyZ3MpID0+IG1lZGlhTGlzdGVuZXIuY3VycmVudCguLi5hcmdzKTtcblxuICAgIC8vIEFsd2F5cyBsaXN0ZW4gdG8gU3lzdGVtIHByZWZlcmVuY2VcbiAgICBjb25zdCBtZWRpYSA9IHdpbmRvdy5tYXRjaE1lZGlhKCcocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspJyk7XG5cbiAgICAvLyBJbnRlbnRpb25hbGx5IHVzZSBkZXByZWNhdGVkIGxpc3RlbmVyIG1ldGhvZHMgdG8gc3VwcG9ydCBpT1MgJiBvbGQgYnJvd3NlcnNcbiAgICBtZWRpYS5hZGRMaXN0ZW5lcihoYW5kbGVyKTtcbiAgICBoYW5kbGVyKG1lZGlhKTtcbiAgICByZXR1cm4gKCkgPT4gbWVkaWEucmVtb3ZlTGlzdGVuZXIoaGFuZGxlcik7XG4gIH0sIFtdKTtcblxuICAvLyBIYW5kbGUgd2hlbiBsb2NhbFN0b3JhZ2UgaGFzIGNoYW5nZWRcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVTdG9yYWdlID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBldmVudC5uZXdWYWx1ZTtcbiAgICAgIGlmICh0eXBlb2YgZXZlbnQua2V5ID09PSAnc3RyaW5nJyAmJiBldmVudC5rZXkuc3RhcnRzV2l0aChjb2xvclNjaGVtZVN0b3JhZ2VLZXkpICYmICghdmFsdWUgfHwgam9pbmVkQ29sb3JTY2hlbWVzLm1hdGNoKHZhbHVlKSkpIHtcbiAgICAgICAgLy8gSWYgdGhlIGtleSBpcyBkZWxldGVkLCB2YWx1ZSB3aWxsIGJlIG51bGwgdGhlbiByZXNldCBjb2xvciBzY2hlbWUgdG8gdGhlIGRlZmF1bHQgb25lLlxuICAgICAgICBpZiAoZXZlbnQua2V5LmVuZHNXaXRoKCdsaWdodCcpKSB7XG4gICAgICAgICAgc2V0Q29sb3JTY2hlbWUoe1xuICAgICAgICAgICAgbGlnaHQ6IHZhbHVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmtleS5lbmRzV2l0aCgnZGFyaycpKSB7XG4gICAgICAgICAgc2V0Q29sb3JTY2hlbWUoe1xuICAgICAgICAgICAgZGFyazogdmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gbW9kZVN0b3JhZ2VLZXkgJiYgKCF2YWx1ZSB8fCBbJ2xpZ2h0JywgJ2RhcmsnLCAnc3lzdGVtJ10uaW5jbHVkZXModmFsdWUpKSkge1xuICAgICAgICBzZXRNb2RlKHZhbHVlIHx8IGRlZmF1bHRNb2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChzdG9yYWdlV2luZG93KSB7XG4gICAgICAvLyBGb3Igc3luY2luZyBjb2xvci1zY2hlbWUgY2hhbmdlcyBiZXR3ZWVuIGlmcmFtZXNcbiAgICAgIHN0b3JhZ2VXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2UpO1xuICAgICAgcmV0dXJuICgpID0+IHN0b3JhZ2VXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3RvcmFnZScsIGhhbmRsZVN0b3JhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbc2V0Q29sb3JTY2hlbWUsIHNldE1vZGUsIG1vZGVTdG9yYWdlS2V5LCBjb2xvclNjaGVtZVN0b3JhZ2VLZXksIGpvaW5lZENvbG9yU2NoZW1lcywgZGVmYXVsdE1vZGUsIHN0b3JhZ2VXaW5kb3ddKTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgIGNvbG9yU2NoZW1lLFxuICAgIHNldE1vZGUsXG4gICAgc2V0Q29sb3JTY2hlbWVcbiAgfSk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtdWkvdXRpbHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNvbG9yU2NoZW1lc1wiLCBcImNvbXBvbmVudHNcIiwgXCJjc3NWYXJQcmVmaXhcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZXMgfSBmcm9tICdAbXVpL3N0eWxlZC1lbmdpbmUnO1xuaW1wb3J0IGNzc1ZhcnNQYXJzZXIgZnJvbSAnLi9jc3NWYXJzUGFyc2VyJztcbmltcG9ydCBUaGVtZVByb3ZpZGVyIGZyb20gJy4uL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IHN5c3RlbUdldEluaXRDb2xvclNjaGVtZVNjcmlwdCwgeyBERUZBVUxUX0FUVFJJQlVURSwgREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVksIERFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSB9IGZyb20gJy4vZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0JztcbmltcG9ydCB1c2VDdXJyZW50Q29sb3JTY2hlbWUgZnJvbSAnLi91c2VDdXJyZW50Q29sb3JTY2hlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmV4cG9ydCBjb25zdCBESVNBQkxFX0NTU19UUkFOU0lUSU9OID0gJyp7LXdlYmtpdC10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50Oy1tb3otdHJhbnNpdGlvbjpub25lIWltcG9ydGFudDstby10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50Oy1tcy10cmFuc2l0aW9uOm5vbmUhaW1wb3J0YW50O3RyYW5zaXRpb246bm9uZSFpbXBvcnRhbnR9JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNzc1ZhcnNQcm92aWRlcihvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICB0aGVtZTogZGVmYXVsdFRoZW1lID0ge30sXG4gICAgYXR0cmlidXRlOiBkZWZhdWx0QXR0cmlidXRlID0gREVGQVVMVF9BVFRSSUJVVEUsXG4gICAgbW9kZVN0b3JhZ2VLZXk6IGRlZmF1bHRNb2RlU3RvcmFnZUtleSA9IERFRkFVTFRfTU9ERV9TVE9SQUdFX0tFWSxcbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXk6IGRlZmF1bHRDb2xvclNjaGVtZVN0b3JhZ2VLZXkgPSBERUZBVUxUX0NPTE9SX1NDSEVNRV9TVE9SQUdFX0tFWSxcbiAgICBkZWZhdWx0TW9kZTogZGVzaWduU3lzdGVtTW9kZSA9ICdsaWdodCcsXG4gICAgZGVmYXVsdENvbG9yU2NoZW1lOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSxcbiAgICBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlOiBkZXNpZ25TeXN0ZW1UcmFuc2l0aW9uT25DaGFuZ2UgPSBmYWxzZSxcbiAgICBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhcjogZGVzaWduU3lzdGVtU2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIsXG4gICAgcmVzb2x2ZVRoZW1lLFxuICAgIGV4Y2x1ZGVWYXJpYWJsZXNGcm9tUm9vdFxuICB9ID0gb3B0aW9ucztcbiAgaWYgKCFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzIHx8IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ3N0cmluZycgJiYgIWRlZmF1bHRUaGVtZS5jb2xvclNjaGVtZXNbZGVzaWduU3lzdGVtQ29sb3JTY2hlbWVdIHx8IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ29iamVjdCcgJiYgIWRlZmF1bHRUaGVtZS5jb2xvclNjaGVtZXNbZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT0gbnVsbCA/IHZvaWQgMCA6IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lLmxpZ2h0XSB8fCB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdvYmplY3QnICYmICFkZWZhdWx0VGhlbWUuY29sb3JTY2hlbWVzW2Rlc2lnblN5c3RlbUNvbG9yU2NoZW1lID09IG51bGwgPyB2b2lkIDAgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5kYXJrXSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYE1VSTogXFxgJHtkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZX1cXGAgZG9lcyBub3QgZXhpc3QgaW4gXFxgdGhlbWUuY29sb3JTY2hlbWVzXFxgLmApO1xuICB9XG4gIGNvbnN0IENvbG9yU2NoZW1lQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG4gIGNvbnN0IHVzZUNvbG9yU2NoZW1lID0gKCkgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChDb2xvclNjaGVtZUNvbnRleHQpO1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBgTVVJOiBcXGB1c2VDb2xvclNjaGVtZVxcYCBtdXN0IGJlIGNhbGxlZCB1bmRlciA8Q3NzVmFyc1Byb3ZpZGVyIC8+YCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMTkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBmdW5jdGlvbiBDc3NWYXJzUHJvdmlkZXIoe1xuICAgIGNoaWxkcmVuLFxuICAgIHRoZW1lOiB0aGVtZVByb3AgPSBkZWZhdWx0VGhlbWUsXG4gICAgbW9kZVN0b3JhZ2VLZXkgPSBkZWZhdWx0TW9kZVN0b3JhZ2VLZXksXG4gICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5ID0gZGVmYXVsdENvbG9yU2NoZW1lU3RvcmFnZUtleSxcbiAgICBhdHRyaWJ1dGUgPSBkZWZhdWx0QXR0cmlidXRlLFxuICAgIGRlZmF1bHRNb2RlID0gZGVzaWduU3lzdGVtTW9kZSxcbiAgICBkZWZhdWx0Q29sb3JTY2hlbWUgPSBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSxcbiAgICBkaXNhYmxlVHJhbnNpdGlvbk9uQ2hhbmdlID0gZGVzaWduU3lzdGVtVHJhbnNpdGlvbk9uQ2hhbmdlLFxuICAgIHN0b3JhZ2VXaW5kb3cgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IHdpbmRvdyxcbiAgICBkb2N1bWVudE5vZGUgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQsXG4gICAgY29sb3JTY2hlbWVOb2RlID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBjb2xvclNjaGVtZVNlbGVjdG9yID0gJzpyb290JyxcbiAgICBzaG91bGRTa2lwR2VuZXJhdGluZ1ZhciA9IGRlc2lnblN5c3RlbVNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gIH0pIHtcbiAgICBjb25zdCBoYXNNb3VudGVkID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgICBjb25zdCB7XG4gICAgICAgIGNvbG9yU2NoZW1lcyA9IHt9LFxuICAgICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICAgIGNzc1ZhclByZWZpeFxuICAgICAgfSA9IHRoZW1lUHJvcCxcbiAgICAgIHJlc3RUaGVtZVByb3AgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSh0aGVtZVByb3AsIF9leGNsdWRlZCk7XG4gICAgY29uc3QgYWxsQ29sb3JTY2hlbWVzID0gT2JqZWN0LmtleXMoY29sb3JTY2hlbWVzKTtcbiAgICBjb25zdCBkZWZhdWx0TGlnaHRDb2xvclNjaGVtZSA9IHR5cGVvZiBkZWZhdWx0Q29sb3JTY2hlbWUgPT09ICdzdHJpbmcnID8gZGVmYXVsdENvbG9yU2NoZW1lIDogZGVmYXVsdENvbG9yU2NoZW1lLmxpZ2h0O1xuICAgIGNvbnN0IGRlZmF1bHREYXJrQ29sb3JTY2hlbWUgPSB0eXBlb2YgZGVmYXVsdENvbG9yU2NoZW1lID09PSAnc3RyaW5nJyA/IGRlZmF1bHRDb2xvclNjaGVtZSA6IGRlZmF1bHRDb2xvclNjaGVtZS5kYXJrO1xuXG4gICAgLy8gMS4gR2V0IHRoZSBkYXRhIGFib3V0IHRoZSBgbW9kZWAsIGBjb2xvclNjaGVtZWAsIGFuZCBzZXR0ZXIgZnVuY3Rpb25zLlxuICAgIGNvbnN0IHtcbiAgICAgIG1vZGUsXG4gICAgICBzZXRNb2RlLFxuICAgICAgc3lzdGVtTW9kZSxcbiAgICAgIGxpZ2h0Q29sb3JTY2hlbWUsXG4gICAgICBkYXJrQ29sb3JTY2hlbWUsXG4gICAgICBjb2xvclNjaGVtZSxcbiAgICAgIHNldENvbG9yU2NoZW1lXG4gICAgfSA9IHVzZUN1cnJlbnRDb2xvclNjaGVtZSh7XG4gICAgICBzdXBwb3J0ZWRDb2xvclNjaGVtZXM6IGFsbENvbG9yU2NoZW1lcyxcbiAgICAgIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lLFxuICAgICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICAgIG1vZGVTdG9yYWdlS2V5LFxuICAgICAgY29sb3JTY2hlbWVTdG9yYWdlS2V5LFxuICAgICAgZGVmYXVsdE1vZGUsXG4gICAgICBzdG9yYWdlV2luZG93XG4gICAgfSk7XG4gICAgY29uc3QgY2FsY3VsYXRlZE1vZGUgPSAoKCkgPT4ge1xuICAgICAgaWYgKCFtb2RlKSB7XG4gICAgICAgIC8vIFRoaXMgc2NvcGUgb2NjdXJzIG9uIHRoZSBzZXJ2ZXJcbiAgICAgICAgaWYgKGRlZmF1bHRNb2RlID09PSAnc3lzdGVtJykge1xuICAgICAgICAgIHJldHVybiBkZXNpZ25TeXN0ZW1Nb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0TW9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtb2RlO1xuICAgIH0pKCk7XG4gICAgY29uc3QgY2FsY3VsYXRlZENvbG9yU2NoZW1lID0gKCgpID0+IHtcbiAgICAgIGlmICghY29sb3JTY2hlbWUpIHtcbiAgICAgICAgLy8gVGhpcyBzY29wZSBvY2N1cnMgb24gdGhlIHNlcnZlclxuICAgICAgICBpZiAoY2FsY3VsYXRlZE1vZGUgPT09ICdkYXJrJykge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0RGFya0NvbG9yU2NoZW1lO1xuICAgICAgICB9XG4gICAgICAgIC8vIHVzZSBsaWdodCBjb2xvciBzY2hlbWUsIGlmIGRlZmF1bHQgbW9kZSBpcyAnbGlnaHQnIHwgJ3N5c3RlbSdcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMaWdodENvbG9yU2NoZW1lO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbG9yU2NoZW1lO1xuICAgIH0pKCk7XG5cbiAgICAvLyAyLiBDcmVhdGUgQ1NTIHZhcmlhYmxlcyBhbmQgc3RvcmUgdGhlbSBpbiBvYmplY3RzICh0byBiZSBnZW5lcmF0ZWQgaW4gc3R5bGVzaGVldHMgaW4gdGhlIGZpbmFsIHN0ZXApXG4gICAgY29uc3Qge1xuICAgICAgY3NzOiByb290Q3NzLFxuICAgICAgdmFyczogcm9vdFZhcnNcbiAgICB9ID0gY3NzVmFyc1BhcnNlcihyZXN0VGhlbWVQcm9wLCB7XG4gICAgICBwcmVmaXg6IGNzc1ZhclByZWZpeCxcbiAgICAgIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gICAgfSk7XG5cbiAgICAvLyAzLiBTdGFydCBjb21wb3NpbmcgdGhlIHRoZW1lIG9iamVjdFxuICAgIGNvbnN0IHRoZW1lID0gX2V4dGVuZHMoe30sIHJlc3RUaGVtZVByb3AsIHtcbiAgICAgIGNvbXBvbmVudHMsXG4gICAgICBjb2xvclNjaGVtZXMsXG4gICAgICBjc3NWYXJQcmVmaXgsXG4gICAgICB2YXJzOiByb290VmFycyxcbiAgICAgIGdldENvbG9yU2NoZW1lU2VsZWN0b3I6IHRhcmdldENvbG9yU2NoZW1lID0+IGBbJHthdHRyaWJ1dGV9PVwiJHt0YXJnZXRDb2xvclNjaGVtZX1cIl0gJmBcbiAgICB9KTtcblxuICAgIC8vIDQuIENyZWF0ZSBjb2xvciBDU1MgdmFyaWFibGVzIGFuZCBzdG9yZSB0aGVtIGluIG9iamVjdHMgKHRvIGJlIGdlbmVyYXRlZCBpbiBzdHlsZXNoZWV0cyBpbiB0aGUgZmluYWwgc3RlcClcbiAgICAvLyAgICBUaGUgZGVmYXVsdCBjb2xvciBzY2hlbWUgc3R5bGVzaGVldCBpcyBjb25zdHJ1Y3RlZCB0byBoYXZlIHRoZSBsZWFzdCBDU1Mgc3BlY2lmaWNpdHkuXG4gICAgLy8gICAgVGhlIG90aGVyIGNvbG9yIHNjaGVtZXMgdXNlcyBzZWxlY3RvciwgZGVmYXVsdCBhcyBkYXRhIGF0dHJpYnV0ZSwgdG8gaW5jcmVhc2UgdGhlIENTUyBzcGVjaWZpY2l0eSBzbyB0aGF0IHRoZXkgY2FuIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGNvbG9yIHNjaGVtZSBzdHlsZXNoZWV0LlxuICAgIGNvbnN0IGRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXQgPSB7fTtcbiAgICBjb25zdCBvdGhlckNvbG9yU2NoZW1lc1N0eWxlU2hlZXQgPSB7fTtcbiAgICBPYmplY3QuZW50cmllcyhjb2xvclNjaGVtZXMpLmZvckVhY2goKFtrZXksIHNjaGVtZV0pID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3NzLFxuICAgICAgICB2YXJzXG4gICAgICB9ID0gY3NzVmFyc1BhcnNlcihzY2hlbWUsIHtcbiAgICAgICAgcHJlZml4OiBjc3NWYXJQcmVmaXgsXG4gICAgICAgIHNob3VsZFNraXBHZW5lcmF0aW5nVmFyXG4gICAgICB9KTtcbiAgICAgIHRoZW1lLnZhcnMgPSBkZWVwbWVyZ2UodGhlbWUudmFycywgdmFycyk7XG4gICAgICBpZiAoa2V5ID09PSBjYWxjdWxhdGVkQ29sb3JTY2hlbWUpIHtcbiAgICAgICAgLy8gNC4xIE1lcmdlIHRoZSBzZWxlY3RlZCBjb2xvciBzY2hlbWUgdG8gdGhlIHRoZW1lXG4gICAgICAgIE9iamVjdC5rZXlzKHNjaGVtZSkuZm9yRWFjaChzY2hlbWVLZXkgPT4ge1xuICAgICAgICAgIGlmIChzY2hlbWVbc2NoZW1lS2V5XSAmJiB0eXBlb2Ygc2NoZW1lW3NjaGVtZUtleV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAvLyBzaGFsbG93IG1lcmdlIHRoZSAxc3QgbGV2ZWwgc3RydWN0dXJlIG9mIHRoZSB0aGVtZS5cbiAgICAgICAgICAgIHRoZW1lW3NjaGVtZUtleV0gPSBfZXh0ZW5kcyh7fSwgdGhlbWVbc2NoZW1lS2V5XSwgc2NoZW1lW3NjaGVtZUtleV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGVtZVtzY2hlbWVLZXldID0gc2NoZW1lW3NjaGVtZUtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoZW1lLnBhbGV0dGUpIHtcbiAgICAgICAgICB0aGVtZS5wYWxldHRlLmNvbG9yU2NoZW1lID0ga2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCByZXNvbHZlZERlZmF1bHRDb2xvclNjaGVtZSA9ICgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdENvbG9yU2NoZW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0Q29sb3JTY2hlbWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlZmF1bHRNb2RlID09PSAnZGFyaycpIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdENvbG9yU2NoZW1lLmRhcms7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRDb2xvclNjaGVtZS5saWdodDtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAoa2V5ID09PSByZXNvbHZlZERlZmF1bHRDb2xvclNjaGVtZSkge1xuICAgICAgICBpZiAoZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290KSB7XG4gICAgICAgICAgY29uc3QgZXhjbHVkZWRWYXJpYWJsZXMgPSB7fTtcbiAgICAgICAgICBleGNsdWRlVmFyaWFibGVzRnJvbVJvb3QoY3NzVmFyUHJlZml4KS5mb3JFYWNoKGNzc1ZhciA9PiB7XG4gICAgICAgICAgICBleGNsdWRlZFZhcmlhYmxlc1tjc3NWYXJdID0gY3NzW2Nzc1Zhcl07XG4gICAgICAgICAgICBkZWxldGUgY3NzW2Nzc1Zhcl07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldFtgWyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gZXhjbHVkZWRWYXJpYWJsZXM7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdENvbG9yU2NoZW1lU3R5bGVTaGVldFtgJHtjb2xvclNjaGVtZVNlbGVjdG9yfSwgWyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gY3NzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3RoZXJDb2xvclNjaGVtZXNTdHlsZVNoZWV0W2Ake2NvbG9yU2NoZW1lU2VsZWN0b3IgPT09ICc6cm9vdCcgPyAnJyA6IGNvbG9yU2NoZW1lU2VsZWN0b3J9WyR7YXR0cmlidXRlfT1cIiR7a2V5fVwiXWBdID0gY3NzO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gNS4gRGVjbGFyaW5nIGVmZmVjdHNcbiAgICAvLyA1LjEgVXBkYXRlcyB0aGUgc2VsZWN0b3IgdmFsdWUgdG8gdXNlIHRoZSBjdXJyZW50IGNvbG9yIHNjaGVtZSB3aGljaCB0ZWxscyBDU1MgdG8gdXNlIHRoZSBwcm9wZXIgc3R5bGVzaGVldC5cbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgaWYgKGNvbG9yU2NoZW1lICYmIGNvbG9yU2NoZW1lTm9kZSkge1xuICAgICAgICAvLyBhdHRhY2hlcyBhdHRyaWJ1dGUgdG8gPGh0bWw+IGJlY2F1c2UgdGhlIGNzcyB2YXJpYWJsZXMgYXJlIGF0dGFjaGVkIHRvIDpyb290IChodG1sKVxuICAgICAgICBjb2xvclNjaGVtZU5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgY29sb3JTY2hlbWUpO1xuICAgICAgfVxuICAgIH0sIFtjb2xvclNjaGVtZSwgYXR0cmlidXRlLCBjb2xvclNjaGVtZU5vZGVdKTtcblxuICAgIC8vIDUuMiBSZW1vdmUgdGhlIENTUyB0cmFuc2l0aW9uIHdoZW4gY29sb3Igc2NoZW1lIGNoYW5nZXMgdG8gY3JlYXRlIGluc3RhbnQgZXhwZXJpZW5jZS5cbiAgICAvLyBjcmVkaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9wYWNvY291cnNleS9uZXh0LXRoZW1lcy9ibG9iL2I1YzJiYWQ1MGRlMmQ2MWFkN2I1MmE5YzVjZGM4MDFhNzg1MDdkN2EvaW5kZXgudHN4I0wzMTNcbiAgICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgbGV0IHRpbWVyO1xuICAgICAgaWYgKGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2UgJiYgaGFzTW91bnRlZC5jdXJyZW50ICYmIGRvY3VtZW50Tm9kZSkge1xuICAgICAgICBjb25zdCBjc3MgPSBkb2N1bWVudE5vZGUuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgY3NzLmFwcGVuZENoaWxkKGRvY3VtZW50Tm9kZS5jcmVhdGVUZXh0Tm9kZShESVNBQkxFX0NTU19UUkFOU0lUSU9OKSk7XG4gICAgICAgIGRvY3VtZW50Tm9kZS5oZWFkLmFwcGVuZENoaWxkKGNzcyk7XG5cbiAgICAgICAgLy8gRm9yY2UgYnJvd3NlciByZXBhaW50XG4gICAgICAgICgoKSA9PiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudE5vZGUuYm9keSkpKCk7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZG9jdW1lbnROb2RlLmhlYWQucmVtb3ZlQ2hpbGQoY3NzKTtcbiAgICAgICAgfSwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgfTtcbiAgICB9LCBbY29sb3JTY2hlbWUsIGRpc2FibGVUcmFuc2l0aW9uT25DaGFuZ2UsIGRvY3VtZW50Tm9kZV0pO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBoYXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaGFzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB9O1xuICAgIH0sIFtdKTtcbiAgICBjb25zdCBjb250ZXh0VmFsdWUgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgICBtb2RlLFxuICAgICAgc3lzdGVtTW9kZSxcbiAgICAgIHNldE1vZGUsXG4gICAgICBsaWdodENvbG9yU2NoZW1lLFxuICAgICAgZGFya0NvbG9yU2NoZW1lLFxuICAgICAgY29sb3JTY2hlbWUsXG4gICAgICBzZXRDb2xvclNjaGVtZSxcbiAgICAgIGFsbENvbG9yU2NoZW1lc1xuICAgIH0pLCBbYWxsQ29sb3JTY2hlbWVzLCBjb2xvclNjaGVtZSwgZGFya0NvbG9yU2NoZW1lLCBsaWdodENvbG9yU2NoZW1lLCBtb2RlLCBzZXRDb2xvclNjaGVtZSwgc2V0TW9kZSwgc3lzdGVtTW9kZV0pO1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoQ29sb3JTY2hlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFZhbHVlLFxuICAgICAgY2hpbGRyZW46IFsvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgICAgICAgc3R5bGVzOiB7XG4gICAgICAgICAgW2NvbG9yU2NoZW1lU2VsZWN0b3JdOiByb290Q3NzXG4gICAgICAgIH1cbiAgICAgIH0pLCAvKiNfX1BVUkVfXyovX2pzeChHbG9iYWxTdHlsZXMsIHtcbiAgICAgICAgc3R5bGVzOiBkZWZhdWx0Q29sb3JTY2hlbWVTdHlsZVNoZWV0XG4gICAgICB9KSwgLyojX19QVVJFX18qL19qc3goR2xvYmFsU3R5bGVzLCB7XG4gICAgICAgIHN0eWxlczogb3RoZXJDb2xvclNjaGVtZXNTdHlsZVNoZWV0XG4gICAgICB9KSwgLyojX19QVVJFX18qL19qc3goVGhlbWVQcm92aWRlciwge1xuICAgICAgICB0aGVtZTogcmVzb2x2ZVRoZW1lID8gcmVzb2x2ZVRoZW1lKHRoZW1lKSA6IHRoZW1lLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pXVxuICAgIH0pO1xuICB9XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENzc1ZhcnNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIGJvZHkgYXR0cmlidXRlIG5hbWUgdG8gYXR0YWNoIGNvbG9yU2NoZW1lLlxuICAgICAqL1xuICAgIGF0dHJpYnV0ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHRyZWUuXG4gICAgICovXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIC8qKlxuICAgICAqIFRoZSBub2RlIHVzZWQgdG8gYXR0YWNoIHRoZSBjb2xvci1zY2hlbWUgYXR0cmlidXRlXG4gICAgICovXG4gICAgY29sb3JTY2hlbWVOb2RlOiBQcm9wVHlwZXMuYW55LFxuICAgIC8qKlxuICAgICAqIFRoZSBDU1Mgc2VsZWN0b3IgZm9yIGF0dGFjaGluZyB0aGUgZ2VuZXJhdGVkIGN1c3RvbSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY29sb3JTY2hlbWVTZWxlY3RvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBsb2NhbFN0b3JhZ2Uga2V5IHVzZWQgdG8gc3RvcmUgYGNvbG9yU2NoZW1lYFxuICAgICAqL1xuICAgIGNvbG9yU2NoZW1lU3RvcmFnZUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCBjb2xvciBzY2hlbWUgdXNlZC5cbiAgICAgKi9cbiAgICBkZWZhdWx0Q29sb3JTY2hlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICAvKipcbiAgICAgKiBUaGUgaW5pdGlhbCBtb2RlIHVzZWQuXG4gICAgICovXG4gICAgZGVmYXVsdE1vZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBDU1MgdHJhbnNpdGlvbnMgd2hlbiBzd2l0Y2hpbmcgYmV0d2VlbiBtb2RlcyBvciBjb2xvciBzY2hlbWVzXG4gICAgICovXG4gICAgZGlzYWJsZVRyYW5zaXRpb25PbkNoYW5nZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgLyoqXG4gICAgICogVGhlIGRvY3VtZW50IHRvIGF0dGFjaCB0aGUgYXR0cmlidXRlIHRvXG4gICAgICovXG4gICAgZG9jdW1lbnROb2RlOiBQcm9wVHlwZXMuYW55LFxuICAgIC8qKlxuICAgICAqIFRoZSBrZXkgaW4gdGhlIGxvY2FsIHN0b3JhZ2UgdXNlZCB0byBzdG9yZSBjdXJyZW50IGNvbG9yIHNjaGVtZS5cbiAgICAgKi9cbiAgICBtb2RlU3RvcmFnZUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAvKipcbiAgICAgKiBBIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiB0aGUga2V5LCB2YWx1ZSBzaG91bGQgYmUgYXR0YWNoZWQgYXMgQ1NTIFZhcmlhYmxlXG4gICAgICovXG4gICAgc2hvdWxkU2tpcEdlbmVyYXRpbmdWYXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8qKlxuICAgICAqIFRoZSB3aW5kb3cgdGhhdCBhdHRhY2hlcyB0aGUgJ3N0b3JhZ2UnIGV2ZW50IGxpc3RlbmVyXG4gICAgICogQGRlZmF1bHQgd2luZG93XG4gICAgICovXG4gICAgc3RvcmFnZVdpbmRvdzogUHJvcFR5cGVzLmFueSxcbiAgICAvKipcbiAgICAgKiBUaGUgY2FsY3VsYXRlZCB0aGVtZSBvYmplY3QgdGhhdCB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIGNvbnRleHQuXG4gICAgICovXG4gICAgdGhlbWU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSA6IHZvaWQgMDtcbiAgY29uc3QgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUgPSB0eXBlb2YgZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgPT09ICdzdHJpbmcnID8gZGVzaWduU3lzdGVtQ29sb3JTY2hlbWUgOiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZS5saWdodDtcbiAgY29uc3QgZGVmYXVsdERhcmtDb2xvclNjaGVtZSA9IHR5cGVvZiBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA9PT0gJ3N0cmluZycgPyBkZXNpZ25TeXN0ZW1Db2xvclNjaGVtZSA6IGRlc2lnblN5c3RlbUNvbG9yU2NoZW1lLmRhcms7XG4gIGNvbnN0IGdldEluaXRDb2xvclNjaGVtZVNjcmlwdCA9IHBhcmFtcyA9PiBzeXN0ZW1HZXRJbml0Q29sb3JTY2hlbWVTY3JpcHQoX2V4dGVuZHMoe1xuICAgIGF0dHJpYnV0ZTogZGVmYXVsdEF0dHJpYnV0ZSxcbiAgICBjb2xvclNjaGVtZVN0b3JhZ2VLZXk6IGRlZmF1bHRDb2xvclNjaGVtZVN0b3JhZ2VLZXksXG4gICAgZGVmYXVsdE1vZGU6IGRlc2lnblN5c3RlbU1vZGUsXG4gICAgZGVmYXVsdExpZ2h0Q29sb3JTY2hlbWUsXG4gICAgZGVmYXVsdERhcmtDb2xvclNjaGVtZSxcbiAgICBtb2RlU3RvcmFnZUtleTogZGVmYXVsdE1vZGVTdG9yYWdlS2V5XG4gIH0sIHBhcmFtcykpO1xuICByZXR1cm4ge1xuICAgIENzc1ZhcnNQcm92aWRlcixcbiAgICB1c2VDb2xvclNjaGVtZSxcbiAgICBnZXRJbml0Q29sb3JTY2hlbWVTY3JpcHRcbiAgfTtcbn0iLCIvKipcbiAqIFRoZSBiZW5lZml0IG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gaGVscCBkZXZlbG9wZXJzIGdldCBDU1MgdmFyIGZyb20gdGhlbWUgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSB3aG9sZSB2YXJpYWJsZVxuICogYW5kIHRoZXkgZG9lcyBub3QgbmVlZCB0byByZW1lbWJlciB0aGUgcHJlZml4IChkZWZpbmVkIG9uY2UpLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVHZXRDc3NWYXIocHJlZml4ID0gJycpIHtcbiAgZnVuY3Rpb24gYXBwZW5kVmFyKC4uLnZhcnMpIHtcbiAgICBpZiAoIXZhcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdmFyc1swXTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhdmFsdWUubWF0Y2goLygjfFxcKHxcXCl8KC0/KFxcZCpcXC4pP1xcZCspKHB4fGVtfCV8ZXh8Y2h8cmVtfHZ3fHZofHZtaW58dm1heHxjbXxtbXxpbnxwdHxwYykpLykpIHtcbiAgICAgIHJldHVybiBgLCB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7dmFsdWV9JHthcHBlbmRWYXIoLi4udmFycy5zbGljZSgxKSl9KWA7XG4gICAgfVxuICAgIHJldHVybiBgLCAke3ZhbHVlfWA7XG4gIH1cblxuICAvLyBBZGRpdGlvbmFsVmFycyBtYWtlcyBgZ2V0Q3NzVmFyYCBsZXNzIHN0cmljdCwgc28gaXQgY2FuIGJlIHVzZSBsaWtlIHRoaXMgYGdldENzc1Zhcignbm9uLW11aS12YXJpYWJsZScpYCB3aXRob3V0IHR5cGUgZXJyb3IuXG4gIGNvbnN0IGdldENzc1ZhciA9IChmaWVsZCwgLi4uZmFsbGJhY2tzKSA9PiB7XG4gICAgcmV0dXJuIGB2YXIoLS0ke3ByZWZpeCA/IGAke3ByZWZpeH0tYCA6ICcnfSR7ZmllbGR9JHthcHBlbmRWYXIoLi4uZmFsbGJhY2tzKX0pYDtcbiAgfTtcbiAgcmV0dXJuIGdldENzc1Zhcjtcbn0iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuY29uc3QgcmVzcG9uc2l2ZVByb3BUeXBlID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5hcnJheV0pIDoge307XG5leHBvcnQgZGVmYXVsdCByZXNwb25zaXZlUHJvcFR5cGU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwiZml4ZWRcIiwgXCJtYXhXaWR0aFwiLCBcImNsYXNzZXNcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jYXBpdGFsaXplIGFzIGNhcGl0YWxpemUsIHVuc3RhYmxlX2NvbXBvc2VDbGFzc2VzIGFzIGNvbXBvc2VDbGFzc2VzLCB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuaW1wb3J0IHVzZVRoZW1lUHJvcHNTeXN0ZW0gZnJvbSAnLi4vdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgc3lzdGVtU3R5bGVkIGZyb20gJy4uL3N0eWxlZCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IGRlZmF1bHRUaGVtZSA9IGNyZWF0ZVRoZW1lKCk7XG5jb25zdCBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50ID0gc3lzdGVtU3R5bGVkKCdkaXYnLCB7XG4gIG5hbWU6ICdNdWlDb250YWluZXInLFxuICBzbG90OiAnUm9vdCcsXG4gIG92ZXJyaWRlc1Jlc29sdmVyOiAocHJvcHMsIHN0eWxlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG93bmVyU3RhdGVcbiAgICB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFtzdHlsZXMucm9vdCwgc3R5bGVzW2BtYXhXaWR0aCR7Y2FwaXRhbGl6ZShTdHJpbmcob3duZXJTdGF0ZS5tYXhXaWR0aCkpfWBdLCBvd25lclN0YXRlLmZpeGVkICYmIHN0eWxlcy5maXhlZCwgb3duZXJTdGF0ZS5kaXNhYmxlR3V0dGVycyAmJiBzdHlsZXMuZGlzYWJsZUd1dHRlcnNdO1xuICB9XG59KTtcbmNvbnN0IHVzZVRoZW1lUHJvcHNEZWZhdWx0ID0gaW5Qcm9wcyA9PiB1c2VUaGVtZVByb3BzU3lzdGVtKHtcbiAgcHJvcHM6IGluUHJvcHMsXG4gIG5hbWU6ICdNdWlDb250YWluZXInLFxuICBkZWZhdWx0VGhlbWVcbn0pO1xuY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAob3duZXJTdGF0ZSwgY29tcG9uZW50TmFtZSkgPT4ge1xuICBjb25zdCBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MgPSBzbG90ID0+IHtcbiAgICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCk7XG4gIH07XG4gIGNvbnN0IHtcbiAgICBjbGFzc2VzLFxuICAgIGZpeGVkLFxuICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgIG1heFdpZHRoXG4gIH0gPSBvd25lclN0YXRlO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICByb290OiBbJ3Jvb3QnLCBtYXhXaWR0aCAmJiBgbWF4V2lkdGgke2NhcGl0YWxpemUoU3RyaW5nKG1heFdpZHRoKSl9YCwgZml4ZWQgJiYgJ2ZpeGVkJywgZGlzYWJsZUd1dHRlcnMgJiYgJ2Rpc2FibGVHdXR0ZXJzJ11cbiAgfTtcbiAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3MsIGNsYXNzZXMpO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIC8vIFRoaXMgd2lsbCBhbGxvdyBhZGRpbmcgY3VzdG9tIHN0eWxlZCBmbiAoZm9yIGV4YW1wbGUgZm9yIGN1c3RvbSBzeCBzdHlsZSBmdW5jdGlvbilcbiAgICBjcmVhdGVTdHlsZWRDb21wb25lbnQgPSBkZWZhdWx0Q3JlYXRlU3R5bGVkQ29tcG9uZW50LFxuICAgIHVzZVRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzRGVmYXVsdCxcbiAgICBjb21wb25lbnROYW1lID0gJ011aUNvbnRhaW5lcidcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IENvbnRhaW5lclJvb3QgPSBjcmVhdGVTdHlsZWRDb21wb25lbnQoKHtcbiAgICB0aGVtZSxcbiAgICBvd25lclN0YXRlXG4gIH0pID0+IF9leHRlbmRzKHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIG1hcmdpbkxlZnQ6ICdhdXRvJyxcbiAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICBtYXJnaW5SaWdodDogJ2F1dG8nLFxuICAgIGRpc3BsYXk6ICdibG9jaydcbiAgfSwgIW93bmVyU3RhdGUuZGlzYWJsZUd1dHRlcnMgJiYge1xuICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxuICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKCdzbScpXToge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9XG4gIH0pLCAoe1xuICAgIHRoZW1lLFxuICAgIG93bmVyU3RhdGVcbiAgfSkgPT4gb3duZXJTdGF0ZS5maXhlZCAmJiBPYmplY3Qua2V5cyh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMpLnJlZHVjZSgoYWNjLCBicmVha3BvaW50VmFsdWVLZXkpID0+IHtcbiAgICBjb25zdCBicmVha3BvaW50ID0gYnJlYWtwb2ludFZhbHVlS2V5O1xuICAgIGNvbnN0IHZhbHVlID0gdGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2JyZWFrcG9pbnRdO1xuICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgYWNjW3RoZW1lLmJyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnQpXSA9IHtcbiAgICAgICAgbWF4V2lkdGg6IGAke3ZhbHVlfSR7dGhlbWUuYnJlYWtwb2ludHMudW5pdH1gXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSksICh7XG4gICAgdGhlbWUsXG4gICAgb3duZXJTdGF0ZVxuICB9KSA9PiBfZXh0ZW5kcyh7fSwgb3duZXJTdGF0ZS5tYXhXaWR0aCA9PT0gJ3hzJyAmJiB7XG4gICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgIFt0aGVtZS5icmVha3BvaW50cy51cCgneHMnKV06IHtcbiAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgIG1heFdpZHRoOiBNYXRoLm1heCh0aGVtZS5icmVha3BvaW50cy52YWx1ZXMueHMsIDQ0NClcbiAgICB9XG4gIH0sIG93bmVyU3RhdGUubWF4V2lkdGggJiZcbiAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICBvd25lclN0YXRlLm1heFdpZHRoICE9PSAneHMnICYmIHtcbiAgICAvLyBAdHMtaWdub3JlIG1vZHVsZSBhdWdtZW50YXRpb24gZmFpbHMgaWYgY3VzdG9tIGJyZWFrcG9pbnRzIGFyZSB1c2VkXG4gICAgW3RoZW1lLmJyZWFrcG9pbnRzLnVwKG93bmVyU3RhdGUubWF4V2lkdGgpXToge1xuICAgICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgICAgbWF4V2lkdGg6IGAke3RoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1tvd25lclN0YXRlLm1heFdpZHRoXX0ke3RoZW1lLmJyZWFrcG9pbnRzLnVuaXR9YFxuICAgIH1cbiAgfSkpO1xuICBjb25zdCBDb250YWluZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBDb250YWluZXIoaW5Qcm9wcywgcmVmKSB7XG4gICAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKGluUHJvcHMpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgICAgZGlzYWJsZUd1dHRlcnMgPSBmYWxzZSxcbiAgICAgICAgZml4ZWQgPSBmYWxzZSxcbiAgICAgICAgbWF4V2lkdGggPSAnbGcnXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIGRpc2FibGVHdXR0ZXJzLFxuICAgICAgZml4ZWQsXG4gICAgICBtYXhXaWR0aFxuICAgIH0pO1xuXG4gICAgLy8gQHRzLWlnbm9yZSBtb2R1bGUgYXVnbWVudGF0aW9uIGZhaWxzIGlmIGN1c3RvbSBicmVha3BvaW50cyBhcmUgdXNlZFxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlLCBjb21wb25lbnROYW1lKTtcbiAgICByZXR1cm4gKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgLy8gQHRzLWlnbm9yZSB0aGVtZSBpcyBpbmplY3RlZCBieSB0aGUgc3R5bGVkIHV0aWxcbiAgICAgIF9qc3goQ29udGFpbmVyUm9vdCwgX2V4dGVuZHMoe1xuICAgICAgICBhczogY29tcG9uZW50XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgbW9kdWxlIGF1Z21lbnRhdGlvbiBmYWlscyBpZiBjdXN0b20gYnJlYWtwb2ludHMgYXJlIHVzZWRcbiAgICAgICAgLFxuICAgICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSwgb3RoZXIpKVxuICAgICk7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDb250YWluZXIucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbXBvbmVudDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLFxuICAgIGRpc2FibGVHdXR0ZXJzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmaXhlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWF4V2lkdGg6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnLCBmYWxzZV0pLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9IDogdm9pZCAwO1xuICByZXR1cm4gQ29udGFpbmVyO1xufSIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlQ29udGFpbmVyIGZyb20gJy4vY3JlYXRlQ29udGFpbmVyJztcblxuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbQ29udGFpbmVyIChNYXRlcmlhbCBVSSldKGh0dHBzOi8vbXVpLmNvbS9tYXRlcmlhbC11aS9yZWFjdC1jb250YWluZXIvKVxuICogLSBbQ29udGFpbmVyIChNVUkgU3lzdGVtKV0oaHR0cHM6Ly9tdWkuY29tL3N5c3RlbS9yZWFjdC1jb250YWluZXIvKVxuICpcbiAqIEFQSTpcbiAqXG4gKiAtIFtDb250YWluZXIgQVBJXShodHRwczovL211aS5jb20vc3lzdGVtL2FwaS9jb250YWluZXIvKVxuICovXG5jb25zdCBDb250YWluZXIgPSBjcmVhdGVDb250YWluZXIoKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IENvbnRhaW5lci5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgVHlwZVNjcmlwdCB0eXBlcyBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBsZWZ0IGFuZCByaWdodCBwYWRkaW5nIGlzIHJlbW92ZWQuXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkaXNhYmxlR3V0dGVyczogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBTZXQgdGhlIG1heC13aWR0aCB0byBtYXRjaCB0aGUgbWluLXdpZHRoIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSdkIHByZWZlciB0byBkZXNpZ24gZm9yIGEgZml4ZWQgc2V0IG9mIHNpemVzXG4gICAqIGluc3RlYWQgb2YgdHJ5aW5nIHRvIGFjY29tbW9kYXRlIGEgZnVsbHkgZmx1aWQgdmlld3BvcnQuXG4gICAqIEl0J3MgZmx1aWQgYnkgZGVmYXVsdC5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZpeGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgbWF4LXdpZHRoIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSBjb250YWluZXIgd2lkdGggZ3Jvd3Mgd2l0aCB0aGUgc2l6ZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBTZXQgdG8gYGZhbHNlYCB0byBkaXNhYmxlIGBtYXhXaWR0aGAuXG4gICAqIEBkZWZhdWx0ICdsZydcbiAgICovXG4gIG1heFdpZHRoOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJywgZmFsc2VdKSwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wIHRoYXQgYWxsb3dzIGRlZmluaW5nIHN5c3RlbSBvdmVycmlkZXMgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIENTUyBzdHlsZXMuXG4gICAqL1xuICBzeDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5ib29sXSkpLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgQ29udGFpbmVyOyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzLCB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250YWluZXJVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aUNvbnRhaW5lcicsIHNsb3QpO1xufVxuY29uc3QgY29udGFpbmVyQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUNvbnRhaW5lcicsIFsncm9vdCcsICdkaXNhYmxlR3V0dGVycycsICdmaXhlZCcsICdtYXhXaWR0aFhzJywgJ21heFdpZHRoU20nLCAnbWF4V2lkdGhNZCcsICdtYXhXaWR0aExnJywgJ21heFdpZHRoWGwnXSk7XG5leHBvcnQgZGVmYXVsdCBjb250YWluZXJDbGFzc2VzOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGNvbnN0IGZpbHRlckJyZWFrcG9pbnRLZXlzID0gKGJyZWFrcG9pbnRzS2V5cywgcmVzcG9uc2l2ZUtleXMpID0+IGJyZWFrcG9pbnRzS2V5cy5maWx0ZXIoa2V5ID0+IHJlc3BvbnNpdmVLZXlzLmluY2x1ZGVzKGtleSkpO1xuZXhwb3J0IGNvbnN0IHRyYXZlcnNlQnJlYWtwb2ludHMgPSAoYnJlYWtwb2ludHMsIHJlc3BvbnNpdmUsIGl0ZXJhdG9yKSA9PiB7XG4gIGNvbnN0IHNtYWxsZXN0QnJlYWtwb2ludCA9IGJyZWFrcG9pbnRzLmtleXNbMF07IC8vIHRoZSBrZXlzIGlzIHNvcnRlZCBmcm9tIHNtYWxsZXN0IHRvIGxhcmdlc3QgYnkgYGNyZWF0ZUJyZWFrcG9pbnRzYC5cblxuICBpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zaXZlKSkge1xuICAgIHJlc3BvbnNpdmUuZm9yRWFjaCgoYnJlYWtwb2ludFZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgaXRlcmF0b3IoKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKSA9PiB7XG4gICAgICAgIGlmIChpbmRleCA8PSBicmVha3BvaW50cy5rZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNwb25zaXZlU3R5bGVzW2JyZWFrcG9pbnRzLnVwKGJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIGJyZWFrcG9pbnRWYWx1ZSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocmVzcG9uc2l2ZSAmJiB0eXBlb2YgcmVzcG9uc2l2ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAvLyBwcmV2ZW50IG51bGxcbiAgICAvLyByZXNwb25zaXZlIGNvdWxkIGJlIGEgdmVyeSBiaWcgb2JqZWN0LCBwaWNrIHRoZSBzbWFsbGVzdCByZXNwb25zaXZlIHZhbHVlc1xuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlc3BvbnNpdmUpLmxlbmd0aCA+IGJyZWFrcG9pbnRzLmtleXMubGVuZ3RoID8gYnJlYWtwb2ludHMua2V5cyA6IGZpbHRlckJyZWFrcG9pbnRLZXlzKGJyZWFrcG9pbnRzLmtleXMsIE9iamVjdC5rZXlzKHJlc3BvbnNpdmUpKTtcbiAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmIChicmVha3BvaW50cy5rZXlzLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBhbHJlYWR5IGNoZWNrZWQgdGhhdCByZXNwb25zaXZlIGlzIGFuIG9iamVjdFxuICAgICAgICBjb25zdCBicmVha3BvaW50VmFsdWUgPSByZXNwb25zaXZlW2tleV07XG4gICAgICAgIGlmIChicmVha3BvaW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGl0ZXJhdG9yKChyZXNwb25zaXZlU3R5bGVzLCBzdHlsZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHNtYWxsZXN0QnJlYWtwb2ludCA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVzcG9uc2l2ZVN0eWxlcywgc3R5bGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzcG9uc2l2ZVN0eWxlc1ticmVha3BvaW50cy51cChrZXkpXSA9IHN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGJyZWFrcG9pbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcmVzcG9uc2l2ZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHJlc3BvbnNpdmUgPT09ICdzdHJpbmcnKSB7XG4gICAgaXRlcmF0b3IoKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKSA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKHJlc3BvbnNpdmVTdHlsZXMsIHN0eWxlKTtcbiAgICB9LCByZXNwb25zaXZlKTtcbiAgfVxufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRTaXplU3R5bGVzID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgY29uc3Qgc3R5bGVzID0ge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuZ3JpZFNpemUsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBsZXQgc3R5bGUgPSB7fTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBmbGV4QmFzaXM6IDAsXG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBtYXhXaWR0aDogJzEwMCUnXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIGZsZXhCYXNpczogJ2F1dG8nLFxuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgbWF4V2lkdGg6ICdub25lJyxcbiAgICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBmbGV4R3JvdzogMCxcbiAgICAgICAgZmxleEJhc2lzOiAnYXV0bycsXG4gICAgICAgIHdpZHRoOiBgY2FsYygxMDAlICogJHt2YWx1ZX0gLyB2YXIoLS1HcmlkLWNvbHVtbnMpJHtvd25lclN0YXRlLm5lc3RlZCAmJiBvd25lclN0YXRlLmNvbnRhaW5lciA/IGAgKyB2YXIoLS1HcmlkLWNvbHVtblNwYWNpbmcpYCA6ICcnfSlgXG4gICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHN0eWxlKTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IHt9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLmdyaWRPZmZzZXQsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBsZXQgc3R5bGUgPSB7fTtcbiAgICBpZiAodmFsdWUgPT09ICdhdXRvJykge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJ1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN0eWxlID0ge1xuICAgICAgICBtYXJnaW5MZWZ0OiB2YWx1ZSA9PT0gMCA/ICcwcHgnIDogYGNhbGMoMTAwJSAqICR7dmFsdWV9IC8gdmFyKC0tR3JpZC1jb2x1bW5zKSlgXG4gICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHN0eWxlKTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZENvbHVtbnNTdHlsZXMgPSAoe1xuICB0aGVtZSxcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICBpZiAoIW93bmVyU3RhdGUuY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICAnLS1HcmlkLWNvbHVtbnMnOiAxMlxuICB9O1xuICB0cmF2ZXJzZUJyZWFrcG9pbnRzKHRoZW1lLmJyZWFrcG9pbnRzLCBvd25lclN0YXRlLmNvbHVtbnMsIChhcHBlbmRTdHlsZSwgdmFsdWUpID0+IHtcbiAgICBhcHBlbmRTdHlsZShzdHlsZXMsIHtcbiAgICAgICctLUdyaWQtY29sdW1ucyc6IHZhbHVlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUdyaWRSb3dTcGFjaW5nU3R5bGVzID0gKHtcbiAgdGhlbWUsXG4gIG93bmVyU3RhdGVcbn0pID0+IHtcbiAgaWYgKCFvd25lclN0YXRlLmNvbnRhaW5lcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBzdHlsZXMgPSB7fTtcbiAgdHJhdmVyc2VCcmVha3BvaW50cyh0aGVtZS5icmVha3BvaW50cywgb3duZXJTdGF0ZS5yb3dTcGFjaW5nLCAoYXBwZW5kU3R5bGUsIHZhbHVlKSA9PiB7XG4gICAgdmFyIF90aGVtZSRzcGFjaW5nO1xuICAgIGFwcGVuZFN0eWxlKHN0eWxlcywge1xuICAgICAgJy0tR3JpZC1yb3dTcGFjaW5nJzogdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogKF90aGVtZSRzcGFjaW5nID0gdGhlbWUuc3BhY2luZykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRzcGFjaW5nLmNhbGwodGhlbWUsIHZhbHVlKVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVHcmlkQ29sdW1uU3BhY2luZ1N0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGlmICghb3duZXJTdGF0ZS5jb250YWluZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3Qgc3R5bGVzID0ge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuY29sdW1uU3BhY2luZywgKGFwcGVuZFN0eWxlLCB2YWx1ZSkgPT4ge1xuICAgIHZhciBfdGhlbWUkc3BhY2luZzI7XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCB7XG4gICAgICAnLS1HcmlkLWNvbHVtblNwYWNpbmcnOiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiAoX3RoZW1lJHNwYWNpbmcyID0gdGhlbWUuc3BhY2luZykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRzcGFjaW5nMi5jYWxsKHRoZW1lLCB2YWx1ZSlcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBzdHlsZXM7XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlR3JpZERpcmVjdGlvblN0eWxlcyA9ICh7XG4gIHRoZW1lLFxuICBvd25lclN0YXRlXG59KSA9PiB7XG4gIGlmICghb3duZXJTdGF0ZS5jb250YWluZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3Qgc3R5bGVzID0ge307XG4gIHRyYXZlcnNlQnJlYWtwb2ludHModGhlbWUuYnJlYWtwb2ludHMsIG93bmVyU3RhdGUuZGlyZWN0aW9uLCAoYXBwZW5kU3R5bGUsIHZhbHVlKSA9PiB7XG4gICAgYXBwZW5kU3R5bGUoc3R5bGVzLCB7XG4gICAgICBmbGV4RGlyZWN0aW9uOiB2YWx1ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlcztcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVHcmlkU3R5bGVzID0gKHtcbiAgb3duZXJTdGF0ZVxufSkgPT4ge1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIG1pbldpZHRoOiAwLFxuICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gIH0sIG93bmVyU3RhdGUuY29udGFpbmVyID8gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4V3JhcDogJ3dyYXAnXG4gIH0sIG93bmVyU3RhdGUud3JhcCAmJiBvd25lclN0YXRlLndyYXAgIT09ICd3cmFwJyAmJiB7XG4gICAgZmxleFdyYXA6IG93bmVyU3RhdGUud3JhcFxuICB9LCB7XG4gICAgbWFyZ2luOiBgY2FsYyh2YXIoLS1HcmlkLXJvd1NwYWNpbmcpIC8gLTIpIGNhbGModmFyKC0tR3JpZC1jb2x1bW5TcGFjaW5nKSAvIC0yKWBcbiAgfSwgb3duZXJTdGF0ZS5kaXNhYmxlRXF1YWxPdmVyZmxvdyAmJiB7XG4gICAgbWFyZ2luOiBgY2FsYyh2YXIoLS1HcmlkLXJvd1NwYWNpbmcpICogLTEpIDBweCAwcHggY2FsYyh2YXIoLS1HcmlkLWNvbHVtblNwYWNpbmcpICogLTEpYFxuICB9LCBvd25lclN0YXRlLm5lc3RlZCA/IF9leHRlbmRzKHtcbiAgICBwYWRkaW5nOiBgY2FsYyh2YXIoLS1HcmlkLW5lc3RlZC1yb3dTcGFjaW5nKSAvIDIpIGNhbGModmFyKC0tR3JpZC1uZXN0ZWQtY29sdW1uU3BhY2luZykgLyAyKWBcbiAgfSwgKG93bmVyU3RhdGUuZGlzYWJsZUVxdWFsT3ZlcmZsb3cgfHwgb3duZXJTdGF0ZS5wYXJlbnREaXNhYmxlRXF1YWxPdmVyZmxvdykgJiYge1xuICAgIHBhZGRpbmc6IGBjYWxjKHZhcigtLUdyaWQtbmVzdGVkLXJvd1NwYWNpbmcpKSAwcHggMHB4IGNhbGModmFyKC0tR3JpZC1uZXN0ZWQtY29sdW1uU3BhY2luZykpYFxuICB9KSA6IHtcbiAgICAnLS1HcmlkLW5lc3RlZC1yb3dTcGFjaW5nJzogJ3ZhcigtLUdyaWQtcm93U3BhY2luZyknLFxuICAgICctLUdyaWQtbmVzdGVkLWNvbHVtblNwYWNpbmcnOiAndmFyKC0tR3JpZC1jb2x1bW5TcGFjaW5nKSdcbiAgfSkgOiBfZXh0ZW5kcyh7XG4gICAgcGFkZGluZzogYGNhbGModmFyKC0tR3JpZC1yb3dTcGFjaW5nKSAvIDIpIGNhbGModmFyKC0tR3JpZC1jb2x1bW5TcGFjaW5nKSAvIDIpYFxuICB9LCBvd25lclN0YXRlLmRpc2FibGVFcXVhbE92ZXJmbG93ICYmIHtcbiAgICBwYWRkaW5nOiBgY2FsYyh2YXIoLS1HcmlkLXJvd1NwYWNpbmcpKSAwcHggMHB4IGNhbGModmFyKC0tR3JpZC1jb2x1bW5TcGFjaW5nKSlgXG4gIH0pKTtcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVTaXplQ2xhc3NOYW1lcyA9IGdyaWRTaXplID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lcyA9IFtdO1xuICBPYmplY3QuZW50cmllcyhncmlkU2l6ZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgaWYgKHZhbHVlICE9PSBmYWxzZSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGFzc05hbWVzLnB1c2goYGdyaWQtJHtrZXl9LSR7U3RyaW5nKHZhbHVlKX1gKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xhc3NOYW1lcztcbn07XG5leHBvcnQgY29uc3QgZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcyA9IChzcGFjaW5nLCBzbWFsbGVzdEJyZWFrcG9pbnQgPSAneHMnKSA9PiB7XG4gIGZ1bmN0aW9uIGlzVmFsaWRTcGFjaW5nKHZhbCkge1xuICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgIU51bWJlci5pc05hTihOdW1iZXIodmFsKSkgfHwgdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgdmFsID4gMDtcbiAgfVxuICBpZiAoaXNWYWxpZFNwYWNpbmcoc3BhY2luZykpIHtcbiAgICByZXR1cm4gW2BzcGFjaW5nLSR7c21hbGxlc3RCcmVha3BvaW50fS0ke1N0cmluZyhzcGFjaW5nKX1gXTtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNpbmcgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHNwYWNpbmcpKSB7XG4gICAgY29uc3QgY2xhc3NOYW1lcyA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKHNwYWNpbmcpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgaWYgKGlzVmFsaWRTcGFjaW5nKHZhbHVlKSkge1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goYHNwYWNpbmctJHtrZXl9LSR7U3RyaW5nKHZhbHVlKX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2xhc3NOYW1lcztcbiAgfVxuICByZXR1cm4gW107XG59O1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlRGlyZWN0aW9uQ2xhc3NlcyA9IGRpcmVjdGlvbiA9PiB7XG4gIGlmIChkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAodHlwZW9mIGRpcmVjdGlvbiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZGlyZWN0aW9uKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYGRpcmVjdGlvbi0ke2tleX0tJHt2YWx1ZX1gKTtcbiAgfVxuICByZXR1cm4gW2BkaXJlY3Rpb24teHMtJHtTdHJpbmcoZGlyZWN0aW9uKX1gXTtcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNvbHVtbnNcIiwgXCJjb250YWluZXJcIiwgXCJjb21wb25lbnRcIiwgXCJkaXJlY3Rpb25cIiwgXCJ3cmFwXCIsIFwic3BhY2luZ1wiLCBcInJvd1NwYWNpbmdcIiwgXCJjb2x1bW5TcGFjaW5nXCIsIFwiZGlzYWJsZUVxdWFsT3ZlcmZsb3dcIl07XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyB1bnN0YWJsZV9jb21wb3NlQ2xhc3NlcyBhcyBjb21wb3NlQ2xhc3NlcywgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgYXMgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCBzeXN0ZW1TdHlsZWQgZnJvbSAnLi4vc3R5bGVkJztcbmltcG9ydCB1c2VUaGVtZVByb3BzU3lzdGVtIGZyb20gJy4uL3VzZVRoZW1lUHJvcHMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsgZ2VuZXJhdGVHcmlkU3R5bGVzLCBnZW5lcmF0ZUdyaWRTaXplU3R5bGVzLCBnZW5lcmF0ZUdyaWRDb2x1bW5zU3R5bGVzLCBnZW5lcmF0ZUdyaWRDb2x1bW5TcGFjaW5nU3R5bGVzLCBnZW5lcmF0ZUdyaWRSb3dTcGFjaW5nU3R5bGVzLCBnZW5lcmF0ZUdyaWREaXJlY3Rpb25TdHlsZXMsIGdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcywgZ2VuZXJhdGVTaXplQ2xhc3NOYW1lcywgZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcywgZ2VuZXJhdGVEaXJlY3Rpb25DbGFzc2VzIH0gZnJvbSAnLi9ncmlkR2VuZXJhdG9yJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuXG4vLyB3aWRlbmluZyBUaGVtZSB0byBhbnkgc28gdGhhdCB0aGUgY29uc3VtZXIgY2FuIG93biB0aGUgdGhlbWUgc3RydWN0dXJlLlxuY29uc3QgZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCA9IHN5c3RlbVN0eWxlZCgnZGl2Jywge1xuICBuYW1lOiAnTXVpR3JpZCcsXG4gIHNsb3Q6ICdSb290JyxcbiAgb3ZlcnJpZGVzUmVzb2x2ZXI6IChwcm9wcywgc3R5bGVzKSA9PiBzdHlsZXMucm9vdFxufSk7XG5mdW5jdGlvbiB1c2VUaGVtZVByb3BzRGVmYXVsdChwcm9wcykge1xuICByZXR1cm4gdXNlVGhlbWVQcm9wc1N5c3RlbSh7XG4gICAgcHJvcHMsXG4gICAgbmFtZTogJ011aUdyaWQnLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdyaWQob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICAvLyBUaGlzIHdpbGwgYWxsb3cgYWRkaW5nIGN1c3RvbSBzdHlsZWQgZm4gKGZvciBleGFtcGxlIGZvciBjdXN0b20gc3ggc3R5bGUgZnVuY3Rpb24pXG4gICAgY3JlYXRlU3R5bGVkQ29tcG9uZW50ID0gZGVmYXVsdENyZWF0ZVN0eWxlZENvbXBvbmVudCxcbiAgICB1c2VUaGVtZVByb3BzID0gdXNlVGhlbWVQcm9wc0RlZmF1bHQsXG4gICAgY29tcG9uZW50TmFtZSA9ICdNdWlHcmlkJ1xuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgTmVzdGVkQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTtcbiAgY29uc3QgT3ZlcmZsb3dDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbiAgY29uc3QgdXNlVXRpbGl0eUNsYXNzZXMgPSAob3duZXJTdGF0ZSwgdGhlbWUpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nLFxuICAgICAgd3JhcCxcbiAgICAgIGdyaWRTaXplXG4gICAgfSA9IG93bmVyU3RhdGU7XG4gICAgY29uc3Qgc2xvdHMgPSB7XG4gICAgICByb290OiBbJ3Jvb3QnLCBjb250YWluZXIgJiYgJ2NvbnRhaW5lcicsIHdyYXAgIT09ICd3cmFwJyAmJiBgd3JhcC14cy0ke1N0cmluZyh3cmFwKX1gLCAuLi5nZW5lcmF0ZURpcmVjdGlvbkNsYXNzZXMoZGlyZWN0aW9uKSwgLi4uZ2VuZXJhdGVTaXplQ2xhc3NOYW1lcyhncmlkU2l6ZSksIC4uLihjb250YWluZXIgPyBnZW5lcmF0ZVNwYWNpbmdDbGFzc05hbWVzKHNwYWNpbmcsIHRoZW1lLmJyZWFrcG9pbnRzLmtleXNbMF0pIDogW10pXVxuICAgIH07XG4gICAgcmV0dXJuIGNvbXBvc2VDbGFzc2VzKHNsb3RzLCBzbG90ID0+IGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QpLCB7fSk7XG4gIH07XG4gIGNvbnN0IEdyaWRSb290ID0gY3JlYXRlU3R5bGVkQ29tcG9uZW50KGdlbmVyYXRlR3JpZENvbHVtbnNTdHlsZXMsIGdlbmVyYXRlR3JpZENvbHVtblNwYWNpbmdTdHlsZXMsIGdlbmVyYXRlR3JpZFJvd1NwYWNpbmdTdHlsZXMsIGdlbmVyYXRlR3JpZFNpemVTdHlsZXMsIGdlbmVyYXRlR3JpZERpcmVjdGlvblN0eWxlcywgZ2VuZXJhdGVHcmlkU3R5bGVzLCBnZW5lcmF0ZUdyaWRPZmZzZXRTdHlsZXMpO1xuICBjb25zdCBHcmlkID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gR3JpZChpblByb3BzLCByZWYpIHtcbiAgICB2YXIgX2luUHJvcHMkY29sdW1ucywgX2luUHJvcHMkc3BhY2luZywgX3JlZiwgX2luUHJvcHMkcm93U3BhY2luZywgX3JlZjIsIF9pblByb3BzJGNvbHVtblNwYWNpbiwgX3JlZjMsIF9kaXNhYmxlRXF1YWxPdmVyZmxvdztcbiAgICBjb25zdCB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gICAgY29uc3QgdGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHMoaW5Qcm9wcyk7XG4gICAgY29uc3QgcHJvcHMgPSBleHRlbmRTeFByb3AodGhlbWVQcm9wcyk7IC8vIGBjb2xvcmAgdHlwZSBjb25mbGljdHMgd2l0aCBodG1sIGNvbG9yIGF0dHJpYnV0ZS5cbiAgICBjb25zdCBuZXN0ZWQgPSBSZWFjdC51c2VDb250ZXh0KE5lc3RlZENvbnRleHQpO1xuICAgIGNvbnN0IG92ZXJmbG93ID0gUmVhY3QudXNlQ29udGV4dChPdmVyZmxvd0NvbnRleHQpO1xuICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICBjb2x1bW5zOiBjb2x1bW5zUHJvcCA9IDEyLFxuICAgICAgICBjb250YWluZXIgPSBmYWxzZSxcbiAgICAgICAgY29tcG9uZW50ID0gJ2RpdicsXG4gICAgICAgIGRpcmVjdGlvbiA9ICdyb3cnLFxuICAgICAgICB3cmFwID0gJ3dyYXAnLFxuICAgICAgICBzcGFjaW5nOiBzcGFjaW5nUHJvcCA9IDAsXG4gICAgICAgIHJvd1NwYWNpbmc6IHJvd1NwYWNpbmdQcm9wID0gc3BhY2luZ1Byb3AsXG4gICAgICAgIGNvbHVtblNwYWNpbmc6IGNvbHVtblNwYWNpbmdQcm9wID0gc3BhY2luZ1Byb3AsXG4gICAgICAgIGRpc2FibGVFcXVhbE92ZXJmbG93OiB0aGVtZURpc2FibGVFcXVhbE92ZXJmbG93XG4gICAgICB9ID0gcHJvcHMsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gICAgLy8gQmVjYXVzZSBgZGlzYWJsZUVxdWFsT3ZlcmZsb3dgIGNhbiBiZSBzZXQgZnJvbSB0aGUgdGhlbWUncyBkZWZhdWx0UHJvcHMsIHRoZSAqKm5lc3RlZCoqIGdyaWQgc2hvdWxkIGxvb2sgYXQgdGhlIGluc3RhbmNlIHByb3BzIGluc3RlYWQuXG4gICAgbGV0IGRpc2FibGVFcXVhbE92ZXJmbG93ID0gdGhlbWVEaXNhYmxlRXF1YWxPdmVyZmxvdztcbiAgICBpZiAobmVzdGVkICYmIHRoZW1lRGlzYWJsZUVxdWFsT3ZlcmZsb3cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlzYWJsZUVxdWFsT3ZlcmZsb3cgPSBpblByb3BzLmRpc2FibGVFcXVhbE92ZXJmbG93O1xuICAgIH1cbiAgICAvLyBjb2xsZWN0IGJyZWFrcG9pbnRzIHJlbGF0ZWQgcHJvcHMgYmVjYXVzZSB0aGV5IGNhbiBiZSBjdXN0b21pemVkIGZyb20gdGhlIHRoZW1lLlxuICAgIGNvbnN0IGdyaWRTaXplID0ge307XG4gICAgY29uc3QgZ3JpZE9mZnNldCA9IHt9O1xuICAgIGNvbnN0IG90aGVyID0ge307XG4gICAgT2JqZWN0LmVudHJpZXMocmVzdCkuZm9yRWFjaCgoW2tleSwgdmFsXSkgPT4ge1xuICAgICAgaWYgKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ3JpZFNpemVba2V5XSA9IHZhbDtcbiAgICAgIH0gZWxzZSBpZiAodGhlbWUuYnJlYWtwb2ludHMudmFsdWVzW2tleS5yZXBsYWNlKCdPZmZzZXQnLCAnJyldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ3JpZE9mZnNldFtrZXkucmVwbGFjZSgnT2Zmc2V0JywgJycpXSA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG90aGVyW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgY29sdW1ucyA9IChfaW5Qcm9wcyRjb2x1bW5zID0gaW5Qcm9wcy5jb2x1bW5zKSAhPSBudWxsID8gX2luUHJvcHMkY29sdW1ucyA6IG5lc3RlZCA/IHVuZGVmaW5lZCA6IGNvbHVtbnNQcm9wO1xuICAgIGNvbnN0IHNwYWNpbmcgPSAoX2luUHJvcHMkc3BhY2luZyA9IGluUHJvcHMuc3BhY2luZykgIT0gbnVsbCA/IF9pblByb3BzJHNwYWNpbmcgOiBuZXN0ZWQgPyB1bmRlZmluZWQgOiBzcGFjaW5nUHJvcDtcbiAgICBjb25zdCByb3dTcGFjaW5nID0gKF9yZWYgPSAoX2luUHJvcHMkcm93U3BhY2luZyA9IGluUHJvcHMucm93U3BhY2luZykgIT0gbnVsbCA/IF9pblByb3BzJHJvd1NwYWNpbmcgOiBpblByb3BzLnNwYWNpbmcpICE9IG51bGwgPyBfcmVmIDogbmVzdGVkID8gdW5kZWZpbmVkIDogcm93U3BhY2luZ1Byb3A7XG4gICAgY29uc3QgY29sdW1uU3BhY2luZyA9IChfcmVmMiA9IChfaW5Qcm9wcyRjb2x1bW5TcGFjaW4gPSBpblByb3BzLmNvbHVtblNwYWNpbmcpICE9IG51bGwgPyBfaW5Qcm9wcyRjb2x1bW5TcGFjaW4gOiBpblByb3BzLnNwYWNpbmcpICE9IG51bGwgPyBfcmVmMiA6IG5lc3RlZCA/IHVuZGVmaW5lZCA6IGNvbHVtblNwYWNpbmdQcm9wO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgIG5lc3RlZCxcbiAgICAgIGNvbHVtbnMsXG4gICAgICBjb250YWluZXIsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICB3cmFwLFxuICAgICAgc3BhY2luZyxcbiAgICAgIHJvd1NwYWNpbmcsXG4gICAgICBjb2x1bW5TcGFjaW5nLFxuICAgICAgZ3JpZFNpemUsXG4gICAgICBncmlkT2Zmc2V0LFxuICAgICAgZGlzYWJsZUVxdWFsT3ZlcmZsb3c6IChfcmVmMyA9IChfZGlzYWJsZUVxdWFsT3ZlcmZsb3cgPSBkaXNhYmxlRXF1YWxPdmVyZmxvdykgIT0gbnVsbCA/IF9kaXNhYmxlRXF1YWxPdmVyZmxvdyA6IG92ZXJmbG93KSAhPSBudWxsID8gX3JlZjMgOiBmYWxzZSxcbiAgICAgIC8vIHVzZSBjb250ZXh0IHZhbHVlIGlmIGV4aXN0cy5cbiAgICAgIHBhcmVudERpc2FibGVFcXVhbE92ZXJmbG93OiBvdmVyZmxvdyAvLyBmb3IgbmVzdGVkIGdyaWRcbiAgICB9KTtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSB1c2VVdGlsaXR5Q2xhc3Nlcyhvd25lclN0YXRlLCB0aGVtZSk7XG4gICAgbGV0IHJlc3VsdCA9IC8qI19fUFVSRV9fKi9fanN4KEdyaWRSb290LCBfZXh0ZW5kcyh7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGFzOiBjb21wb25lbnQsXG4gICAgICBvd25lclN0YXRlOiBvd25lclN0YXRlLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyKSk7XG4gICAgaWYgKCFuZXN0ZWQpIHtcbiAgICAgIHJlc3VsdCA9IC8qI19fUFVSRV9fKi9fanN4KE5lc3RlZENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgIGNoaWxkcmVuOiByZXN1bHRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGlzYWJsZUVxdWFsT3ZlcmZsb3cgIT09IHVuZGVmaW5lZCAmJiBkaXNhYmxlRXF1YWxPdmVyZmxvdyAhPT0gKG92ZXJmbG93ICE9IG51bGwgPyBvdmVyZmxvdyA6IGZhbHNlKSkge1xuICAgICAgLy8gVGhlcmUgYXJlIDIgcG9zc2liaWxpdGllcyB0aGF0IHNob3VsZCB3cmFwIHdpdGggdGhlIE92ZXJmbG93Q29udGV4dCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBuZXN0ZWQgZ3JpZHM6XG4gICAgICAvLyAxLiBJdCBpcyB0aGUgcm9vdCBncmlkIHdpdGggYGRpc2FibGVFcXVhbE92ZXJmbG93YC5cbiAgICAgIC8vIDIuIEl0IGlzIGEgbmVzdGVkIGdyaWQgd2l0aCBkaWZmZXJlbnQgYGRpc2FibGVFcXVhbE92ZXJmbG93YCBmcm9tIHRoZSBjb250ZXh0LlxuICAgICAgcmVzdWx0ID0gLyojX19QVVJFX18qL19qc3goT3ZlcmZsb3dDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBkaXNhYmxlRXF1YWxPdmVyZmxvdyxcbiAgICAgICAgY2hpbGRyZW46IHJlc3VsdFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBHcmlkLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29sdW1uczogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICBjb2x1bW5TcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgY29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG4gICAgY29udGFpbmVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgZGlzYWJsZUVxdWFsT3ZlcmZsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIGxnOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAgIGxnT2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gICAgbWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gICAgbWRPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICByb3dTcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgc206IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gICAgc21PZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICBzcGFjaW5nOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gICAgc3g6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuYm9vbF0pKSwgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgICB3cmFwOiBQcm9wVHlwZXMub25lT2YoWydub3dyYXAnLCAnd3JhcC1yZXZlcnNlJywgJ3dyYXAnXSksXG4gICAgeGw6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gICAgeGxPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgICB4czogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgICB4c09mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pXG4gIH0gOiB2b2lkIDA7XG4gIHJldHVybiBHcmlkO1xufSIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlR3JpZCBmcm9tICcuL2NyZWF0ZUdyaWQnO1xuLyoqXG4gKlxuICogRGVtb3M6XG4gKlxuICogLSBbR3JpZCAoTWF0ZXJpYWwgVUkpXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvcmVhY3QtZ3JpZC8pXG4gKlxuICogQVBJOlxuICpcbiAqIC0gW0dyaWQgQVBJXShodHRwczovL211aS5jb20vc3lzdGVtL2FwaS9ncmlkLylcbiAqL1xuY29uc3QgR3JpZCA9IGNyZWF0ZUdyaWQoKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEdyaWQucHJvcFR5cGVzIC8qIHJlbW92ZS1wcm9wdHlwZXMgKi8gPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IFR5cGVTY3JpcHQgdHlwZXMgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29sdW1ucy5cbiAgICogQGRlZmF1bHQgMTJcbiAgICovXG4gIGNvbHVtbnM6IFByb3BUeXBlcyAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm51bWJlciksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3RdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGhvcml6b250YWwgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgb3ZlcnJpZGVzIHRoZSB2YWx1ZSBvZiB0aGUgYHNwYWNpbmdgIHByb3AuXG4gICAqL1xuICBjb2x1bW5TcGFjaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIGhhdmUgdGhlIGZsZXggKmNvbnRhaW5lciogYmVoYXZpb3IuXG4gICAqIFlvdSBzaG91bGQgYmUgd3JhcHBpbmcgKml0ZW1zKiB3aXRoIGEgKmNvbnRhaW5lciouXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBjb250YWluZXI6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgYGZsZXgtZGlyZWN0aW9uYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQgaXMgYXBwbGllZCBmb3IgYWxsIHNjcmVlbiBzaXplcy5cbiAgICogQGRlZmF1bHQgJ3JvdydcbiAgICovXG4gIGRpcmVjdGlvbjogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbmVnYXRpdmUgbWFyZ2luIGFuZCBwYWRkaW5nIGFyZSBhcHBseSBvbmx5IHRvIHRoZSB0b3AgYW5kIGxlZnQgc2lkZXMgb2YgdGhlIGdyaWQuXG4gICAqL1xuICBkaXNhYmxlRXF1YWxPdmVyZmxvdzogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgbGdgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBsZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBtYXJnaW4tbGVmdCBlcXVhbHMgdG8gdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtIHB1c2ggaXRzZWxmIHRvIHRoZSByaWdodC1lbmQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgbGdgIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBsZ09mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSXQgY2FuJ3QgYmUgZ3JlYXRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgY29sdW1ucyBvZiB0aGUgY29udGFpbmVyICgxMiBieSBkZWZhdWx0KS5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggbWF0Y2hlcyBpdHMgY29udGVudC5cbiAgICogSWYgZmFsc2UsIHRoZSBwcm9wIGlzIGlnbm9yZWQuXG4gICAqIElmIHRydWUsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBncm93cyB0byB1c2UgdGhlIHNwYWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZCBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYG1kYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgbWQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5ib29sXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbWFyZ2luLWxlZnQgZXF1YWxzIHRvIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSBwdXNoIGl0c2VsZiB0byB0aGUgcmlnaHQtZW5kIG9mIHRoZSBjb250YWluZXIuXG4gICAqIFRoZSB2YWx1ZSBpcyBhcHBsaWVkIGZvciB0aGUgYG1kYCBicmVha3BvaW50IGFuZCB3aWRlciBzY3JlZW5zIGlmIG5vdCBvdmVycmlkZGVuLlxuICAgKi9cbiAgbWRPZmZzZXQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2F1dG8nXSksIFByb3BUeXBlcy5udW1iZXJdKSxcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIHZlcnRpY2FsIHNwYWNlIGJldHdlZW4gdGhlIHR5cGUgYGl0ZW1gIGNvbXBvbmVudHMuXG4gICAqIEl0IG92ZXJyaWRlcyB0aGUgdmFsdWUgb2YgdGhlIGBzcGFjaW5nYCBwcm9wLlxuICAgKi9cbiAgcm93U3BhY2luZzogUHJvcFR5cGVzIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi8ub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSkpLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgc21gIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBzbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLmJvb2xdKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBtYXJnaW4tbGVmdCBlcXVhbHMgdG8gdGhlIG51bWJlciBvZiBjb2x1bW5zIHRoZSBncmlkIGl0ZW0gdXNlcy5cbiAgICogSWYgJ2F1dG8nLCB0aGUgZ3JpZCBpdGVtIHB1c2ggaXRzZWxmIHRvIHRoZSByaWdodC1lbmQgb2YgdGhlIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIHRoZSBgc21gIGJyZWFrcG9pbnQgYW5kIHdpZGVyIHNjcmVlbnMgaWYgbm90IG92ZXJyaWRkZW4uXG4gICAqL1xuICBzbU9mZnNldDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9uZU9mKFsnYXV0byddKSwgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgdHlwZSBgaXRlbWAgY29tcG9uZW50cy5cbiAgICogSXQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHR5cGUgYGNvbnRhaW5lcmAgY29tcG9uZW50LlxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBzcGFjaW5nOiBQcm9wVHlwZXMgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqLy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zdHJpbmddKSksIFByb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5zdHJpbmddKSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC13cmFwYCBzdHlsZSBwcm9wZXJ0eS5cbiAgICogSXQncyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAnd3JhcCdcbiAgICovXG4gIHdyYXA6IFByb3BUeXBlcy5vbmVPZihbJ25vd3JhcCcsICd3cmFwLXJldmVyc2UnLCAnd3JhcCddKSxcbiAgLyoqXG4gICAqIElmIGEgbnVtYmVyLCBpdCBzZXRzIHRoZSBudW1iZXIgb2YgY29sdW1ucyB0aGUgZ3JpZCBpdGVtIHVzZXMuXG4gICAqIEl0IGNhbid0IGJlIGdyZWF0ZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGNvbHVtbnMgb2YgdGhlIGNvbnRhaW5lciAoMTIgYnkgZGVmYXVsdCkuXG4gICAqIElmICdhdXRvJywgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIG1hdGNoZXMgaXRzIGNvbnRlbnQuXG4gICAqIElmIGZhbHNlLCB0aGUgcHJvcCBpcyBpZ25vcmVkLlxuICAgKiBJZiB0cnVlLCB0aGUgZ3JpZCBpdGVtJ3Mgd2lkdGggZ3Jvd3MgdG8gdXNlIHRoZSBzcGFjZSBhdmFpbGFibGUgaW4gdGhlIGdyaWQgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHhsOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG1hcmdpbi1sZWZ0IGVxdWFscyB0byB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0gcHVzaCBpdHNlbGYgdG8gdGhlIHJpZ2h0LWVuZCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGB4bGAgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIHhsT2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyXSksXG4gIC8qKlxuICAgKiBJZiBhIG51bWJlciwgaXQgc2V0cyB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJdCBjYW4ndCBiZSBncmVhdGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBjb2x1bW5zIG9mIHRoZSBjb250YWluZXIgKDEyIGJ5IGRlZmF1bHQpLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0ncyB3aWR0aCBtYXRjaGVzIGl0cyBjb250ZW50LlxuICAgKiBJZiBmYWxzZSwgdGhlIHByb3AgaXMgaWdub3JlZC5cbiAgICogSWYgdHJ1ZSwgdGhlIGdyaWQgaXRlbSdzIHdpZHRoIGdyb3dzIHRvIHVzZSB0aGUgc3BhY2UgYXZhaWxhYmxlIGluIHRoZSBncmlkIGNvbnRhaW5lci5cbiAgICogVGhlIHZhbHVlIGlzIGFwcGxpZWQgZm9yIGFsbCB0aGUgc2NyZWVuIHNpemVzIHdpdGggdGhlIGxvd2VzdCBwcmlvcml0eS5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHhzOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuYm9vbF0pLFxuICAvKipcbiAgICogSWYgYSBudW1iZXIsIGl0IHNldHMgdGhlIG1hcmdpbi1sZWZ0IGVxdWFscyB0byB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgdGhlIGdyaWQgaXRlbSB1c2VzLlxuICAgKiBJZiAnYXV0bycsIHRoZSBncmlkIGl0ZW0gcHVzaCBpdHNlbGYgdG8gdGhlIHJpZ2h0LWVuZCBvZiB0aGUgY29udGFpbmVyLlxuICAgKiBUaGUgdmFsdWUgaXMgYXBwbGllZCBmb3IgdGhlIGB4c2AgYnJlYWtwb2ludCBhbmQgd2lkZXIgc2NyZWVucyBpZiBub3Qgb3ZlcnJpZGRlbi5cbiAgICovXG4gIHhzT2Zmc2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydhdXRvJ10pLCBQcm9wVHlwZXMubnVtYmVyXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBHcmlkOyIsImltcG9ydCB7IHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzLCB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMgfSBmcm9tICdAbXVpL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRHcmlkVXRpbGl0eUNsYXNzKHNsb3QpIHtcbiAgcmV0dXJuIGdlbmVyYXRlVXRpbGl0eUNsYXNzKCdNdWlHcmlkJywgc2xvdCk7XG59XG5jb25zdCBTUEFDSU5HUyA9IFswLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF07XG5jb25zdCBESVJFQ1RJT05TID0gWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J107XG5jb25zdCBXUkFQUyA9IFsnbm93cmFwJywgJ3dyYXAtcmV2ZXJzZScsICd3cmFwJ107XG5jb25zdCBHUklEX1NJWkVTID0gWydhdXRvJywgdHJ1ZSwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMl07XG5jb25zdCBncmlkQ2xhc3NlcyA9IGdlbmVyYXRlVXRpbGl0eUNsYXNzZXMoJ011aUdyaWQnLCBbJ3Jvb3QnLCAnY29udGFpbmVyJywgJ2l0ZW0nLFxuLy8gc3BhY2luZ3Ncbi4uLlNQQUNJTkdTLm1hcChzcGFjaW5nID0+IGBzcGFjaW5nLXhzLSR7c3BhY2luZ31gKSxcbi8vIGRpcmVjdGlvbiB2YWx1ZXNcbi4uLkRJUkVDVElPTlMubWFwKGRpcmVjdGlvbiA9PiBgZGlyZWN0aW9uLXhzLSR7ZGlyZWN0aW9ufWApLFxuLy8gd3JhcCB2YWx1ZXNcbi4uLldSQVBTLm1hcCh3cmFwID0+IGB3cmFwLXhzLSR7d3JhcH1gKSxcbi8vIGdyaWQgc2l6ZXMgZm9yIGFsbCBicmVha3BvaW50c1xuLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC14cy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQtc20tJHtzaXplfWApLCAuLi5HUklEX1NJWkVTLm1hcChzaXplID0+IGBncmlkLW1kLSR7c2l6ZX1gKSwgLi4uR1JJRF9TSVpFUy5tYXAoc2l6ZSA9PiBgZ3JpZC1sZy0ke3NpemV9YCksIC4uLkdSSURfU0laRVMubWFwKHNpemUgPT4gYGdyaWQteGwtJHtzaXplfWApXSk7XG5leHBvcnQgZGVmYXVsdCBncmlkQ2xhc3NlczsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wiY29tcG9uZW50XCIsIFwiZGlyZWN0aW9uXCIsIFwic3BhY2luZ1wiLCBcImRpdmlkZXJcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiXTtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGRlZXBtZXJnZSwgdW5zdGFibGVfY29tcG9zZUNsYXNzZXMgYXMgY29tcG9zZUNsYXNzZXMsIHVuc3RhYmxlX2dlbmVyYXRlVXRpbGl0eUNsYXNzIGFzIGdlbmVyYXRlVXRpbGl0eUNsYXNzIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgc3lzdGVtU3R5bGVkIGZyb20gJy4uL3N0eWxlZCc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wc1N5c3RlbSBmcm9tICcuLi91c2VUaGVtZVByb3BzJztcbmltcG9ydCB7IGV4dGVuZFN4UHJvcCB9IGZyb20gJy4uL3N0eWxlRnVuY3Rpb25TeCc7XG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnLi4vY3JlYXRlVGhlbWUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyLCByZXNvbHZlQnJlYWtwb2ludFZhbHVlcyB9IGZyb20gJy4uL2JyZWFrcG9pbnRzJztcbmltcG9ydCB7IGNyZWF0ZVVuYXJ5U3BhY2luZywgZ2V0VmFsdWUgfSBmcm9tICcuLi9zcGFjaW5nJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuLy8gd2lkZW5pbmcgVGhlbWUgdG8gYW55IHNvIHRoYXQgdGhlIGNvbnN1bWVyIGNhbiBvd24gdGhlIHRoZW1lIHN0cnVjdHVyZS5cbmNvbnN0IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQgPSBzeXN0ZW1TdHlsZWQoJ2RpdicsIHtcbiAgbmFtZTogJ011aVN0YWNrJyxcbiAgc2xvdDogJ1Jvb3QnLFxuICBvdmVycmlkZXNSZXNvbHZlcjogKHByb3BzLCBzdHlsZXMpID0+IHN0eWxlcy5yb290XG59KTtcbmZ1bmN0aW9uIHVzZVRoZW1lUHJvcHNEZWZhdWx0KHByb3BzKSB7XG4gIHJldHVybiB1c2VUaGVtZVByb3BzU3lzdGVtKHtcbiAgICBwcm9wcyxcbiAgICBuYW1lOiAnTXVpU3RhY2snLFxuICAgIGRlZmF1bHRUaGVtZVxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gYW4gYXJyYXkgd2l0aCB0aGUgc2VwYXJhdG9yIFJlYWN0IGVsZW1lbnQgaW50ZXJzcGVyc2VkIGJldHdlZW5cbiAqIGVhY2ggUmVhY3Qgbm9kZSBvZiB0aGUgaW5wdXQgY2hpbGRyZW4uXG4gKlxuICogPiBqb2luQ2hpbGRyZW4oWzEsMiwzXSwgMClcbiAqIFsxLDAsMiwwLDNdXG4gKi9cbmZ1bmN0aW9uIGpvaW5DaGlsZHJlbihjaGlsZHJlbiwgc2VwYXJhdG9yKSB7XG4gIGNvbnN0IGNoaWxkcmVuQXJyYXkgPSBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5maWx0ZXIoQm9vbGVhbik7XG4gIHJldHVybiBjaGlsZHJlbkFycmF5LnJlZHVjZSgob3V0cHV0LCBjaGlsZCwgaW5kZXgpID0+IHtcbiAgICBvdXRwdXQucHVzaChjaGlsZCk7XG4gICAgaWYgKGluZGV4IDwgY2hpbGRyZW5BcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICBvdXRwdXQucHVzaCggLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChzZXBhcmF0b3IsIHtcbiAgICAgICAga2V5OiBgc2VwYXJhdG9yLSR7aW5kZXh9YFxuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LCBbXSk7XG59XG5jb25zdCBnZXRTaWRlRnJvbURpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PiB7XG4gIHJldHVybiB7XG4gICAgcm93OiAnTGVmdCcsXG4gICAgJ3Jvdy1yZXZlcnNlJzogJ1JpZ2h0JyxcbiAgICBjb2x1bW46ICdUb3AnLFxuICAgICdjb2x1bW4tcmV2ZXJzZSc6ICdCb3R0b20nXG4gIH1bZGlyZWN0aW9uXTtcbn07XG5leHBvcnQgY29uc3Qgc3R5bGUgPSAoe1xuICBvd25lclN0YXRlLFxuICB0aGVtZVxufSkgPT4ge1xuICBsZXQgc3R5bGVzID0gX2V4dGVuZHMoe1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJ1xuICB9LCBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgdGhlbWVcbiAgfSwgcmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMoe1xuICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgYnJlYWtwb2ludHM6IHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlc1xuICB9KSwgcHJvcFZhbHVlID0+ICh7XG4gICAgZmxleERpcmVjdGlvbjogcHJvcFZhbHVlXG4gIH0pKSk7XG4gIGlmIChvd25lclN0YXRlLnNwYWNpbmcpIHtcbiAgICBjb25zdCB0cmFuc2Zvcm1lciA9IGNyZWF0ZVVuYXJ5U3BhY2luZyh0aGVtZSk7XG4gICAgY29uc3QgYmFzZSA9IE9iamVjdC5rZXlzKHRoZW1lLmJyZWFrcG9pbnRzLnZhbHVlcykucmVkdWNlKChhY2MsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3duZXJTdGF0ZS5zcGFjaW5nID09PSAnb2JqZWN0JyAmJiBvd25lclN0YXRlLnNwYWNpbmdbYnJlYWtwb2ludF0gIT0gbnVsbCB8fCB0eXBlb2Ygb3duZXJTdGF0ZS5kaXJlY3Rpb24gPT09ICdvYmplY3QnICYmIG93bmVyU3RhdGUuZGlyZWN0aW9uW2JyZWFrcG9pbnRdICE9IG51bGwpIHtcbiAgICAgICAgYWNjW2JyZWFrcG9pbnRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIGNvbnN0IGRpcmVjdGlvblZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5kaXJlY3Rpb24sXG4gICAgICBiYXNlXG4gICAgfSk7XG4gICAgY29uc3Qgc3BhY2luZ1ZhbHVlcyA9IHJlc29sdmVCcmVha3BvaW50VmFsdWVzKHtcbiAgICAgIHZhbHVlczogb3duZXJTdGF0ZS5zcGFjaW5nLFxuICAgICAgYmFzZVxuICAgIH0pO1xuICAgIGlmICh0eXBlb2YgZGlyZWN0aW9uVmFsdWVzID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoZGlyZWN0aW9uVmFsdWVzKS5mb3JFYWNoKChicmVha3BvaW50LCBpbmRleCwgYnJlYWtwb2ludHMpID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uVmFsdWUgPSBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF07XG4gICAgICAgIGlmICghZGlyZWN0aW9uVmFsdWUpIHtcbiAgICAgICAgICBjb25zdCBwcmV2aW91c0RpcmVjdGlvblZhbHVlID0gaW5kZXggPiAwID8gZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRzW2luZGV4IC0gMV1dIDogJ2NvbHVtbic7XG4gICAgICAgICAgZGlyZWN0aW9uVmFsdWVzW2JyZWFrcG9pbnRdID0gcHJldmlvdXNEaXJlY3Rpb25WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IChwcm9wVmFsdWUsIGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICcmID4gOm5vdChzdHlsZSkgKyA6bm90KHN0eWxlKSc6IHtcbiAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgW2BtYXJnaW4ke2dldFNpZGVGcm9tRGlyZWN0aW9uKGJyZWFrcG9pbnQgPyBkaXJlY3Rpb25WYWx1ZXNbYnJlYWtwb2ludF0gOiBvd25lclN0YXRlLmRpcmVjdGlvbil9YF06IGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBzdHlsZXMgPSBkZWVwbWVyZ2Uoc3R5bGVzLCBoYW5kbGVCcmVha3BvaW50cyh7XG4gICAgICB0aGVtZVxuICAgIH0sIHNwYWNpbmdWYWx1ZXMsIHN0eWxlRnJvbVByb3BWYWx1ZSkpO1xuICB9XG4gIHN0eWxlcyA9IG1lcmdlQnJlYWtwb2ludHNJbk9yZGVyKHRoZW1lLmJyZWFrcG9pbnRzLCBzdHlsZXMpO1xuICByZXR1cm4gc3R5bGVzO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVN0YWNrKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgLy8gVGhpcyB3aWxsIGFsbG93IGFkZGluZyBjdXN0b20gc3R5bGVkIGZuIChmb3IgZXhhbXBsZSBmb3IgY3VzdG9tIHN4IHN0eWxlIGZ1bmN0aW9uKVxuICAgIGNyZWF0ZVN0eWxlZENvbXBvbmVudCA9IGRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQsXG4gICAgdXNlVGhlbWVQcm9wcyA9IHVzZVRoZW1lUHJvcHNEZWZhdWx0LFxuICAgIGNvbXBvbmVudE5hbWUgPSAnTXVpU3RhY2snXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB1c2VVdGlsaXR5Q2xhc3NlcyA9ICgpID0+IHtcbiAgICBjb25zdCBzbG90cyA9IHtcbiAgICAgIHJvb3Q6IFsncm9vdCddXG4gICAgfTtcbiAgICByZXR1cm4gY29tcG9zZUNsYXNzZXMoc2xvdHMsIHNsb3QgPT4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoY29tcG9uZW50TmFtZSwgc2xvdCksIHt9KTtcbiAgfTtcbiAgY29uc3QgU3RhY2tSb290ID0gY3JlYXRlU3R5bGVkQ29tcG9uZW50KHN0eWxlKTtcbiAgY29uc3QgU3RhY2sgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBHcmlkKGluUHJvcHMsIHJlZikge1xuICAgIGNvbnN0IHRoZW1lUHJvcHMgPSB1c2VUaGVtZVByb3BzKGluUHJvcHMpO1xuICAgIGNvbnN0IHByb3BzID0gZXh0ZW5kU3hQcm9wKHRoZW1lUHJvcHMpOyAvLyBgY29sb3JgIHR5cGUgY29uZmxpY3RzIHdpdGggaHRtbCBjb2xvciBhdHRyaWJ1dGUuXG4gICAgY29uc3Qge1xuICAgICAgICBjb21wb25lbnQgPSAnZGl2JyxcbiAgICAgICAgZGlyZWN0aW9uID0gJ2NvbHVtbicsXG4gICAgICAgIHNwYWNpbmcgPSAwLFxuICAgICAgICBkaXZpZGVyLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICB9ID0gcHJvcHMsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IG93bmVyU3RhdGUgPSB7XG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzcGFjaW5nXG4gICAgfTtcbiAgICBjb25zdCBjbGFzc2VzID0gdXNlVXRpbGl0eUNsYXNzZXMoKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19qc3goU3RhY2tSb290LCBfZXh0ZW5kcyh7XG4gICAgICBhczogY29tcG9uZW50LFxuICAgICAgb3duZXJTdGF0ZTogb3duZXJTdGF0ZSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lKVxuICAgIH0sIG90aGVyLCB7XG4gICAgICBjaGlsZHJlbjogZGl2aWRlciA/IGpvaW5DaGlsZHJlbihjaGlsZHJlbiwgZGl2aWRlcikgOiBjaGlsZHJlblxuICAgIH0pKTtcbiAgfSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0YWNrLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBkaXJlY3Rpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSksIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5vbmVPZihbJ2NvbHVtbi1yZXZlcnNlJywgJ2NvbHVtbicsICdyb3ctcmV2ZXJzZScsICdyb3cnXSkpLCBQcm9wVHlwZXMub2JqZWN0XSksXG4gICAgZGl2aWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gICAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfSA6IHZvaWQgMDtcbiAgcmV0dXJuIFN0YWNrO1xufSIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY3JlYXRlU3RhY2sgZnJvbSAnLi9jcmVhdGVTdGFjayc7XG4vKipcbiAqXG4gKiBEZW1vczpcbiAqXG4gKiAtIFtTdGFjayAoTWF0ZXJpYWwgVUkpXShodHRwczovL211aS5jb20vbWF0ZXJpYWwtdWkvcmVhY3Qtc3RhY2svKVxuICogLSBbU3RhY2sgKE1VSSBTeXN0ZW0pXShodHRwczovL211aS5jb20vc3lzdGVtL3JlYWN0LXN0YWNrLylcbiAqXG4gKiBBUEk6XG4gKlxuICogLSBbU3RhY2sgQVBJXShodHRwczovL211aS5jb20vc3lzdGVtL2FwaS9zdGFjay8pXG4gKi9cbmNvbnN0IFN0YWNrID0gY3JlYXRlU3RhY2soKTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFN0YWNrLnByb3BUeXBlcyAvKiByZW1vdmUtcHJvcHR5cGVzICovID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCBUeXBlU2NyaXB0IHR5cGVzIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBgZmxleC1kaXJlY3Rpb25gIHN0eWxlIHByb3BlcnR5LlxuICAgKiBJdCBpcyBhcHBsaWVkIGZvciBhbGwgc2NyZWVuIHNpemVzLlxuICAgKiBAZGVmYXVsdCAnY29sdW1uJ1xuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2YoWydjb2x1bW4tcmV2ZXJzZScsICdjb2x1bW4nLCAncm93LXJldmVyc2UnLCAncm93J10pKSwgUHJvcFR5cGVzLm9iamVjdF0pLFxuICAvKipcbiAgICogQWRkIGFuIGVsZW1lbnQgYmV0d2VlbiBlYWNoIGNoaWxkLlxuICAgKi9cbiAgZGl2aWRlcjogUHJvcFR5cGVzLm5vZGUsXG4gIC8qKlxuICAgKiBEZWZpbmVzIHRoZSBzcGFjZSBiZXR3ZWVuIGltbWVkaWF0ZSBjaGlsZHJlbi5cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgc3BhY2luZzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pKSwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAvKipcbiAgICogVGhlIHN5c3RlbSBwcm9wLCB3aGljaCBhbGxvd3MgZGVmaW5pbmcgc3lzdGVtIG92ZXJyaWRlcyBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgQ1NTIHN0eWxlcy5cbiAgICovXG4gIHN4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLmJvb2xdKSksIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTdGFjazsiLCJpbXBvcnQgeyB1bnN0YWJsZV9nZW5lcmF0ZVV0aWxpdHlDbGFzcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzcywgdW5zdGFibGVfZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyBhcyBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzIH0gZnJvbSAnQG11aS91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhY2tVdGlsaXR5Q2xhc3Moc2xvdCkge1xuICByZXR1cm4gZ2VuZXJhdGVVdGlsaXR5Q2xhc3MoJ011aVN0YWNrJywgc2xvdCk7XG59XG5jb25zdCBzdGFja0NsYXNzZXMgPSBnZW5lcmF0ZVV0aWxpdHlDbGFzc2VzKCdNdWlTdGFjaycsIFsncm9vdCddKTtcbmV4cG9ydCBkZWZhdWx0IHN0YWNrQ2xhc3NlczsiLCJpbXBvcnQgeyBkZWVwbWVyZ2UgfSBmcm9tICdAbXVpL3V0aWxzJztcbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG4gIHJldHVybiBkZWVwbWVyZ2UoYWNjLCBpdGVtLCB7XG4gICAgY2xvbmU6IGZhbHNlIC8vIE5vIG5lZWQgdG8gY2xvbmUgZGVlcCwgaXQncyB3YXkgZmFzdGVyLlxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2U7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmZ1bmN0aW9uIHRyYW5zZm9ybSh2YWx1ZSwgdXNlclZhbHVlKSB7XG4gIGlmICh1c2VyVmFsdWUgPT09ICdncmV5Jykge1xuICAgIHJldHVybiB1c2VyVmFsdWU7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZXhwb3J0IGNvbnN0IGNvbG9yID0gc3R5bGUoe1xuICBwcm9wOiAnY29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJnY29sb3IgPSBzdHlsZSh7XG4gIHByb3A6ICdiZ2NvbG9yJyxcbiAgY3NzUHJvcGVydHk6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICB0aGVtZUtleTogJ3BhbGV0dGUnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHN0eWxlKHtcbiAgcHJvcDogJ2JhY2tncm91bmRDb2xvcicsXG4gIHRoZW1lS2V5OiAncGFsZXR0ZScsXG4gIHRyYW5zZm9ybVxufSk7XG5jb25zdCBwYWxldHRlID0gY29tcG9zZShjb2xvciwgYmdjb2xvciwgYmFja2dyb3VuZENvbG9yKTtcbmV4cG9ydCBkZWZhdWx0IHBhbGV0dGU7IiwiaW1wb3J0IHN0eWxlIGZyb20gJy4vc3R5bGUnO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSAnLi9jb21wb3NlJztcbmV4cG9ydCBjb25zdCBwb3NpdGlvbiA9IHN0eWxlKHtcbiAgcHJvcDogJ3Bvc2l0aW9uJ1xufSk7XG5leHBvcnQgY29uc3QgekluZGV4ID0gc3R5bGUoe1xuICBwcm9wOiAnekluZGV4JyxcbiAgdGhlbWVLZXk6ICd6SW5kZXgnXG59KTtcbmV4cG9ydCBjb25zdCB0b3AgPSBzdHlsZSh7XG4gIHByb3A6ICd0b3AnXG59KTtcbmV4cG9ydCBjb25zdCByaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ3JpZ2h0J1xufSk7XG5leHBvcnQgY29uc3QgYm90dG9tID0gc3R5bGUoe1xuICBwcm9wOiAnYm90dG9tJ1xufSk7XG5leHBvcnQgY29uc3QgbGVmdCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xlZnQnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGNvbXBvc2UocG9zaXRpb24sIHpJbmRleCwgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KTsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5jb25zdCBib3hTaGFkb3cgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaGFkb3cnLFxuICB0aGVtZUtleTogJ3NoYWRvd3MnXG59KTtcbmV4cG9ydCBkZWZhdWx0IGJveFNoYWRvdzsiLCJpbXBvcnQgc3R5bGUgZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgY29tcG9zZSBmcm9tICcuL2NvbXBvc2UnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIHZhbHVlcyBhcyBicmVha3BvaW50c1ZhbHVlcyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA8PSAxICYmIHZhbHVlICE9PSAwID8gYCR7dmFsdWUgKiAxMDB9JWAgOiB2YWx1ZTtcbn1cbmV4cG9ydCBjb25zdCB3aWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtYXhXaWR0aCA9IHByb3BzID0+IHtcbiAgaWYgKHByb3BzLm1heFdpZHRoICE9PSB1bmRlZmluZWQgJiYgcHJvcHMubWF4V2lkdGggIT09IG51bGwpIHtcbiAgICBjb25zdCBzdHlsZUZyb21Qcm9wVmFsdWUgPSBwcm9wVmFsdWUgPT4ge1xuICAgICAgdmFyIF9wcm9wcyR0aGVtZSwgX3Byb3BzJHRoZW1lJGJyZWFrcG9pLCBfcHJvcHMkdGhlbWUkYnJlYWtwb2kyO1xuICAgICAgY29uc3QgYnJlYWtwb2ludCA9ICgoX3Byb3BzJHRoZW1lID0gcHJvcHMudGhlbWUpID09IG51bGwgPyB2b2lkIDAgOiAoX3Byb3BzJHRoZW1lJGJyZWFrcG9pID0gX3Byb3BzJHRoZW1lLmJyZWFrcG9pbnRzKSA9PSBudWxsID8gdm9pZCAwIDogKF9wcm9wcyR0aGVtZSRicmVha3BvaTIgPSBfcHJvcHMkdGhlbWUkYnJlYWtwb2kudmFsdWVzKSA9PSBudWxsID8gdm9pZCAwIDogX3Byb3BzJHRoZW1lJGJyZWFrcG9pMltwcm9wVmFsdWVdKSB8fCBicmVha3BvaW50c1ZhbHVlc1twcm9wVmFsdWVdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF4V2lkdGg6IGJyZWFrcG9pbnQgfHwgdHJhbnNmb3JtKHByb3BWYWx1ZSlcbiAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BzLm1heFdpZHRoLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbm1heFdpZHRoLmZpbHRlclByb3BzID0gWydtYXhXaWR0aCddO1xuZXhwb3J0IGNvbnN0IG1pbldpZHRoID0gc3R5bGUoe1xuICBwcm9wOiAnbWluV2lkdGgnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IGhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2hlaWdodCcsXG4gIHRyYW5zZm9ybVxufSk7XG5leHBvcnQgY29uc3QgbWF4SGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnbWF4SGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBtaW5IZWlnaHQgPSBzdHlsZSh7XG4gIHByb3A6ICdtaW5IZWlnaHQnLFxuICB0cmFuc2Zvcm1cbn0pO1xuZXhwb3J0IGNvbnN0IHNpemVXaWR0aCA9IHN0eWxlKHtcbiAgcHJvcDogJ3NpemUnLFxuICBjc3NQcm9wZXJ0eTogJ3dpZHRoJyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBzaXplSGVpZ2h0ID0gc3R5bGUoe1xuICBwcm9wOiAnc2l6ZScsXG4gIGNzc1Byb3BlcnR5OiAnaGVpZ2h0JyxcbiAgdHJhbnNmb3JtXG59KTtcbmV4cG9ydCBjb25zdCBib3hTaXppbmcgPSBzdHlsZSh7XG4gIHByb3A6ICdib3hTaXppbmcnXG59KTtcbmNvbnN0IHNpemluZyA9IGNvbXBvc2Uod2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aCwgaGVpZ2h0LCBtYXhIZWlnaHQsIG1pbkhlaWdodCwgYm94U2l6aW5nKTtcbmV4cG9ydCBkZWZhdWx0IHNpemluZzsiLCJpbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5pbXBvcnQgeyBnZXRQYXRoIH0gZnJvbSAnLi9zdHlsZSc7XG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi9tZXJnZSc7XG5pbXBvcnQgbWVtb2l6ZSBmcm9tICcuL21lbW9pemUnO1xuY29uc3QgcHJvcGVydGllcyA9IHtcbiAgbTogJ21hcmdpbicsXG4gIHA6ICdwYWRkaW5nJ1xufTtcbmNvbnN0IGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG5jb25zdCBhbGlhc2VzID0ge1xuICBtYXJnaW5YOiAnbXgnLFxuICBtYXJnaW5ZOiAnbXknLFxuICBwYWRkaW5nWDogJ3B4JyxcbiAgcGFkZGluZ1k6ICdweSdcbn07XG5cbi8vIG1lbW9pemUoKSBpbXBhY3Q6XG4vLyBGcm9tIDMwMCwwMDAgb3BzL3NlY1xuLy8gVG8gMzUwLDAwMCBvcHMvc2VjXG5jb25zdCBnZXRDc3NQcm9wZXJ0aWVzID0gbWVtb2l6ZShwcm9wID0+IHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG4gIGNvbnN0IFthLCBiXSA9IHByb3Auc3BsaXQoJycpO1xuICBjb25zdCBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbYV07XG4gIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbnNbYl0gfHwgJyc7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRpcmVjdGlvbikgPyBkaXJlY3Rpb24ubWFwKGRpciA9PiBwcm9wZXJ0eSArIGRpcikgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG5jb25zdCBtYXJnaW5LZXlzID0gWydtJywgJ210JywgJ21yJywgJ21iJywgJ21sJywgJ214JywgJ215JywgJ21hcmdpbicsICdtYXJnaW5Ub3AnLCAnbWFyZ2luUmlnaHQnLCAnbWFyZ2luQm90dG9tJywgJ21hcmdpbkxlZnQnLCAnbWFyZ2luWCcsICdtYXJnaW5ZJywgJ21hcmdpbklubGluZScsICdtYXJnaW5JbmxpbmVTdGFydCcsICdtYXJnaW5JbmxpbmVFbmQnLCAnbWFyZ2luQmxvY2snLCAnbWFyZ2luQmxvY2tTdGFydCcsICdtYXJnaW5CbG9ja0VuZCddO1xuY29uc3QgcGFkZGluZ0tleXMgPSBbJ3AnLCAncHQnLCAncHInLCAncGInLCAncGwnLCAncHgnLCAncHknLCAncGFkZGluZycsICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdYJywgJ3BhZGRpbmdZJywgJ3BhZGRpbmdJbmxpbmUnLCAncGFkZGluZ0lubGluZVN0YXJ0JywgJ3BhZGRpbmdJbmxpbmVFbmQnLCAncGFkZGluZ0Jsb2NrJywgJ3BhZGRpbmdCbG9ja1N0YXJ0JywgJ3BhZGRpbmdCbG9ja0VuZCddO1xuY29uc3Qgc3BhY2luZ0tleXMgPSBbLi4ubWFyZ2luS2V5cywgLi4ucGFkZGluZ0tleXNdO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5VW5pdCh0aGVtZSwgdGhlbWVLZXksIGRlZmF1bHRWYWx1ZSwgcHJvcE5hbWUpIHtcbiAgdmFyIF9nZXRQYXRoO1xuICBjb25zdCB0aGVtZVNwYWNpbmcgPSAoX2dldFBhdGggPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSwgZmFsc2UpKSAhPSBudWxsID8gX2dldFBhdGggOiBkZWZhdWx0VmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFicyAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBNVUk6IEV4cGVjdGVkICR7cHJvcE5hbWV9IGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLCBnb3QgJHthYnN9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVTcGFjaW5nKSkge1xuICAgIHJldHVybiBhYnMgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBhYnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhYnM7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYWJzKSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCBhcnJheSB0eXBlIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG5vbiBpbnRlZ2VyIHZhbHVlcy5gICsgYFlvdSBzaG91bGQgZWl0aGVyIHVzZSBhbiBpbnRlZ2VyIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgaW5kZXgsIG9yIGRlZmluZSB0aGUgXFxgdGhlbWUuJHt0aGVtZUtleX1cXGAgYXMgYSBudW1iZXIuYF0uam9pbignXFxuJykpO1xuICAgICAgICB9IGVsc2UgaWYgKGFicyA+IHRoZW1lU3BhY2luZy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbYE1VSTogVGhlIHZhbHVlIHByb3ZpZGVkICgke2Fic30pIG92ZXJmbG93cy5gLCBgVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiAke0pTT04uc3RyaW5naWZ5KHRoZW1lU3BhY2luZyl9LmAsIGAke2Fic30gPiAke3RoZW1lU3BhY2luZy5sZW5ndGggLSAxfSwgeW91IG5lZWQgdG8gYWRkIHRoZSBtaXNzaW5nIHZhbHVlcy5gXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGVtZVNwYWNpbmdbYWJzXTtcbiAgICB9O1xuICB9XG4gIGlmICh0eXBlb2YgdGhlbWVTcGFjaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRoZW1lU3BhY2luZztcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IFRoZSBcXGB0aGVtZS4ke3RoZW1lS2V5fVxcYCB2YWx1ZSAoJHt0aGVtZVNwYWNpbmd9KSBpcyBpbnZhbGlkLmAsICdJdCBzaG91bGQgYmUgYSBudW1iZXIsIGFuIGFycmF5IG9yIGEgZnVuY3Rpb24uJ10uam9pbignXFxuJykpO1xuICB9XG4gIHJldHVybiAoKSA9PiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVW5hcnlTcGFjaW5nKHRoZW1lKSB7XG4gIHJldHVybiBjcmVhdGVVbmFyeVVuaXQodGhlbWUsICdzcGFjaW5nJywgOCwgJ3NwYWNpbmcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbHVlID09PSAnc3RyaW5nJyB8fCBwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBwcm9wVmFsdWU7XG4gIH1cbiAgY29uc3QgYWJzID0gTWF0aC5hYnMocHJvcFZhbHVlKTtcbiAgY29uc3QgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuICBpZiAocHJvcFZhbHVlID49IDApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiB0cmFuc2Zvcm1lZCA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gLXRyYW5zZm9ybWVkO1xuICB9XG4gIHJldHVybiBgLSR7dHJhbnNmb3JtZWR9YDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIHByb3BWYWx1ZSA9PiBjc3NQcm9wZXJ0aWVzLnJlZHVjZSgoYWNjLCBjc3NQcm9wZXJ0eSkgPT4ge1xuICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59XG5mdW5jdGlvbiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSB7XG4gIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gIC8vIGl0J3MgZG9lc24ndCB3b3J0aCB0aGUgYnVuZGxlIHNpemUuXG4gIGlmIChrZXlzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgY3NzUHJvcGVydGllcyA9IGdldENzc1Byb3BlcnRpZXMocHJvcCk7XG4gIGNvbnN0IHN0eWxlRnJvbVByb3BWYWx1ZSA9IGdldFN0eWxlRnJvbVByb3BWYWx1ZShjc3NQcm9wZXJ0aWVzLCB0cmFuc2Zvcm1lcik7XG4gIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BdO1xuICByZXR1cm4gaGFuZGxlQnJlYWtwb2ludHMocHJvcHMsIHByb3BWYWx1ZSwgc3R5bGVGcm9tUHJvcFZhbHVlKTtcbn1cbmZ1bmN0aW9uIHN0eWxlKHByb3BzLCBrZXlzKSB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gY3JlYXRlVW5hcnlTcGFjaW5nKHByb3BzLnRoZW1lKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BzKS5tYXAocHJvcCA9PiByZXNvbHZlQ3NzUHJvcGVydHkocHJvcHMsIGtleXMsIHByb3AsIHRyYW5zZm9ybWVyKSkucmVkdWNlKG1lcmdlLCB7fSk7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFyZ2luKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgbWFyZ2luS2V5cyk7XG59XG5tYXJnaW4ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IG1hcmdpbktleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xubWFyZ2luLmZpbHRlclByb3BzID0gbWFyZ2luS2V5cztcbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKHByb3BzKSB7XG4gIHJldHVybiBzdHlsZShwcm9wcywgcGFkZGluZ0tleXMpO1xufVxucGFkZGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gcGFkZGluZ0tleXMucmVkdWNlKChvYmosIGtleSkgPT4ge1xuICBvYmpba2V5XSA9IHJlc3BvbnNpdmVQcm9wVHlwZTtcbiAgcmV0dXJuIG9iajtcbn0sIHt9KSA6IHt9O1xucGFkZGluZy5maWx0ZXJQcm9wcyA9IHBhZGRpbmdLZXlzO1xuZnVuY3Rpb24gc3BhY2luZyhwcm9wcykge1xuICByZXR1cm4gc3R5bGUocHJvcHMsIHNwYWNpbmdLZXlzKTtcbn1cbnNwYWNpbmcucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHNwYWNpbmdLZXlzLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcbiAgb2JqW2tleV0gPSByZXNwb25zaXZlUHJvcFR5cGU7XG4gIHJldHVybiBvYmo7XG59LCB7fSkgOiB7fTtcbnNwYWNpbmcuZmlsdGVyUHJvcHMgPSBzcGFjaW5nS2V5cztcbmV4cG9ydCBkZWZhdWx0IHNwYWNpbmc7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICBjb25zdCBjYWNoZSA9IHt9O1xuICByZXR1cm4gYXJnID0+IHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgdW5zdGFibGVfY2FwaXRhbGl6ZSBhcyBjYXBpdGFsaXplIH0gZnJvbSAnQG11aS91dGlscyc7XG5pbXBvcnQgcmVzcG9uc2l2ZVByb3BUeXBlIGZyb20gJy4vcmVzcG9uc2l2ZVByb3BUeXBlJztcbmltcG9ydCB7IGhhbmRsZUJyZWFrcG9pbnRzIH0gZnJvbSAnLi9icmVha3BvaW50cyc7XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmosIHBhdGgsIGNoZWNrVmFycyA9IHRydWUpIHtcbiAgaWYgKCFwYXRoIHx8IHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgQ1NTIHZhcmlhYmxlcyBhcmUgdXNlZFxuICBpZiAob2JqICYmIG9iai52YXJzICYmIGNoZWNrVmFycykge1xuICAgIGNvbnN0IHZhbCA9IGB2YXJzLiR7cGF0aH1gLnNwbGl0KCcuJykucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyAmJiBhY2NbaXRlbV0gPyBhY2NbaXRlbV0gOiBudWxsLCBvYmopO1xuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKGFjYywgaXRlbSkgPT4ge1xuICAgIGlmIChhY2MgJiYgYWNjW2l0ZW1dICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBhY2NbaXRlbV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlVmFsdWUodGhlbWVNYXBwaW5nLCB0cmFuc2Zvcm0sIHByb3BWYWx1ZUZpbmFsLCB1c2VyVmFsdWUgPSBwcm9wVmFsdWVGaW5hbCkge1xuICBsZXQgdmFsdWU7XG4gIGlmICh0eXBlb2YgdGhlbWVNYXBwaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFsdWUgPSB0aGVtZU1hcHBpbmcocHJvcFZhbHVlRmluYWwpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhlbWVNYXBwaW5nKSkge1xuICAgIHZhbHVlID0gdGhlbWVNYXBwaW5nW3Byb3BWYWx1ZUZpbmFsXSB8fCB1c2VyVmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBnZXRQYXRoKHRoZW1lTWFwcGluZywgcHJvcFZhbHVlRmluYWwpIHx8IHVzZXJWYWx1ZTtcbiAgfVxuICBpZiAodHJhbnNmb3JtKSB7XG4gICAgdmFsdWUgPSB0cmFuc2Zvcm0odmFsdWUsIHVzZXJWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gc3R5bGUob3B0aW9ucykge1xuICBjb25zdCB7XG4gICAgcHJvcCxcbiAgICBjc3NQcm9wZXJ0eSA9IG9wdGlvbnMucHJvcCxcbiAgICB0aGVtZUtleSxcbiAgICB0cmFuc2Zvcm1cbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGZuID0gcHJvcHMgPT4ge1xuICAgIGlmIChwcm9wc1twcm9wXSA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgY29uc3QgdGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICBjb25zdCB0aGVtZU1hcHBpbmcgPSBnZXRQYXRoKHRoZW1lLCB0aGVtZUtleSkgfHwge307XG4gICAgY29uc3Qgc3R5bGVGcm9tUHJvcFZhbHVlID0gcHJvcFZhbHVlRmluYWwgPT4ge1xuICAgICAgbGV0IHZhbHVlID0gZ2V0U3R5bGVWYWx1ZSh0aGVtZU1hcHBpbmcsIHRyYW5zZm9ybSwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgaWYgKHByb3BWYWx1ZUZpbmFsID09PSB2YWx1ZSAmJiB0eXBlb2YgcHJvcFZhbHVlRmluYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEhhdmVuJ3QgZm91bmQgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBnZXRTdHlsZVZhbHVlKHRoZW1lTWFwcGluZywgdHJhbnNmb3JtLCBgJHtwcm9wfSR7cHJvcFZhbHVlRmluYWwgPT09ICdkZWZhdWx0JyA/ICcnIDogY2FwaXRhbGl6ZShwcm9wVmFsdWVGaW5hbCl9YCwgcHJvcFZhbHVlRmluYWwpO1xuICAgICAgfVxuICAgICAgaWYgKGNzc1Byb3BlcnR5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbY3NzUHJvcGVydHldOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBoYW5kbGVCcmVha3BvaW50cyhwcm9wcywgcHJvcFZhbHVlLCBzdHlsZUZyb21Qcm9wVmFsdWUpO1xuICB9O1xuICBmbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge1xuICAgIFtwcm9wXTogcmVzcG9uc2l2ZVByb3BUeXBlXG4gIH0gOiB7fTtcbiAgZm4uZmlsdGVyUHJvcHMgPSBbcHJvcF07XG4gIHJldHVybiBmbjtcbn1cbmV4cG9ydCBkZWZhdWx0IHN0eWxlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJzeFwiXTtcbmltcG9ydCB7IGlzUGxhaW5PYmplY3QgfSBmcm9tICdAbXVpL3V0aWxzJztcbmltcG9ydCB7IHByb3BUb1N0eWxlRnVuY3Rpb24gfSBmcm9tICcuLi9nZXRUaGVtZVZhbHVlJztcbmNvbnN0IHNwbGl0UHJvcHMgPSBwcm9wcyA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICBzeXN0ZW1Qcm9wczoge30sXG4gICAgb3RoZXJQcm9wczoge31cbiAgfTtcbiAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF0pIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW1Qcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQub3RoZXJQcm9wc1twcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0ZW5kU3hQcm9wKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIHN4OiBpblN4XG4gICAgfSA9IHByb3BzLFxuICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IHtcbiAgICBzeXN0ZW1Qcm9wcyxcbiAgICBvdGhlclByb3BzXG4gIH0gPSBzcGxpdFByb3BzKG90aGVyKTtcbiAgbGV0IGZpbmFsU3g7XG4gIGlmIChBcnJheS5pc0FycmF5KGluU3gpKSB7XG4gICAgZmluYWxTeCA9IFtzeXN0ZW1Qcm9wcywgLi4uaW5TeF07XG4gIH0gZWxzZSBpZiAodHlwZW9mIGluU3ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBmaW5hbFN4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGluU3goLi4uYXJncyk7XG4gICAgICBpZiAoIWlzUGxhaW5PYmplY3QocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gc3lzdGVtUHJvcHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN5c3RlbVByb3BzLCByZXN1bHQpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgZmluYWxTeCA9IF9leHRlbmRzKHt9LCBzeXN0ZW1Qcm9wcywgaW5TeCk7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvdGhlclByb3BzLCB7XG4gICAgc3g6IGZpbmFsU3hcbiAgfSk7XG59IiwiaW1wb3J0IG1lcmdlIGZyb20gJy4uL21lcmdlJztcbmltcG9ydCB7IHN0eWxlRnVuY3Rpb25NYXBwaW5nIGFzIGRlZmF1bHRTdHlsZUZ1bmN0aW9uTWFwcGluZyB9IGZyb20gJy4uL2dldFRoZW1lVmFsdWUnO1xuaW1wb3J0IHsgaGFuZGxlQnJlYWtwb2ludHMsIGNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCwgcmVtb3ZlVW51c2VkQnJlYWtwb2ludHMgfSBmcm9tICcuLi9icmVha3BvaW50cyc7XG5mdW5jdGlvbiBvYmplY3RzSGF2ZVNhbWVLZXlzKC4uLm9iamVjdHMpIHtcbiAgY29uc3QgYWxsS2V5cyA9IG9iamVjdHMucmVkdWNlKChrZXlzLCBvYmplY3QpID0+IGtleXMuY29uY2F0KE9iamVjdC5rZXlzKG9iamVjdCkpLCBbXSk7XG4gIGNvbnN0IHVuaW9uID0gbmV3IFNldChhbGxLZXlzKTtcbiAgcmV0dXJuIG9iamVjdHMuZXZlcnkob2JqZWN0ID0+IHVuaW9uLnNpemUgPT09IE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoKTtcbn1cbmZ1bmN0aW9uIGNhbGxJZkZuKG1heWJlRm4sIGFyZykge1xuICByZXR1cm4gdHlwZW9mIG1heWJlRm4gPT09ICdmdW5jdGlvbicgPyBtYXliZUZuKGFyZykgOiBtYXliZUZuO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfY3JlYXRlU3R5bGVGdW5jdGlvblN4KHN0eWxlRnVuY3Rpb25NYXBwaW5nID0gZGVmYXVsdFN0eWxlRnVuY3Rpb25NYXBwaW5nKSB7XG4gIGNvbnN0IHByb3BUb1N0eWxlRnVuY3Rpb24gPSBPYmplY3Qua2V5cyhzdHlsZUZ1bmN0aW9uTWFwcGluZykucmVkdWNlKChhY2MsIHN0eWxlRm5OYW1lKSA9PiB7XG4gICAgc3R5bGVGdW5jdGlvbk1hcHBpbmdbc3R5bGVGbk5hbWVdLmZpbHRlclByb3BzLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgICAgYWNjW3Byb3BOYW1lXSA9IHN0eWxlRnVuY3Rpb25NYXBwaW5nW3N0eWxlRm5OYW1lXTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIGZ1bmN0aW9uIGdldFRoZW1lVmFsdWUocHJvcCwgdmFsdWUsIHRoZW1lKSB7XG4gICAgY29uc3QgaW5wdXRQcm9wcyA9IHtcbiAgICAgIFtwcm9wXTogdmFsdWUsXG4gICAgICB0aGVtZVxuICAgIH07XG4gICAgY29uc3Qgc3R5bGVGdW5jdGlvbiA9IHByb3BUb1N0eWxlRnVuY3Rpb25bcHJvcF07XG4gICAgcmV0dXJuIHN0eWxlRnVuY3Rpb24gPyBzdHlsZUZ1bmN0aW9uKGlucHV0UHJvcHMpIDoge1xuICAgICAgW3Byb3BdOiB2YWx1ZVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGVGdW5jdGlvblN4KHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3gsXG4gICAgICB0aGVtZSA9IHt9XG4gICAgfSA9IHByb3BzIHx8IHt9O1xuICAgIGlmICghc3gpIHtcbiAgICAgIHJldHVybiBudWxsOyAvLyBFbW90aW9uICYgc3R5bGVkLWNvbXBvbmVudHMgd2lsbCBuZWdsZWN0IG51bGxcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlY2VpdmUgYHN4SW5wdXRgIGFzIG9iamVjdCBvciBjYWxsYmFja1xuICAgICAqIGFuZCB0aGVuIHJlY3Vyc2l2ZWx5IGNoZWNrIGtleXMgJiB2YWx1ZXMgdG8gY3JlYXRlIG1lZGlhIHF1ZXJ5IG9iamVjdCBzdHlsZXMuXG4gICAgICogKHRoZSByZXN1bHQgd2lsbCBiZSB1c2VkIGluIGBzdHlsZWRgKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYXZlcnNlKHN4SW5wdXQpIHtcbiAgICAgIGxldCBzeE9iamVjdCA9IHN4SW5wdXQ7XG4gICAgICBpZiAodHlwZW9mIHN4SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgc3hPYmplY3QgPSBzeElucHV0KHRoZW1lKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN4SW5wdXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIHZhbHVlXG4gICAgICAgIHJldHVybiBzeElucHV0O1xuICAgICAgfVxuICAgICAgaWYgKCFzeE9iamVjdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtcHR5QnJlYWtwb2ludHMgPSBjcmVhdGVFbXB0eUJyZWFrcG9pbnRPYmplY3QodGhlbWUuYnJlYWtwb2ludHMpO1xuICAgICAgY29uc3QgYnJlYWtwb2ludHNLZXlzID0gT2JqZWN0LmtleXMoZW1wdHlCcmVha3BvaW50cyk7XG4gICAgICBsZXQgY3NzID0gZW1wdHlCcmVha3BvaW50cztcbiAgICAgIE9iamVjdC5rZXlzKHN4T2JqZWN0KS5mb3JFYWNoKHN0eWxlS2V5ID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjYWxsSWZGbihzeE9iamVjdFtzdHlsZUtleV0sIHRoZW1lKTtcbiAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKHByb3BUb1N0eWxlRnVuY3Rpb25bc3R5bGVLZXldKSB7XG4gICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBicmVha3BvaW50c1ZhbHVlcyA9IGhhbmRsZUJyZWFrcG9pbnRzKHtcbiAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICB9LCB2YWx1ZSwgeCA9PiAoe1xuICAgICAgICAgICAgICAgIFtzdHlsZUtleV06IHhcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICBpZiAob2JqZWN0c0hhdmVTYW1lS2V5cyhicmVha3BvaW50c1ZhbHVlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY3NzW3N0eWxlS2V5XSA9IHN0eWxlRnVuY3Rpb25TeCh7XG4gICAgICAgICAgICAgICAgICBzeDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGVtZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgYnJlYWtwb2ludHNWYWx1ZXMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyA9IG1lcmdlKGNzcywgZ2V0VGhlbWVWYWx1ZShzdHlsZUtleSwgdmFsdWUsIHRoZW1lKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZW1vdmVVbnVzZWRCcmVha3BvaW50cyhicmVha3BvaW50c0tleXMsIGNzcyk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHN4KSA/IHN4Lm1hcCh0cmF2ZXJzZSkgOiB0cmF2ZXJzZShzeCk7XG4gIH1cbiAgcmV0dXJuIHN0eWxlRnVuY3Rpb25TeDtcbn1cbmNvbnN0IHN0eWxlRnVuY3Rpb25TeCA9IHVuc3RhYmxlX2NyZWF0ZVN0eWxlRnVuY3Rpb25TeCgpO1xuc3R5bGVGdW5jdGlvblN4LmZpbHRlclByb3BzID0gWydzeCddO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVGdW5jdGlvblN4OyIsImltcG9ydCBzdHlsZSBmcm9tICcuL3N0eWxlJztcbmltcG9ydCBjb21wb3NlIGZyb20gJy4vY29tcG9zZSc7XG5leHBvcnQgY29uc3QgZm9udEZhbWlseSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRGYW1pbHknLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBmb250U2l6ZSA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRTaXplJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFN0eWxlID0gc3R5bGUoe1xuICBwcm9wOiAnZm9udFN0eWxlJyxcbiAgdGhlbWVLZXk6ICd0eXBvZ3JhcGh5J1xufSk7XG5leHBvcnQgY29uc3QgZm9udFdlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2ZvbnRXZWlnaHQnLFxuICB0aGVtZUtleTogJ3R5cG9ncmFwaHknXG59KTtcbmV4cG9ydCBjb25zdCBsZXR0ZXJTcGFjaW5nID0gc3R5bGUoe1xuICBwcm9wOiAnbGV0dGVyU3BhY2luZydcbn0pO1xuZXhwb3J0IGNvbnN0IHRleHRUcmFuc2Zvcm0gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0VHJhbnNmb3JtJ1xufSk7XG5leHBvcnQgY29uc3QgbGluZUhlaWdodCA9IHN0eWxlKHtcbiAgcHJvcDogJ2xpbmVIZWlnaHQnXG59KTtcbmV4cG9ydCBjb25zdCB0ZXh0QWxpZ24gPSBzdHlsZSh7XG4gIHByb3A6ICd0ZXh0QWxpZ24nXG59KTtcbmV4cG9ydCBjb25zdCB0eXBvZ3JhcGh5VmFyaWFudCA9IHN0eWxlKHtcbiAgcHJvcDogJ3R5cG9ncmFwaHknLFxuICBjc3NQcm9wZXJ0eTogZmFsc2UsXG4gIHRoZW1lS2V5OiAndHlwb2dyYXBoeSdcbn0pO1xuY29uc3QgdHlwb2dyYXBoeSA9IGNvbXBvc2UodHlwb2dyYXBoeVZhcmlhbnQsIGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGxldHRlclNwYWNpbmcsIGxpbmVIZWlnaHQsIHRleHRBbGlnbiwgdGV4dFRyYW5zZm9ybSk7XG5leHBvcnQgZGVmYXVsdCB0eXBvZ3JhcGh5OyIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbmltcG9ydCB1c2VUaGVtZVdpdGhvdXREZWZhdWx0IGZyb20gJy4vdXNlVGhlbWVXaXRob3V0RGVmYXVsdCc7XG5leHBvcnQgY29uc3Qgc3lzdGVtRGVmYXVsdFRoZW1lID0gY3JlYXRlVGhlbWUoKTtcbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IHN5c3RlbURlZmF1bHRUaGVtZSkge1xuICByZXR1cm4gdXNlVGhlbWVXaXRob3V0RGVmYXVsdChkZWZhdWx0VGhlbWUpO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiaW1wb3J0IHsgaW50ZXJuYWxfcmVzb2x2ZVByb3BzIGFzIHJlc29sdmVQcm9wcyB9IGZyb20gJ0BtdWkvdXRpbHMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSA9IHBhcmFtcztcbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUuY29tcG9uZW50cyB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXSB8fCAhdGhlbWUuY29tcG9uZW50c1tuYW1lXS5kZWZhdWx0UHJvcHMpIHtcbiAgICByZXR1cm4gcHJvcHM7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVQcm9wcyh0aGVtZS5jb21wb25lbnRzW25hbWVdLmRlZmF1bHRQcm9wcywgcHJvcHMpO1xufSIsImltcG9ydCBnZXRUaGVtZVByb3BzIGZyb20gJy4vZ2V0VGhlbWVQcm9wcyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vdXNlVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWVQcm9wcyh7XG4gIHByb3BzLFxuICBuYW1lLFxuICBkZWZhdWx0VGhlbWVcbn0pIHtcbiAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShkZWZhdWx0VGhlbWUpO1xuICBjb25zdCBtZXJnZWRQcm9wcyA9IGdldFRoZW1lUHJvcHMoe1xuICAgIHRoZW1lLFxuICAgIG5hbWUsXG4gICAgcHJvcHNcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRQcm9wcztcbn0iLCJpbXBvcnQgeyB1c2VUaGVtZSBhcyBtdWlVc2VUaGVtZSB9IGZyb20gJ0BtdWkvcHJpdmF0ZS10aGVtaW5nJztcbmZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCA9PT0gMDtcbn1cbmZ1bmN0aW9uIHVzZVRoZW1lKGRlZmF1bHRUaGVtZSA9IG51bGwpIHtcbiAgY29uc3QgY29udGV4dFRoZW1lID0gbXVpVXNlVGhlbWUoKTtcbiAgcmV0dXJuICFjb250ZXh0VGhlbWUgfHwgaXNPYmplY3RFbXB0eShjb250ZXh0VGhlbWUpID8gZGVmYXVsdFRoZW1lIDogY29udGV4dFRoZW1lO1xufVxuZXhwb3J0IGRlZmF1bHQgdXNlVGhlbWU7IiwiY29uc3QgZGVmYXVsdEdlbmVyYXRvciA9IGNvbXBvbmVudE5hbWUgPT4gY29tcG9uZW50TmFtZTtcbmNvbnN0IGNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciA9ICgpID0+IHtcbiAgbGV0IGdlbmVyYXRlID0gZGVmYXVsdEdlbmVyYXRvcjtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUoZ2VuZXJhdG9yKSB7XG4gICAgICBnZW5lcmF0ZSA9IGdlbmVyYXRvcjtcbiAgICB9LFxuICAgIGdlbmVyYXRlKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBnZW5lcmF0ZShjb21wb25lbnROYW1lKTtcbiAgICB9LFxuICAgIHJlc2V0KCkge1xuICAgICAgZ2VuZXJhdGUgPSBkZWZhdWx0R2VuZXJhdG9yO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBDbGFzc05hbWVHZW5lcmF0b3IgPSBjcmVhdGVDbGFzc05hbWVHZW5lcmF0b3IoKTtcbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZUdlbmVyYXRvcjsiLCJpbXBvcnQgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSBmcm9tIFwiLi9mb3JtYXRNdWlFcnJvck1lc3NhZ2VcIjtcbi8vIEl0IHNob3VsZCB0byBiZSBub3RlZCB0aGF0IHRoaXMgZnVuY3Rpb24gaXNuJ3QgZXF1aXZhbGVudCB0byBgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemVgLlxuLy9cbi8vIEEgc3RyaWN0IGNhcGl0YWxpemF0aW9uIHNob3VsZCB1cHBlcmNhc2UgdGhlIGZpcnN0IGxldHRlciBvZiBlYWNoIHdvcmQgaW4gdGhlIHNlbnRlbmNlLlxuLy8gV2Ugb25seSBoYW5kbGUgdGhlIGZpcnN0IHdvcmQuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gYE1VSTogXFxgY2FwaXRhbGl6ZShzdHJpbmcpXFxgIGV4cGVjdHMgYSBzdHJpbmcgYXJndW1lbnQuYCA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoNykpO1xuICB9XG4gIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcG9zZUNsYXNzZXMoc2xvdHMsIGdldFV0aWxpdHlDbGFzcywgY2xhc3Nlcykge1xuICBjb25zdCBvdXRwdXQgPSB7fTtcbiAgT2JqZWN0LmtleXMoc2xvdHMpLmZvckVhY2goXG4gIC8vIGBPYmpldC5rZXlzKHNsb3RzKWAgY2FuJ3QgYmUgd2lkZXIgdGhhbiBgVGAgYmVjYXVzZSB3ZSBpbmZlciBgVGAgZnJvbSBgc2xvdHNgLlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzEyMjUzI2lzc3VlY29tbWVudC0yNjMxMzIyMDhcbiAgc2xvdCA9PiB7XG4gICAgb3V0cHV0W3Nsb3RdID0gc2xvdHNbc2xvdF0ucmVkdWNlKChhY2MsIGtleSkgPT4ge1xuICAgICAgaWYgKGtleSkge1xuICAgICAgICBhY2MucHVzaChnZXRVdGlsaXR5Q2xhc3Moa2V5KSk7XG4gICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXNba2V5XSkge1xuICAgICAgICAgIGFjYy5wdXNoKGNsYXNzZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pLmpvaW4oJyAnKTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBTYWZlIGNoYWluZWQgZnVuY3Rpb24uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluZWRGdW5jdGlvbiguLi5mdW5jcykge1xuICByZXR1cm4gZnVuY3MucmVkdWNlKChhY2MsIGZ1bmMpID0+IHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgKCkgPT4ge30pO1xufSIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQgPSAxNjYpIHtcbiAgbGV0IHRpbWVvdXQ7XG4gIGZ1bmN0aW9uIGRlYm91bmNlZCguLi5hcmdzKSB7XG4gICAgY29uc3QgbGF0ZXIgPSAoKSA9PiB7XG4gICAgICBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH07XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxuICBkZWJvdW5jZWQuY2xlYXIgPSAoKSA9PiB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9O1xuICByZXR1cm4gZGVib3VuY2VkO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QoaXRlbSkge1xuICByZXR1cm4gaXRlbSAhPT0gbnVsbCAmJiB0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zID0ge1xuICBjbG9uZTogdHJ1ZVxufSkge1xuICBjb25zdCBvdXRwdXQgPSBvcHRpb25zLmNsb25lID8gX2V4dGVuZHMoe30sIHRhcmdldCkgOiB0YXJnZXQ7XG4gIGlmIChpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYga2V5IGluIHRhcmdldCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSkge1xuICAgICAgICAvLyBTaW5jZSBgb3V0cHV0YCBpcyBhIGNsb25lIG9mIGB0YXJnZXRgIGFuZCB3ZSBoYXZlIG5hcnJvd2VkIGB0YXJnZXRgIGluIHRoaXMgYmxvY2sgd2UgY2FuIGNhc3QgdG8gdGhlIHNhbWUgdHlwZS5cbiAgICAgICAgb3V0cHV0W2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG11aS91dGlscy9tYWNyb3MvTXVpRXJyb3IubWFjcm9gIGluc3RlYWQuXG4gKiBAcGFyYW0ge251bWJlcn0gY29kZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRNdWlFcnJvck1lc3NhZ2UoY29kZSkge1xuICAvLyBBcHBseSBiYWJlbC1wbHVnaW4tdHJhbnNmb3JtLXRlbXBsYXRlLWxpdGVyYWxzIGluIGxvb3NlIG1vZGVcbiAgLy8gbG9vc2UgbW9kZSBpcyBzYWZlIGlmZiB3ZSdyZSBjb25jYXRlbmF0aW5nIHByaW1pdGl2ZXNcbiAgLy8gc2VlIGh0dHBzOi8vYmFiZWxqcy5pby9kb2NzL2VuL2JhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMjbG9vc2VcbiAgLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXRlbXBsYXRlICovXG4gIGxldCB1cmwgPSAnaHR0cHM6Ly9tdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gcmVzdCBwYXJhbXMgb3Zlci10cmFuc3BpbGUgZm9yIHRoaXMgY2FzZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB1cmwgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbaV0pO1xuICB9XG4gIHJldHVybiAnTWluaWZpZWQgTVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiaW1wb3J0IENsYXNzTmFtZUdlbmVyYXRvciBmcm9tICcuLi9DbGFzc05hbWVHZW5lcmF0b3InO1xuY29uc3QgZ2xvYmFsU3RhdGVDbGFzc2VzTWFwcGluZyA9IHtcbiAgYWN0aXZlOiAnYWN0aXZlJyxcbiAgY2hlY2tlZDogJ2NoZWNrZWQnLFxuICBjb21wbGV0ZWQ6ICdjb21wbGV0ZWQnLFxuICBkaXNhYmxlZDogJ2Rpc2FibGVkJyxcbiAgZXJyb3I6ICdlcnJvcicsXG4gIGV4cGFuZGVkOiAnZXhwYW5kZWQnLFxuICBmb2N1c2VkOiAnZm9jdXNlZCcsXG4gIGZvY3VzVmlzaWJsZTogJ2ZvY3VzVmlzaWJsZScsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICBzZWxlY3RlZDogJ3NlbGVjdGVkJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlVXRpbGl0eUNsYXNzKGNvbXBvbmVudE5hbWUsIHNsb3QsIGdsb2JhbFN0YXRlUHJlZml4ID0gJ011aScpIHtcbiAgY29uc3QgZ2xvYmFsU3RhdGVDbGFzcyA9IGdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmdbc2xvdF07XG4gIHJldHVybiBnbG9iYWxTdGF0ZUNsYXNzID8gYCR7Z2xvYmFsU3RhdGVQcmVmaXh9LSR7Z2xvYmFsU3RhdGVDbGFzc31gIDogYCR7Q2xhc3NOYW1lR2VuZXJhdG9yLmdlbmVyYXRlKGNvbXBvbmVudE5hbWUpfS0ke3Nsb3R9YDtcbn0iLCJpbXBvcnQgZ2VuZXJhdGVVdGlsaXR5Q2xhc3MgZnJvbSAnLi4vZ2VuZXJhdGVVdGlsaXR5Q2xhc3MnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVVdGlsaXR5Q2xhc3Nlcyhjb21wb25lbnROYW1lLCBzbG90cywgZ2xvYmFsU3RhdGVQcmVmaXggPSAnTXVpJykge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc2xvdHMuZm9yRWFjaChzbG90ID0+IHtcbiAgICByZXN1bHRbc2xvdF0gPSBnZW5lcmF0ZVV0aWxpdHlDbGFzcyhjb21wb25lbnROYW1lLCBzbG90LCBnbG9iYWxTdGF0ZVByZWZpeCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSIsIi8vIEEgY2hhbmdlIG9mIHRoZSBicm93c2VyIHpvb20gY2hhbmdlIHRoZSBzY3JvbGxiYXIgc2l6ZS5cbi8vIENyZWRpdCBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi80ODhmZDhhZmM1MzVjYTNhNmFkNGRjNTgxZjVlODkyMTdiNmEzNmFjL2pzL3NyYy91dGlsL3Njcm9sbGJhci5qcyNMMTQtTDE4XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKGRvYykge1xuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgY29uc3QgZG9jdW1lbnRXaWR0aCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50V2lkdGgpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoYWluUHJvcFR5cGVzKHByb3BUeXBlMSwgcHJvcFR5cGUyKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuICgpID0+IG51bGw7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHZhbGlkYXRlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gcHJvcFR5cGUxKC4uLmFyZ3MpIHx8IHByb3BUeXBlMiguLi5hcmdzKTtcbiAgfTtcbn0iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNoYWluUHJvcFR5cGVzIGZyb20gJy4vY2hhaW5Qcm9wVHlwZXMnO1xuZnVuY3Rpb24gaXNDbGFzc0NvbXBvbmVudChlbGVtZW50VHlwZSkge1xuICAvLyBlbGVtZW50VHlwZS5wcm90b3R5cGU/LmlzUmVhY3RDb21wb25lbnRcbiAgY29uc3Qge1xuICAgIHByb3RvdHlwZSA9IHt9XG4gIH0gPSBlbGVtZW50VHlwZTtcbiAgcmV0dXJuIEJvb2xlYW4ocHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpO1xufVxuZnVuY3Rpb24gYWNjZXB0aW5nUmVmKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICBjb25zdCBlbGVtZW50ID0gcHJvcHNbcHJvcE5hbWVdO1xuICBjb25zdCBzYWZlUHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gIGlmIChlbGVtZW50ID09IG51bGwgfHxcbiAgLy8gV2hlbiBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgUmVhY3QgZG9lc24ndCB3YXJuIGVpdGhlci5cbiAgLy8gVGhpcyBpcyBub3QgYW4gYWNjdXJhdGUgY2hlY2sgZm9yIFNTUi5cbiAgLy8gVGhpcyBpcyBvbmx5IGluIHBsYWNlIGZvciBFbW90aW9uIGNvbXBhdC5cbiAgLy8gVE9ETzogUmV2aXNpdCBvbmNlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMjAwNDcgaXMgcmVzb2x2ZWQuXG4gIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgbGV0IHdhcm5pbmdIaW50O1xuICBjb25zdCBlbGVtZW50VHlwZSA9IGVsZW1lbnQudHlwZTtcbiAgLyoqXG4gICAqIEJsYWNrbGlzdGluZyBpbnN0ZWFkIG9mIHdoaXRlbGlzdGluZ1xuICAgKlxuICAgKiBCbGFja2xpc3Rpbmcgd2lsbCBtaXNzIHNvbWUgY29tcG9uZW50cywgc3VjaCBhcyBSZWFjdC5GcmFnbWVudC4gVGhvc2Ugd2lsbCBhdCBsZWFzdFxuICAgKiB0cmlnZ2VyIGEgd2FybmluZyBpbiBSZWFjdC5cbiAgICogV2UgY2FuJ3Qgd2hpdGVsaXN0IGJlY2F1c2UgdGhlcmUgaXMgbm8gc2FmZSB3YXkgdG8gZGV0ZWN0IFJlYWN0LmZvcndhcmRSZWZcbiAgICogb3IgY2xhc3MgY29tcG9uZW50cy4gXCJTYWZlXCIgbWVhbnMgdGhlcmUncyBubyBwdWJsaWMgQVBJLlxuICAgKlxuICAgKi9cbiAgaWYgKHR5cGVvZiBlbGVtZW50VHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNDbGFzc0NvbXBvbmVudChlbGVtZW50VHlwZSkpIHtcbiAgICB3YXJuaW5nSGludCA9ICdEaWQgeW91IGFjY2lkZW50YWxseSB1c2UgYSBwbGFpbiBmdW5jdGlvbiBjb21wb25lbnQgZm9yIGFuIGVsZW1lbnQgaW5zdGVhZD8nO1xuICB9XG4gIGlmICh3YXJuaW5nSGludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgSW52YWxpZCAke2xvY2F0aW9ufSBcXGAke3NhZmVQcm9wTmFtZX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC4gYCArIGBFeHBlY3RlZCBhbiBlbGVtZW50IHRoYXQgY2FuIGhvbGQgYSByZWYuICR7d2FybmluZ0hpbnR9IGAgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vbXVpLmNvbS9yL2NhdmVhdC13aXRoLXJlZnMtZ3VpZGUnKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmNvbnN0IGVsZW1lbnRBY2NlcHRpbmdSZWYgPSBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMuZWxlbWVudCwgYWNjZXB0aW5nUmVmKTtcbmVsZW1lbnRBY2NlcHRpbmdSZWYuaXNSZXF1aXJlZCA9IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWQsIGFjY2VwdGluZ1JlZik7XG5leHBvcnQgZGVmYXVsdCBlbGVtZW50QWNjZXB0aW5nUmVmOyIsImltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2hhaW5Qcm9wVHlwZXMgZnJvbSAnLi9jaGFpblByb3BUeXBlcyc7XG5mdW5jdGlvbiBpc0NsYXNzQ29tcG9uZW50KGVsZW1lbnRUeXBlKSB7XG4gIC8vIGVsZW1lbnRUeXBlLnByb3RvdHlwZT8uaXNSZWFjdENvbXBvbmVudFxuICBjb25zdCB7XG4gICAgcHJvdG90eXBlID0ge31cbiAgfSA9IGVsZW1lbnRUeXBlO1xuICByZXR1cm4gQm9vbGVhbihwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICBjb25zdCBzYWZlUHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gIGlmIChwcm9wVmFsdWUgPT0gbnVsbCB8fFxuICAvLyBXaGVuIHNlcnZlci1zaWRlIHJlbmRlcmluZyBSZWFjdCBkb2Vzbid0IHdhcm4gZWl0aGVyLlxuICAvLyBUaGlzIGlzIG5vdCBhbiBhY2N1cmF0ZSBjaGVjayBmb3IgU1NSLlxuICAvLyBUaGlzIGlzIG9ubHkgaW4gcGxhY2UgZm9yIGVtb3Rpb24gY29tcGF0LlxuICAvLyBUT0RPOiBSZXZpc2l0IG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yMDA0NyBpcyByZXNvbHZlZC5cbiAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgd2FybmluZ0hpbnQ7XG5cbiAgLyoqXG4gICAqIEJsYWNrbGlzdGluZyBpbnN0ZWFkIG9mIHdoaXRlbGlzdGluZ1xuICAgKlxuICAgKiBCbGFja2xpc3Rpbmcgd2lsbCBtaXNzIHNvbWUgY29tcG9uZW50cywgc3VjaCBhcyBSZWFjdC5GcmFnbWVudC4gVGhvc2Ugd2lsbCBhdCBsZWFzdFxuICAgKiB0cmlnZ2VyIGEgd2FybmluZyBpbiBSZWFjdC5cbiAgICogV2UgY2FuJ3Qgd2hpdGVsaXN0IGJlY2F1c2UgdGhlcmUgaXMgbm8gc2FmZSB3YXkgdG8gZGV0ZWN0IFJlYWN0LmZvcndhcmRSZWZcbiAgICogb3IgY2xhc3MgY29tcG9uZW50cy4gXCJTYWZlXCIgbWVhbnMgdGhlcmUncyBubyBwdWJsaWMgQVBJLlxuICAgKlxuICAgKi9cbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdmdW5jdGlvbicgJiYgIWlzQ2xhc3NDb21wb25lbnQocHJvcFZhbHVlKSkge1xuICAgIHdhcm5pbmdIaW50ID0gJ0RpZCB5b3UgYWNjaWRlbnRhbGx5IHByb3ZpZGUgYSBwbGFpbiBmdW5jdGlvbiBjb21wb25lbnQgaW5zdGVhZD8nO1xuICB9XG4gIGlmICh3YXJuaW5nSGludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgSW52YWxpZCAke2xvY2F0aW9ufSBcXGAke3NhZmVQcm9wTmFtZX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC4gYCArIGBFeHBlY3RlZCBhbiBlbGVtZW50IHR5cGUgdGhhdCBjYW4gaG9sZCBhIHJlZi4gJHt3YXJuaW5nSGludH0gYCArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9tdWkuY29tL3IvY2F2ZWF0LXdpdGgtcmVmcy1ndWlkZScpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZXhwb3J0IGRlZmF1bHQgY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLmVsZW1lbnRUeXBlLCBlbGVtZW50VHlwZUFjY2VwdGluZ1JlZik7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vLyBUaGlzIG1vZHVsZSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYWlyYm5iL3Byb3AtdHlwZXMtZXhhY3QgcmVwb3NpdG9yeS5cbi8vIEhvd2V2ZXIsIGluIG9yZGVyIHRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIGRlcGVuZGVuY2llcyBhbmQgdG8gcmVtb3ZlIHNvbWUgZXh0cmEgc2FmZSBjaGVja3Ncbi8vIHRoZSBtb2R1bGUgd2FzIGZvcmtlZC5cblxuY29uc3Qgc3BlY2lhbFByb3BlcnR5ID0gJ2V4YWN0LXByb3A6IFxcdTIwMGInO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXhhY3RQcm9wKHByb3BUeXBlcykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBwcm9wVHlwZXM7XG4gIH1cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBwcm9wVHlwZXMsIHtcbiAgICBbc3BlY2lhbFByb3BlcnR5XTogcHJvcHMgPT4ge1xuICAgICAgY29uc3QgdW5zdXBwb3J0ZWRQcm9wcyA9IE9iamVjdC5rZXlzKHByb3BzKS5maWx0ZXIocHJvcCA9PiAhcHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3ApKTtcbiAgICAgIGlmICh1bnN1cHBvcnRlZFByb3BzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihgVGhlIGZvbGxvd2luZyBwcm9wcyBhcmUgbm90IHN1cHBvcnRlZDogJHt1bnN1cHBvcnRlZFByb3BzLm1hcChwcm9wID0+IGBcXGAke3Byb3B9XFxgYCkuam9pbignLCAnKX0uIFBsZWFzZSByZW1vdmUgdGhlbS5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSk7XG59IiwiaW1wb3J0IHsgRm9yd2FyZFJlZiwgTWVtbyB9IGZyb20gJ3JlYWN0LWlzJztcblxuLy8gU2ltcGxpZmllZCBwb2x5ZmlsbCBmb3IgSUUxMSBzdXBwb3J0XG4vLyBodHRwczovL2dpdGh1Yi5jb20vSmFtZXNNR3JlZW5lL0Z1bmN0aW9uLm5hbWUvYmxvYi81OGIzMTRkNGE5ODMxMTBjMzY4MmYxMjI4Zjg0NWQzOWNjY2ExODE3L0Z1bmN0aW9uLm5hbWUuanMjTDNcbmNvbnN0IGZuTmFtZU1hdGNoUmVnZXggPSAvXlxccypmdW5jdGlvbig/Olxcc3xcXHMqXFwvXFwqLipcXCpcXC9cXHMqKSsoW14oXFxzL10qKVxccyovO1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZShmbikge1xuICBjb25zdCBtYXRjaCA9IGAke2ZufWAubWF0Y2goZm5OYW1lTWF0Y2hSZWdleCk7XG4gIGNvbnN0IG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgcmV0dXJuIG5hbWUgfHwgJyc7XG59XG5mdW5jdGlvbiBnZXRGdW5jdGlvbkNvbXBvbmVudE5hbWUoQ29tcG9uZW50LCBmYWxsYmFjayA9ICcnKSB7XG4gIHJldHVybiBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgZ2V0RnVuY3Rpb25OYW1lKENvbXBvbmVudCkgfHwgZmFsbGJhY2s7XG59XG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgY29uc3QgZnVuY3Rpb25OYW1lID0gZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lKGlubmVyVHlwZSk7XG4gIHJldHVybiBvdXRlclR5cGUuZGlzcGxheU5hbWUgfHwgKGZ1bmN0aW9uTmFtZSAhPT0gJycgPyBgJHt3cmFwcGVyTmFtZX0oJHtmdW5jdGlvbk5hbWV9KWAgOiB3cmFwcGVyTmFtZSk7XG59XG5cbi8qKlxuICogY2hlcnJ5LXBpY2sgZnJvbVxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvNzY5YjFmMjcwZTEyNTFkOWRiZGNlMGZjYmQ5ZTkyZTUwMmQwNTliOC9wYWNrYWdlcy9zaGFyZWQvZ2V0Q29tcG9uZW50TmFtZS5qc1xuICogb3JpZ2luYWxseSBmb3JrZWQgZnJvbSByZWNvbXBvc2UvZ2V0RGlzcGxheU5hbWUgd2l0aCBhZGRlZCBJRTExIHN1cHBvcnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSB7XG4gIGlmIChDb21wb25lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBnZXRGdW5jdGlvbkNvbXBvbmVudE5hbWUoQ29tcG9uZW50LCAnQ29tcG9uZW50Jyk7XG4gIH1cblxuICAvLyBUeXBlU2NyaXB0IGNhbid0IGhhdmUgY29tcG9uZW50cyBhcyBvYmplY3RzIGJ1dCB0aGV5IGV4aXN0IGluIHRoZSBmb3JtIG9mIGBtZW1vYCBvciBgU3VzcGVuc2VgXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAoQ29tcG9uZW50LiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZShDb21wb25lbnQsIENvbXBvbmVudC5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG4gICAgICBjYXNlIE1lbW86XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZShDb21wb25lbnQsIENvbXBvbmVudC50eXBlLCAnbWVtbycpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIVE1MRWxlbWVudFR5cGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICBjb25zdCBzYWZlUHJvcE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gIGlmIChwcm9wVmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChwcm9wVmFsdWUgJiYgcHJvcFZhbHVlLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIG5ldyBFcnJvcihgSW52YWxpZCAke2xvY2F0aW9ufSBcXGAke3NhZmVQcm9wTmFtZX1cXGAgc3VwcGxpZWQgdG8gXFxgJHtjb21wb25lbnROYW1lfVxcYC4gYCArIGBFeHBlY3RlZCBhbiBIVE1MRWxlbWVudC5gKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmNvbnN0IHJlZlR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pO1xuZXhwb3J0IGRlZmF1bHQgcmVmVHlwZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXByZWNhdGVkUHJvcFR5cGUodmFsaWRhdG9yLCByZWFzb24pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuICByZXR1cm4gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT4ge1xuICAgIGNvbnN0IGNvbXBvbmVudE5hbWVTYWZlID0gY29tcG9uZW50TmFtZSB8fCAnPDxhbm9ueW1vdXM+Pic7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSAke2xvY2F0aW9ufSBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIG9mIGAgKyBgXFxgJHtjb21wb25lbnROYW1lU2FmZX1cXGAgaXMgZGVwcmVjYXRlZC4gJHtyZWFzb259YCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZVByb3BGYWN0b3J5KGNvbXBvbmVudE5hbWVJbkVycm9yLCBDb21wb25lbnQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gKCkgPT4gbnVsbDtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9mb3JiaWQtZm9yZWlnbi1wcm9wLXR5cGVzXG4gIGNvbnN0IHByZXZQcm9wVHlwZXMgPSBDb21wb25lbnQgPyBfZXh0ZW5kcyh7fSwgQ29tcG9uZW50LnByb3BUeXBlcykgOiBudWxsO1xuICBjb25zdCByZXF1aXJlUHJvcCA9IHJlcXVpcmVkUHJvcCA9PiAocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCAuLi5hcmdzKSA9PiB7XG4gICAgY29uc3QgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcbiAgICBjb25zdCBkZWZhdWx0VHlwZUNoZWNrZXIgPSBwcmV2UHJvcFR5cGVzID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UHJvcFR5cGVzW3Byb3BGdWxsTmFtZVNhZmVdO1xuICAgIGlmIChkZWZhdWx0VHlwZUNoZWNrZXIpIHtcbiAgICAgIGNvbnN0IHR5cGVDaGVja2VyUmVzdWx0ID0gZGVmYXVsdFR5cGVDaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgLi4uYXJncyk7XG4gICAgICBpZiAodHlwZUNoZWNrZXJSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVDaGVja2VyUmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoYFRoZSBwcm9wIFxcYCR7cHJvcEZ1bGxOYW1lU2FmZX1cXGAgb2YgYCArIGBcXGAke2NvbXBvbmVudE5hbWVJbkVycm9yfVxcYCBjYW4gb25seSBiZSB1c2VkIHRvZ2V0aGVyIHdpdGggdGhlIFxcYCR7cmVxdWlyZWRQcm9wfVxcYCBwcm9wLmApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHJlcXVpcmVQcm9wO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc3VwcG9ydGVkUHJvcChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGBUaGUgcHJvcCBcXGAke3Byb3BGdWxsTmFtZVNhZmV9XFxgIGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSByZW1vdmUgaXQuYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59IiwiLy8gU291cmNlIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FsaXRhaGVyaS9ub3JtYWxpemUtc2Nyb2xsLWxlZnRcbmxldCBjYWNoZWRUeXBlO1xuXG4vKipcbiAqIEJhc2VkIG9uIHRoZSBqcXVlcnkgcGx1Z2luIGh0dHBzOi8vZ2l0aHViLmNvbS9vdGhyZWUvanF1ZXJ5LnJ0bC1zY3JvbGwtdHlwZVxuICpcbiAqIFR5cGVzIG9mIHNjcm9sbExlZnQsIGFzc3VtaW5nIHNjcm9sbFdpZHRoPTEwMCBhbmQgZGlyZWN0aW9uIGlzIHJ0bC5cbiAqXG4gKiBUeXBlICAgICAgICAgICAgIHwgPC0gTW9zdCBMZWZ0IHwgTW9zdCBSaWdodCAtPiB8IEluaXRpYWxcbiAqIC0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLVxuICogZGVmYXVsdCAgICAgICAgICB8IDAgICAgICAgICAgICB8IDEwMCAgICAgICAgICAgfCAxMDBcbiAqIG5lZ2F0aXZlIChzcGVjKikgfCAtMTAwICAgICAgICAgfCAwICAgICAgICAgICAgIHwgMFxuICogcmV2ZXJzZSAgICAgICAgICB8IDEwMCAgICAgICAgICB8IDAgICAgICAgICAgICAgfCAwXG4gKlxuICogRWRnZSA4NTogZGVmYXVsdFxuICogU2FmYXJpIDE0OiBuZWdhdGl2ZVxuICogQ2hyb21lIDg1OiBuZWdhdGl2ZVxuICogRmlyZWZveCA4MTogbmVnYXRpdmVcbiAqIElFMTE6IHJldmVyc2VcbiAqXG4gKiBzcGVjKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20tdmlldy8jZG9tLXdpbmRvdy1zY3JvbGxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdFNjcm9sbFR5cGUoKSB7XG4gIGlmIChjYWNoZWRUeXBlKSB7XG4gICAgcmV0dXJuIGNhY2hlZFR5cGU7XG4gIH1cbiAgY29uc3QgZHVtbXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMHB4JztcbiAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuICBkdW1teS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICBkdW1teS5kaXIgPSAncnRsJztcbiAgZHVtbXkuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XG4gIGR1bW15LnN0eWxlLndpZHRoID0gJzRweCc7XG4gIGR1bW15LnN0eWxlLmhlaWdodCA9ICcxcHgnO1xuICBkdW1teS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gIGR1bW15LnN0eWxlLnRvcCA9ICctMTAwMHB4JztcbiAgZHVtbXkuc3R5bGUub3ZlcmZsb3cgPSAnc2Nyb2xsJztcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkdW1teSk7XG4gIGNhY2hlZFR5cGUgPSAncmV2ZXJzZSc7XG4gIGlmIChkdW1teS5zY3JvbGxMZWZ0ID4gMCkge1xuICAgIGNhY2hlZFR5cGUgPSAnZGVmYXVsdCc7XG4gIH0gZWxzZSB7XG4gICAgZHVtbXkuc2Nyb2xsTGVmdCA9IDE7XG4gICAgaWYgKGR1bW15LnNjcm9sbExlZnQgPT09IDApIHtcbiAgICAgIGNhY2hlZFR5cGUgPSAnbmVnYXRpdmUnO1xuICAgIH1cbiAgfVxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGR1bW15KTtcbiAgcmV0dXJuIGNhY2hlZFR5cGU7XG59XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDM5NDM3NlxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRTY3JvbGxMZWZ0KGVsZW1lbnQsIGRpcmVjdGlvbikge1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuXG4gIC8vIFBlcmZvcm0gdGhlIGNhbGN1bGF0aW9ucyBvbmx5IHdoZW4gZGlyZWN0aW9uIGlzIHJ0bCB0byBhdm9pZCBtZXNzaW5nIHVwIHRoZSBsdHIgYmVoYXZpb3JcbiAgaWYgKGRpcmVjdGlvbiAhPT0gJ3J0bCcpIHtcbiAgICByZXR1cm4gc2Nyb2xsTGVmdDtcbiAgfVxuICBjb25zdCB0eXBlID0gZGV0ZWN0U2Nyb2xsVHlwZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICduZWdhdGl2ZSc6XG4gICAgICByZXR1cm4gZWxlbWVudC5zY3JvbGxXaWR0aCAtIGVsZW1lbnQuY2xpZW50V2lkdGggKyBzY3JvbGxMZWZ0O1xuICAgIGNhc2UgJ3JldmVyc2UnOlxuICAgICAgcmV0dXJuIGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoIC0gc2Nyb2xsTGVmdDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHNjcm9sbExlZnQ7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCB1c2VQcmV2aW91c1Byb3BzID0gdmFsdWUgPT4ge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VSZWYoe30pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59O1xuZXhwb3J0IGRlZmF1bHQgdXNlUHJldmlvdXNQcm9wczsiLCJleHBvcnQgZnVuY3Rpb24gZ2V0VHlwZUJ5VmFsdWUodmFsdWUpIHtcbiAgY29uc3QgdmFsdWVUeXBlID0gdHlwZW9mIHZhbHVlO1xuICBzd2l0Y2ggKHZhbHVlVHlwZSkge1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJ05hTic7XG4gICAgICB9XG4gICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICdJbmZpbml0eSc7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgIT09IE1hdGguZmxvb3IodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnZmxvYXQnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdudW1iZXInO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsdWVUeXBlO1xuICB9XG59XG5cbi8vIElFIDExIHN1cHBvcnRcbmZ1bmN0aW9uIHBvbnlmaWxsSXNJbnRlZ2VyKHgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdudW1iZXInICYmIGlzRmluaXRlKHgpICYmIE1hdGguZmxvb3IoeCkgPT09IHg7XG59XG5jb25zdCBpc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IHBvbnlmaWxsSXNJbnRlZ2VyO1xuZnVuY3Rpb24gcmVxdWlyZWRJbnRlZ2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pIHtcbiAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICBpZiAocHJvcFZhbHVlID09IG51bGwgfHwgIWlzSW50ZWdlcihwcm9wVmFsdWUpKSB7XG4gICAgY29uc3QgcHJvcFR5cGUgPSBnZXRUeXBlQnlWYWx1ZShwcm9wVmFsdWUpO1xuICAgIHJldHVybiBuZXcgUmFuZ2VFcnJvcihgSW52YWxpZCAke2xvY2F0aW9ufSBcXGAke3Byb3BOYW1lfVxcYCBvZiB0eXBlIFxcYCR7cHJvcFR5cGV9XFxgIHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYGludGVnZXJcXGAuYCk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB2YWxpZGF0b3IocHJvcHMsIHByb3BOYW1lLCAuLi5vdGhlcikge1xuICBjb25zdCBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gIGlmIChwcm9wVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiByZXF1aXJlZEludGVnZXIocHJvcHMsIHByb3BOYW1lLCAuLi5vdGhlcik7XG59XG5mdW5jdGlvbiB2YWxpZGF0b3JOb29wKCkge1xuICByZXR1cm4gbnVsbDtcbn1cbnZhbGlkYXRvci5pc1JlcXVpcmVkID0gcmVxdWlyZWRJbnRlZ2VyO1xudmFsaWRhdG9yTm9vcC5pc1JlcXVpcmVkID0gdmFsaWRhdG9yTm9vcDtcbmV4cG9ydCBkZWZhdWx0IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyB2YWxpZGF0b3JOb29wIDogdmFsaWRhdG9yOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTXVpRWxlbWVudChlbGVtZW50LCBtdWlOYW1lcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpICYmIG11aU5hbWVzLmluZGV4T2YoZWxlbWVudC50eXBlLm11aU5hbWUpICE9PSAtMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lckRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xufSIsImltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4vb3duZXJEb2N1bWVudCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvd25lcldpbmRvdyhub2RlKSB7XG4gIGNvbnN0IGRvYyA9IG93bmVyRG9jdW1lbnQobm9kZSk7XG4gIHJldHVybiBkb2MuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuLyoqXG4gKiBBZGQga2V5cywgdmFsdWVzIG9mIGBkZWZhdWx0UHJvcHNgIHRoYXQgZG9lcyBub3QgZXhpc3QgaW4gYHByb3BzYFxuICogQHBhcmFtIHtvYmplY3R9IGRlZmF1bHRQcm9wc1xuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcmV0dXJucyB7b2JqZWN0fSByZXNvbHZlZCBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNvbHZlUHJvcHMoZGVmYXVsdFByb3BzLCBwcm9wcykge1xuICBjb25zdCBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcHJvcHMpO1xuICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2gocHJvcE5hbWUgPT4ge1xuICAgIGlmIChvdXRwdXRbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dFtwcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59IiwiLyoqXG4gKiBUT0RPIHY1OiBjb25zaWRlciBtYWtpbmcgaXQgcHJpdmF0ZVxuICpcbiAqIHBhc3NlcyB7dmFsdWV9IHRvIHtyZWZ9XG4gKlxuICogV0FSTklORzogQmUgc3VyZSB0byBvbmx5IGNhbGwgdGhpcyBpbnNpZGUgYSBjYWxsYmFjayB0aGF0IGlzIHBhc3NlZCBhcyBhIHJlZi5cbiAqIE90aGVyd2lzZSwgbWFrZSBzdXJlIHRvIGNsZWFudXAgdGhlIHByZXZpb3VzIHtyZWZ9IGlmIGl0IGNoYW5nZXMuIFNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL211aS9tYXRlcmlhbC11aS9pc3N1ZXMvMTM1MzlcbiAqXG4gKiBVc2VmdWwgaWYgeW91IHdhbnQgdG8gZXhwb3NlIHRoZSByZWYgb2YgYW4gaW5uZXIgY29tcG9uZW50IHRvIHRoZSBwdWJsaWMgQVBJXG4gKiB3aGlsZSBzdGlsbCB1c2luZyBpdCBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqIEBwYXJhbSByZWYgQSByZWYgY2FsbGJhY2sgb3IgcmVmIG9iamVjdC4gSWYgYW55dGhpbmcgZmFsc3ksIHRoaXMgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0UmVmKHJlZiwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYodmFsdWUpO1xuICB9IGVsc2UgaWYgKHJlZikge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rcywgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VDb250cm9sbGVkKHtcbiAgY29udHJvbGxlZCxcbiAgZGVmYXVsdDogZGVmYXVsdFByb3AsXG4gIG5hbWUsXG4gIHN0YXRlID0gJ3ZhbHVlJ1xufSkge1xuICAvLyBpc0NvbnRyb2xsZWQgaXMgaWdub3JlZCBpbiB0aGUgaG9vayBkZXBlbmRlbmN5IGxpc3RzIGFzIGl0IHNob3VsZCBuZXZlciBjaGFuZ2UuXG4gIGNvbnN0IHtcbiAgICBjdXJyZW50OiBpc0NvbnRyb2xsZWRcbiAgfSA9IFJlYWN0LnVzZVJlZihjb250cm9sbGVkICE9PSB1bmRlZmluZWQpO1xuICBjb25zdCBbdmFsdWVTdGF0ZSwgc2V0VmFsdWVdID0gUmVhY3QudXNlU3RhdGUoZGVmYXVsdFByb3ApO1xuICBjb25zdCB2YWx1ZSA9IGlzQ29udHJvbGxlZCA/IGNvbnRyb2xsZWQgOiB2YWx1ZVN0YXRlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtgTVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgJHtpc0NvbnRyb2xsZWQgPyAnJyA6ICd1bid9Y29udHJvbGxlZCAke3N0YXRlfSBzdGF0ZSBvZiAke25hbWV9IHRvIGJlICR7aXNDb250cm9sbGVkID8gJ3VuJyA6ICcnfWNvbnRyb2xsZWQuYCwgJ0VsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLicsIGBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICR7bmFtZX0gYCArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIuIEl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtzdGF0ZSwgbmFtZSwgY29udHJvbGxlZF0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICAgIH0gPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApO1xuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBpZiAoIWlzQ29udHJvbGxlZCAmJiBkZWZhdWx0VmFsdWUgIT09IGRlZmF1bHRQcm9wKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW2BNVUk6IEEgY29tcG9uZW50IGlzIGNoYW5naW5nIHRoZSBkZWZhdWx0ICR7c3RhdGV9IHN0YXRlIG9mIGFuIHVuY29udHJvbGxlZCAke25hbWV9IGFmdGVyIGJlaW5nIGluaXRpYWxpemVkLiBgICsgYFRvIHN1cHByZXNzIHRoaXMgd2FybmluZyBvcHQgdG8gdXNlIGEgY29udHJvbGxlZCAke25hbWV9LmBdLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9LCBbSlNPTi5zdHJpbmdpZnkoZGVmYXVsdFByb3ApXSk7XG4gIH1cbiAgY29uc3Qgc2V0VmFsdWVJZlVuY29udHJvbGxlZCA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1ZhbHVlID0+IHtcbiAgICBpZiAoIWlzQ29udHJvbGxlZCkge1xuICAgICAgc2V0VmFsdWUobmV3VmFsdWUpO1xuICAgIH1cbiAgfSwgW10pO1xuICByZXR1cm4gW3ZhbHVlLCBzZXRWYWx1ZUlmVW5jb250cm9sbGVkXTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5jb25zdCB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZXhwb3J0IGRlZmF1bHQgdXNlRW5oYW5jZWRFZmZlY3Q7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHVzZUVuaGFuY2VkRWZmZWN0IGZyb20gJy4vdXNlRW5oYW5jZWRFZmZlY3QnO1xuXG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTQwOTkjaXNzdWVjb21tZW50LTQ0MDAxMzg5MlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrKGZuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKCguLi5hcmdzKSA9PlxuICAvLyBAdHMtZXhwZWN0LWVycm9yIGhpZGUgYHRoaXNgXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tY29tbWEtb3BlcmF0b3JcbiAgKDAsIHJlZi5jdXJyZW50KSguLi5hcmdzKSwgW10pO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzZXRSZWYgZnJvbSAnLi9zZXRSZWYnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlRm9ya1JlZiguLi5yZWZzKSB7XG4gIC8qKlxuICAgKiBUaGlzIHdpbGwgY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIGlmIHRoZSByZWZzIHBhc3NlZCB0byB0aGlzIGhvb2sgY2hhbmdlIGFuZCBhcmUgYWxsIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3IuXG4gICAqL1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgaWYgKHJlZnMuZXZlcnkocmVmID0+IHJlZiA9PSBudWxsKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBpbnN0YW5jZSA9PiB7XG4gICAgICByZWZzLmZvckVhY2gocmVmID0+IHtcbiAgICAgICAgc2V0UmVmKHJlZiwgaW5zdGFuY2UpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIHJlZnMpO1xufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBnbG9iYWxJZCA9IDA7XG5mdW5jdGlvbiB1c2VHbG9iYWxJZChpZE92ZXJyaWRlKSB7XG4gIGNvbnN0IFtkZWZhdWx0SWQsIHNldERlZmF1bHRJZF0gPSBSZWFjdC51c2VTdGF0ZShpZE92ZXJyaWRlKTtcbiAgY29uc3QgaWQgPSBpZE92ZXJyaWRlIHx8IGRlZmF1bHRJZDtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZGVmYXVsdElkID09IG51bGwpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIHRoaXMgZGVmYXVsdCBpZCB3aGVuIHBvc3NpYmxlLlxuICAgICAgLy8gVXNlIHRoZSBpbmNyZW1lbnRpbmcgdmFsdWUgZm9yIGNsaWVudC1zaWRlIHJlbmRlcmluZyBvbmx5LlxuICAgICAgLy8gV2UgY2FuJ3QgdXNlIGl0IHNlcnZlci1zaWRlLlxuICAgICAgLy8gSWYgeW91IHdhbnQgdG8gdXNlIHJhbmRvbSB2YWx1ZXMgcGxlYXNlIGNvbnNpZGVyIHRoZSBCaXJ0aGRheSBQcm9ibGVtOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CaXJ0aGRheV9wcm9ibGVtXG4gICAgICBnbG9iYWxJZCArPSAxO1xuICAgICAgc2V0RGVmYXVsdElkKGBtdWktJHtnbG9iYWxJZH1gKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0SWRdKTtcbiAgcmV0dXJuIGlkO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jb25jYXQgLS0gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay9pc3N1ZXMvMTQ4MTRcbmNvbnN0IG1heWJlUmVhY3RVc2VJZCA9IFJlYWN0Wyd1c2VJZCcgKyAnJ107XG4vKipcbiAqXG4gKiBAZXhhbXBsZSA8ZGl2IGlkPXt1c2VJZCgpfSAvPlxuICogQHBhcmFtIGlkT3ZlcnJpZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlkKGlkT3ZlcnJpZGUpIHtcbiAgaWYgKG1heWJlUmVhY3RVc2VJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgcmVhY3RJZCA9IG1heWJlUmVhY3RVc2VJZCgpO1xuICAgIHJldHVybiBpZE92ZXJyaWRlICE9IG51bGwgPyBpZE92ZXJyaWRlIDogcmVhY3RJZDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MgLS0gYFJlYWN0LnVzZUlkYCBpcyBpbnZhcmlhbnQgYXQgcnVudGltZS5cbiAgcmV0dXJuIHVzZUdsb2JhbElkKGlkT3ZlcnJpZGUpO1xufSIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2ZvY3VzLXZpc2libGUvYmxvYi92NC4xLjUvc3JjL2ZvY3VzLXZpc2libGUuanNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmxldCBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbmxldCBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IGZhbHNlO1xubGV0IGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dDtcbmNvbnN0IGlucHV0VHlwZXNXaGl0ZWxpc3QgPSB7XG4gIHRleHQ6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB0ZWw6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBkYXRlOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgd2VlazogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWVcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgd2hldGhlciB0aGUgZ2l2ZW4gZWxlbWVudCBzaG91bGQgYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZVxuICogYGZvY3VzLXZpc2libGVgIGNsYXNzIGJlaW5nIGFkZGVkLCBpLmUuIHdoZXRoZXIgaXQgc2hvdWxkIGFsd2F5cyBtYXRjaFxuICogYDpmb2N1cy12aXNpYmxlYCB3aGVuIGZvY3VzZWQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLFxuICAgIHRhZ05hbWVcbiAgfSA9IG5vZGU7XG4gIGlmICh0YWdOYW1lID09PSAnSU5QVVQnICYmIGlucHV0VHlwZXNXaGl0ZWxpc3RbdHlwZV0gJiYgIW5vZGUucmVhZE9ubHkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChub2RlLmlzQ29udGVudEVkaXRhYmxlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygb3VyIGtleWJvYXJkIG1vZGFsaXR5IHN0YXRlIHdpdGggYGhhZEtleWJvYXJkRXZlbnRgLlxuICogSWYgdGhlIG1vc3QgcmVjZW50IHVzZXIgaW50ZXJhY3Rpb24gd2FzIHZpYSB0aGUga2V5Ym9hcmQ7XG4gKiBhbmQgdGhlIGtleSBwcmVzcyBkaWQgbm90IGluY2x1ZGUgYSBtZXRhLCBhbHQvb3B0aW9uLCBvciBjb250cm9sIGtleTtcbiAqIHRoZW4gdGhlIG1vZGFsaXR5IGlzIGtleWJvYXJkLiBPdGhlcndpc2UsIHRoZSBtb2RhbGl0eSBpcyBub3Qga2V5Ym9hcmQuXG4gKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaGFkS2V5Ym9hcmRFdmVudCA9IHRydWU7XG59XG5cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cbmZ1bmN0aW9uIGhhbmRsZVBvaW50ZXJEb3duKCkge1xuICBoYWRLZXlib2FyZEV2ZW50ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZShkb2MpIHtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0ZWFyZG93bihkb2MpIHtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGVLZXlEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCB0cnVlKTtcbn1cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIGNvbnN0IHtcbiAgICB0YXJnZXRcbiAgfSA9IGV2ZW50O1xuICB0cnkge1xuICAgIHJldHVybiB0YXJnZXQubWF0Y2hlcygnOmZvY3VzLXZpc2libGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBCcm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvci5cbiAgICAvLyBXZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzLlxuICAgIC8vIFJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gICAgLy8gd2FudCB0byBjcmFzaCBpZiBmb2N1cy12aXNpYmxlIG1hbGZ1bmN0aW9uZWQ/XG4gIH1cblxuICAvLyBObyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiBUaGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seS5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUlzRm9jdXNWaXNpYmxlKCkge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhub2RlID0+IHtcbiAgICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgICBwcmVwYXJlKG5vZGUub3duZXJEb2N1bWVudCk7XG4gICAgfVxuICB9LCBbXSk7XG4gIGNvbnN0IGlzRm9jdXNWaXNpYmxlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcblxuICAvKipcbiAgICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAgIC8vIGNoZWNraW5nIGFnYWluc3QgcG90ZW50aWFsIHN0YXRlIHZhcmlhYmxlIGRvZXMgbm90IHN1ZmZpY2UgaWYgd2UgZm9jdXMgYW5kIGJsdXIgc3luY2hyb25vdXNseS5cbiAgICAvLyBSZWFjdCB3b3VsZG4ndCBoYXZlIHRpbWUgdG8gdHJpZ2dlciBhIHJlLXJlbmRlciBzbyBgZm9jdXNWaXNpYmxlYCB3b3VsZCBiZSBzdGFsZS5cbiAgICAvLyBJZGVhbGx5IHdlIHdvdWxkIGFkanVzdCBgaXNGb2N1c1Zpc2libGUoZXZlbnQpYCB0byBsb29rIGF0IGByZWxhdGVkVGFyZ2V0YCBmb3IgYmx1ciBldmVudHMuXG4gICAgLy8gVGhpcyBkb2Vzbid0IHdvcmsgaW4gSUUxMSBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zNzUxXG4gICAgLy8gVE9ETzogY2hlY2sgYWdhaW4gaWYgUmVhY3QgcmVsZWFzZXMgdGhlaXIgaW50ZXJuYWwgY2hhbmdlcyB0byBmb2N1cyBldmVudCBoYW5kbGluZyAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTkxODYpLlxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZVJlZi5jdXJyZW50KSB7XG4gICAgICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gICAgICAvLyByYXBpZGx5IGJ5IGEgdmlzaWJpbGl0eSBjaGFuZ2UuXG4gICAgICAvLyBJZiB3ZSBkb24ndCBzZWUgYSB2aXNpYmlsaXR5IGNoYW5nZSB3aXRoaW4gMTAwbXMsIGl0J3MgcHJvYmFibHkgYVxuICAgICAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseSA9IHRydWU7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5VGltZW91dCk7XG4gICAgICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG4gICAgICB9LCAxMDApO1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGlmIGEgYmx1ciBldmVudCBpcyBmaXJlZFxuICAgKi9cbiAgZnVuY3Rpb24gaGFuZGxlRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gICAgaWYgKGlzRm9jdXNWaXNpYmxlKGV2ZW50KSkge1xuICAgICAgaXNGb2N1c1Zpc2libGVSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgaXNGb2N1c1Zpc2libGVSZWYsXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXNWaXNpYmxlLFxuICAgIG9uQmx1cjogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmXG4gIH07XG59IiwiY29uc3QgdmlzdWFsbHlIaWRkZW4gPSB7XG4gIGJvcmRlcjogMCxcbiAgY2xpcDogJ3JlY3QoMCAwIDAgMCknLFxuICBoZWlnaHQ6ICcxcHgnLFxuICBtYXJnaW46IC0xLFxuICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIHBhZGRpbmc6IDAsXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgd2lkdGg6ICcxcHgnXG59O1xuZXhwb3J0IGRlZmF1bHQgdmlzdWFsbHlIaWRkZW47IiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4wLjRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbnZhciBBY3Rpb247XG5cbihmdW5jdGlvbiAoQWN0aW9uKSB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBBY3Rpb25bXCJQb3BcIl0gPSBcIlBPUFwiO1xuICAvKipcbiAgICogQSBQVVNIIGluZGljYXRlcyBhIG5ldyBlbnRyeSBiZWluZyBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaCBhcyB3aGVuXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcbiAgICogZW50cmllcyBpbiB0aGUgc3RhY2sgYXJlIGxvc3QuXG4gICAqL1xuXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG5cbiAgQWN0aW9uW1wiUmVwbGFjZVwiXSA9IFwiUkVQTEFDRVwiO1xufSkoQWN0aW9uIHx8IChBY3Rpb24gPSB7fSkpO1xuXG5jb25zdCBQb3BTdGF0ZUV2ZW50VHlwZSA9IFwicG9wc3RhdGVcIjtcbi8qKlxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxuICogaW4gc3RhdGVmdWwgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRzIGxpa2UgdGVzdHMgYW5kIFJlYWN0IE5hdGl2ZS5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgaW5pdGlhbEVudHJpZXMgPSBbXCIvXCJdLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cblxuICBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKChlbnRyeSwgaW5kZXgpID0+IGNyZWF0ZU1lbW9yeUxvY2F0aW9uKGVudHJ5LCB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsIGluZGV4ID09PSAwID8gXCJkZWZhdWx0XCIgOiB1bmRlZmluZWQpKTtcbiAgbGV0IGluZGV4ID0gY2xhbXBJbmRleChpbml0aWFsSW5kZXggPT0gbnVsbCA/IGVudHJpZXMubGVuZ3RoIC0gMSA6IGluaXRpYWxJbmRleCk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gZW50cmllc1tpbmRleF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUsIGtleSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3Rvcnk6IFwiICsgSlNPTi5zdHJpbmdpZnkodG8pKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcblxuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG5cbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIH0sXG5cbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBwdXNoKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGluZGV4ICs9IDE7XG4gICAgICBlbnRyaWVzLnNwbGljZShpbmRleCwgZW50cmllcy5sZW5ndGgsIG5leHRMb2NhdGlvbik7XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgZW50cmllc1tpbmRleF0gPSBuZXh0TG9jYXRpb247XG5cbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgaW5kZXggPSBjbGFtcEluZGV4KGluZGV4ICsgZGVsdGEpO1xuXG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogZ2V0Q3VycmVudExvY2F0aW9uKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGxpc3Rlbihmbikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfVxuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24od2luZG93LCBnbG9iYWxIaXN0b3J5KSB7XG4gICAgbGV0IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sIC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuICAgIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS51c3IgfHwgbnVsbCwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLmtleSB8fCBcImRlZmF1bHRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3csIHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgICBoYXNoID0gXCJcIlxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSwgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdywgdG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbiwgdG8pIHtcbiAgICB3YXJuaW5nJDEobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSBcIi9cIiwgXCJyZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnB1c2goXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIik7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn0gLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFVUSUxTXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiB3YXJuaW5nJDEoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5cblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleVxuICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgTG9jYXRpb24gb2JqZWN0IHdpdGggYSB1bmlxdWUga2V5IGZyb20gdGhlIGdpdmVuIFBhdGhcbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGN1cnJlbnQsIHRvLCBzdGF0ZSwga2V5KSB7XG4gIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgc3RhdGUgPSBudWxsO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gX2V4dGVuZHMoe1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiXG4gIH0sIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bywge1xuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6IHRvICYmIHRvLmtleSB8fCBrZXkgfHwgY3JlYXRlS2V5KClcbiAgfSk7XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSBfcmVmO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpIHBhdGhuYW1lICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09IFwiP1wiID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09IFwiI1wiKSBwYXRobmFtZSArPSBoYXNoLmNoYXJBdCgwKSA9PT0gXCIjXCIgPyBoYXNoIDogXCIjXCIgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0ge307XG5cbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5oYXNoID0gcGF0aC5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIGxldCBzZWFyY2hJbmRleCA9IHBhdGguaW5kZXhPZihcIj9cIik7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICAvLyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIGlzIFwibnVsbFwiICh0aGUgbGl0ZXJhbCBzdHJpbmcgdmFsdWUpIGluIEZpcmVmb3hcbiAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgbGV0IGJhc2UgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cubG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uLm9yaWdpbiAhPT0gXCJudWxsXCIgPyB3aW5kb3cubG9jYXRpb24ub3JpZ2luIDogXCJ1bmtub3duOi8vdW5rbm93blwiO1xuICBsZXQgaHJlZiA9IHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIHJldHVybiBuZXcgVVJMKGhyZWYsIGJhc2UpO1xufVxuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoZ2V0TG9jYXRpb24sIGNyZWF0ZUhyZWYsIHZhbGlkYXRlTG9jYXRpb24sIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGxldCB7XG4gICAgd2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKCkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG4gICAgbGV0IGhpc3RvcnlTdGF0ZSA9IGdldEhpc3RvcnlTdGF0ZShsb2NhdGlvbik7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7IC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cbiAgICB0cnkge1xuICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBUaGV5IGFyZSBnb2luZyB0byBsb3NlIHN0YXRlIGhlcmUsIGJ1dCB0aGVyZSBpcyBubyByZWFsXG4gICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgIH1cblxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uKTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG5cbiAgICBsaXN0ZW4oZm4pIHtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBIGhpc3Rvcnkgb25seSBhY2NlcHRzIG9uZSBhY3RpdmUgbGlzdGVuZXJcIik7XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFBvcFN0YXRlRXZlbnRUeXBlLCBoYW5kbGVQb3ApO1xuICAgICAgICBsaXN0ZW5lciA9IG51bGw7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIC8vIEVuY29kZSBhIExvY2F0aW9uIHRoZSBzYW1lIHdheSB3aW5kb3cubG9jYXRpb24gd291bGRcbiAgICAgIGxldCB1cmwgPSBjcmVhdGVVUkwodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBwdXNoLFxuICAgIHJlcGxhY2UsXG5cbiAgICBnbyhuKSB7XG4gICAgICByZXR1cm4gZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgICB9XG5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vI2VuZHJlZ2lvblxuXG52YXIgUmVzdWx0VHlwZTtcblxuKGZ1bmN0aW9uIChSZXN1bHRUeXBlKSB7XG4gIFJlc3VsdFR5cGVbXCJkYXRhXCJdID0gXCJkYXRhXCI7XG4gIFJlc3VsdFR5cGVbXCJkZWZlcnJlZFwiXSA9IFwiZGVmZXJyZWRcIjtcbiAgUmVzdWx0VHlwZVtcInJlZGlyZWN0XCJdID0gXCJyZWRpcmVjdFwiO1xuICBSZXN1bHRUeXBlW1wiZXJyb3JcIl0gPSBcImVycm9yXCI7XG59KShSZXN1bHRUeXBlIHx8IChSZXN1bHRUeXBlID0ge30pKTtcblxuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn0gLy8gV2FsayB0aGUgcm91dGUgdHJlZSBnZW5lcmF0aW5nIHVuaXF1ZSBJRHMgd2hlcmUgbmVjZXNzYXJ5IHNvIHdlIGFyZSB3b3JraW5nXG4vLyBzb2xlbHkgd2l0aCBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCdzIHdpdGhpbiB0aGUgUm91dGVyXG5cblxuZnVuY3Rpb24gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIHBhcmVudFBhdGgsIGFsbElkcykge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgaWYgKGFsbElkcyA9PT0gdm9pZCAwKSB7XG4gICAgYWxsSWRzID0gbmV3IFNldCgpO1xuICB9XG5cbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IGlkID0gdHlwZW9mIHJvdXRlLmlkID09PSBcInN0cmluZ1wiID8gcm91dGUuaWQgOiB0cmVlUGF0aC5qb2luKFwiLVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGUuaW5kZXggIT09IHRydWUgfHwgIXJvdXRlLmNoaWxkcmVuLCBcIkNhbm5vdCBzcGVjaWZ5IGNoaWxkcmVuIG9uIGFuIGluZGV4IHJvdXRlXCIpO1xuICAgIGludmFyaWFudCghYWxsSWRzLmhhcyhpZCksIFwiRm91bmQgYSByb3V0ZSBpZCBjb2xsaXNpb24gb24gaWQgXFxcIlwiICsgaWQgKyBcIlxcXCIuICBSb3V0ZSBcIiArIFwiaWQncyBtdXN0IGJlIGdsb2JhbGx5IHVuaXF1ZSB3aXRoaW4gRGF0YSBSb3V0ZXIgdXNhZ2VzXCIpO1xuICAgIGFsbElkcy5hZGQoaWQpO1xuXG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZSA9IF9leHRlbmRzKHt9LCByb3V0ZSwge1xuICAgICAgICBpZCxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuID8gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgdHJlZVBhdGgsIGFsbElkcykgOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcGF0aE9yTGF5b3V0Um91dGU7XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL21hdGNoLXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbiA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuXG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuXG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2goYnJhbmNoZXNbaV0sIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgc2FmZWx5RGVjb2RlVVJJKHBhdGhuYW1lKSk7XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cblxuICBpZiAocGFyZW50c01ldGEgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudHNNZXRhID0gW107XG4gIH1cblxuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFwiXCI7XG4gIH1cblxuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJvdXRlLnBhdGggfHwgXCJcIixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09IHRydWUsXG4gICAgICBjaGlsZHJlbkluZGV4OiBpbmRleCxcbiAgICAgIHJvdXRlXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTsgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5IHNvIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHJvdXRlIHRyZWUgZGVwdGgtZmlyc3QgYW5kIGNoaWxkIHJvdXRlcyBhcHBlYXIgYmVmb3JlIHRoZWlyIHBhcmVudHMgaW5cbiAgICAvLyB0aGUgXCJmbGF0dGVuZWRcIiB2ZXJzaW9uLlxuXG4gICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgIGludmFyaWFudCggLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH0gLy8gUm91dGVzIHdpdGhvdXQgYSBwYXRoIHNob3VsZG4ndCBldmVyIG1hdGNoIGJ5IHRoZW1zZWx2ZXMgdW5sZXNzIHRoZXkgYXJlXG4gICAgLy8gaW5kZXggcm91dGVzLCBzbyBkb24ndCBhZGQgdGhlbSB0byB0aGUgbGlzdCBvZiBwb3NzaWJsZSBicmFuY2hlcy5cblxuXG4gICAgaWYgKHJvdXRlLnBhdGggPT0gbnVsbCAmJiAhcm91dGUuaW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBicmFuY2hlcy5wdXNoKHtcbiAgICAgIHBhdGgsXG4gICAgICBzY29yZTogY29tcHV0ZVNjb3JlKHBhdGgsIHJvdXRlLmluZGV4KSxcbiAgICAgIHJvdXRlc01ldGFcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBicmFuY2hlcztcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT4gYS5zY29yZSAhPT0gYi5zY29yZSA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICA6IGNvbXBhcmVJbmRleGVzKGEucm91dGVzTWV0YS5tYXAobWV0YSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLCBiLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSkpO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcblxuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5cbmZ1bmN0aW9uIGNvbXB1dGVTY29yZShwYXRoLCBpbmRleCkge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcblxuICBpZiAoc2VnbWVudHMuc29tZShpc1NwbGF0KSkge1xuICAgIGluaXRpYWxTY29yZSArPSBzcGxhdFBlbmFsdHk7XG4gIH1cblxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmZpbHRlcihzID0+ICFpc1NwbGF0KHMpKS5yZWR1Y2UoKHNjb3JlLCBzZWdtZW50KSA9PiBzY29yZSArIChwYXJhbVJlLnRlc3Qoc2VnbWVudCkgPyBkeW5hbWljU2VnbWVudFZhbHVlIDogc2VnbWVudCA9PT0gXCJcIiA/IGVtcHR5U2VnbWVudFZhbHVlIDogc3RhdGljU2VnbWVudFZhbHVlKSwgaW5pdGlhbFNjb3JlKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUluZGV4ZXMoYSwgYikge1xuICBsZXQgc2libGluZ3MgPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5zbGljZSgwLCAtMSkuZXZlcnkoKG4sIGkpID0+IG4gPT09IGJbaV0pO1xuICByZXR1cm4gc2libGluZ3MgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gIC8vIGZpcnN0LiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gaGF2ZSBmaW5lLWdyYWluZWQgY29udHJvbCBvdmVyIHRoZSBtYXRjaGluZ1xuICAvLyBiZWhhdmlvciBieSBzaW1wbHkgcHV0dGluZyByb3V0ZXMgd2l0aCBpZGVudGljYWwgcGF0aHMgaW4gdGhlIG9yZGVyIHRoZXlcbiAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICBhW2EubGVuZ3RoIC0gMV0gLSBiW2IubGVuZ3RoIC0gMV0gOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gIC8vIHNvIHRoZXkgc29ydCBlcXVhbGx5LlxuICAwO1xufVxuXG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlc01ldGEubGVuZ3RoOyArK2kpIHtcbiAgICBsZXQgbWV0YSA9IHJvdXRlc01ldGFbaV07XG4gICAgbGV0IGVuZCA9IGkgPT09IHJvdXRlc01ldGEubGVuZ3RoIC0gMTtcbiAgICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBtYXRjaGVkUGF0aG5hbWUgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShtYXRjaGVkUGF0aG5hbWUubGVuZ3RoKSB8fCBcIi9cIjtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaFBhdGgoe1xuICAgICAgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiBtZXRhLmNhc2VTZW5zaXRpdmUsXG4gICAgICBlbmRcbiAgICB9LCByZW1haW5pbmdQYXRobmFtZSk7XG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gICAgT2JqZWN0LmFzc2lnbihtYXRjaGVkUGFyYW1zLCBtYXRjaC5wYXJhbXMpO1xuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG4gICAgbWF0Y2hlcy5wdXNoKHtcbiAgICAgIC8vIFRPRE86IENhbiB0aGlzIGFzIGJlIGF2b2lkZWQ/XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9nZW5lcmF0ZS1wYXRoXG4gKi9cblxuXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvOihcXHcrKS9nLCAoXywga2V5KSA9PiB7XG4gICAgaW52YXJpYW50KHBhcmFtc1trZXldICE9IG51bGwsIFwiTWlzc2luZyBcXFwiOlwiICsga2V5ICsgXCJcXFwiIHBhcmFtXCIpO1xuICAgIHJldHVybiBwYXJhbXNba2V5XTtcbiAgfSkucmVwbGFjZSgvKFxcLz8pXFwqLywgKF8sIHByZWZpeCwgX18sIHN0cikgPT4ge1xuICAgIGNvbnN0IHN0YXIgPSBcIipcIjtcblxuICAgIGlmIChwYXJhbXNbc3Rhcl0gPT0gbnVsbCkge1xuICAgICAgLy8gSWYgbm8gc3BsYXQgd2FzIHByb3ZpZGVkLCB0cmltIHRoZSB0cmFpbGluZyBzbGFzaCBfdW5sZXNzXyBpdCdzXG4gICAgICAvLyB0aGUgZW50aXJlIHBhdGhcbiAgICAgIHJldHVybiBzdHIgPT09IFwiLypcIiA/IFwiL1wiIDogXCJcIjtcbiAgICB9IC8vIEFwcGx5IHRoZSBzcGxhdFxuXG5cbiAgICByZXR1cm4gXCJcIiArIHByZWZpeCArIHBhcmFtc1tzdGFyXTtcbiAgfSk7XG59XG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIihbXlxcXFwvXSspXCI7XG4gIH0pO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtTmFtZXMucHVzaChcIipcIik7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSBpZiAoZW5kKSB7XG4gICAgLy8gV2hlbiBtYXRjaGluZyB0byB0aGUgZW5kLCBpZ25vcmUgdHJhaWxpbmcgc2xhc2hlc1xuICAgIHJlZ2V4cFNvdXJjZSArPSBcIlxcXFwvKiRcIjtcbiAgfSBlbHNlIGlmIChwYXRoICE9PSBcIlwiICYmIHBhdGggIT09IFwiL1wiKSB7XG4gICAgLy8gSWYgb3VyIHBhdGggaXMgbm9uLWVtcHR5IGFuZCBjb250YWlucyBhbnl0aGluZyBiZXlvbmQgYW4gaW5pdGlhbCBzbGFzaCxcbiAgICAvLyB0aGVuIHdlIGhhdmUgX3NvbWVfIGZvcm0gb2YgcGF0aCBpbiBvdXIgcmVnZXggc28gd2Ugc2hvdWxkIGV4cGVjdCB0b1xuICAgIC8vIG1hdGNoIG9ubHkgaWYgd2UgZmluZCB0aGUgZW5kIG9mIHRoaXMgcGF0aCBzZWdtZW50LiAgTG9vayBmb3IgYW4gb3B0aW9uYWxcbiAgICAvLyBub24tY2FwdHVyZWQgdHJhaWxpbmcgc2xhc2ggKHRvIG1hdGNoIGEgcG9ydGlvbiBvZiB0aGUgVVJMKSBvciB0aGUgZW5kXG4gICAgLy8gb2YgdGhlIHBhdGggKGlmIHdlJ3ZlIG1hdGNoZWQgdG8gdGhlIGVuZCkuICBXZSB1c2VkIHRvIGRvIHRoaXMgd2l0aCBhXG4gICAgLy8gd29yZCBib3VuZGFyeSBidXQgdGhhdCBnaXZlcyBmYWxzZSBwb3NpdGl2ZXMgb24gcm91dGVzIGxpa2VcbiAgICAvLyAvdXNlci1wcmVmZXJlbmNlcyBzaW5jZSBgLWAgY291bnRzIGFzIGEgd29yZCBib3VuZGFyeS5cbiAgICByZWdleHBTb3VyY2UgKz0gXCIoPzooPz1cXFxcL3wkKSlcIjtcbiAgfSBlbHNlIDtcblxuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtTmFtZXNdO1xufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcblxuICBpZiAoIXBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChiYXNlbmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIFdlIHdhbnQgdG8gbGVhdmUgdHJhaWxpbmcgc2xhc2ggYmVoYXZpb3IgaW4gdGhlIHVzZXIncyBjb250cm9sLCBzbyBpZiB0aGV5XG4gIC8vIHNwZWNpZnkgYSBiYXNlbmFtZSB3aXRoIGEgdHJhaWxpbmcgc2xhc2gsIHdlIHNob3VsZCBzdXBwb3J0IGl0XG5cblxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcblxuICBpZiAobmV4dENoYXIgJiYgbmV4dENoYXIgIT09IFwiL1wiKSB7XG4gICAgLy8gcGF0aG5hbWUgZG9lcyBub3Qgc3RhcnQgd2l0aCBiYXNlbmFtZS9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBwYXRobmFtZS5zbGljZShzdGFydEluZGV4KSB8fCBcIi9cIjtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIikgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IFJvdXRlciFcbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGVycm9yIGlzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHlvdSBjYW4gbW9yZSBlYXNpbHlcbiAgICAgIC8vIGZpbmQgdGhlIHNvdXJjZSBmb3IgYSB3YXJuaW5nIHRoYXQgYXBwZWFycyBpbiB0aGUgY29uc29sZSBieVxuICAgICAgLy8gZW5hYmxpbmcgXCJwYXVzZSBvbiBleGNlcHRpb25zXCIgaW4geW91ciBKYXZhU2NyaXB0IGRlYnVnZ2VyLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG4vKipcbiAqIFJldHVybnMgYSByZXNvbHZlZCBwYXRoIG9iamVjdCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gcGF0aG5hbWUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3V0aWxzL3Jlc29sdmUtcGF0aFxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cblxuICBsZXQge1xuICAgIHBhdGhuYW1lOiB0b1BhdGhuYW1lLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCJcbiAgfSA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcbiAgbGV0IHBhdGhuYW1lID0gdG9QYXRobmFtZSA/IHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSkgOiBmcm9tUGF0aG5hbWU7XG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2goc2VhcmNoKSxcbiAgICBoYXNoOiBub3JtYWxpemVIYXNoKGhhc2gpXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZShyZWxhdGl2ZVBhdGgsIGZyb21QYXRobmFtZSkge1xuICBsZXQgc2VnbWVudHMgPSBmcm9tUGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gIGxldCByZWxhdGl2ZVNlZ21lbnRzID0gcmVsYXRpdmVQYXRoLnNwbGl0KFwiL1wiKTtcbiAgcmVsYXRpdmVTZWdtZW50cy5mb3JFYWNoKHNlZ21lbnQgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCA+IDEgPyBzZWdtZW50cy5qb2luKFwiL1wiKSA6IFwiL1wiO1xufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpIHtcbiAgcmV0dXJuIG1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IGluZGV4ID09PSAwIHx8IG1hdGNoLnJvdXRlLnBhdGggJiYgbWF0Y2gucm91dGUucGF0aC5sZW5ndGggPiAwKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cblxuICBsZXQgdG87XG5cbiAgaWYgKHR5cGVvZiB0b0FyZyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRvID0gcGFyc2VQYXRoKHRvQXJnKTtcbiAgfSBlbHNlIHtcbiAgICB0byA9IF9leHRlbmRzKHt9LCB0b0FyZyk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCI/XCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5wYXRobmFtZSB8fCAhdG8ucGF0aG5hbWUuaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bykpO1xuICAgIGludmFyaWFudCghdG8uc2VhcmNoIHx8ICF0by5zZWFyY2guaW5jbHVkZXMoXCIjXCIpLCBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pKTtcbiAgfVxuXG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207IC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cblxuICBpZiAoaXNQYXRoUmVsYXRpdmUgfHwgdG9QYXRobmFtZSA9PSBudWxsKSB7XG4gICAgZnJvbSA9IGxvY2F0aW9uUGF0aG5hbWU7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHJvdXRlUGF0aG5hbWVJbmRleCA9IHJvdXRlUGF0aG5hbWVzLmxlbmd0aCAtIDE7XG5cbiAgICBpZiAodG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7IC8vIEVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zIFwiZ28gdXAgb25lIHJvdXRlXCIgaW5zdGVhZCBvZiBcImdvIHVwIG9uZVxuICAgICAgLy8gVVJMIHNlZ21lbnRcIi4gIFRoaXMgaXMgYSBrZXkgZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYVxuICAgICAgLy8gbWFqb3IgcmVhc29uIHdlIGNhbGwgdGhpcyBhIFwidG9cIiB2YWx1ZSBpbnN0ZWFkIG9mIGEgXCJocmVmXCIuXG5cbiAgICAgIHdoaWxlICh0b1NlZ21lbnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICAgICAgdG9TZWdtZW50cy5zaGlmdCgpO1xuICAgICAgICByb3V0ZVBhdGhuYW1lSW5kZXggLT0gMTtcbiAgICAgIH1cblxuICAgICAgdG8ucGF0aG5hbWUgPSB0b1NlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICAgIH0gLy8gSWYgdGhlcmUgYXJlIG1vcmUgXCIuLlwiIHNlZ21lbnRzIHRoYW4gcGFyZW50IHJvdXRlcywgcmVzb2x2ZSByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSByb290IC8gVVJMLlxuXG5cbiAgICBmcm9tID0gcm91dGVQYXRobmFtZUluZGV4ID49IDAgPyByb3V0ZVBhdGhuYW1lc1tyb3V0ZVBhdGhuYW1lSW5kZXhdIDogXCIvXCI7XG4gIH1cblxuICBsZXQgcGF0aCA9IHJlc29sdmVQYXRoKHRvLCBmcm9tKTsgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgXCJ0b1wiIGhhZCBvbmVcblxuICBsZXQgaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoID0gdG9QYXRobmFtZSAmJiB0b1BhdGhuYW1lICE9PSBcIi9cIiAmJiB0b1BhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTsgLy8gT3IgaWYgdGhpcyB3YXMgYSBsaW5rIHRvIHRoZSBjdXJyZW50IHBhdGggd2hpY2ggaGFzIGEgdHJhaWxpbmcgc2xhc2hcblxuICBsZXQgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2ggPSAoaXNFbXB0eVBhdGggfHwgdG9QYXRobmFtZSA9PT0gXCIuXCIpICYmIGxvY2F0aW9uUGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpO1xuXG4gIGlmICghcGF0aC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgKGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCB8fCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCkpIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgam9pblBhdGhzID0gcGF0aHMgPT4gcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplUGF0aG5hbWUgPSBwYXRobmFtZSA9PiBwYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmNvbnN0IG5vcm1hbGl6ZVNlYXJjaCA9IHNlYXJjaCA9PiAhc2VhcmNoIHx8IHNlYXJjaCA9PT0gXCI/XCIgPyBcIlwiIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cblxuY29uc3QganNvbiA9IGZ1bmN0aW9uIGpzb24oZGF0YSwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IHt9O1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG5cbiAgaWYgKCFoZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIF9leHRlbmRzKHt9LCByZXNwb25zZUluaXQsIHtcbiAgICBoZWFkZXJzXG4gIH0pKTtcbn07XG5jbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5jbGFzcyBEZWZlcnJlZERhdGEge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgdGhpcy5wZW5kaW5nS2V5cyA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZXIgPSB1bmRlZmluZWQ7XG4gICAgaW52YXJpYW50KGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSksIFwiZGVmZXIoKSBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0c1wiKTsgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG5cbiAgICBsZXQgcmVqZWN0O1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcblxuICAgIGxldCBvbkFib3J0ID0gKCkgPT4gcmVqZWN0KG5ldyBBYm9ydGVkRGVmZXJyZWRFcnJvcihcIkRlZmVycmVkIGRhdGEgYWJvcnRlZFwiKSk7XG5cbiAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwgPSAoKSA9PiB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmKSA9PiB7XG4gICAgICBsZXQgW2tleSwgdmFsdWVdID0gX3JlZjtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHRyYWNrUHJvbWlzZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0tleXMuYWRkKGtleSk7IC8vIFdlIHN0b3JlIGEgbGl0dGxlIHdyYXBwZXIgcHJvbWlzZSB0aGF0IHdpbGwgYmUgZXh0ZW5kZWQgd2l0aFxuICAgIC8vIF9kYXRhL19lcnJvciBwcm9wcyB1cG9uIHJlc29sdmUvcmVqZWN0XG5cbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihkYXRhID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCBudWxsLCBkYXRhKSwgZXJyb3IgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yKSk7IC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG5cbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHt9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIG9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkICYmIGVycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0tleXMuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdWJzY3JpYmVyID0gdGhpcy5zdWJzY3JpYmVyO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IGVycm9yXG4gICAgICB9KTtcbiAgICAgIHN1YnNjcmliZXIgJiYgc3Vic2NyaWJlcihmYWxzZSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgIH0pO1xuICAgIHN1YnNjcmliZXIgJiYgc3Vic2NyaWJlcihmYWxzZSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBzdWJzY3JpYmUoZm4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXIgPSBmbjtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzLmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXMuZGVsZXRlKGspKTtcbiAgICBsZXQgc3Vic2NyaWJlciA9IHRoaXMuc3Vic2NyaWJlcjtcbiAgICBzdWJzY3JpYmVyICYmIHN1YnNjcmliZXIodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWwpIHtcbiAgICBsZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgIGxldCBvbkFib3J0ID0gKCkgPT4gdGhpcy5jYW5jZWwoKTtcblxuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgICAgICAgIGlmIChhYm9ydGVkIHx8IHRoaXMuZG9uZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShhYm9ydGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5cy5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KHRoaXMuZGF0YSAhPT0gbnVsbCAmJiB0aGlzLmRvbmUsIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCIpO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLmRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSlcbiAgICAgIH0pO1xuICAgIH0sIHt9KTtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWx1ZS5fdHJhY2tlZCA9PT0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpIHtcbiAgaWYgKCFpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cblxuICByZXR1cm4gdmFsdWUuX2RhdGE7XG59XG5cbmZ1bmN0aW9uIGRlZmVyKGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSk7XG59XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5cbmNvbnN0IHJlZGlyZWN0ID0gZnVuY3Rpb24gcmVkaXJlY3QodXJsLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gMzAyO1xuICB9XG5cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IGluaXQ7XG5cbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuLyoqXG4gKiBAcHJpdmF0ZVxuICogVXRpbGl0eSBjbGFzcyB3ZSB1c2UgdG8gaG9sZCBhdXRvLXVud3JhcHBlZCA0eHgvNXh4IFJlc3BvbnNlIGJvZGllc1xuICovXG5cbmNsYXNzIEVycm9yUmVzcG9uc2Uge1xuICBjb25zdHJ1Y3RvcihzdGF0dXMsIHN0YXR1c1RleHQsIGRhdGEsIGludGVybmFsKSB7XG4gICAgaWYgKGludGVybmFsID09PSB2b2lkIDApIHtcbiAgICAgIGludGVybmFsID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcblxuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBlcnJvciBpcyBhbiBFcnJvclJlc3BvbnNlIGdlbmVyYXRlZCBmcm9tIGEgNHh4LzV4eFxuICogUmVzcG9uc2UgdGhyb3cgZnJvbSBhbiBhY3Rpb24vbG9hZGVyXG4gKi9cblxuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZSkge1xuICByZXR1cm4gZSBpbnN0YW5jZW9mIEVycm9yUmVzcG9uc2U7XG59XG5cbmNvbnN0IHZhbGlkQWN0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkQWN0aW9uTWV0aG9kcyA9IG5ldyBTZXQodmFsaWRBY3Rpb25NZXRob2RzQXJyKTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIgPSBbXCJnZXRcIiwgLi4udmFsaWRBY3Rpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkXG59O1xuY29uc3QgSURMRV9GRVRDSEVSID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGRhdGE6IHVuZGVmaW5lZCxcbiAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gIGZvcm1EYXRhOiB1bmRlZmluZWRcbn07XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuY29uc3QgaXNTZXJ2ZXIgPSAhaXNCcm93c2VyOyAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlUm91dGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVyKGluaXQpIHtcbiAgaW52YXJpYW50KGluaXQucm91dGVzLmxlbmd0aCA+IDAsIFwiWW91IG11c3QgcHJvdmlkZSBhIG5vbi1lbXB0eSByb3V0ZXMgYXJyYXkgdG8gY3JlYXRlUm91dGVyXCIpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoaW5pdC5yb3V0ZXMpOyAvLyBDbGVhbnVwIGZ1bmN0aW9uIGZvciBoaXN0b3J5XG5cbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcblxuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuXG4gIGxldCBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7IC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG5cbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDsgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsOyAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBmYWxzZTtcbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuXG4gIGlmIChpbml0aWFsTWF0Y2hlcyA9PSBudWxsKSB7XG4gICAgLy8gSWYgd2UgZG8gbm90IG1hdGNoIGEgdXNlci1wcm92aWRlZC1yb3V0ZSwgZmFsbCBiYWNrIHRvIHRoZSByb290XG4gICAgLy8gdG8gYWxsb3cgdGhlIGVycm9yIGJvdW5kYXJ5IHRvIHRha2Ugb3ZlclxuICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICBwYXRobmFtZTogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICByb3V0ZVxuICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgIGluaXRpYWxNYXRjaGVzID0gbWF0Y2hlcztcbiAgICBpbml0aWFsRXJyb3JzID0ge1xuICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICB9O1xuICB9XG5cbiAgbGV0IGluaXRpYWxpemVkID0gIWluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxvYWRlcikgfHwgaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIHx8IHt9LFxuICAgIGFjdGlvbkRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSB8fCBudWxsLFxuICAgIGVycm9yczogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpXG4gIH07IC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuXG4gIGxldCBwZW5kaW5nQWN0aW9uID0gQWN0aW9uLlBvcDsgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG5cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTsgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyOyAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG5cbiAgbGV0IGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcblxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuXG4gIGxldCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdOyAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIGZldGNoZXIgbG9hZHMgdGhhdCB3ZXJlIGNhbmNlbGxlZCBieSBhblxuICAvLyBhY3Rpb24gbmF2aWdhdGlvbiBhbmQgcmVxdWlyZSByZXZhbGlkYXRpb25cblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107IC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcblxuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTsgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuXG4gIGxldCBpbmNyZW1lbnRpbmdMb2FkSWQgPSAwOyAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTsgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcblxuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7IC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zIGZyb20gdGhlaXIgYWN0aW9uc1xuXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpOyAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG5cbiAgbGV0IGZldGNoTG9hZE1hdGNoZXMgPSBuZXcgTWFwKCk7IC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG5cbiAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTsgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIHJldHVybiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24pO1xuICAgIH0pOyAvLyBLaWNrIG9mZiBpbml0aWFsIGRhdGEgbG9hZCBpZiBuZWVkZWQuICBVc2UgUG9wIHRvIGF2b2lkIG1vZGlmeWluZyBoaXN0b3J5XG5cbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH0gLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG5cblxuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cblxuICAgIHN1YnNjcmliZXJzLmNsZWFyKCk7XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlRmV0Y2hlcihrZXkpKTtcbiAgfSAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGZuKSB7XG4gICAgc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfSAvLyBVcGRhdGUgb3VyIHN0YXRlIGFuZCBub3RpZnkgdGhlIGNhbGxpbmcgY29udGV4dCBvZiB0aGUgY2hhbmdlXG5cblxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSkge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUpKTtcbiAgfSAvLyBDb21wbGV0ZSBhIG5hdmlnYXRpb24gcmV0dXJuaW5nIHRoZSBzdGF0ZS5uYXZpZ2F0aW9uIGJhY2sgdG8gdGhlIElETEVfTkFWSUdBVElPTlxuICAvLyBhbmQgc2V0dGluZyBzdGF0ZS5baGlzdG9yeUFjdGlvbi9sb2NhdGlvbi9tYXRjaGVzXSB0byB0aGUgbmV3IHJvdXRlLlxuICAvLyAtIExvY2F0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1cbiAgLy8gLSBOYXZpZ2F0aW9uIHdpbGwgYWx3YXlzIGJlIHNldCB0byBJRExFX05BVklHQVRJT05cbiAgLy8gLSBDYW4gcGFzcyBhbnkgb3RoZXIgc3RhdGUgaW4gbmV3U3RhdGVcblxuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUpIHtcbiAgICB2YXIgX3N0YXRlJG5hdmlnYXRpb24kZm9yO1xuXG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gd2UndmUgZmluaXNoZWQgbG9hZGluZyBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgc3VibWlzc2lvblxuICAgIC8vICAgbG9jYXRpb24sIGluZGljYXRpbmcgd2UgcmVkaXJlY3RlZCBmcm9tIHRoZSBhY3Rpb24gKGF2b2lkcyBmYWxzZVxuICAgIC8vICAgcG9zaXRpdmVzIGZvciBsb2FkaW5nL3N1Ym1pc3Npb25SZWRpcmVjdCB3aGVuIGFjdGlvbkRhdGEgcmV0dXJuZWRcbiAgICAvLyAgIG9uIGEgcHJpb3Igc3VibWlzc2lvbilcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPSBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfc3RhdGUkbmF2aWdhdGlvbiRmb3IgPSBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1BY3Rpb24pID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkbmF2aWdhdGlvbiRmb3Iuc3BsaXQoXCI/XCIpWzBdKSA9PT0gbG9jYXRpb24ucGF0aG5hbWU7IC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG5cbiAgICBsZXQgbmV3TG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyB7XG4gICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSlcbiAgICB9IDoge307XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIGlzQWN0aW9uUmVsb2FkID8ge30gOiB7XG4gICAgICBhY3Rpb25EYXRhOiBudWxsXG4gICAgfSwgbmV3U3RhdGUsIG5ld0xvYWRlckRhdGEsIHtcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIC8vIERvbid0IHJlc3RvcmUgb24gc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1EYXRhID8gZmFsc2UgOiBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXMpLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgfSkpO1xuXG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfSAvLyBSZXNldCBzdGF0ZWZ1bCBuYXZpZ2F0aW9uIHZhcnNcblxuXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IGZhbHNlO1xuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcyA9IFtdO1xuICAgIGNhbmNlbGxlZEZldGNoZXJMb2FkcyA9IFtdO1xuICB9IC8vIFRyaWdnZXIgYSBuYXZpZ2F0aW9uIGV2ZW50LCB3aGljaCBjYW4gZWl0aGVyIGJlIGEgbnVtZXJpY2FsIFBPUCBvciBhIFBVU0hcbiAgLy8gcmVwbGFjZSB3aXRoIGFuIG9wdGlvbmFsIHN1Ym1pc3Npb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnModG8sIG9wdHMpO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpOyAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcblxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IChvcHRzICYmIG9wdHMucmVwbGFjZSkgPT09IHRydWUgfHwgc3VibWlzc2lvbiAhPSBudWxsID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDtcbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gYXdhaXQgc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZVxuICAgIH0pO1xuICB9IC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcblxuXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBzdWJtaXR0aW5nIGFuIGFjdGlvbiwgd2UgZG9uJ3QgbmVlZCB0byBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24sIHdlJ2xsIGp1c3QgbGV0IHRoZSBmb2xsb3cgdXAgbG9hZGVyIGV4ZWN1dGlvbiBjYWxsIGFsbCBsb2FkZXJzXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbiBhbiBpZGxlIHN0YXRlLCBzdGFydCBhIG5ldyBuYXZpZ2F0aW9uIGZvciB0aGUgY3VycmVudFxuICAgIC8vIGFjdGlvbi9sb2NhdGlvbiBhbmQgbWFyayBpdCBhcyB1bmludGVycnVwdGVkLCB3aGljaCB3aWxsIHNraXAgdGhlIGhpc3RvcnlcbiAgICAvLyB1cGRhdGUgaW4gY29tcGxldGVOYXZpZ2F0aW9uXG5cblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuXG5cbiAgICBzdGFydE5hdmlnYXRpb24ocGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb246IHN0YXRlLm5hdmlnYXRpb25cbiAgICB9KTtcbiAgfSAvLyBTdGFydCBhIG5hdmlnYXRpb24gdG8gdGhlIGdpdmVuIGFjdGlvbi9sb2NhdGlvbi4gIENhbiBvcHRpb25hbGx5IHByb3ZpZGUgYVxuICAvLyBvdmVycmlkZU5hdmlnYXRpb24gd2hpY2ggd2lsbCBvdmVycmlkZSB0aGUgbm9ybWFsTG9hZCBpbiB0aGUgY2FzZSBvZiBhIHJlZGlyZWN0XG4gIC8vIG5hdmlnYXRpb25cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlOyAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG5cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTsgLy8gU2hvcnQgY2lyY3VpdCB3aXRoIGEgNDA0IG9uIHRoZSByb290IGVycm9yIGJvdW5kYXJ5IGlmIHdlIG1hdGNoIG5vdGhpbmdcblxuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpOyAvLyBDYW5jZWwgYWxsIHBlbmRpbmcgZGVmZXJyZWQgb24gNDA0cyBzaW5jZSB3ZSBkb24ndCBrZWVwIGFueSByb3V0ZXNcblxuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlXG5cblxuICAgIGlmIChpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikpIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENyZWF0ZSBhIGNvbnRyb2xsZXIvUmVxdWVzdCBmb3IgdGhpcyBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QobG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzICYmIG9wdHMuc3VibWlzc2lvbikge1xuICAgICAgLy8gQ2FsbCBhY3Rpb24gaWYgd2UgcmVjZWl2ZWQgYW4gYWN0aW9uIHN1Ym1pc3Npb25cbiAgICAgIGxldCBhY3Rpb25PdXRwdXQgPSBhd2FpdCBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIG9wdHMuc3VibWlzc2lvbiwgbWF0Y2hlcywge1xuICAgICAgICByZXBsYWNlOiBvcHRzLnJlcGxhY2VcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoYWN0aW9uT3V0cHV0LnNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgICBwZW5kaW5nRXJyb3IgPSBhY3Rpb25PdXRwdXQucGVuZGluZ0FjdGlvbkVycm9yO1xuXG4gICAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICBsb2NhdGlvblxuICAgICAgfSwgb3B0cy5zdWJtaXNzaW9uKTtcblxuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uO1xuICAgIH0gLy8gQ2FsbCBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMucmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcik7XG5cbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENsZWFuIHVwIG5vdyB0aGF0IHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmXG4gICAgLy8gd2Ugc2hvcnQgY2lyY3VpdGVkIGJlY2F1c2UgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIHdpbGwgaGF2ZSBhbHJlYWR5XG4gICAgLy8gYmVlbiBhc3NpZ25lZCB0byBhIG5ldyBjb250cm9sbGVyIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG5cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pO1xuICB9IC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpOyAvLyBQdXQgdXMgaW4gYSBzdWJtaXR0aW5nIHN0YXRlXG5cbiAgICBsZXQgbmF2aWdhdGlvbiA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICAgIGxvY2F0aW9uXG4gICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSk7IC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcblxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWRcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKTtcblxuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQsIG9wdHMgJiYgb3B0cy5yZXBsYWNlID09PSB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTsgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH07XG4gIH0gLy8gQ2FsbCBhbGwgYXBwbGljYWJsZSBsb2FkZXJzIGZvciB0aGUgZ2l2ZW4gbWF0Y2hlcywgaGFuZGxpbmcgcmVkaXJlY3RzLFxuICAvLyBlcnJvcnMsIGV0Yy5cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUxvYWRlcnMocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIG92ZXJyaWRlTmF2aWdhdGlvbiwgc3VibWlzc2lvbiwgcmVwbGFjZSwgcGVuZGluZ0FjdGlvbkRhdGEsIHBlbmRpbmdFcnJvcikge1xuICAgIC8vIEZpZ3VyZSBvdXQgdGhlIHJpZ2h0IG5hdmlnYXRpb24gd2Ugd2FudCB0byB1c2UgZm9yIGRhdGEgbG9hZGluZ1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG92ZXJyaWRlTmF2aWdhdGlvbjtcblxuICAgIGlmICghbG9hZGluZ05hdmlnYXRpb24pIHtcbiAgICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIGxvYWRpbmdOYXZpZ2F0aW9uID0gbmF2aWdhdGlvbjtcbiAgICB9XG5cbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcywgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yLCBmZXRjaExvYWRNYXRjaGVzKTsgLy8gQ2FuY2VsIHBlbmRpbmcgZGVmZXJyZWRzIGZvciBuby1sb25nZXItbWF0Y2hlZCByb3V0ZXMgb3Igcm91dGVzIHdlJ3JlXG4gICAgLy8gYWJvdXQgdG8gcmVsb2FkLiAgTm90ZSB0aGF0IGlmIHRoaXMgaXMgYW4gYWN0aW9uIHJlbG9hZCB3ZSB3b3VsZCBoYXZlXG4gICAgLy8gYWxyZWFkeSBjYW5jZWxsZWQgYWxsIHBlbmRpbmcgZGVmZXJyZWRzIHNvIHRoaXMgd291bGQgYmUgYSBuby1vcFxuXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTsgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDAgJiYgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIHt9LCBtYXRjaGVzKSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdFcnJvciB8fCBudWxsLFxuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YSB8fCBudWxsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH0gLy8gSWYgdGhpcyBpcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiwgd2UgcmVtYWluIGluIG91ciBjdXJyZW50IGlkbGVcbiAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSxcbiAgICAvLyBwcmVzZXJ2aW5nIGFueSBuZXcgYWN0aW9uIGRhdGEgb3IgZXhpc3RpbmcgYWN0aW9uIGRhdGEgKGluIHRoZSBjYXNlIG9mXG4gICAgLy8gYSByZXZhbGlkYXRpb24gaW50ZXJydXB0aW5nIGFuIGFjdGlvblJlbG9hZClcblxuXG4gICAgaWYgKCFpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICBsZXQgW2tleV0gPSBfcmVmMjtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSB7XG4gICAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAgIGRhdGE6IGZldGNoZXIgJiYgZmV0Y2hlci5kYXRhLFxuICAgICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgfSk7XG4gICAgICB1cGRhdGVTdGF0ZShfZXh0ZW5kcyh7XG4gICAgICAgIG5hdmlnYXRpb246IGxvYWRpbmdOYXZpZ2F0aW9uLFxuICAgICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhIHx8IG51bGxcbiAgICAgIH0sIHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDAgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKF9yZWYzID0+IHtcbiAgICAgIGxldCBba2V5XSA9IF9yZWYzO1xuICAgICAgcmV0dXJuIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKTtcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH0gLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG5cblxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goX3JlZjQgPT4ge1xuICAgICAgbGV0IFtrZXldID0gX3JlZjQ7XG4gICAgICByZXR1cm4gZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICB9KTsgLy8gSWYgYW55IGxvYWRlcnMgcmV0dXJuZWQgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG5cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG5cbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgcmVwbGFjZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTsgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcblxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0sIGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSA6IHt9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZldGNoZXIoa2V5KSB7XG4gICAgcmV0dXJuIHN0YXRlLmZldGNoZXJzLmdldChrZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgfSAvLyBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pdCBmb3IgdGhlIGdpdmVuIGZldGNoZXIga2V5XG5cblxuICBmdW5jdGlvbiBmZXRjaChrZXksIHJvdXRlSWQsIGhyZWYsIG9wdHMpIHtcbiAgICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInJvdXRlci5mZXRjaCgpIHdhcyBjYWxsZWQgZHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyLCBidXQgaXQgc2hvdWxkbid0IGJlLiBcIiArIFwiWW91IGFyZSBsaWtlbHkgY2FsbGluZyBhIHVzZUZldGNoZXIoKSBtZXRob2QgaW4gdGhlIGJvZHkgb2YgeW91ciBjb21wb25lbnQuIFwiICsgXCJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suXCIpO1xuICAgIH1cblxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGhyZWYsIGluaXQuYmFzZW5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogaHJlZlxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvblxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoaHJlZiwgb3B0cywgdHJ1ZSk7XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG5cbiAgICBpZiAoc3VibWlzc2lvbikge1xuICAgICAgaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBzdWJtaXNzaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG5cblxuICAgIGZldGNoTG9hZE1hdGNoZXMuc2V0KGtleSwgW3BhdGgsIG1hdGNoLCBtYXRjaGVzXSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzKTtcbiAgfSAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckFjdGlvbihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCByZXF1ZXN0TWF0Y2hlcywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcblxuICAgIGlmICghbWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlSWRcbiAgICAgIH0pO1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gUHV0IHRoaXMgZmV0Y2hlciBpbnRvIGl0J3Mgc3VibWl0dGluZyBzdGF0ZVxuXG5cbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG5cbiAgICBsZXQgZmV0Y2hlciA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIlxuICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YVxuICAgIH0pO1xuXG4gICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIGZldGNoZXJcblxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZVJlcXVlc3QocGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBhY3Rpb25SZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG5cbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3Ugb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcblxuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyID0gX2V4dGVuZHMoe1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCJcbiAgICAgIH0sIHN1Ym1pc3Npb24sIHtcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgbG9hZGluZ0ZldGNoZXIpO1xuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCBhY3Rpb25SZXN1bHQpO1xuICAgIH0gLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cblxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICBpbnZhcmlhbnQoZmFsc2UsIFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIik7XG4gICAgfSAvLyBTdGFydCB0aGUgZGF0YSBsb2FkIGZvciBjdXJyZW50IG1hdGNoZXMsIG9yIHRoZSBuZXh0IGxvY2F0aW9uIGlmIHdlJ3JlXG4gICAgLy8gaW4gdGhlIG1pZGRsZSBvZiBhIG5hdmlnYXRpb25cblxuXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KG5leHRMb2NhdGlvbiwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgbGV0IG1hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIiA/IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpIDogc3RhdGUubWF0Y2hlcztcbiAgICBpbnZhcmlhbnQobWF0Y2hlcywgXCJEaWRuJ3QgZmluZCBhbnkgbWF0Y2hlcyBhZnRlciBmZXRjaGVyIGFjdGlvblwiKTtcbiAgICBsZXQgbG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgZmV0Y2hSZWxvYWRJZHMuc2V0KGtleSwgbG9hZElkKTtcblxuICAgIGxldCBsb2FkRmV0Y2hlciA9IF9leHRlbmRzKHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGRhdGE6IGFjdGlvblJlc3VsdC5kYXRhXG4gICAgfSwgc3VibWlzc2lvbik7XG5cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKHN0YXRlLCBtYXRjaGVzLCBzdWJtaXNzaW9uLCBuZXh0TG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHtcbiAgICAgIFttYXRjaC5yb3V0ZS5pZF06IGFjdGlvblJlc3VsdC5kYXRhXG4gICAgfSwgdW5kZWZpbmVkLCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgIGZldGNoTG9hZE1hdGNoZXMpOyAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuXG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZmlsdGVyKF9yZWY1ID0+IHtcbiAgICAgIGxldCBbc3RhbGVLZXldID0gX3JlZjU7XG4gICAgICByZXR1cm4gc3RhbGVLZXkgIT09IGtleTtcbiAgICB9KS5mb3JFYWNoKF9yZWY2ID0+IHtcbiAgICAgIGxldCBbc3RhbGVLZXldID0gX3JlZjY7XG4gICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyID0ge1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciAmJiBleGlzdGluZ0ZldGNoZXIuZGF0YSxcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoc3RhbGVLZXksIHJldmFsaWRhdGluZ0ZldGNoZXIpO1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQoc3RhbGVLZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgfSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gICAgbGV0IHtcbiAgICAgIHJlc3VsdHMsXG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9ID0gYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKHN0YXRlLm1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCByZXZhbGlkYXRpb25SZXF1ZXN0KTtcblxuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goX3JlZjcgPT4ge1xuICAgICAgbGV0IFtzdGFsZUtleV0gPSBfcmVmNztcbiAgICAgIHJldHVybiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShzdGFsZUtleSk7XG4gICAgfSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KHJlc3VsdHMpO1xuXG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9IC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG5cblxuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICBsZXQgZG9uZUZldGNoZXIgPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiBhY3Rpb25SZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgbGV0IGRpZEFib3J0RmV0Y2hMb2FkcyA9IGFib3J0U3RhbGVGZXRjaExvYWRzKGxvYWRJZCk7IC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpc1xuICAgIC8vIG1vcmUgcmVjZW50IHRoYW4gdGhlIG5hdmlnYXRpb24sIHdlIHdhbnQgdGhlIG5ld2VyIGRhdGEgc28gYWJvcnQgdGhlXG4gICAgLy8gbmF2aWdhdGlvbiBhbmQgY29tcGxldGUgaXQgd2l0aCB0aGUgZmV0Y2hlciBkYXRhXG5cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShzdGF0ZS5sb2FkZXJEYXRhLCBsb2FkZXJEYXRhLCBtYXRjaGVzKVxuICAgICAgfSwgZGlkQWJvcnRGZXRjaExvYWRzID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSkpO1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfSAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG5cblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMpIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7IC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIGxvYWRpbmcgc3RhdGVcblxuICAgIGxldCBsb2FkaW5nRmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7IC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG5cbiAgICBsZXQgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBmZXRjaFJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0KHBhdGgsIGFib3J0Q29udHJvbGxlci5zaWduYWwpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwibG9hZGVyXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7IC8vIERlZmVycmVkIGlzbid0IHN1cHBvcnRlZCBvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHwgcmVzdWx0O1xuICAgIH0gLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgIC8vIHJlLWxvYWQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG5cblxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgdGhlIGxvYWRlciB0aHJldyBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cblxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuXG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTsgLy8gVE9ETzogSW4gcmVtaXgsIHRoaXMgd291bGQgcmVzZXQgdG8gSURMRV9OQVZJR0FUSU9OIGlmIGl0IHdhcyBhIGNhdGNoIC1cbiAgICAgIC8vIGRvIHdlIG5lZWQgdG8gYmVoYXZlIGFueSBkaWZmZXJlbnRseSB3aXRoIG91ciBub24tcmVkaXJlY3QgZXJyb3JzP1xuICAgICAgLy8gV2hhdCBpZiBpdCB3YXMgYSBub24tcmVkaXJlY3QgUmVzcG9uc2U/XG5cbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpOyAvLyBQdXQgdGhlIGZldGNoZXIgYmFjayBpbnRvIGFuIGlkbGUgc3RhdGVcblxuICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cblxuXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgcmVwbGFjZSkge1xuICAgIGlmIChyZWRpcmVjdC5yZXZhbGlkYXRlKSB7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmVkaXJlY3RMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCByZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgaW52YXJpYW50KHJlZGlyZWN0TG9jYXRpb24sIFwiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblwiKTtcblxuICAgIGlmIChyZWRpcmVjdC5leHRlcm5hbCAmJiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cubG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24ocmVkaXJlY3QubG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gYWJvcnQgb24gcmVkaXJlY3RzLCBzaW5jZSB3ZSBkb24ndCBkZXRlY3QgdGhlXG4gICAgLy8gcmVkaXJlY3QgdW50aWwgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgc2V0dGxlZFxuXG5cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGxldCByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPSByZXBsYWNlID09PSB0cnVlID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhXG4gICAgfSA9IHN0YXRlLm5hdmlnYXRpb247IC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cblxuICAgIGlmIChyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMuaGFzKHJlZGlyZWN0LnN0YXR1cykgJiYgZm9ybU1ldGhvZCAmJiBpc1N1Ym1pc3Npb25NZXRob2QoZm9ybU1ldGhvZCkgJiYgZm9ybUVuY1R5cGUgJiYgZm9ybURhdGEpIHtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb24sXG4gICAgICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICAgICAgZm9ybURhdGFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uLCBwcmVzZXJ2aW5nIHRoZVxuICAgICAgLy8gc3VibWlzc2lvbiBpbmZvIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjoge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgICAgICBmb3JtTWV0aG9kOiBmb3JtTWV0aG9kIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiBmb3JtQWN0aW9uIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogZm9ybUVuY1R5cGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiBmb3JtRGF0YSB8fCB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKSksIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChfcmVmOCA9PiB7XG4gICAgICBsZXQgWywgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmODtcbiAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlUmVxdWVzdChocmVmLCByZXF1ZXN0LnNpZ25hbCksIG1hdGNoLCBmZXRjaE1hdGNoZXMsIHJvdXRlci5iYXNlbmFtZSk7XG4gICAgfSldKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtyZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCByZXF1ZXN0LnNpZ25hbCwgZmFsc2UsIHN0YXRlLmxvYWRlckRhdGEpLCByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBmZXRjaGVyc1RvTG9hZC5tYXAoX3JlZjkgPT4ge1xuICAgICAgbGV0IFssLCBtYXRjaF0gPSBfcmVmOTtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KSwgZmV0Y2hlclJlc3VsdHMsIHJlcXVlc3Quc2lnbmFsLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlOyAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpOyAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaGVyc0RvbmUoa2V5cykge1xuICAgIGZvciAobGV0IGtleSBvZiBrZXlzKSB7XG4gICAgICBsZXQgZmV0Y2hlciA9IGdldEZldGNoZXIoa2V5KTtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKSB7XG4gICAgbGV0IGRvbmVLZXlzID0gW107XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcblxuICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRvbmVLZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcblxuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuXG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgIHllZXRlZEtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9IC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcblxuXG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHBvc2l0aW9ucywgZ2V0UG9zaXRpb24sIGdldEtleSkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG5cbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCAobG9jYXRpb24gPT4gbG9jYXRpb24ua2V5KTsgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcblxuXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcblxuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gICAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAobSA9PiBjcmVhdGVVc2VNYXRjaGVzTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuXG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGluaXQuYmFzZW5hbWU7XG4gICAgfSxcblxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuXG4gICAgZ2V0IHJvdXRlcygpIHtcbiAgICAgIHJldHVybiBkYXRhUm91dGVzO1xuICAgIH0sXG5cbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiB0byA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246IHRvID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyLFxuICAgIGRpc3Bvc2UsXG4gICAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogZmV0Y2hDb250cm9sbGVycyxcbiAgICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkc1xuICB9O1xuICByZXR1cm4gcm91dGVyO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gdW5zdGFibGVfY3JlYXRlU3RhdGljSGFuZGxlcihyb3V0ZXMsIG9wdHMpIHtcbiAgaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIHVuc3RhYmxlX2NyZWF0ZVN0YXRpY0hhbmRsZXJcIik7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgZG9jdW1lbnQgcmVxdWVzdHMsIGluIHdoaWNoIHdlIHdhbnQgdG9cbiAgICogY2FsbCBhbiBvcHRpb25hbCBhY3Rpb24gYW5kIHBvdGVudGlhbGx5IG11bHRpcGxlIGxvYWRlcnMgZm9yIGFsbCBuZXN0ZWRcbiAgICogcm91dGVzLiAgSXQgcmV0dXJucyBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IG9iamVjdCwgd2hpY2ggaXMgdmVyeSBzaW1pbGFyXG4gICAqIHRvIHRoZSByb3V0ZXIgc3RhdGUgKGxvY2F0aW9uLCBsb2FkZXJEYXRhLCBhY3Rpb25EYXRhLCBlcnJvcnMsIGV0Yy4pIGFuZFxuICAgKiBhbHNvIGFkZHMgU1NSLXNwZWNpZmljIGluZm9ybWF0aW9uIHN1Y2ggYXMgdGhlIHN0YXR1c0NvZGUgYW5kIGhlYWRlcnNcbiAgICogZnJvbSBhY3Rpb24vbG9hZGVycyBSZXNwb25zZXMuXG4gICAqXG4gICAqIEl0IF9zaG91bGRfIG5ldmVyIHRocm93IGFuZCBzaG91bGQgcmVwb3J0IGFsbCBlcnJvcnMgdGhyb3VnaCB0aGVcbiAgICogcmV0dXJuZWQgY29udGV4dC5lcnJvcnMgb2JqZWN0LCBwcm9wZXJseSBhc3NvY2lhdGluZyBlcnJvcnMgdG8gdGhlaXIgZXJyb3JcbiAgICogYm91bmRhcnkuICBBZGRpdGlvbmFsbHksIGl0IHRyYWNrcyBfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB3aGljaCBjYW4gYmVcbiAgICogdXNlZCB0byBlbXVsYXRlIFJlYWN0IGVycm9yIGJvdW5kYXJpZXMgZHVyaW5nIFNTciBieSBwZXJmb3JtaW5nIGEgc2Vjb25kXG4gICAqIHBhc3Mgb25seSBkb3duIHRvIHRoZSBib3VuZGFyeUlkLlxuICAgKlxuICAgKiBUaGUgb25lIGV4Y2VwdGlvbiB3aGVyZSB3ZSBkbyBub3QgcmV0dXJuIGEgU3RhdGljSGFuZGxlckNvbnRleHQgaXMgd2hlbiBhXG4gICAqIHJlZGlyZWN0IHJlc3BvbnNlIGlzIHJldHVybmVkIG9yIHRocm93biBmcm9tIGFueSBhY3Rpb24vbG9hZGVyLiAgV2VcbiAgICogcHJvcGFnYXRlIHRoYXQgb3V0IGFuZCByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBzbyB0aGUgSFRUUCBzZXJ2ZXIgY2FuXG4gICAqIHJldHVybiBpdCBkaXJlY3RseS5cbiAgICovXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCkge1xuICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICBsZXQgbWV0aG9kID0gcmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7IC8vIFNTUiBzdXBwb3J0cyBIRUFEIHJlcXVlc3RzIHdoaWxlIFNQQSBkb2Vzbid0XG5cbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiaGVhZFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMpO1xuXG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gLy8gV2hlbiByZXR1cm5pbmcgU3RhdGljSGFuZGxlckNvbnRleHQsIHdlIHBhdGNoIGJhY2sgaW4gdGhlIGxvY2F0aW9uIGhlcmVcbiAgICAvLyBzaW5jZSB3ZSBuZWVkIGl0IGZvciBSZWFjdCBDb250ZXh0LiAgQnV0IHRoaXMgaGVscHMga2VlcCBvdXIgc3VibWl0IGFuZFxuICAgIC8vIGxvYWRSb3V0ZURhdGEgb3BlcmF0aW5nIG9uIGEgUmVxdWVzdCBpbnN0ZWFkIG9mIGEgTG9jYXRpb25cblxuXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuXG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShyZXF1ZXN0LCByb3V0ZUlkKSB7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTsgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcblxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJoZWFkXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAocm91dGVJZCAmJiAhbWF0Y2gpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAzLCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBtYXRjaCk7XG5cbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cblxuXG4gICAgbGV0IHJvdXRlRGF0YSA9IFtyZXN1bHQuYWN0aW9uRGF0YSwgcmVzdWx0LmxvYWRlckRhdGFdLmZpbmQodiA9PiB2KTtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyb3V0ZURhdGEgfHwge30pWzBdO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByb3V0ZU1hdGNoKSB7XG4gICAgaW52YXJpYW50KHJlcXVlc3Quc2lnbmFsLCBcInF1ZXJ5KCkvcXVlcnlSb3V0ZSgpIHJlcXVlc3RzIG11c3QgY29udGFpbiBhbiBBYm9ydENvbnRyb2xsZXIgc2lnbmFsXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc1N1Ym1pc3Npb25NZXRob2QocmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoIHx8IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSwgcm91dGVNYXRjaCAhPSBudWxsKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCk7XG4gICAgICByZXR1cm4gcmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UgPyByZXN1bHQgOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LCB7XG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvciAmJiAhaXNSZWRpcmVjdFJlc3BvbnNlKGUucmVzcG9uc2UpKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXNwb25zZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlLnJlc3BvbnNlO1xuICAgICAgfSAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuXG5cbiAgICAgIGlmIChpc1JlZGlyZWN0UmVzcG9uc2UoZSkpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICB9XG5cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCBpc1JvdXRlUmVxdWVzdCkge1xuICAgIGxldCByZXN1bHQ7XG5cbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IGNyZWF0ZVVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIGJhc2VuYW1lLCB0cnVlLCBpc1JvdXRlUmVxdWVzdCk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWRcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gVWhoaGggLSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIHdlIHNob3VsZCBhbHdheXMgdGhyb3cgdGhlc2UgZnJvbVxuICAgICAgLy8gY2FsbExvYWRlck9yQWN0aW9uLCBidXQgdGhlIHR5cGUgbmFycm93aW5nIGhlcmUga2VlcHMgVFMgaGFwcHkgYW5kIHdlXG4gICAgICAvLyBjYW4gZ2V0IGJhY2sgb24gdGhlIFwidGhyb3cgYWxsIHJlZGlyZWN0IHJlc3BvbnNlc1wiIHRyYWluIGhlcmUgc2hvdWxkXG4gICAgICAvLyB0aGlzIGV2ZXIgaGFwcGVuIDovXG4gICAgICB0aHJvdyBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogcmVzdWx0LmxvY2F0aW9uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZmVyKCkgaXMgbm90IHN1cHBvcnRlZCBpbiBhY3Rpb25zXCIpO1xuICAgIH1cblxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gTm90ZTogVGhpcyBzaG91bGQgb25seSBiZSBub24tUmVzcG9uc2UgdmFsdWVzIGlmIHdlIGdldCBoZXJlLCBzaW5jZVxuICAgICAgLy8gaXNSb3V0ZVJlcXVlc3Qgc2hvdWxkIHRocm93IGFueSBSZXNwb25zZSByZWNlaXZlZCBpbiBjYWxsTG9hZGVyT3JBY3Rpb25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTsgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG5cbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzKTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHJlc3VsdC5zdGF0dXNDb2RlID8ge1xuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1c0NvZGVcbiAgICB9IDoge30sIHtcbiAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgIH0sXG4gICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9IDoge30pXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkUm91dGVEYXRhKHJlcXVlc3QsIG1hdGNoZXMsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25FcnJvcikge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDsgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeVJvdXRlKCkpXG5cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogY3JlYXRlVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaCA/IFtyb3V0ZU1hdGNoXSA6IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIE9iamVjdC5rZXlzKHBlbmRpbmdBY3Rpb25FcnJvciB8fCB7fSlbMF0pO1xuICAgIGxldCBtYXRjaGVzVG9Mb2FkID0gcmVxdWVzdE1hdGNoZXMuZmlsdGVyKG0gPT4gbS5yb3V0ZS5sb2FkZXIpOyAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5KCkpXG5cbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25FcnJvciB8fCBudWxsLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgYmFzZW5hbWUsIHRydWUsIGlzUm91dGVSZXF1ZXN0KSldKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZFwiKTtcbiAgICB9IC8vIENhbid0IGRvIGFueXRoaW5nIHdpdGggdGhlc2Ugd2l0aG91dCB0aGUgUmVtaXggc2lkZSBvZiB0aGluZ3MsIHNvIGp1c3RcbiAgICAvLyBjYW5jZWwgdGhlbSBmb3Igbm93XG5cblxuICAgIHJlc3VsdHMuZm9yRWFjaChyZXN1bHQgPT4ge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQuZGVmZXJyZWREYXRhLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH0pOyAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuXG4gICAgbGV0IGNvbnRleHQgPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25FcnJvcik7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICBtYXRjaGVzXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24ob3B0cykge1xuICByZXR1cm4gb3B0cyAhPSBudWxsICYmIFwiZm9ybURhdGFcIiBpbiBvcHRzO1xufSAvLyBOb3JtYWxpemUgbmF2aWdhdGlvbiBvcHRpb25zIGJ5IGNvbnZlcnRpbmcgZm9ybU1ldGhvZD1HRVQgZm9ybURhdGEgb2JqZWN0cyB0b1xuLy8gVVJMU2VhcmNoUGFyYW1zIHNvIHRoZXkgYmVoYXZlIGlkZW50aWNhbGx5IHRvIGxpbmtzIHdpdGggcXVlcnkgcGFyYW1zXG5cblxuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKHRvLCBvcHRzLCBpc0ZldGNoZXIpIHtcbiAgaWYgKGlzRmV0Y2hlciA9PT0gdm9pZCAwKSB7XG4gICAgaXNGZXRjaGVyID0gZmFsc2U7XG4gIH1cblxuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7IC8vIFJldHVybiBsb2NhdGlvbiB2ZXJiYXRpbSBvbiBub24tc3VibWlzc2lvbiBuYXZpZ2F0aW9uc1xuXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoXG4gICAgfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH0gLy8gQ3JlYXRlIGEgU3VibWlzc2lvbiBvbiBub24tR0VUIG5hdmlnYXRpb25zXG5cblxuICBpZiAob3B0cy5mb3JtTWV0aG9kICYmIGlzU3VibWlzc2lvbk1ldGhvZChvcHRzLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdHMuZm9ybU1ldGhvZCxcbiAgICAgICAgZm9ybUFjdGlvbjogc3RyaXBIYXNoRnJvbVBhdGgocGF0aCksXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzICYmIG9wdHMuZm9ybUVuY1R5cGUgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgICAgZm9ybURhdGE6IG9wdHMuZm9ybURhdGFcbiAgICAgIH1cbiAgICB9O1xuICB9IC8vIEZsYXR0ZW4gc3VibWlzc2lvbiBvbnRvIFVSTFNlYXJjaFBhcmFtcyBmb3IgR0VUIHN1Ym1pc3Npb25zXG5cblxuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcblxuICB0cnkge1xuICAgIGxldCBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTsgLy8gU2luY2UgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnMgb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIChhcyBvcHBvc2VkIHRvXG4gICAgLy8gbmF2aWdhdGlvbiBHRVQgc3VibWlzc2lvbnMgd2hpY2ggcnVuIGFsbCBsb2FkZXJzKSwgd2UgbmVlZCB0byBwcmVzZXJ2ZVxuICAgIC8vIGFueSBpbmNvbWluZyA/aW5kZXggcGFyYW1zXG5cbiAgICBpZiAoaXNGZXRjaGVyICYmIHBhcnNlZFBhdGguc2VhcmNoICYmIGhhc05ha2VkSW5kZXhRdWVyeShwYXJzZWRQYXRoLnNlYXJjaCkpIHtcbiAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbmRleFwiLCBcIlwiKTtcbiAgICB9XG5cbiAgICBwYXJzZWRQYXRoLnNlYXJjaCA9IFwiP1wiICsgc2VhcmNoUGFyYW1zO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDApXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKVxuICB9O1xufSAvLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5cblxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkge1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcztcblxuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kYXJ5TWF0Y2hlcztcbn1cblxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IsIGZldGNoTG9hZE1hdGNoZXMpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdFcnJvciA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXSA6IHBlbmRpbmdBY3Rpb25EYXRhID8gT2JqZWN0LnZhbHVlcyhwZW5kaW5nQWN0aW9uRGF0YSlbMF0gOiBudWxsOyAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IG1hdGNoLnJvdXRlLmxvYWRlciAhPSBudWxsICYmIChpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8IC8vIElmIHRoaXMgcm91dGUgaGFkIGEgcGVuZGluZyBkZWZlcnJlZCBjYW5jZWxsZWQgaXQgbXVzdCBiZSByZXZhbGlkYXRlZFxuICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkgfHwgc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihzdGF0ZS5sb2NhdGlvbiwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIHN1Ym1pc3Npb24sIGxvY2F0aW9uLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KSkpOyAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG5cbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMgJiYgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfcmVmMTAsIGtleSkgPT4ge1xuICAgIGxldCBbaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10gPSBfcmVmMTA7XG5cbiAgICAvLyBUaGlzIGZldGNoZXIgd2FzIGNhbmNlbGxlZCBmcm9tIGEgcHJpb3IgYWN0aW9uIHN1Ym1pc3Npb24gLSBmb3JjZSByZWxvYWRcbiAgICBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goW2tleSwgaHJlZiwgbWF0Y2gsIGZldGNoTWF0Y2hlc10pO1xuICAgIH0gZWxzZSBpZiAoaXNSZXZhbGlkYXRpb25SZXF1aXJlZCkge1xuICAgICAgbGV0IHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGhyZWYsIG1hdGNoLCBzdWJtaXNzaW9uLCBocmVmLCBtYXRjaCwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgYWN0aW9uUmVzdWx0KTtcblxuICAgICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaChba2V5LCBocmVmLCBtYXRjaCwgZmV0Y2hNYXRjaGVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIFtuYXZpZ2F0aW9uTWF0Y2hlcywgcmV2YWxpZGF0aW5nRmV0Y2hlcnNdO1xufVxuXG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPSAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHwgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkOyAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7IC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcblxuICByZXR1cm4gaXNOZXcgfHwgaXNNaXNzaW5nRGF0YTtcbn1cblxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8IC8vIHNwbGF0IHBhcmFtIGNoYW5nZWQsIHdoaWNoIGlzIG5vdCBwcmVzZW50IGluIG1hdGNoLnBhdGhcbiAgICAvLyBlLmcuIC9maWxlcy9pbWFnZXMvYXZhdGFyLmpwZyAtPiBmaWxlcy9maW5hbmNlcy54bHNcbiAgICBjdXJyZW50UGF0aCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihjdXJyZW50TG9jYXRpb24sIGN1cnJlbnRNYXRjaCwgc3VibWlzc2lvbiwgbG9jYXRpb24sIG1hdGNoLCBpc1JldmFsaWRhdGlvblJlcXVpcmVkLCBhY3Rpb25SZXN1bHQpIHtcbiAgbGV0IGN1cnJlbnRVcmwgPSBjcmVhdGVVUkwoY3VycmVudExvY2F0aW9uKTtcbiAgbGV0IGN1cnJlbnRQYXJhbXMgPSBjdXJyZW50TWF0Y2gucGFyYW1zO1xuICBsZXQgbmV4dFVybCA9IGNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIGxldCBuZXh0UGFyYW1zID0gbWF0Y2gucGFyYW1zOyAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGFzIHRvIHdoZW4gd2UgcmV2YWxpZGF0ZS4gIElmIHRoZSByb3V0ZVxuICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgLy8gdGhlaXIgb3duIHNwZWNpZmljIHVzZSBjYXNlc1xuICAvLyBOb3RlIHRoYXQgZmV0Y2hlcnMgYWx3YXlzIHByb3ZpZGUgdGhlIHNhbWUgY3VycmVudC9uZXh0IGxvY2F0aW9ucyBzbyB0aGVcbiAgLy8gVVJMLWJhc2VkIGNoZWNrcyBoZXJlIGRvbid0IGFwcGx5IHRvIGZldGNoZXIgc2hvdWxkUmV2YWxpZGF0ZSBjYWxsc1xuXG4gIGxldCBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSA9IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSB8fCAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgY3VycmVudFVybC50b1N0cmluZygpID09PSBuZXh0VXJsLnRvU3RyaW5nKCkgfHwgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IC8vIEZvcmNlZCByZXZhbGlkYXRpb24gZHVlIHRvIHN1Ym1pc3Npb24sIHVzZVJldmFsaWRhdGUsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuXG4gIGlmIChtYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShfZXh0ZW5kcyh7XG4gICAgICBjdXJyZW50VXJsLFxuICAgICAgY3VycmVudFBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGVcbiAgICB9KSk7XG5cbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBiYXNlbmFtZSwgaXNTdGF0aWNSZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCkge1xuICBpZiAoYmFzZW5hbWUgPT09IHZvaWQgMCkge1xuICAgIGJhc2VuYW1lID0gXCIvXCI7XG4gIH1cblxuICBpZiAoaXNTdGF0aWNSZXF1ZXN0ID09PSB2b2lkIDApIHtcbiAgICBpc1N0YXRpY1JlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc1JvdXRlUmVxdWVzdCA9PT0gdm9pZCAwKSB7XG4gICAgaXNSb3V0ZVJlcXVlc3QgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0OyAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuXG4gIGxldCByZWplY3Q7XG4gIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gcmVqZWN0ID0gcik7XG5cbiAgbGV0IG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG5cbiAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcblxuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgaW52YXJpYW50KGhhbmRsZXIsIFwiQ291bGQgbm90IGZpbmQgdGhlIFwiICsgdHlwZSArIFwiIHRvIHJ1biBvbiB0aGUgXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgcm91dGVcIik7XG4gICAgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtc1xuICAgIH0pLCBhYm9ydFByb21pc2VdKTtcbiAgICBpbnZhcmlhbnQocmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXN1bHRUeXBlID0gUmVzdWx0VHlwZS5lcnJvcjtcbiAgICByZXN1bHQgPSBlO1xuICB9IGZpbmFsbHkge1xuICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG4gIH1cblxuICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpIHtcbiAgICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1czsgLy8gUHJvY2VzcyByZWRpcmVjdHNcblxuICAgIGlmIChyZWRpcmVjdFN0YXR1c0NvZGVzLmhhcyhzdGF0dXMpKSB7XG4gICAgICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgICAgIGludmFyaWFudChsb2NhdGlvbiwgXCJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlclwiKTsgLy8gQ2hlY2sgaWYgdGhpcyBhbiBleHRlcm5hbCByZWRpcmVjdCB0aGF0IGdvZXMgdG8gYSBuZXcgb3JpZ2luXG5cbiAgICAgIGxldCBleHRlcm5hbCA9IGNyZWF0ZVVSTChsb2NhdGlvbikub3JpZ2luICE9PSBjcmVhdGVVUkwoXCIvXCIpLm9yaWdpbjsgLy8gU3VwcG9ydCByZWxhdGl2ZSByb3V0aW5nIGluIGludGVybmFsIHJlZGlyZWN0c1xuXG4gICAgICBpZiAoIWV4dGVybmFsKSB7XG4gICAgICAgIGxldCBhY3RpdmVNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBtYXRjaGVzLmluZGV4T2YobWF0Y2gpICsgMSk7XG4gICAgICAgIGxldCByb3V0ZVBhdGhuYW1lcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKGFjdGl2ZU1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xuICAgICAgICBsZXQgcmVxdWVzdFBhdGggPSBjcmVhdGVVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lO1xuICAgICAgICBsZXQgcmVzb2x2ZWRMb2NhdGlvbiA9IHJlc29sdmVUbyhsb2NhdGlvbiwgcm91dGVQYXRobmFtZXMsIHJlcXVlc3RQYXRoKTtcbiAgICAgICAgaW52YXJpYW50KGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksIFwiVW5hYmxlIHRvIHJlc29sdmUgcmVkaXJlY3QgbG9jYXRpb246IFwiICsgbG9jYXRpb24pOyAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcblxuICAgICAgICBpZiAoYmFzZW5hbWUpIHtcbiAgICAgICAgICBsZXQgcGF0aCA9IHJlc29sdmVkTG9jYXRpb24ucGF0aG5hbWU7XG4gICAgICAgICAgcmVzb2x2ZWRMb2NhdGlvbi5wYXRobmFtZSA9IHBhdGggPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoXSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhdGlvbiA9IGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbik7XG4gICAgICB9IC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG5cblxuICAgICAgaWYgKGlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICByZXN1bHQuaGVhZGVycy5zZXQoXCJMb2NhdGlvblwiLCBsb2NhdGlvbik7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsLFxuICAgICAgICBleHRlcm5hbFxuICAgICAgfTtcbiAgICB9IC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuXG5cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gICAgICB0aHJvdyB7XG4gICAgICAgIHR5cGU6IHJlc3VsdFR5cGUgfHwgUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0XG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcblxuICAgIGlmIChjb250ZW50VHlwZSAmJiBjb250ZW50VHlwZS5zdGFydHNXaXRoKFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICBkYXRhLFxuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1cyxcbiAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWZlcnJlZERhdGEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCxcbiAgICAgIGRlZmVycmVkRGF0YTogcmVzdWx0XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdFxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZXF1ZXN0KGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0ID0ge1xuICAgIHNpZ25hbFxuICB9O1xuXG4gIGlmIChzdWJtaXNzaW9uKSB7XG4gICAgbGV0IHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhXG4gICAgfSA9IHN1Ym1pc3Npb247XG4gICAgaW5pdC5tZXRob2QgPSBmb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgaW5pdC5ib2R5ID0gZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgPyBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YSkgOiBmb3JtRGF0YTtcbiAgfSAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcblxuXG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YSkge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICBpbnZhcmlhbnQodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiLCAnRmlsZSBpbnB1dHMgYXJlIG5vdCBzdXBwb3J0ZWQgd2l0aCBlbmNUeXBlIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsICcgKyAncGxlYXNlIHVzZSBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiBpbnN0ZWFkLicpO1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKSB7XG4gIC8vIEZpbGwgaW4gbG9hZGVyRGF0YS9lcnJvcnMgZnJvbSBvdXIgbG9hZGVyc1xuICBsZXQgbG9hZGVyRGF0YSA9IHt9O1xuICBsZXQgZXJyb3JzID0gbnVsbDtcbiAgbGV0IHN0YXR1c0NvZGU7XG4gIGxldCBmb3VuZEVycm9yID0gZmFsc2U7XG4gIGxldCBsb2FkZXJIZWFkZXJzID0ge307IC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9yc1xuXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvclxuICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7IC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nIGFjdGlvbiBlcnJvciwgd2UgcmVwb3J0IGl0IGF0IHRoZSBoaWdoZXN0LXJvdXRlXG4gICAgICAvLyB0aGF0IHRocm93cyBhIGxvYWRlciBlcnJvciwgYW5kIHRoZW4gY2xlYXIgaXQgb3V0IHRvIGluZGljYXRlIHRoYXRcbiAgICAgIC8vIGl0IHdhcyBjb25zdW1lZFxuXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGVycm9ycyA9IE9iamVjdC5hc3NpZ24oZXJyb3JzIHx8IHt9LCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3JcbiAgICAgIH0pOyAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcblxuICAgICAgaWYgKCFmb3VuZEVycm9yKSB7XG4gICAgICAgIGZvdW5kRXJyb3IgPSB0cnVlO1xuICAgICAgICBzdGF0dXNDb2RlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UocmVzdWx0LmVycm9yKSA/IHJlc3VsdC5lcnJvci5zdGF0dXMgOiA1MDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBhY3RpdmVEZWZlcnJlZHMgJiYgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YTsgLy8gVE9ETzogQWRkIHN0YXR1c0NvZGUvaGVhZGVycyBvbmNlIHdlIHdpcmUgdXAgc3RyZWFtaW5nIGluIFJlbWl4XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRhdGE7IC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cblxuICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH1cbiAgfSk7IC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZVxuXG4gIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICBlcnJvcnMgPSBwZW5kaW5nRXJyb3I7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgbGV0IHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7IC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IFtrZXksLCBtYXRjaF0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTsgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcblxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCBtYXRjaC5yb3V0ZS5pZCk7XG5cbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgfSBlbHNlIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgcmVkaXJlY3RzIHNob3VsZCBnZXQgcHJvY2Vzc2VkIGFib3ZlLCBidXQgd2VcbiAgICAgIC8vIGtlZXAgdGhpcyB0byB0eXBlIG5hcnJvdyB0byBhIHN1Y2Nlc3MgcmVzdWx0IGluIHRoZSBlbHNlXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmhhbmRsZWQgZmV0Y2hlciByZXZhbGlkYXRpb24gcmVkaXJlY3RcIik7XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgZGVmZXJyZWQgZGF0YSBzaG91bGQgYmUgYXdhaXRlZCBmb3IgZmV0Y2hlcnNcbiAgICAgIC8vIGluIHJlc29sdmVEZWZlcnJlZFJlc3VsdHNcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtQWN0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZUxvYWRlckRhdGEobG9hZGVyRGF0YSwgbmV3TG9hZGVyRGF0YSwgbWF0Y2hlcykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcblxuICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuXG4gICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdID09PSB1bmRlZmluZWQgJiYgbG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn0gLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcblxuXG5mdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHtcbiAgbGV0IGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKSA6IFsuLi5tYXRjaGVzXTtcbiAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZChtID0+IG0ucm91dGUuaGFzRXJyb3JCb3VuZGFyeSA9PT0gdHJ1ZSkgfHwgbWF0Y2hlc1swXTtcbn1cblxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmZpbmQociA9PiByLmluZGV4IHx8ICFyLnBhdGggfHwgci5wYXRoID09PSBcIi9cIikgfHwge1xuICAgIGlkOiBcIl9fc2hpbS1lcnJvci1yb3V0ZV9fXCJcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbe1xuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgcGF0aG5hbWVCYXNlOiBcIlwiLFxuICAgICAgcm91dGVcbiAgICB9XSxcbiAgICByb3V0ZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICBtZXNzYWdlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcblxuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuXG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhIGBsb2FkZXJgIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiQ2Fubm90IHN1Ym1pdCBiaW5hcnkgZm9ybSBkYXRhIHVzaW5nIEdFVFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuXG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIllvdSBtYWRlIGEgXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGFuIGBhY3Rpb25gIGZvciByb3V0ZSBcXFwiXCIgKyByb3V0ZUlkICsgXCJcXFwiLCBcIikgKyBcInNvIHRoZXJlIGlzIG5vIHdheSB0byBoYW5kbGUgdGhlIHJlcXVlc3QuXCI7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCByZXF1ZXN0IG1ldGhvZCBcXFwiXCIgKyBtZXRob2QudG9VcHBlckNhc2UoKSArIFwiXFxcIlwiO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZShzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59IC8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5cblxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoICE9PSBiLmhhc2g7XG59XG5cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cblxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCEocmVzdWx0IGluc3RhbmNlb2YgUmVzcG9uc2UpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzUXVlcnlSb3V0ZVJlc3BvbnNlKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5yZXNwb25zZSBpbnN0YW5jZW9mIFJlc3BvbnNlICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kKTtcbn1cblxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRBY3Rpb25NZXRob2RzLmhhcyhtZXRob2QpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWwsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gbWF0Y2gucm91dGUuaWQpO1xuICAgIGxldCBpc1JldmFsaWRhdGluZ0xvYWRlciA9IGN1cnJlbnRNYXRjaCAhPSBudWxsICYmICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiYgKGN1cnJlbnRMb2FkZXJEYXRhICYmIGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBhYm9ydGVkID0gYXdhaXQgcmVzdWx0LmRlZmVycmVkRGF0YS5yZXNvbHZlRGF0YShzaWduYWwpO1xuXG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59IC8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuXG5cbmZ1bmN0aW9uIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG5cbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH0gLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcblxuXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59IC8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBBYm9ydGVkRGVmZXJyZWRFcnJvciwgQWN0aW9uLCBFcnJvclJlc3BvbnNlLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlciwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvciwgZ2V0VG9QYXRobmFtZSwgaW52YXJpYW50LCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSwgdW5zdGFibGVfY3JlYXRlU3RhdGljSGFuZGxlciwgd2FybmluZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgQ29tcG9uZW50cyB9IGZyb20gJ0BtdWkvbWF0ZXJpYWwnXG5pbXBvcnQgeyBncmV5IH0gZnJvbSAnQG11aS9tYXRlcmlhbC9jb2xvcnMnXG5pbXBvcnQgY3JlYXRlVGhlbWUgZnJvbSAnQG11aS9tYXRlcmlhbC9zdHlsZXMvY3JlYXRlVGhlbWUnXG5cbmV4cG9ydCBjb25zdCBmaWVsZEhvdmVyU3R5bGUgPSB7XG4gICc6aG92ZXInOiB7XG4gICAgYm9yZGVyQm90dG9tOiAnMXB4IGRhc2hlZCAjMDAwMDAwJ1xuICB9LFxuICAnJi5NdWktZm9jdXNlZCc6IHtcbiAgICBib3JkZXJCb3R0b206ICcxcHggZGFzaGVkICMwMDAwMDAnXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IERSQVdFUl9XSURUSCA9IDI0MFxuXG5leHBvcnQgY29uc3QgcmF3VGhlbWUgPSBjcmVhdGVUaGVtZSh7XG4gIHBhbGV0dGU6IHtcbiAgICAvLyBwcmltYXJ5OiB7XG4gICAgLy8gICBsaWdodDogJyNmZmY1ZjgnLFxuICAgIC8vICAgbWFpbjogJyNmZjMzNjYnLFxuICAgIC8vICAgZGFyazogJyNlNjI5NTgnXG4gICAgLy8gfSxcbiAgICBzZWNvbmRhcnk6IHtcbiAgICAgIGxpZ2h0OiAnI2ZmZjVmOCcsXG4gICAgICBtYWluOiAnI2ZmMzM2NicsXG4gICAgICBkYXJrOiAnI2U2Mjk1OCdcbiAgICB9XG4gIH0sXG4gIHR5cG9ncmFwaHk6IHtcbiAgICBmb250RmFtaWx5OlxuICAgICAgJ0NpcmN1bGFyLCAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFJvYm90bywgSGVsdmV0aWNhIE5ldWUsIHNhbnMtc2VyaWYnLFxuICAgIGZvbnRTaXplOiAxNixcbiAgICBmb250V2VpZ2h0TGlnaHQ6IDMwMCwgLy8gV29yayBTYW5zXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IDQwMCwgLy8gV29yayBTYW5zXG4gICAgZm9udFdlaWdodE1lZGl1bTogNjAwIC8vIFJvYm90byBDb25kZW5zZWRcbiAgfVxufSlcblxuY29uc3QgZm9udEhlYWRlciA9IHtcbiAgY29sb3I6IHJhd1RoZW1lLnBhbGV0dGUudGV4dC5wcmltYXJ5LFxuICBmb250V2VpZ2h0OiByYXdUaGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW1cbiAgLy8gZm9udEZhbWlseTogXCInUm9ib3RvIENvbmRlbnNlZCcsIHNhbnMtc2VyaWZcIixcbiAgLy8gdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZSdcbn1cblxuY29uc3QgY29tcG9uZW50czogQ29tcG9uZW50cyA9IHtcbiAgTXVpQXBwQmFyOiB7XG4gICAgc3R5bGVPdmVycmlkZXM6IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiByYXdUaGVtZS5wYWxldHRlLmNvbW1vbi53aGl0ZSxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICcjZjVmNWY1JyxcbiAgICAgICAgYm9yZGVyOiAnc29saWQgdGhpbiAjZjVmNWY1JyxcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZSdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIE11aUNhcmQ6IHtcbiAgICBzdHlsZU92ZXJyaWRlczoge1xuICAgICAgcm9vdDoge1xuICAgICAgICBib3JkZXJSYWRpdXM6ICcxOHB4J1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgTXVpQ2FyZEhlYWRlcjoge1xuICAgIHN0eWxlT3ZlcnJpZGVzOiB7XG4gICAgICByb290OiB7XG4gICAgICAgIC8vIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICBib3JkZXJCb3R0b206ICcxcHggc29saWQgcmdiKDIzNSwgMjM1LCAyMzUpICFpbXBvcnRhbnQnXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBNdWlDYXJkQ29udGVudDoge1xuICAgIHN0eWxlT3ZlcnJpZGVzOiB7XG4gICAgICByb290OiB7XG4gICAgICAgIHBhZGRpbmc6ICczMnB4J1xuICAgICAgICAvLyBwYWRkaW5nOiAnMjBweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIE11aUNhcmRBY3Rpb25zOiB7XG4gICAgc3R5bGVPdmVycmlkZXM6IHtcbiAgICAgIHJvb3Q6IHtcbiAgICAgICAgcGFkZGluZzogJzBweCAzMnB4IDMycHggMzJweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIE11aUJ1dHRvbjoge1xuICAgIHN0eWxlT3ZlcnJpZGVzOiB7XG4gICAgICByb290OiB7XG4gICAgICAgIHRleHRUcmFuc2Zvcm06ICdub25lJyxcbiAgICAgICAgYm94U2hhZG93OiAnbm9uZScsXG4gICAgICAgIG1pbldpZHRoOiAnNjBweCdcbiAgICAgICAgLy8gYm9yZGVyUmFkaXVzOiAnMTJweCdcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIE11aUljb25CdXR0b246IHtcbiAgICBzdHlsZU92ZXJyaWRlczoge1xuICAgICAgcm9vdDoge1xuICAgICAgICAvLyBjb2xvcjogJyMwMDdGRkYnXG4gICAgICAgIGJveFNoYWRvdzogJ25vbmUnXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBNdWlJbnB1dEJhc2U6IHtcbiAgICBzdHlsZU92ZXJyaWRlczoge1xuICAgICAgcm9vdDoge1xuICAgICAgICByZXNpemU6ICdib3RoJyxcbiAgICAgICAgJyYgLk11aS1lcnJvcic6IHtcbiAgICAgICAgICBjb2xvcjogJ3JlZCcsXG4gICAgICAgICAgLy8gYm9yZGVyOiAnMXB4IHNvbGlkIHJlZCcsXG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIHJlZCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5NdWktZXJyb3InOiB7XG4gICAgICAgICAgY29sb3I6ICdyZWQnLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCByZWQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIE11aUxpc3RTdWJoZWFkZXI6IHtcbiAgICBzdHlsZU92ZXJyaWRlczoge1xuICAgICAgcm9vdDoge1xuICAgICAgICBsaW5lSGVpZ2h0OiAnMzJweCdcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHRoZW1lID0ge1xuICAuLi5yYXdUaGVtZSxcbiAgcGFsZXR0ZToge1xuICAgIC4uLnJhd1RoZW1lLnBhbGV0dGUsXG4gICAgYmFja2dyb3VuZDoge1xuICAgICAgLi4ucmF3VGhlbWUucGFsZXR0ZS5iYWNrZ3JvdW5kLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiByYXdUaGVtZS5wYWxldHRlLmNvbW1vbi5ibGFjayxcbiAgICAgIGRlZmF1bHQ6IHJhd1RoZW1lLnBhbGV0dGUuY29tbW9uLndoaXRlLFxuICAgICAgcGxhY2Vob2xkZXI6IGdyZXlbMjAwXVxuICAgIH1cbiAgfSxcbiAgdHlwb2dyYXBoeToge1xuICAgIC4uLnJhd1RoZW1lLnR5cG9ncmFwaHksXG4gICAgZm9udEhlYWRlcixcbiAgICBoMToge1xuICAgICAgLi4ucmF3VGhlbWUudHlwb2dyYXBoeS5oMSxcbiAgICAgIC4uLmZvbnRIZWFkZXIsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAwLFxuICAgICAgZm9udFNpemU6IDMyXG4gICAgfSxcbiAgICBoMjoge1xuICAgICAgLi4ucmF3VGhlbWUudHlwb2dyYXBoeS5oMixcbiAgICAgIC4uLmZvbnRIZWFkZXIsXG4gICAgICBmb250U2l6ZTogMjZcbiAgICB9LFxuICAgIGgzOiB7XG4gICAgICAuLi5yYXdUaGVtZS50eXBvZ3JhcGh5LmgzLFxuICAgICAgLi4uZm9udEhlYWRlcixcbiAgICAgIGZvbnRTaXplOiAyMlxuICAgIH0sXG4gICAgaDQ6IHtcbiAgICAgIC4uLnJhd1RoZW1lLnR5cG9ncmFwaHkuaDQsXG4gICAgICAuLi5mb250SGVhZGVyLFxuICAgICAgZm9udFNpemU6IDIwXG4gICAgfSxcbiAgICBoNToge1xuICAgICAgLi4ucmF3VGhlbWUudHlwb2dyYXBoeS5oNSxcbiAgICAgIGZvbnRXZWlnaHQ6IHJhd1RoZW1lLnR5cG9ncmFwaHkuZm9udFdlaWdodExpZ2h0LFxuICAgICAgZm9udFNpemU6IDE4XG4gICAgfSxcbiAgICBoNjoge1xuICAgICAgLi4ucmF3VGhlbWUudHlwb2dyYXBoeS5oNixcbiAgICAgIC4uLmZvbnRIZWFkZXIsXG4gICAgICBmb250U2l6ZTogMTZcbiAgICB9LFxuICAgIHN1YnRpdGxlMToge1xuICAgICAgLi4ucmF3VGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG4gICAgICBmb250U2l6ZTogMTRcbiAgICB9LFxuICAgIGJvZHkxOiB7XG4gICAgICAuLi5yYXdUaGVtZS50eXBvZ3JhcGh5LmJvZHkxLFxuICAgICAgZm9udFdlaWdodDogcmF3VGhlbWUudHlwb2dyYXBoeS5mb250V2VpZ2h0UmVndWxhcixcbiAgICAgIGZvbnRTaXplOiAxNFxuICAgIH0sXG4gICAgYm9keTI6IHtcbiAgICAgIC4uLnJhd1RoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG4gICAgICBmb250U2l6ZTogMTJcbiAgICB9XG4gIH0sXG4gIGNvbXBvbmVudHNcbn1cbiIsImZ1bmN0aW9uIHIoZSl7dmFyIHQsZixuPVwiXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlKW4rPWU7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgZSlpZihBcnJheS5pc0FycmF5KGUpKWZvcih0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSYmKGY9cihlW3RdKSkmJihuJiYobis9XCIgXCIpLG4rPWYpO2Vsc2UgZm9yKHQgaW4gZSllW3RdJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZnVuY3Rpb24gY2xzeCgpe2Zvcih2YXIgZSx0LGY9MCxuPVwiXCI7Zjxhcmd1bWVudHMubGVuZ3RoOykoZT1hcmd1bWVudHNbZisrXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyIsIiFmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlP2UoZXhwb3J0cyk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCJdLGUpOmUoKHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczp0fHxzZWxmKS5mbGFnc21pdGg9e30pfSh0aGlzLChmdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgZT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbih0LGUpe2lmKEFycmF5LmlzQXJyYXkodCkpcmV0dXJuIHQ7aWYoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdCh0KSlyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1bXSxyPSEwLGk9ITEsYT12b2lkIDA7dHJ5e2Zvcih2YXIgbyxzPXRbU3ltYm9sLml0ZXJhdG9yXSgpOyEocj0obz1zLm5leHQoKSkuZG9uZSkmJihuLnB1c2goby52YWx1ZSksIWV8fG4ubGVuZ3RoIT09ZSk7cj0hMCk7fWNhdGNoKHQpe2k9ITAsYT10fWZpbmFsbHl7dHJ5eyFyJiZzLnJldHVybiYmcy5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgYX19cmV0dXJuIG59KHQsZSk7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIil9LHI9e2dldEl0ZW06ZnVuY3Rpb24odCxlKXtyZXR1cm4gci5tdWx0aUdldChbdF0pLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdWzFdfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiBlJiZlKG51bGwsdCksdH0pKS5jYXRjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGUmJmUodCxudWxsKSx0fSkpfSxzZXRJdGVtOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gci5tdWx0aVNldChbW3QsZV1dKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gbiYmbihudWxsLHQpLHR9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3JldHVybiBuJiZuKHQsbnVsbCksdH0pKX0sZ2V0QWxsS2V5czpmdW5jdGlvbih0KXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB0JiZ0KG51bGwsZSksZX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQmJnQoZSxudWxsKSxlfSkpfSxyZW1vdmVJdGVtOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHIubXVsdGlSZW1vdmUoW3RdKS50aGVuKChmdW5jdGlvbigpe2UmJmUobnVsbCl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe2UmJmUodCxudWxsKX0pKX0sY2xlYXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3dpbmRvdy5sb2NhbFN0b3JhZ2UuY2xlYXIoKSx0KCl9KSl9LG11bHRpR2V0OmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSl7ZSh0LnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jb25jYXQoW1tlLGxvY2FsU3RvcmFnZS5nZXRJdGVtKGUpXV0pfSksW10pKX0pKX0sbXVsdGlTZXQ6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlLHIpe3ZhciBpPVtdO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPW4odCwyKSxyPWVbMF0sYT1lWzFdO3RyeXtsb2NhbFN0b3JhZ2Uuc2V0SXRlbShyLGEpfWNhdGNoKHQpe2kucHVzaCh0KX19KSksaS5sZW5ndGg+MD9yKGkpOmUoKX0pKX0sbXVsdGlSZW1vdmU6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlKXt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odCl9KSksZSgpfSkpfSxmbHVzaEdldFJlcXVlc3RzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiQXN5bmNTdG9yYWdlLmZsdXNoR2V0UmVxdWVzdHM6IE5vdCBzdXBwb3J0ZWQgb24gYHdlYmBcIil9fSxpPWUuZGVmYXVsdD1yLGE9ZnVuY3Rpb24oKXtyZXR1cm4gYT1PYmplY3QuYXNzaWdufHxmdW5jdGlvbih0KXtmb3IodmFyIGUsbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bisrKWZvcih2YXIgaSBpbiBlPWFyZ3VtZW50c1tuXSlPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxpKSYmKHRbaV09ZVtpXSk7cmV0dXJuIHR9LGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtmdW5jdGlvbiBvKHQsZSxuKXtpZihufHwyPT09YXJndW1lbnRzLmxlbmd0aClmb3IodmFyIHIsaT0wLGE9ZS5sZW5ndGg7aTxhO2krKykhciYmaSBpbiBlfHwocnx8KHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSwwLGkpKSxyW2ldPWVbaV0pO3JldHVybiB0LmNvbmNhdChyfHxBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlKSl9dmFyIHMsbCx1PWZ1bmN0aW9uIHQoZSxuKXtpZihlPT09bilyZXR1cm4hMDtpZihlJiZuJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJvYmplY3RcIj09dHlwZW9mIG4pe2lmKGUuY29uc3RydWN0b3IhPT1uLmNvbnN0cnVjdG9yKXJldHVybiExO3ZhciByLGksYTtpZihBcnJheS5pc0FycmF5KGUpKXtpZigocj1lLmxlbmd0aCkhPW4ubGVuZ3RoKXJldHVybiExO2ZvcihpPXI7MCE9aS0tOylpZighdChlW2ldLG5baV0pKXJldHVybiExO3JldHVybiEwfWlmKGUuY29uc3RydWN0b3I9PT1SZWdFeHApcmV0dXJuIGUuc291cmNlPT09bi5zb3VyY2UmJmUuZmxhZ3M9PT1uLmZsYWdzO2lmKGUudmFsdWVPZiE9PU9iamVjdC5wcm90b3R5cGUudmFsdWVPZilyZXR1cm4gZS52YWx1ZU9mKCk9PT1uLnZhbHVlT2YoKTtpZihlLnRvU3RyaW5nIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZylyZXR1cm4gZS50b1N0cmluZygpPT09bi50b1N0cmluZygpO2lmKChyPShhPU9iamVjdC5rZXlzKGUpKS5sZW5ndGgpIT09T2JqZWN0LmtleXMobikubGVuZ3RoKXJldHVybiExO2ZvcihpPXI7MCE9aS0tOylpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sYVtpXSkpcmV0dXJuITE7Zm9yKGk9cjswIT1pLS07KXt2YXIgbz1hW2ldO2lmKCF0KGVbb10sbltvXSkpcmV0dXJuITF9cmV0dXJuITB9cmV0dXJuIGUhPWUmJm4hPW59LGM9bnVsbCxoPVwiQlVMTEVUX1RSQUlOX0RCXCIsZz1cIkJVTExFVF9UUkFJTl9FVkVOVFwiLGY9XCJodHRwczovL2VkZ2UuYXBpLmZsYWdzbWl0aC5jb20vYXBpL3YxL1wiLHY9ZnVuY3Rpb24odCl7cmV0dXJuXCJBdHRlbXB0ZWQgdG8gXCIrdCtcIiBhIHVzZXIgYmVmb3JlIGNhbGxpbmcgZmxhZ3NtaXRoLmluaXQuIENhbGwgZmxhZ3NtaXRoLmluaXQgZmlyc3QsIGlmIHlvdSB3aXNoIHRvIHByZXZlbnQgaXQgc2VuZGluZyBhIHJlcXVlc3QgZm9yIGZsYWdzLCBjYWxsIGluaXQgd2l0aCBwcmV2ZW50RmV0Y2g6dHJ1ZS5cIn0sZD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dmFyIGU9dGhpczt0aGlzLmV2ZW50U291cmNlPW51bGwsdGhpcy5nZXRKU09OPWZ1bmN0aW9uKHQsbixyKXt2YXIgaT1lLGE9aS5lbnZpcm9ubWVudElELG89aS5oZWFkZXJzLGw9e21ldGhvZDpufHxcIkdFVFwiLGJvZHk6cixoZWFkZXJzOntcIngtZW52aXJvbm1lbnQta2V5XCI6XCJcIi5jb25jYXQoYSl9fTtyZXR1cm4gbiYmXCJHRVRcIiE9PW4mJihsLmhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl09XCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpLG8mJk9iamVjdC5hc3NpZ24obC5oZWFkZXJzLG8pLHN8fGNvbnNvbGUuZXJyb3IoXCJGbGFnc21pdGg6IGZldGNoIGlzIHVuZGVmaW5lZCwgcGxlYXNlIHNwZWNpZnkgYSBmZXRjaCBpbXBsZW1lbnRhdGlvbiBpbnRvIGZsYWdzbWl0aC5pbml0IHRvIHN1cHBvcnQgU1NSLlwiKSxzKHQsbCkudGhlbigoZnVuY3Rpb24ocil7cmV0dXJuIGUubG9nKFwiRmV0Y2ggcmVzcG9uc2U6IFwiK3Iuc3RhdHVzK1wiIFwiKyhufHxcIkdFVFwiKSswK3QpLHIudGV4dCgpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBlPXQ7dHJ5e2U9SlNPTi5wYXJzZSh0KX1jYXRjaCh0KXt9cmV0dXJuIHIuc3RhdHVzPj0yMDAmJnIuc3RhdHVzP2U6UHJvbWlzZS5yZWplY3QoZSl9KSl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3Rocm93IGNvbnNvbGUuZXJyb3IoXCJGbGFnc21pdGg6IEZldGNoIGVycm9yOiBcIit0KSxuZXcgRXJyb3IoXCJGbGFnc21pdGg6IEZldGNoIGVycm9yOlwiK3QpfSkpfSx0aGlzLmdldEZsYWdzPWZ1bmN0aW9uKHQsbil7dmFyIHI9ZSxpPXIub25DaGFuZ2Usbz1yLm9uRXJyb3Iscz1yLmlkZW50aXR5LGw9ci5hcGksYz0hMTtlLmxvZyhcIkdldCBGbGFnc1wiKTt2YXIgaD1mdW5jdGlvbih0KXt2YXIgbj10LmZsYWdzLHI9dC50cmFpdHM7cyYmKGUud2l0aFRyYWl0cz1udWxsKTt2YXIgbz17fSxsPXt9O3I9cnx8W10sKG49bnx8W10pLmZvckVhY2goKGZ1bmN0aW9uKHQpe29bdC5mZWF0dXJlLm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csXCJfXCIpXT17aWQ6dC5mZWF0dXJlLmlkLGVuYWJsZWQ6dC5lbmFibGVkLHZhbHVlOnQuZmVhdHVyZV9zdGF0ZV92YWx1ZX19KSksci5mb3JFYWNoKChmdW5jdGlvbih0KXtsW3QudHJhaXRfa2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvIC9nLFwiX1wiKV09dC50cmFpdF92YWx1ZX0pKSxlLm9sZEZsYWdzPWEoe30sZS5mbGFncyk7dmFyIGM9dShlLmZsYWdzLG8pLGg9dShlLnRyYWl0cyxsKTtpZihlLmZsYWdzPW8sZS50cmFpdHM9bCxlLnVwZGF0ZVN0b3JhZ2UoKSxlLmR0cnVtKXt2YXIgZz17amF2YURvdWJsZTp7fSxkYXRlOnt9LHNob3J0U3RyaW5nOnt9LGphdmFMb25nT3JPYmplY3Q6e319O09iamVjdC5rZXlzKGUuZmxhZ3MpLm1hcCgoZnVuY3Rpb24odCl7bShnLFwiZmxhZ3NtaXRoX3ZhbHVlX1wiK3QsZS5nZXRWYWx1ZSh0KSksbShnLFwiZmxhZ3NtaXRoX2VuYWJsZWRfXCIrdCxlLmhhc0ZlYXR1cmUodCkpfSkpLE9iamVjdC5rZXlzKGUudHJhaXRzKS5tYXAoKGZ1bmN0aW9uKHQpe20oZyxcImZsYWdzbWl0aF90cmFpdF9cIit0LGUuZ2V0VHJhaXQodCkpfSkpLGUubG9nKFwiU2VuZGluZyBqYXZhTG9uZ09yT2JqZWN0IHRyYWl0cyB0byBkeW5hdHJhY2VcIixnLmphdmFMb25nT3JPYmplY3QpLGUubG9nKFwiU2VuZGluZyBkYXRlIHRyYWl0cyB0byBkeW5hdHJhY2VcIixnLmRhdGUpLGUubG9nKFwiU2VuZGluZyBzaG9ydFN0cmluZyB0cmFpdHMgdG8gZHluYXRyYWNlXCIsZy5zaG9ydFN0cmluZyksZS5sb2coXCJTZW5kaW5nIGphdmFEb3VibGUgdG8gZHluYXRyYWNlXCIsZy5qYXZhRG91YmxlKSxlLmR0cnVtLnNlbmRTZXNzaW9uUHJvcGVydGllcyhnLmphdmFMb25nT3JPYmplY3QsZy5kYXRlLGcuc2hvcnRTdHJpbmcsZy5qYXZhRG91YmxlKX1lLnRyaWdnZXImJihlLmxvZyhcInRyaWdnZXIgY2FsbGVkXCIpLGUudHJpZ2dlcigpKSxpJiZpKGUub2xkRmxhZ3Mse2lzRnJvbVNlcnZlcjohMCxmbGFnc0NoYW5nZWQ6IWMsdHJhaXRzQ2hhbmdlZDohaH0pfTtyZXR1cm4gcz9Qcm9taXNlLmFsbChbZS53aXRoVHJhaXRzP2UuZ2V0SlNPTihsK1wiaWRlbnRpdGllcy9cIixcIlBPU1RcIixKU09OLnN0cmluZ2lmeSh7aWRlbnRpZmllcjpzLHRyYWl0czpPYmplY3Qua2V5cyhlLndpdGhUcmFpdHMpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue3RyYWl0X2tleTp0LHRyYWl0X3ZhbHVlOmUud2l0aFRyYWl0c1t0XX19KSl9KSk6ZS5nZXRKU09OKGwrXCJpZGVudGl0aWVzLz9pZGVudGlmaWVyPVwiK2VuY29kZVVSSUNvbXBvbmVudChzKSldKS50aGVuKChmdW5jdGlvbihuKXtlLndpdGhUcmFpdHM9bnVsbCxoKG5bMF0pLHQmJiFjJiYoYz0hMCx0KCkpfSkpLmNhdGNoKChmdW5jdGlvbih0KXt2YXIgZT10Lm1lc3NhZ2U7byYmbyh7bWVzc2FnZTplfSl9KSk6UHJvbWlzZS5hbGwoW2UuZ2V0SlNPTihsK1wiZmxhZ3MvXCIpXSkudGhlbigoZnVuY3Rpb24oZSl7aCh7ZmxhZ3M6ZVswXSx0cmFpdHM6dm9pZCAwfSksdCYmIWMmJihjPSEwLHQoKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe24mJiFjJiYoYz0hMCxuKHQpKSxvJiZvKHQpfSkpfSx0aGlzLmFuYWx5dGljc0ZsYWdzPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5hcGk7aWYoZS5ldmFsdWF0aW9uRXZlbnQmJmUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF0pcmV0dXJuIGUuZXZhbHVhdGlvbkV2ZW50JiYwIT09T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZS5ldmFsdWF0aW9uRXZlbnQpLmxlbmd0aCYmMCE9PU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF0pLmxlbmd0aD9lLmdldEpTT04odCtcImFuYWx5dGljcy9mbGFncy9cIixcIlBPU1RcIixKU09OLnN0cmluZ2lmeShlLmV2YWx1YXRpb25FdmVudFtlLmVudmlyb25tZW50SURdKSkudGhlbigoZnVuY3Rpb24odCl7dmFyIG49ZS5nZXRTdGF0ZSgpO2UuZXZhbHVhdGlvbkV2ZW50fHwoZS5ldmFsdWF0aW9uRXZlbnQ9e30pLGUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF09e30sZS5zZXRTdGF0ZShhKGEoe30sbikse2V2YWx1YXRpb25FdmVudDplLmV2YWx1YXRpb25FdmVudH0pKSxlLnVwZGF0ZUV2ZW50U3RvcmFnZSgpfSkpLmNhdGNoKChmdW5jdGlvbih0KXtlLmxvZyhcIkV4Y2VwdGlvbiBmZXRjaGluZyBldmFsdWF0aW9uRXZlbnRcIix0KX0pKTp2b2lkIDB9LHRoaXMuY2FuVXNlU3RvcmFnZT0hMSx0aGlzLmFuYWx5dGljc0ludGVydmFsPW51bGwsdGhpcy5hcGk9bnVsbCx0aGlzLmNhY2hlRmxhZ3M9ITEsdGhpcy50cz1udWxsLHRoaXMuZW5hYmxlQW5hbHl0aWNzPSExLHRoaXMuZW5hYmxlTG9ncz0hMSx0aGlzLmVudmlyb25tZW50SUQ9XCJcIix0aGlzLmV2YWx1YXRpb25FdmVudD1udWxsLHRoaXMuZmxhZ3M9bnVsbCx0aGlzLmdldEZsYWdJbnRlcnZhbD1udWxsLHRoaXMuaGVhZGVycz1udWxsLHRoaXMuaW5pdGlhbGlzZWQ9ITEsdGhpcy5vbGRGbGFncz1udWxsLHRoaXMub25DaGFuZ2U9bnVsbCx0aGlzLm9uRXJyb3I9bnVsbCx0aGlzLnRyaWdnZXI9bnVsbCx0aGlzLmlkZW50aXR5PW51bGwsdGhpcy50aWNrcz1udWxsLHRoaXMudGltZXI9bnVsbCx0aGlzLnRyYWl0cz1udWxsLHRoaXMuZHRydW09bnVsbCx0aGlzLndpdGhUcmFpdHM9bnVsbCx0aGlzLmNhY2hlT3B0aW9ucz17dHRsOjAsc2tpcEFQSTohMX0sdGhpcy5ldmFsdWF0ZUZsYWc9ZnVuY3Rpb24odCl7aWYoZS5lbmFibGVBbmFseXRpY3Mpe2lmKCFlLmV2YWx1YXRpb25FdmVudClyZXR1cm47ZS5ldmFsdWF0aW9uRXZlbnRbZS5lbnZpcm9ubWVudElEXXx8KGUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF09e30pLHZvaWQgMD09PWUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF1bdF0mJihlLmV2YWx1YXRpb25FdmVudFtlLmVudmlyb25tZW50SURdW3RdPTApLGUuZXZhbHVhdGlvbkV2ZW50W2UuZW52aXJvbm1lbnRJRF1bdF0rPTF9ZS51cGRhdGVFdmVudFN0b3JhZ2UoKX0sdGhpcy5nZXRWYWx1ZT1mdW5jdGlvbih0LG4pe3ZhciByPWUuZmxhZ3MmJmUuZmxhZ3NbdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZyxcIl9cIildLGk9bnVsbDtpZihyJiYoaT1yLnZhbHVlKSxlLmV2YWx1YXRlRmxhZyh0KSxudWxsPT1uP3ZvaWQgMDpuLmpzb24pdHJ5e3JldHVybiBudWxsPT09aT8oZS5sb2coXCJUcmllZCB0byBwYXJzZSBudWxsIGZsYWcgYXMgSlNPTjogXCIrdCksbi5mYWxsYmFjayk6SlNPTi5wYXJzZShpKX1jYXRjaCh0KXtyZXR1cm4gbi5mYWxsYmFja31yZXR1cm4gaX0sdGhpcy5nZXRUcmFpdD1mdW5jdGlvbih0KXtyZXR1cm4gZS50cmFpdHMmJmUudHJhaXRzW3QudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csXCJfXCIpXX0sdGhpcy5nZXRBbGxUcmFpdHM9ZnVuY3Rpb24oKXtyZXR1cm4gZS50cmFpdHN9LHRoaXMuc2V0VHJhaXQ9ZnVuY3Rpb24odCxuKXtpZihlLmFwaSl7dmFyIHI9e307cmV0dXJuIHJbdF09bixlLnNldFRyYWl0cyhyKX1jb25zb2xlLmVycm9yKHYoXCJzZXRUcmFpdFwiKSl9LHRoaXMuc2V0VHJhaXRzPWZ1bmN0aW9uKHQpe2lmKGUuYXBpKXtpZih0JiZcIm9iamVjdFwiPT10eXBlb2YgdHx8Y29uc29sZS5lcnJvcihcIkV4cGVjdGVkIG9iamVjdCBmb3IgZmxhZ3NtaXRoLnNldFRyYWl0c1wiKSxlLndpdGhUcmFpdHM9YShhKHt9LGUud2l0aFRyYWl0c3x8e30pLHQpLGUuaWRlbnRpdHkpcmV0dXJuIGUuaW5pdGlhbGlzZWQ/ZS5nZXRGbGFncygpOnZvaWQgMDtlLmxvZyhcIlNldCB0cmFpdHMgcHJpb3IgdG8gaWRlbnRpZnlpbmdcIixlLndpdGhUcmFpdHMpfWVsc2UgY29uc29sZS5lcnJvcih2KFwic2V0VHJhaXRzXCIpKX0sdGhpcy5oYXNGZWF0dXJlPWZ1bmN0aW9uKHQpe3ZhciBuPWUuZmxhZ3MmJmUuZmxhZ3NbdC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyAvZyxcIl9cIildLHI9ITE7cmV0dXJuIG4mJm4uZW5hYmxlZCYmKHI9ITApLGUuZXZhbHVhdGVGbGFnKHQpLHJ9LHM9dC5mZXRjaD90LmZldGNoOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBmZXRjaD9mZXRjaDpudWxsPT09Z2xvYmFsfHx2b2lkIDA9PT1nbG9iYWw/dm9pZCAwOmdsb2JhbC5mZXRjaCx0aGlzLmNhblVzZVN0b3JhZ2U9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvd3x8ISF0LmJyb3dzZXJsZXNzU3RvcmFnZSx0aGlzLmxvZyhcIkNvbnN0cnVjdGluZyBmbGFnc21pdGggaW5zdGFuY2UgXCIrdCksdC5ldmVudFNvdXJjZSYmKGw9dC5ldmVudFNvdXJjZSksdC5Bc3luY1N0b3JhZ2UmJihjPXQuQXN5bmNTdG9yYWdlKX1yZXR1cm4gdC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49dC5lbnZpcm9ubWVudElELHI9dC5hcGksaT12b2lkIDA9PT1yP2Y6cixvPXQuaGVhZGVycyx1PXQub25DaGFuZ2Usdj10LmNhY2hlRmxhZ3MsZD10Lm9uRXJyb3IscD10LmRlZmF1bHRGbGFncyx5PXQuZmV0Y2gsbT10LnByZXZlbnRGZXRjaCxTPXQuZW5hYmxlTG9ncyxfPXQuZW5hYmxlRHluYXRyYWNlLGI9dC5lbmFibGVBbmFseXRpY3Msdz10LnJlYWx0aW1lLEU9dC5ldmVudFNvdXJjZVVybCxJPXZvaWQgMD09PUU/XCJodHRwczovL3JlYWx0aW1lLmZsYWdzbWl0aC5jb20vXCI6RSxPPXQuQXN5bmNTdG9yYWdlLEM9dC5pZGVudGl0eSxGPXQudHJhaXRzLFQ9dC5fdHJpZ2dlcixqPXQuc3RhdGUsUD10LmNhY2hlT3B0aW9ucyxBPXQuYW5ndWxhckh0dHBDbGllbnQ7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe2lmKGUuZW52aXJvbm1lbnRJRD1uLGUuYXBpPWksZS5oZWFkZXJzPW8sZS5nZXRGbGFnSW50ZXJ2YWw9bnVsbCxlLmFuYWx5dGljc0ludGVydmFsPW51bGwsZS5vbkNoYW5nZT11LGUudHJpZ2dlcj1UfHxlLnRyaWdnZXIsZS5vbkVycm9yPWQsZS5pZGVudGl0eT1DLGUud2l0aFRyYWl0cz1GLGUuZW5hYmxlTG9ncz1TfHwhMSxlLmNhY2hlT3B0aW9ucz1QP3tza2lwQVBJOiEhUC5za2lwQVBJLHR0bDpQLnR0bHx8MH06ZS5jYWNoZU9wdGlvbnMsIWUuY2FjaGVPcHRpb25zLnR0bCYmZS5jYWNoZU9wdGlvbnMuc2tpcEFQSSYmY29uc29sZS53YXJuKFwiRmxhZ3NtaXRoOiB5b3UgaGF2ZSBzZXQgYSBjYWNoZSB0dGwgb2YgMCBhbmQgYXJlIHNraXBwaW5nIEFQSSBjYWxscywgdGhpcyBtZWFucyB0aGUgQVBJIHdpbGwgbm90IGJlIGhpdCB1bmxlc3MgeW91IGNsZWFyIGxvY2FsIHN0b3JhZ2UuXCIpLHkmJihzPXkpLGUuZW5hYmxlQW5hbHl0aWNzPWJ8fCExLGUuZmxhZ3M9T2JqZWN0LmFzc2lnbih7fSxwKXx8e30sZS5pbml0aWFsaXNlZD0hMCxlLnRpY2tzPTFlNCx3JiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXt2YXIgZj1JK1wic3NlL2Vudmlyb25tZW50cy9cIituK1wiL3N0cmVhbVwiO2w/ZS5ldmVudFNvdXJjZXx8KGUubG9nKFwiQ3JlYXRpbmcgZXZlbnQgc291cmNlIHdpdGggdXJsIFwiK2YpLGUuZXZlbnRTb3VyY2U9bmV3IGwoZiksZS5ldmVudFNvdXJjZS5hZGRFdmVudExpc3RlbmVyKFwiZW52aXJvbm1lbnRfdXBkYXRlZFwiLChmdW5jdGlvbih0KXtlLmxvZyhcIlJlY2VpdmVkIGV2ZW50c291cmNlIG1lc3NhZ2VcIiksZS5nZXRGbGFncygpfSkpKTplLmxvZyhcIkVycm9yLCBFdmVudFNvdXJjZSBpcyB1bmRlZmluZWRcIil9aWYoZS5sb2coXCJJbml0aWFsaXNpbmcgd2l0aCBwcm9wZXJ0aWVzXCIse2Vudmlyb25tZW50SUQ6bixhcGk6aSxoZWFkZXJzOm8sb25DaGFuZ2U6dSxjYWNoZUZsYWdzOnYsb25FcnJvcjpkLGRlZmF1bHRGbGFnczpwLHByZXZlbnRGZXRjaDptLGVuYWJsZUxvZ3M6UyxlbmFibGVBbmFseXRpY3M6YixBc3luY1N0b3JhZ2U6YyxpZGVudGl0eTpDLHRyYWl0czpGLF90cmlnZ2VyOlQsc3RhdGU6aixhbmd1bGFySHR0cENsaWVudDpBfSxlKSxlLnRpbWVyPWUuZW5hYmxlTG9ncz8obmV3IERhdGUpLnZhbHVlT2YoKTpudWxsLE8mJihjPU8pLGUuY2FjaGVGbGFncz12b2lkIDAhPT1jJiYhIXYsZS5zZXRTdGF0ZShqKSwhbil0aHJvdyByKFwiUGxlYXNlIHNwZWNpZnkgYSBlbnZpcm9ubWVudCBpZFwiKSxcIlBsZWFzZSBzcGVjaWZ5IGEgZW52aXJvbm1lbnQgaWRcIjtfJiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGR0cnVtP2NvbnNvbGUuZXJyb3IoXCJZb3UgaGF2ZSBhdHRlbXB0ZWQgdG8gZW5hYmxlIGR5bmF0cmFjZSBidXQgZHRydW0gaXMgdW5kZWZpbmVkLCBwbGVhc2UgY2hlY2sgeW91IGhhdmUgdGhlIER5bmF0cmFjZSBSVU0gSmF2YVNjcmlwdCBBUEkgaW5zdGFsbGVkLlwiKTplLmR0cnVtPWR0cnVtKSxBJiYocz1mdW5jdGlvbih0LGUpe3ZhciBuPWUuaGVhZGVycyxyPWUubWV0aG9kLGk9ZS5ib2R5O3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSl7c3dpdGNoKHIpe2Nhc2VcIkdFVFwiOnJldHVybiBBLmdldCh0LHtoZWFkZXJzOm59KS5zdWJzY3JpYmUoKGZ1bmN0aW9uKHQpe2Uoe29rOiEwLHRleHQ6ZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHQpfX0pfSkpO2Nhc2VcIlBPU1RcIjpjYXNlXCJQVVRcIjpyZXR1cm4gQS5wb3N0KHQsaSx7aGVhZGVyczpufSkuc3Vic2NyaWJlKChmdW5jdGlvbih0KXtlKHtvazohMCx0ZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0KX19KX0pKX19KSl9KSxjJiZlLmNhblVzZVN0b3JhZ2UmJmMuZ2V0SXRlbShnKS50aGVuKChmdW5jdGlvbih0KXtpZih0KXRyeXtlLmV2YWx1YXRpb25FdmVudD1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe2UuZXZhbHVhdGlvbkV2ZW50PXt9fWVsc2UgZS5ldmFsdWF0aW9uRXZlbnQ9e307cmV0dXJuIGUuYW5hbHl0aWNzSW50ZXJ2YWw9c2V0SW50ZXJ2YWwoZS5hbmFseXRpY3NGbGFncyxlLnRpY2tzKSwhMH0pKSxlLmVuYWJsZUFuYWx5dGljcyYmKGUuYW5hbHl0aWNzSW50ZXJ2YWwmJmNsZWFySW50ZXJ2YWwoZS5hbmFseXRpY3NJbnRlcnZhbCksYyYmZS5jYW5Vc2VTdG9yYWdlJiZjLmdldEl0ZW0oZywoZnVuY3Rpb24odCxuKXtpZihuKXt2YXIgcj1KU09OLnBhcnNlKG4pO3JbZS5lbnZpcm9ubWVudElEXSYmKGo9ZS5nZXRTdGF0ZSgpLGUubG9nKFwiUmV0cmlldmVkIGV2ZW50cyBmcm9tIGNhY2hlXCIsbiksZS5zZXRTdGF0ZShhKGEoe30saikse2V2YWx1YXRpb25FdmVudDpyW2UuZW52aXJvbm1lbnRJRF19KSkpfXJldHVybiEwfSkpKSx2P2MmJmUuY2FuVXNlU3RvcmFnZSYmYy5nZXRJdGVtKGgsKGZ1bmN0aW9uKG4saSl7aWYoaSl0cnl7dmFyIGE9SlNPTi5wYXJzZShpKSxvPSExO2lmKGEmJmEuYXBpPT09ZS5hcGkmJmEuZW52aXJvbm1lbnRJRD09PWUuZW52aXJvbm1lbnRJRCl7dmFyIHM9ITA7ZS5pZGVudGl0eSYmYS5pZGVudGl0eSE9PWUuaWRlbnRpdHkmJihlLmxvZyhcIklnbm9yaW5nIGNhY2hlLCAgaWRlbnRpdHkgaGFzIGNoYW5nZWQgZnJvbSBcIithLmlkZW50aXR5K1wiIHRvIFwiK2UuaWRlbnRpdHkpLHM9ITEpLGUuY2FjaGVPcHRpb25zLnR0bCYmKCFhLnRzfHwobmV3IERhdGUpLnZhbHVlT2YoKS1hLnRzPmUuY2FjaGVPcHRpb25zLnR0bCkmJmEudHMmJihlLmxvZyhcIklnbm9yaW5nIGNhY2hlLCB0aW1lc3RhbXAgaXMgdG9vIG9sZCB0czpcIithLnRzK1wiIHR0bDogXCIrZS5jYWNoZU9wdGlvbnMudHRsK1wiIHRpbWUgZWxhcHNlZCBzaW5jZSBjYWNoZTogXCIrKChuZXcgRGF0ZSkudmFsdWVPZigpLWEudHMpK1wibXNcIikscz0hMSkscyYmKG89ITAsZS5zZXRTdGF0ZShhKSxlLmxvZyhcIlJldHJpZXZlZCBmbGFncyBmcm9tIGNhY2hlXCIsYSkpfWUuZmxhZ3M/KGUudHJpZ2dlciYmKGUubG9nKFwidHJpZ2dlciBjYWxsZWRcIiksZS50cmlnZ2VyKCkpLGUub25DaGFuZ2UmJihlLmxvZyhcIm9uQ2hhbmdlIGNhbGxlZFwiKSxlLm9uQ2hhbmdlKG51bGwse2lzRnJvbVNlcnZlcjohMSxmbGFnc0NoYW5nZWQ6ITAsdHJhaXRzQ2hhbmdlZDohIWUudHJhaXRzfSkpLGUub2xkRmxhZ3M9ZS5mbGFncyx0KCEwKSxlLmNhY2hlT3B0aW9ucy5za2lwQVBJJiZvJiZlLmxvZyhcIlNraXBwaW5nIEFQSSwgdXNpbmcgY2FjaGVcIiksbXx8ZS5jYWNoZU9wdGlvbnMuc2tpcEFQSSYmb3x8ZS5nZXRGbGFncygpKTptP3QoITApOmUuZ2V0RmxhZ3ModCxyKX1jYXRjaCh0KXtlLmxvZyhcIkV4Y2VwdGlvbiBmZXRjaGluZyBjYWNoZWQgbG9nc1wiLHQpfWVsc2UgbT8ocCYmKGUudHJpZ2dlciYmKGUubG9nKFwidHJpZ2dlciBjYWxsZWRcIiksZS50cmlnZ2VyKCkpLGUub25DaGFuZ2UmJihlLmxvZyhcIm9uQ2hhbmdlIGNhbGxlZFwiKSxlLm9uQ2hhbmdlKG51bGwse2lzRnJvbVNlcnZlcjohMSxmbGFnc0NoYW5nZWQ6ITAsdHJhaXRzQ2hhbmdlZDohIWUudHJhaXRzfSkpKSx0KCEwKSk6ZS5nZXRGbGFncyh0LHIpO3JldHVybiEwfSkpOm0/KHAmJihlLnRyaWdnZXImJihlLmxvZyhcInRyaWdnZXIgY2FsbGVkXCIpLGUudHJpZ2dlcigpKSxlLm9uQ2hhbmdlJiYoZS5sb2coXCJvbkNoYW5nZSBjYWxsZWRcIiksZS5vbkNoYW5nZShudWxsLHtpc0Zyb21TZXJ2ZXI6ITEsZmxhZ3NDaGFuZ2VkOiEwLHRyYWl0c0NoYW5nZWQ6ISFlLnRyYWl0c30pKSksdCghMCkpOmUuZ2V0RmxhZ3ModCxyKX0pKS5jYXRjaCgoZnVuY3Rpb24odCl7ZS5sb2coXCJFcnJvciBkdXJpbmcgaW5pdGlhbGlzYXRpb24gXCIsdCksZCYmZCh0KX0pKX0sdC5wcm90b3R5cGUuZ2V0QWxsRmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFnc30sdC5wcm90b3R5cGUuaWRlbnRpZnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5pZGVudGl0eT10LHRoaXMubG9nKFwiSWRlbnRpZnk6IFwiK3RoaXMuaWRlbnRpdHkpLGUmJih0aGlzLndpdGhUcmFpdHM9YShhKHt9LHRoaXMud2l0aFRyYWl0c3x8e30pLGUpKSx0aGlzLmluaXRpYWxpc2VkP3RoaXMuZ2V0RmxhZ3MoKTpQcm9taXNlLnJlc29sdmUoKX0sdC5wcm90b3R5cGUuZ2V0U3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm57YXBpOnRoaXMuYXBpLGVudmlyb25tZW50SUQ6dGhpcy5lbnZpcm9ubWVudElELGZsYWdzOnRoaXMuZmxhZ3MsaWRlbnRpdHk6dGhpcy5pZGVudGl0eSx0czp0aGlzLnRzLHRyYWl0czp0aGlzLnRyYWl0cyxldmFsdWF0aW9uRXZlbnQ6dGhpcy5ldmFsdWF0aW9uRXZlbnR9fSx0LnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbih0KXt0JiYodGhpcy5pbml0aWFsaXNlZD0hMCx0aGlzLmFwaT10LmFwaXx8dGhpcy5hcGl8fGYsdGhpcy5lbnZpcm9ubWVudElEPXQuZW52aXJvbm1lbnRJRHx8dGhpcy5lbnZpcm9ubWVudElELHRoaXMuZmxhZ3M9dC5mbGFnc3x8dGhpcy5mbGFncyx0aGlzLmlkZW50aXR5PXQuaWRlbnRpdHl8fHRoaXMuaWRlbnRpdHksdGhpcy50cmFpdHM9dC50cmFpdHN8fHRoaXMudHJhaXRzLHRoaXMuZXZhbHVhdGlvbkV2ZW50PXQuZXZhbHVhdGlvbkV2ZW50fHx0aGlzLmV2YWx1YXRpb25FdmVudCx0aGlzLmxvZyhcInNldFN0YXRlIGNhbGxlZFwiLHRoaXMpKX0sdC5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO3RoaXMuZW5hYmxlTG9ncyYmY29uc29sZS5sb2cuYXBwbHkodGhpcyxvKFtcIkZMQUdTTUlUSDpcIiwobmV3IERhdGUpLnZhbHVlT2YoKS0odGhpcy50aW1lcnx8MCksXCJtc1wiXSx0LCEwKSl9LHQucHJvdG90eXBlLnVwZGF0ZVN0b3JhZ2U9ZnVuY3Rpb24oKXtpZih0aGlzLmNhY2hlRmxhZ3Mpe3RoaXMudHM9KG5ldyBEYXRlKS52YWx1ZU9mKCk7dmFyIHQ9SlNPTi5zdHJpbmdpZnkodGhpcy5nZXRTdGF0ZSgpKTt0aGlzLmxvZyhcIlNldHRpbmcgc3RvcmFnZVwiLHQpLGMuc2V0SXRlbShoLHQpfX0sdC5wcm90b3R5cGUudXBkYXRlRXZlbnRTdG9yYWdlPWZ1bmN0aW9uKCl7aWYodGhpcy5lbmFibGVBbmFseXRpY3Mpe3ZhciB0PUpTT04uc3RyaW5naWZ5KHRoaXMuZ2V0U3RhdGUoKS5ldmFsdWF0aW9uRXZlbnQpO3RoaXMubG9nKFwiU2V0dGluZyBldmVudCBzdG9yYWdlXCIsdCksYy5zZXRJdGVtKGcsdCl9fSx0LnByb3RvdHlwZS5sb2dvdXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pZGVudGl0eT1udWxsLHRoaXMudHJhaXRzPW51bGwsdGhpcy5pbml0aWFsaXNlZD90aGlzLmdldEZsYWdzKCk6UHJvbWlzZS5yZXNvbHZlKCl9LHQucHJvdG90eXBlLnN0YXJ0TGlzdGVuaW5nPWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PTFlMyksdGhpcy5nZXRGbGFnSW50ZXJ2YWwmJmNsZWFySW50ZXJ2YWwodGhpcy5nZXRGbGFnSW50ZXJ2YWwpLHRoaXMuZ2V0RmxhZ0ludGVydmFsPXNldEludGVydmFsKHRoaXMuZ2V0RmxhZ3MsdCl9LHQucHJvdG90eXBlLnN0b3BMaXN0ZW5pbmc9ZnVuY3Rpb24oKXt0aGlzLmdldEZsYWdJbnRlcnZhbCYmKGNsZWFySW50ZXJ2YWwodGhpcy5nZXRGbGFnSW50ZXJ2YWwpLHRoaXMuZ2V0RmxhZ0ludGVydmFsPW51bGwpfSx0LnByb3RvdHlwZS5nZXRTZWdtZW50cz1mdW5jdGlvbigpe30sdH0oKTtmdW5jdGlvbiBwKHQpe3ZhciBlPXQuZmV0Y2g7dC5icm93c2VybGVzc1N0b3JhZ2U7dmFyIG49dC5Bc3luY1N0b3JhZ2Uscj10LmV2ZW50U291cmNlO3JldHVybiBuZXcgZCh7ZmV0Y2g6ZSxBc3luY1N0b3JhZ2U6bixldmVudFNvdXJjZTpyfSl9dmFyIHksbT1mdW5jdGlvbih0LGUsbil7dmFyIHI9XCJzaG9ydFN0cmluZ1wiLGk9ITA7XCJudW1iZXJcIj09dHlwZW9mIG4mJihyPVwiamF2YURvdWJsZVwiLGk9ITEpLHRbcl09dFtyXXx8e30sdFtyXVtlXT1pP24rXCJcIjpufSxTPSh5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHk9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pfSx5KHQsZSl9LGZ1bmN0aW9uKHQsZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSYmbnVsbCE9PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIrU3RyaW5nKGUpK1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7ZnVuY3Rpb24gbigpe3RoaXMuY29uc3RydWN0b3I9dH15KHQsZSksdC5wcm90b3R5cGU9bnVsbD09PWU/T2JqZWN0LmNyZWF0ZShlKToobi5wcm90b3R5cGU9ZS5wcm90b3R5cGUsbmV3IG4pfSksXz1mdW5jdGlvbih0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcixuPWUmJnRbZV0scj0wO2lmKG4pcmV0dXJuIG4uY2FsbCh0KTtpZih0JiZcIm51bWJlclwiPT10eXBlb2YgdC5sZW5ndGgpcmV0dXJue25leHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdCYmcj49dC5sZW5ndGgmJih0PXZvaWQgMCkse3ZhbHVlOnQmJnRbcisrXSxkb25lOiF0fX19O3Rocm93IG5ldyBUeXBlRXJyb3IoZT9cIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCI6XCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpfSxiPWZ1bmN0aW9uKHQsZSl7dmFyIG49XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0W1N5bWJvbC5pdGVyYXRvcl07aWYoIW4pcmV0dXJuIHQ7dmFyIHIsaSxhPW4uY2FsbCh0KSxvPVtdO3RyeXtmb3IoOyh2b2lkIDA9PT1lfHxlLS0gPjApJiYhKHI9YS5uZXh0KCkpLmRvbmU7KW8ucHVzaChyLnZhbHVlKX1jYXRjaCh0KXtpPXtlcnJvcjp0fX1maW5hbGx5e3RyeXtyJiYhci5kb25lJiYobj1hLnJldHVybikmJm4uY2FsbChhKX1maW5hbGx5e2lmKGkpdGhyb3cgaS5lcnJvcn19cmV0dXJuIG99LHc9ZnVuY3Rpb24odCxlLG4pe2lmKG58fDI9PT1hcmd1bWVudHMubGVuZ3RoKWZvcih2YXIgcixpPTAsYT1lLmxlbmd0aDtpPGE7aSsrKSFyJiZpIGluIGV8fChyfHwocj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlLDAsaSkpLHJbaV09ZVtpXSk7cmV0dXJuIHQuY29uY2F0KHJ8fEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpKX0sRT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIHQuY2FsbCh0aGlzLFwiRXZlbnRTb3VyY2Ugbm90IGF2YWlsYWJsZS5cXG5Db25zaWRlciBsb2FkaW5nIGFuIEV2ZW50U291cmNlIHBvbHlmaWxsIGFuZCBtYWtpbmcgaXQgYXZhaWxhYmxlIGdsb2JhbGx5IGFzIEV2ZW50U291cmNlLCBvciBwYXNzaW5nIG9uZSBpbiBhcyBldmVudFNvdXJjZUNsYXNzIHRvIHRoZSBSZWNvbm5lY3RpbmdFdmVudFNvdXJjZSBjb25zdHJ1Y3Rvci5cIil8fHRoaXN9cmV0dXJuIFMoZSx0KSxlfShFcnJvciksST1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt2YXIgbj10aGlzO2lmKHRoaXMuQ09OTkVDVElORz0wLHRoaXMuT1BFTj0xLHRoaXMuQ0xPU0VEPTIsdGhpcy5fY29uZmlndXJhdGlvbj1udWxsIT1lP09iamVjdC5hc3NpZ24oe30sZSk6dm9pZCAwLHRoaXMud2l0aENyZWRlbnRpYWxzPSExLHRoaXMuX2V2ZW50U291cmNlPW51bGwsdGhpcy5fbGFzdEV2ZW50SWQ9bnVsbCx0aGlzLl90aW1lcj1udWxsLHRoaXMuX2xpc3RlbmVycz17b3BlbjpbXSxlcnJvcjpbXSxtZXNzYWdlOltdfSx0aGlzLnVybD10LnRvU3RyaW5nKCksdGhpcy5yZWFkeVN0YXRlPXRoaXMuQ09OTkVDVElORyx0aGlzLm1heF9yZXRyeV90aW1lPTNlMyx0aGlzLmV2ZW50U291cmNlQ2xhc3M9Z2xvYmFsVGhpcy5FdmVudFNvdXJjZSxudWxsIT10aGlzLl9jb25maWd1cmF0aW9uJiYodGhpcy5fY29uZmlndXJhdGlvbi5sYXN0RXZlbnRJZCYmKHRoaXMuX2xhc3RFdmVudElkPXRoaXMuX2NvbmZpZ3VyYXRpb24ubGFzdEV2ZW50SWQsZGVsZXRlIHRoaXMuX2NvbmZpZ3VyYXRpb24ubGFzdEV2ZW50SWQpLHRoaXMuX2NvbmZpZ3VyYXRpb24ubWF4X3JldHJ5X3RpbWUmJih0aGlzLm1heF9yZXRyeV90aW1lPXRoaXMuX2NvbmZpZ3VyYXRpb24ubWF4X3JldHJ5X3RpbWUsZGVsZXRlIHRoaXMuX2NvbmZpZ3VyYXRpb24ubWF4X3JldHJ5X3RpbWUpLHRoaXMuX2NvbmZpZ3VyYXRpb24uZXZlbnRTb3VyY2VDbGFzcyYmKHRoaXMuZXZlbnRTb3VyY2VDbGFzcz10aGlzLl9jb25maWd1cmF0aW9uLmV2ZW50U291cmNlQ2xhc3MsZGVsZXRlIHRoaXMuX2NvbmZpZ3VyYXRpb24uZXZlbnRTb3VyY2VDbGFzcykpLG51bGw9PXRoaXMuZXZlbnRTb3VyY2VDbGFzc3x8XCJmdW5jdGlvblwiIT10eXBlb2YgdGhpcy5ldmVudFNvdXJjZUNsYXNzKXRocm93IG5ldyBFO3RoaXMuX29uZXZlbnRfd3JhcHBlZD1mdW5jdGlvbih0KXtuLl9vbmV2ZW50KHQpfSx0aGlzLl9zdGFydCgpfXJldHVybiB0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5fc3RhcnQ9ZnVuY3Rpb24oKXt2YXIgdCxlLG49dGhpcyxyPXRoaXMudXJsO3RoaXMuX2xhc3RFdmVudElkJiYoLTE9PT1yLmluZGV4T2YoXCI/XCIpP3IrPVwiP1wiOnIrPVwiJlwiLHIrPVwibGFzdEV2ZW50SWQ9XCIrZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX2xhc3RFdmVudElkKSksdGhpcy5fZXZlbnRTb3VyY2U9bmV3IHRoaXMuZXZlbnRTb3VyY2VDbGFzcyhyLHRoaXMuX2NvbmZpZ3VyYXRpb24pLHRoaXMuX2V2ZW50U291cmNlLm9ub3Blbj1mdW5jdGlvbih0KXtuLl9vbm9wZW4odCl9LHRoaXMuX2V2ZW50U291cmNlLm9uZXJyb3I9ZnVuY3Rpb24odCl7bi5fb25lcnJvcih0KX0sdGhpcy5fZXZlbnRTb3VyY2Uub25tZXNzYWdlPWZ1bmN0aW9uKHQpe24ub25tZXNzYWdlKHQpfTt0cnl7Zm9yKHZhciBpPV8oT2JqZWN0LmtleXModGhpcy5fbGlzdGVuZXJzKSksYT1pLm5leHQoKTshYS5kb25lO2E9aS5uZXh0KCkpe3ZhciBvPWEudmFsdWU7dGhpcy5fZXZlbnRTb3VyY2UuYWRkRXZlbnRMaXN0ZW5lcihvLHRoaXMuX29uZXZlbnRfd3JhcHBlZCl9fWNhdGNoKGUpe3Q9e2Vycm9yOmV9fWZpbmFsbHl7dHJ5e2EmJiFhLmRvbmUmJihlPWkucmV0dXJuKSYmZS5jYWxsKGkpfWZpbmFsbHl7aWYodCl0aHJvdyB0LmVycm9yfX19LHQucHJvdG90eXBlLl9vbm9wZW49ZnVuY3Rpb24odCl7MD09PXRoaXMucmVhZHlTdGF0ZSYmKHRoaXMucmVhZHlTdGF0ZT0xLHRoaXMub25vcGVuKHQpKX0sdC5wcm90b3R5cGUuX29uZXJyb3I9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZigxPT09dGhpcy5yZWFkeVN0YXRlJiYodGhpcy5yZWFkeVN0YXRlPTAsdGhpcy5vbmVycm9yKHQpKSx0aGlzLl9ldmVudFNvdXJjZSYmMj09PXRoaXMuX2V2ZW50U291cmNlLnJlYWR5U3RhdGUpe3RoaXMuX2V2ZW50U291cmNlLmNsb3NlKCksdGhpcy5fZXZlbnRTb3VyY2U9bnVsbDt2YXIgbj1NYXRoLnJvdW5kKHRoaXMubWF4X3JldHJ5X3RpbWUqTWF0aC5yYW5kb20oKSk7dGhpcy5fdGltZXI9c2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gZS5fc3RhcnQoKX0pLG4pfX0sdC5wcm90b3R5cGUuX29uZXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGUsbjt0IGluc3RhbmNlb2YgTWVzc2FnZUV2ZW50JiYodGhpcy5fbGFzdEV2ZW50SWQ9dC5sYXN0RXZlbnRJZCk7dmFyIHI9dGhpcy5fbGlzdGVuZXJzW3QudHlwZV07aWYobnVsbCE9cil0cnl7Zm9yKHZhciBpPV8odyhbXSxiKHIpLCExKSksYT1pLm5leHQoKTshYS5kb25lO2E9aS5uZXh0KCkpe2EudmFsdWUuY2FsbCh0aGlzLHQpfX1jYXRjaCh0KXtlPXtlcnJvcjp0fX1maW5hbGx5e3RyeXthJiYhYS5kb25lJiYobj1pLnJldHVybikmJm4uY2FsbChpKX1maW5hbGx5e2lmKGUpdGhyb3cgZS5lcnJvcn19XCJtZXNzYWdlXCI9PT10LnR5cGUmJnRoaXMub25tZXNzYWdlKHQpfSx0LnByb3RvdHlwZS5vbm9wZW49ZnVuY3Rpb24odCl7fSx0LnByb3RvdHlwZS5vbmVycm9yPWZ1bmN0aW9uKHQpe30sdC5wcm90b3R5cGUub25tZXNzYWdlPWZ1bmN0aW9uKHQpe30sdC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLl90aW1lciYmKGNsZWFyVGltZW91dCh0aGlzLl90aW1lciksdGhpcy5fdGltZXI9bnVsbCksdGhpcy5fZXZlbnRTb3VyY2UmJih0aGlzLl9ldmVudFNvdXJjZS5jbG9zZSgpLHRoaXMuX2V2ZW50U291cmNlPW51bGwpLHRoaXMucmVhZHlTdGF0ZT0yfSx0LnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyPWZ1bmN0aW9uKHQsZSxuKXtudWxsPT10aGlzLl9saXN0ZW5lcnNbdF0mJih0aGlzLl9saXN0ZW5lcnNbdF09W10sbnVsbCE9dGhpcy5fZXZlbnRTb3VyY2UmJnRoaXMuX2V2ZW50U291cmNlLmFkZEV2ZW50TGlzdGVuZXIodCx0aGlzLl9vbmV2ZW50X3dyYXBwZWQpKTt2YXIgcj10aGlzLl9saXN0ZW5lcnNbdF07ci5pbmNsdWRlcyhlKXx8KHRoaXMuX2xpc3RlbmVyc1t0XT13KHcoW10sYihyKSwhMSksW2VdLCExKSl9LHQucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMuX2xpc3RlbmVyc1t0XTt0aGlzLl9saXN0ZW5lcnNbdF09ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0IT09ZX0pKX0sdH0oKSxPPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9ZXx8e30sbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dmFyIGk9bmV3IFhNTEh0dHBSZXF1ZXN0LGE9W10sbz1bXSxzPXt9LGw9ZnVuY3Rpb24oKXtyZXR1cm57b2s6Mj09KGkuc3RhdHVzLzEwMHwwKSxzdGF0dXNUZXh0Omkuc3RhdHVzVGV4dCxzdGF0dXM6aS5zdGF0dXMsdXJsOmkucmVzcG9uc2VVUkwsdGV4dDpmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlc29sdmUoaS5yZXNwb25zZVRleHQpfSxqc29uOmZ1bmN0aW9uKCl7cmV0dXJuIFByb21pc2UucmVzb2x2ZShpLnJlc3BvbnNlVGV4dCkudGhlbihKU09OLnBhcnNlKX0sYmxvYjpmdW5jdGlvbigpe3JldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW2kucmVzcG9uc2VdKSl9LGNsb25lOmwsaGVhZGVyczp7a2V5czpmdW5jdGlvbigpe3JldHVybiBhfSxlbnRyaWVzOmZ1bmN0aW9uKCl7cmV0dXJuIG99LGdldDpmdW5jdGlvbih0KXtyZXR1cm4gc1t0LnRvTG93ZXJDYXNlKCldfSxoYXM6ZnVuY3Rpb24odCl7cmV0dXJuIHQudG9Mb3dlckNhc2UoKWluIHN9fX19O2Zvcih2YXIgdSBpbiBpLm9wZW4oZS5tZXRob2R8fFwiZ2V0XCIsdCwhMCksaS5vbmxvYWQ9ZnVuY3Rpb24oKXtpLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnJlcGxhY2UoL14oLio/KTpbXlxcU1xcbl0qKFtcXHNcXFNdKj8pJC9nbSwoZnVuY3Rpb24odCxlLG4pe2EucHVzaChlPWUudG9Mb3dlckNhc2UoKSksby5wdXNoKFtlLG5dKSxzW2VdPXNbZV0/c1tlXStcIixcIituOm59KSksbihsKCkpfSxpLm9uZXJyb3I9cixpLndpdGhDcmVkZW50aWFscz1cImluY2x1ZGVcIj09ZS5jcmVkZW50aWFscyxlLmhlYWRlcnMpaS5zZXRSZXF1ZXN0SGVhZGVyKHUsZS5oZWFkZXJzW3VdKTtpLnNlbmQoZS5ib2R5fHxudWxsKX0pKX0sQz1wKHtBc3luY1N0b3JhZ2U6aSxmZXRjaDpPLGV2ZW50U291cmNlOkl9KTtcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93LmZsYWdzbWl0aD1DKTt0LmNyZWF0ZUZsYWdzbWl0aEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIHAoe0FzeW5jU3RvcmFnZTppLGZldGNoOk8sZXZlbnRTb3VyY2U6SX0pfSx0LmRlZmF1bHQ9QyxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KX0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzLHJlcXVpcmUoXCJyZWFjdFwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCIsXCJyZWFjdFwiXSx0KTp0KChlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6ZXx8c2VsZilbXCJmbGFnc21pdGgvcmVhY3RcIl09e30sZS5SZWFjdCl9KHRoaXMsKGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwiZGVmYXVsdFwiaW4gZT9lOntkZWZhdWx0OmV9fXZhciByPW4odCksaT1mdW5jdGlvbigpe3JldHVybiBpPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPTEscj1hcmd1bWVudHMubGVuZ3RoO248cjtuKyspZm9yKHZhciBpIGluIHQ9YXJndW1lbnRzW25dKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0LGkpJiYoZVtpXT10W2ldKTtyZXR1cm4gZX0saS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LG89e2V4cG9ydHM6e319O2Z1bmN0aW9uIHUoKXt9dS5wcm90b3R5cGU9e29uOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLmV8fCh0aGlzLmU9e30pO3JldHVybihyW2VdfHwocltlXT1bXSkpLnB1c2goe2ZuOnQsY3R4Om59KSx0aGlzfSxvbmNlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzO2Z1bmN0aW9uIGkoKXtyLm9mZihlLGkpLHQuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiBpLl89dCx0aGlzLm9uKGUsaSxuKX0sZW1pdDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSksbj0oKHRoaXMuZXx8KHRoaXMuZT17fSkpW2VdfHxbXSkuc2xpY2UoKSxyPTAsaT1uLmxlbmd0aDtyPGk7cisrKW5bcl0uZm4uYXBwbHkobltyXS5jdHgsdCk7cmV0dXJuIHRoaXN9LG9mZjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuZXx8KHRoaXMuZT17fSkscj1uW2VdLGk9W107aWYociYmdClmb3IodmFyIG89MCx1PXIubGVuZ3RoO288dTtvKyspcltvXS5mbiE9PXQmJnJbb10uZm4uXyE9PXQmJmkucHVzaChyW29dKTtyZXR1cm4gaS5sZW5ndGg/bltlXT1pOmRlbGV0ZSBuW2VdLHRoaXN9fSxvLmV4cG9ydHM9dSxvLmV4cG9ydHMuVGlueUVtaXR0ZXI9dTt2YXIgYT1uZXcgby5leHBvcnRzLlRpbnlFbWl0dGVyLHM9dC5jcmVhdGVDb250ZXh0KG51bGwpLGM9ZnVuY3Rpb24oZSl7dmFyIG49dC51c2VSZWYoZSk7cmV0dXJuIG4uY3VycmVudHx8KG4uY3VycmVudD1lKSxuLmN1cnJlbnR9LGY9ZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuW2VdO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLmhhc093blByb3BlcnR5KFwibGVuZ3RoXCIpKXJldHVybiBlO3Rocm93IG5ldyBFcnJvcihcIkZsYWdzbWl0aDogcGxlYXNlIHN1cHBseSBhbiBhcnJheSBvZiBzdHJpbmdzIG9yIGEgc2luZ2xlIHN0cmluZyBvZiBmbGFnIGtleXMgdG8gdXNlRmxhZ3NcIil9LGw9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj1bXSksdC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiXCIuY29uY2F0KGUuZ2V0VmFsdWUodCkpLmNvbmNhdChlLmhhc0ZlYXR1cmUodCkpfSkpLmNvbmNhdChuLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJcIi5jb25jYXQoZS5nZXRUcmFpdCh0KSl9KSkpLmpvaW4oXCIsXCIpfTtlLkZsYWdzbWl0aENvbnRleHQ9cyxlLkZsYWdzbWl0aFByb3ZpZGVyPWZ1bmN0aW9uKGUpe3ZhciBuPWUuZmxhZ3NtaXRoLG89ZS5vcHRpb25zLHU9ZS5zZXJ2ZXJTdGF0ZSxjPWUuY2hpbGRyZW4sZj10LnVzZVJlZighMCk7cmV0dXJuIG4mJiEobnVsbD09bj92b2lkIDA6bi50cmlnZ2VyKSYmKG4udHJpZ2dlcj1mdW5jdGlvbigpe24ubG9nKFwiUmVhY3QgLSB0cmlnZ2VyIGV2ZW50IHJlY2VpdmVkXCIpLGEuZW1pdChcImV2ZW50XCIpfSksdSYmIW4uaW5pdGlhbGlzZWQmJm4uc2V0U3RhdGUodSksZi5jdXJyZW50JiYoZi5jdXJyZW50PSExLG8mJm4uaW5pdChpKGkoe30sbykse3N0YXRlOm8uc3RhdGV8fHUsb25DaGFuZ2U6ZnVuY3Rpb24oKXtmb3IodmFyIGU9W10sdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZVt0XT1hcmd1bWVudHNbdF07by5vbkNoYW5nZSYmby5vbkNoYW5nZS5hcHBseShvLGUpLGEuZW1pdChcImV2ZW50XCIpfX0pKSksci5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocy5Qcm92aWRlcix7dmFsdWU6bn0sYyl9LGUudXNlRmxhZ3M9ZnVuY3Rpb24oZSxuKXt2b2lkIDA9PT1uJiYobj1bXSk7dmFyIHI9dC51c2VSZWYoITApLGk9YyhmKGUpKSxvPWMoZihuKSksdT10LnVzZUNvbnRleHQocyksZz10LnVzZVN0YXRlKGwodSxpKSksaD1nWzBdLHA9Z1sxXSx2PXQudXNlUmVmKGgpLGQ9dC51c2VDYWxsYmFjaygoZnVuY3Rpb24oKXtudWxsPT11fHx1LmxvZyhcIlJlYWN0IC0gRXZlbnQgbGlzdGVuZXIgdHJpZ2dlcmVkXCIpO3ZhciBlPWwodSxpLG8pO2UhPT12LmN1cnJlbnQmJih2LmN1cnJlbnQ9ZSxwKGUpKX0pLFtdKTtyZXR1cm4gci5jdXJyZW50JiYoci5jdXJyZW50PSExLG51bGw9PXV8fHUubG9nKFwiUmVhY3QgLSBJbml0aWFsaXNpbmcgZXZlbnQgbGlzdGVuZXJzXCIpLGEub24oXCJldmVudFwiLGQpKSx0LnVzZUVmZmVjdCgoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oKXtudWxsPT11fHx1LmxvZyhcIlJlYWN0IC0gUmVtb3ZpbmcgZXZlbnQgbGlzdGVuZXJzXCIpLGEub2ZmKFwiZXZlbnRcIixkKX19KSxbXSksdC51c2VNZW1vKChmdW5jdGlvbigpe251bGw9PXV8fHUubG9nKFwiUmVhY3QgLSBSZW5kZXIga2V5IGhhcyBjaGFuZ2VkXCIpO3ZhciBlPXt9O3JldHVybiBpLm1hcCgoZnVuY3Rpb24odCl7ZVt0XT17ZW5hYmxlZDp1Lmhhc0ZlYXR1cmUodCksdmFsdWU6dS5nZXRWYWx1ZSh0KX19KSkuY29uY2F0KG51bGw9PW8/dm9pZCAwOm8ubWFwKChmdW5jdGlvbih0KXtlW3RdPXUuZ2V0VHJhaXQodCl9KSkpLGV9KSxbaF0pfSxlLnVzZUZsYWdzbWl0aD1mdW5jdGlvbigpe3ZhciBlPXQudXNlQ29udGV4dChzKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJ1c2VGbGFnc21pdGggbXVzdCBiZSB1c2VkIHdpdGggaW4gYSBGbGFnc21pdGhQcm92aWRlclwiKTtyZXR1cm4gZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIHtcblx0XHR2YXIgYSA9IGZhY3RvcnkoKTtcblx0XHRmb3IodmFyIGkgaW4gYSkgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyA/IGV4cG9ydHMgOiByb290KVtpXSA9IGFbaV07XG5cdH1cbn0pKHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheUxpa2VUb0FycmF5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5TGlrZVRvQXJyYXkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXJyYXlMaWtlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRob3V0SG9sZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYXJyYXlMaWtlVG9BcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYXJyYXlMaWtlVG9BcnJheS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShhcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hcnJheVdpdGhvdXRIb2xlcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjaztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlV2lsZGNhcmQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBfdHlwZW9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShub2RlSW50ZXJvcCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZUJhYmVsSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciBjYWNoZU5vZGVJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTtcbiAgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHtcbiAgICByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7XG4gIH0pKG5vZGVJbnRlcm9wKTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkge1xuICBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJkZWZhdWx0XCI6IG9ialxuICAgIH07XG4gIH1cblxuICB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApO1xuXG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuXG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDtcblxuICAgICAgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZXdPYmpbXCJkZWZhdWx0XCJdID0gb2JqO1xuXG4gIGlmIChjYWNoZSkge1xuICAgIGNhY2hlLnNldChvYmosIG5ld09iaik7XG4gIH1cblxuICByZXR1cm4gbmV3T2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2l0ZXJhYmxlVG9BcnJheTtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9ub25JdGVyYWJsZVNwcmVhZC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9ub25JdGVyYWJsZVNwcmVhZDtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlO1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbnZhciBhcnJheVdpdGhvdXRIb2xlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYXJyYXlXaXRob3V0SG9sZXMuanMgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aG91dEhvbGVzLmpzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9pdGVyYWJsZVRvQXJyYXkuanMgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheS5qc1wiKTtcblxudmFyIHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanNcIik7XG5cbnZhciBub25JdGVyYWJsZVNwcmVhZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbm9uSXRlcmFibGVTcHJlYWQuanMgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCIpO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdG9Db25zdW1hYmxlQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcblxuICAgIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcblxuICAgIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG52YXIgYXJyYXlMaWtlVG9BcnJheSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vYXJyYXlMaWtlVG9BcnJheS5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlMaWtlVG9BcnJheS5qc1wiKTtcblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxudmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9jb25zb2xlL3NyYy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2NvbnNvbGUvc3JjL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfcmVnaXN0ZXJDb25zb2xlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZ2lzdGVyQ29uc29sZSAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9jb25zb2xlL3NyYy9yZWdpc3RlckNvbnNvbGUuanNcIikpO1xuXG52YXIgX2RlZmF1bHQgPSBfcmVnaXN0ZXJDb25zb2xlLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvY29uc29sZS9zcmMvcmVnaXN0ZXJDb25zb2xlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2NvbnNvbGUvc3JjL3JlZ2lzdGVyQ29uc29sZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlZ2lzdGVyQ29uc29sZTtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZiAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzXCIpKTtcblxudmFyIF9lbmhhbmNlRnVuYyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC91dGlscy9zcmMvZW5oYW5jZUZ1bmMgKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL2VuaGFuY2VGdW5jLmpzXCIpKTtcblxudmFyIF9leGNlcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC9leGNlcHRpb25zICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL2luZGV4LmpzXCIpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuZnVuY3Rpb24gcmVnaXN0ZXJDb25zb2xlKGxvZ2dlcikge1xuICB2YXIgdW5zdWJGdW5jdGlvbnMgPSBbXTtcbiAgdmFyIG1ldGhvZHMgPSBbJ2xvZycsICd3YXJuJywgJ2luZm8nLCAnZXJyb3InLCAnZGVidWcnXTtcbiAgbWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICB1bnN1YkZ1bmN0aW9ucy5wdXNoKCgwLCBfZW5oYW5jZUZ1bmMuZGVmYXVsdCkoY29uc29sZSwgbWV0aG9kLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmFkZEV2ZW50KCdsci5jb3JlLkxvZ0V2ZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29uc29sZU9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgICB2YXIgaXNFbmFibGVkID0gY29uc29sZU9wdGlvbnMuaXNFbmFibGVkO1xuXG4gICAgICAgIGlmICgoMCwgX3R5cGVvZjIuZGVmYXVsdCkoaXNFbmFibGVkKSA9PT0gJ29iamVjdCcgJiYgaXNFbmFibGVkW21ldGhvZF0gPT09IGZhbHNlIHx8IGlzRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2QgPT09ICdlcnJvcicgJiYgY29uc29sZU9wdGlvbnMuc2hvdWxkQWdncmVnYXRlQ29uc29sZUVycm9ycykge1xuICAgICAgICAgIF9leGNlcHRpb25zLkNhcHR1cmUuY2FwdHVyZU1lc3NhZ2UobG9nZ2VyLCBhcmdzWzBdLCBhcmdzLCB7fSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxvZ0xldmVsOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSk7XG4gIH0pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHVuc3ViRnVuY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKHVuc3ViRnVuY3Rpb24pIHtcbiAgICAgIHJldHVybiB1bnN1YkZ1bmN0aW9uKCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvQ2FwdHVyZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvQ2FwdHVyZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNhcHR1cmVNZXNzYWdlID0gY2FwdHVyZU1lc3NhZ2U7XG5leHBvcnRzLmNhcHR1cmVFeGNlcHRpb24gPSBjYXB0dXJlRXhjZXB0aW9uO1xuXG52YXIgX3R5cGVvZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanNcIikpO1xuXG52YXIgX1RyYWNlS2l0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAbG9ncm9ja2V0L3V0aWxzL3NyYy9UcmFjZUtpdCAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvVHJhY2VLaXQuanNcIikpO1xuXG52YXIgX3N0YWNrVHJhY2VGcm9tRXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3RhY2tUcmFjZUZyb21FcnJvciAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9leGNlcHRpb25zL3NyYy9zdGFja1RyYWNlRnJvbUVycm9yLmpzXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbi8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5mdW5jdGlvbiBpc1NjYWxhcih2YWx1ZSkge1xuICByZXR1cm4gL2Jvb2xlYW58bnVtYmVyfHN0cmluZy8udGVzdCgoMCwgX3R5cGVvZjIuZGVmYXVsdCkodmFsdWUpKTtcbn1cblxuZnVuY3Rpb24gc2NydWIoZGF0YSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucykge1xuICAgIHZhciBvcHRpb25hbFNjYWxhcnMgPSBbLy8gVmFsaWQgdmFsdWVzIGZvciAnbGV2ZWwnIGFyZSAnZmF0YWwnLCAnZXJyb3InLCAnd2FybmluZycsICdpbmZvJyxcbiAgICAvLyBhbmQgJ2RlYnVnJy4gRGVmYXVsdHMgdG8gJ2Vycm9yJy5cbiAgICAnbGV2ZWwnLCAnbG9nZ2VyJ107XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9vcHRpb25hbFNjYWxhcnMgPSBvcHRpb25hbFNjYWxhcnM7IF9pIDwgX29wdGlvbmFsU2NhbGFycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBmaWVsZCA9IF9vcHRpb25hbFNjYWxhcnNbX2ldO1xuICAgICAgdmFyIHZhbHVlID0gb3B0aW9uc1tmaWVsZF07XG5cbiAgICAgIGlmIChpc1NjYWxhcih2YWx1ZSkpIHtcbiAgICAgICAgZGF0YVtmaWVsZF0gPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBvcHRpb25hbE1hcHMgPSBbJ3RhZ3MnLCAnZXh0cmEnXTtcblxuICAgIGZvciAodmFyIF9pMiA9IDAsIF9vcHRpb25hbE1hcHMgPSBvcHRpb25hbE1hcHM7IF9pMiA8IF9vcHRpb25hbE1hcHMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIF9maWVsZCA9IF9vcHRpb25hbE1hcHNbX2kyXTtcbiAgICAgIHZhciBkaXJ0eSA9IG9wdGlvbnNbX2ZpZWxkXSB8fCB7fTtcbiAgICAgIHZhciBzY3J1YmJlZCA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBfaTMgPSAwLCBfT2JqZWN0JGtleXMgPSBPYmplY3Qua2V5cyhkaXJ0eSk7IF9pMyA8IF9PYmplY3Qka2V5cy5sZW5ndGg7IF9pMysrKSB7XG4gICAgICAgIHZhciBrZXkgPSBfT2JqZWN0JGtleXNbX2kzXTtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGRpcnR5W2tleV07XG5cbiAgICAgICAgaWYgKGlzU2NhbGFyKF92YWx1ZSkpIHtcbiAgICAgICAgICBzY3J1YmJlZFtrZXkudG9TdHJpbmcoKV0gPSBfdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkYXRhW19maWVsZF0gPSBzY3J1YmJlZDtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UobG9nZ2VyLCBtZXNzYWdlLCBtZXNzYWdlQXJncykge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG4gIHZhciBpc0NvbnNvbGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuICB2YXIgZGF0YSA9IHtcbiAgICBleGNlcHRpb25UeXBlOiBpc0NvbnNvbGUgPyAnQ09OU09MRScgOiAnTUVTU0FHRScsXG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBtZXNzYWdlQXJnczogbWVzc2FnZUFyZ3MsXG4gICAgYnJvd3NlckhyZWY6IHdpbmRvdy5sb2NhdGlvbiA/IHdpbmRvdy5sb2NhdGlvbi5ocmVmIDogJydcbiAgfTtcbiAgc2NydWIoZGF0YSwgb3B0aW9ucyk7XG4gIGxvZ2dlci5hZGRFdmVudCgnbHIuY29yZS5FeGNlcHRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlRXhjZXB0aW9uKGxvZ2dlciwgZXhjZXB0aW9uKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgdmFyIHByZXBwZWRUcmFjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgdHJhY2UgPSBwcmVwcGVkVHJhY2UgfHwgX1RyYWNlS2l0LmRlZmF1bHQuY29tcHV0ZVN0YWNrVHJhY2UoZXhjZXB0aW9uKTtcblxuICB2YXIgZGF0YSA9IHtcbiAgICBleGNlcHRpb25UeXBlOiAnV0lORE9XJyxcbiAgICBlcnJvclR5cGU6IHRyYWNlLm5hbWUsXG4gICAgbWVzc2FnZTogdHJhY2UubWVzc2FnZSxcbiAgICBicm93c2VySHJlZjogd2luZG93LmxvY2F0aW9uID8gd2luZG93LmxvY2F0aW9uLmhyZWYgOiAnJ1xuICB9O1xuICBzY3J1YihkYXRhLCBvcHRpb25zKTtcbiAgdmFyIGFkZEV2ZW50T3B0aW9ucyA9IHtcbiAgICBfc3RhY2tUcmFjZTogKDAsIF9zdGFja1RyYWNlRnJvbUVycm9yLmRlZmF1bHQpKHRyYWNlKVxuICB9O1xuICBsb2dnZXIuYWRkRXZlbnQoJ2xyLmNvcmUuRXhjZXB0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9LCBhZGRFdmVudE9wdGlvbnMpO1xufVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC9leGNlcHRpb25zL3NyYy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWdpc3RlckV4Y2VwdGlvbnNcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3JlZ2lzdGVyRXhjZXB0aW9ucy5kZWZhdWx0O1xuICB9XG59KTtcbmV4cG9ydHMuQ2FwdHVyZSA9IHZvaWQgMDtcblxudmFyIF9yZWdpc3RlckV4Y2VwdGlvbnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmVnaXN0ZXJFeGNlcHRpb25zICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL3JlZ2lzdGVyRXhjZXB0aW9ucy5qc1wiKSk7XG5cbnZhciBDYXB0dXJlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9DYXB0dXJlICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL0NhcHR1cmUuanNcIikpO1xuXG5leHBvcnRzLkNhcHR1cmUgPSBDYXB0dXJlO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvcmF2ZW4vcmF2ZW4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC9leGNlcHRpb25zL3NyYy9yYXZlbi9yYXZlbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpKTtcblxudmFyIF9UcmFjZUtpdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC91dGlscy9zcmMvVHJhY2VLaXQgKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL1RyYWNlS2l0LmpzXCIpKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLypcblNvbWUgY29udGVudHMgb2YgdGhpcyBmaWxlIHdlcmUgb3JpZ2luYWx5IGZyb20gcmF2ZW4tanMsIEJTRC0yIENsYXVzZVxuXG5Db3B5cmlnaHQgKGMpIDIwMTggU2VudHJ5IChodHRwczovL3NlbnRyeS5pbykgYW5kIGluZGl2aWR1YWwgY29udHJpYnV0b3JzLlxuQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuXG4qIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLlxuXG5USElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIEhPTERFUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHdoYXQpIHtcbiAgcmV0dXJuIHdoYXQgPT09IHZvaWQgMDtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbih3aGF0KSB7XG4gIHJldHVybiB0eXBlb2Ygd2hhdCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZWFjaChvYmosIGNhbGxiYWNrKSB7XG4gIHZhciBpLCBqO1xuXG4gIGlmIChpc1VuZGVmaW5lZChvYmoubGVuZ3RoKSkge1xuICAgIGZvciAoaSBpbiBvYmopIHtcbiAgICAgIGlmIChoYXNLZXkob2JqLCBpKSkge1xuICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGksIG9ialtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGogPSBvYmoubGVuZ3RoO1xuXG4gICAgaWYgKGopIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbChudWxsLCBpLCBvYmpbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBoYXNLZXksIGEgYmV0dGVyIGZvcm0gb2YgaGFzT3duUHJvcGVydHlcbiAqIEV4YW1wbGU6IGhhc0tleShNYWluSG9zdE9iamVjdCwgcHJvcGVydHkpID09PSB0cnVlL2ZhbHNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhvc3Qgb2JqZWN0IHRvIGNoZWNrIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIGNoZWNrXG4gKi9cblxuXG5mdW5jdGlvbiBoYXNLZXkob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdFByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cbi8qKlxuICogUG9seWZpbGwgYSBtZXRob2RcbiAqIEBwYXJhbSBvYmogb2JqZWN0IGUuZy4gYGRvY3VtZW50YFxuICogQHBhcmFtIG5hbWUgbWV0aG9kIG5hbWUgcHJlc2VudCBvbiBvYmplY3QgZS5nLiBgYWRkRXZlbnRMaXN0ZW5lcmBcbiAqIEBwYXJhbSByZXBsYWNlbWVudCByZXBsYWNlbWVudCBmdW5jdGlvblxuICogQHBhcmFtIHRyYWNrIHtvcHRpb25hbH0gcmVjb3JkIGluc3RydW1lbnRhdGlvbiB0byBhbiBhcnJheVxuICovXG5cblxuZnVuY3Rpb24gZmlsbChvYmosIG5hbWUsIHJlcGxhY2VtZW50LCB0cmFjaykge1xuICB2YXIgb3JpZyA9IG9ialtuYW1lXTtcbiAgb2JqW25hbWVdID0gcmVwbGFjZW1lbnQob3JpZyk7XG5cbiAgaWYgKHRyYWNrKSB7XG4gICAgdHJhY2sucHVzaChbb2JqLCBuYW1lLCBvcmlnXSk7XG4gIH1cbn1cblxudmFyIF93aW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG52YXIgX2RvY3VtZW50ID0gX3dpbmRvdy5kb2N1bWVudDtcblxudmFyIEhhbmRsZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBIYW5kbGVyKF9yZWYpIHtcbiAgICB2YXIgY2FwdHVyZUV4Y2VwdGlvbiA9IF9yZWYuY2FwdHVyZUV4Y2VwdGlvbjtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBIYW5kbGVyKTtcbiAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSB0aGlzLl9lcnJvckhhbmRsZXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9pZ25vcmVPbkVycm9yID0gMDtcbiAgICB0aGlzLl93cmFwcGVkQnVpbHRJbnMgPSBbXTtcbiAgICB0aGlzLmNhcHR1cmVFeGNlcHRpb24gPSBjYXB0dXJlRXhjZXB0aW9uO1xuXG4gICAgX1RyYWNlS2l0LmRlZmF1bHQucmVwb3J0LnN1YnNjcmliZSh0aGlzLl9lcnJvckhhbmRsZXIpO1xuXG4gICAgdGhpcy5faW5zdHJ1bWVudFRyeUNhdGNoKCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMi5kZWZhdWx0KShIYW5kbGVyLCBbe1xuICAgIGtleTogXCJ1bmluc3RhbGxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5pbnN0YWxsKCkge1xuICAgICAgX1RyYWNlS2l0LmRlZmF1bHQucmVwb3J0LnVuc3Vic2NyaWJlKHRoaXMuX2Vycm9ySGFuZGxlcik7IC8vIHJlc3RvcmUgYW55IHdyYXBwZWQgYnVpbHRpbnNcblxuXG4gICAgICB2YXIgYnVpbHRpbjtcblxuICAgICAgd2hpbGUgKHRoaXMuX3dyYXBwZWRCdWlsdElucy5sZW5ndGgpIHtcbiAgICAgICAgYnVpbHRpbiA9IHRoaXMuX3dyYXBwZWRCdWlsdElucy5zaGlmdCgpO1xuICAgICAgICB2YXIgb2JqID0gYnVpbHRpblswXSxcbiAgICAgICAgICAgIG5hbWUgPSBidWlsdGluWzFdLFxuICAgICAgICAgICAgb3JpZyA9IGJ1aWx0aW5bMl07XG4gICAgICAgIG9ialtuYW1lXSA9IG9yaWc7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9lcnJvckhhbmRsZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2Vycm9ySGFuZGxlcihyZXBvcnQpIHtcbiAgICAgIGlmICghdGhpcy5faWdub3JlT25FcnJvcikge1xuICAgICAgICB0aGlzLmNhcHR1cmVFeGNlcHRpb24ocmVwb3J0KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2lnbm9yZU5leHRPbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pZ25vcmVOZXh0T25FcnJvcigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2lnbm9yZU9uRXJyb3IgKz0gMTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBvbmVycm9yIHNob3VsZCB0cmlnZ2VyIGJlZm9yZSBzZXRUaW1lb3V0XG4gICAgICAgIF90aGlzLl9pZ25vcmVPbkVycm9yIC09IDE7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBXcmFwIGNvZGUgd2l0aGluIGEgY29udGV4dCBzbyBIYW5kbGVyIGNhbiBjYXB0dXJlIGVycm9yc1xuICAgICAqIHJlbGlhYmx5IGFjcm9zcyBkb21haW5zIHRoYXQgaXMgZXhlY3V0ZWQgaW1tZWRpYXRlbHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBIHNwZWNpZmljIHNldCBvZiBvcHRpb25zIGZvciB0aGlzIGNvbnRleHQgW29wdGlvbmFsXVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGNhbGxiYWNrIHRvIGJlIGltbWVkaWF0ZWx5IGV4ZWN1dGVkIHdpdGhpbiB0aGUgY29udGV4dFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGFyZ3MgQW4gYXJyYXkgb2YgYXJndW1lbnRzIHRvIGJlIGNhbGxlZCB3aXRoIHRoZSBjYWxsYmFjayBbb3B0aW9uYWxdXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRleHQob3B0aW9ucywgZnVuYywgYXJncykge1xuICAgICAgaWYgKGlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgYXJncyA9IGZ1bmMgfHwgW107XG4gICAgICAgIGZ1bmMgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy53cmFwKG9wdGlvbnMsIGZ1bmMpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ3cmFwXCIsXG4gICAgdmFsdWU6XG4gICAgLypcbiAgICAgKiBXcmFwIGNvZGUgd2l0aGluIGEgY29udGV4dCBhbmQgcmV0dXJucyBiYWNrIGEgbmV3IGZ1bmN0aW9uIHRvIGJlIGV4ZWN1dGVkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBBIHNwZWNpZmljIHNldCBvZiBvcHRpb25zIGZvciB0aGlzIGNvbnRleHQgW29wdGlvbmFsXVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJlIHdyYXBwZWQgaW4gYSBuZXcgY29udGV4dFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgQSBmdW5jdGlvbiB0byBjYWxsIGJlZm9yZSB0aGUgdHJ5L2NhdGNoIHdyYXBwZXIgW29wdGlvbmFsLCBwcml2YXRlXVxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgbmV3bHkgd3JhcHBlZCBmdW5jdGlvbnMgd2l0aCBhIGNvbnRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwKG9wdGlvbnMsIGZ1bmMsIF9iZWZvcmUpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpczsgLy8gMSBhcmd1bWVudCBoYXMgYmVlbiBwYXNzZWQsIGFuZCBpdCdzIG5vdCBhIGZ1bmN0aW9uXG4gICAgICAvLyBzbyBqdXN0IHJldHVybiBpdFxuXG4gICAgICBpZiAoaXNVbmRlZmluZWQoZnVuYykgJiYgIWlzRnVuY3Rpb24ob3B0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgICB9IC8vIG9wdGlvbnMgaXMgb3B0aW9uYWxcblxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihvcHRpb25zKSkge1xuICAgICAgICBmdW5jID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH0gLy8gQXQgdGhpcyBwb2ludCwgd2UndmUgcGFzc2VkIGFsb25nIDIgYXJndW1lbnRzLCBhbmQgdGhlIHNlY29uZCBvbmVcbiAgICAgIC8vIGlzIG5vdCBhIGZ1bmN0aW9uIGVpdGhlciwgc28gd2UnbGwganVzdCByZXR1cm4gdGhlIHNlY29uZCBhcmd1bWVudC5cblxuXG4gICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICB9IC8vIFdlIGRvbid0IHdhbm5hIHdyYXAgaXQgdHdpY2UhXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGZ1bmMuX19scl9fKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICAgIH0gLy8gSWYgdGhpcyBoYXMgYWxyZWFkeSBiZWVuIHdyYXBwZWQgaW4gdGhlIHBhc3QsIHJldHVybiB0aGF0XG5cblxuICAgICAgICBpZiAoZnVuYy5fX2xyX3dyYXBwZXJfXykge1xuICAgICAgICAgIHJldHVybiBmdW5jLl9fbHJfd3JhcHBlcl9fO1xuICAgICAgICB9IC8vIElmIGZ1bmMgaXMgbm90IGV4dGVuc2libGUsIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgdG8gcHJldmVudCBUeXBlRXJyb3JzXG4gICAgICAgIC8vIHdoZW4gdHJ5aW5nIHRvIGFkZCBuZXcgcHJvcHMgJiB0byBhc3N1cmUgaW1tdXRhYmxlIGZ1bmNzIGFyZW4ndCBjaGFuZ2VkXG5cblxuICAgICAgICBpZiAoIU9iamVjdC5pc0V4dGVuc2libGUoZnVuYykpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBKdXN0IGFjY2Vzc2luZyBjdXN0b20gcHJvcHMgaW4gc29tZSBTZWxlbml1bSBlbnZpcm9ubWVudHNcbiAgICAgICAgLy8gY2FuIGNhdXNlIGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGV4Y2VwdGlvbiAoc2VlIGxyLWpzIzQ5NSkuXG4gICAgICAgIC8vIEJhaWwgb24gd3JhcHBpbmcgYW5kIHJldHVybiB0aGUgZnVuY3Rpb24gYXMtaXMgKGRlZmVycyB0byB3aW5kb3cub25lcnJvcikuXG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVkKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgaSA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBkZWVwID0gIW9wdGlvbnMgfHwgb3B0aW9ucyAmJiBvcHRpb25zLmRlZXAgIT09IGZhbHNlO1xuXG4gICAgICAgIGlmIChfYmVmb3JlICYmIGlzRnVuY3Rpb24oX2JlZm9yZSkpIHtcbiAgICAgICAgICBfYmVmb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0gLy8gUmVjdXJzaXZlbHkgd3JhcCBhbGwgb2YgYSBmdW5jdGlvbidzIGFyZ3VtZW50cyB0aGF0IGFyZVxuICAgICAgICAvLyBmdW5jdGlvbnMgdGhlbXNlbHZlcy5cblxuXG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICBhcmdzW2ldID0gZGVlcCA/IHNlbGYud3JhcChvcHRpb25zLCBhcmd1bWVudHNbaV0pIDogYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdHRlbXB0IHRvIGludm9rZSB1c2VyLWxhbmQgZnVuY3Rpb24uIFRoaXMgaXMgcGFydCBvZiB0aGUgTG9nUm9ja2V0IFNESy5cbiAgICAgICAgICAvLyBJZiB5b3UncmUgc2VlaW5nIHRoaXMgZnJhbWUgaW4gYSBzdGFjayB0cmFjZSwgaXQgbWVhbnMgdGhhdCBMb2dSb2NrZXQgY2F1Z2h0XG4gICAgICAgICAgLy8gYW4gdW5oYW5kbGVkIGVycm9yIHRocm93biBieSB5b3VyIGFwcGxpY2F0aW9uIGNvZGUsIHJlcG9ydGVkIGl0LCB0aGVuIGJ1YmJsZWRcbiAgICAgICAgICAvLyBpdCB1cC4gVGhpcyBpcyBleHBlY3RlZCBiZWhhdmlvciBhbmQgaXMgbm90IGEgYnVnIHdpdGggTG9nUm9ja2V0LlxuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgc2VsZi5faWdub3JlTmV4dE9uRXJyb3IoKTtcblxuICAgICAgICAgIHNlbGYuY2FwdHVyZUV4Y2VwdGlvbihfVHJhY2VLaXQuZGVmYXVsdC5jb21wdXRlU3RhY2tUcmFjZShlKSwgb3B0aW9ucyk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBjb3B5IG92ZXIgcHJvcGVydGllcyBvZiB0aGUgb2xkIGZ1bmN0aW9uXG5cblxuICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZnVuYykge1xuICAgICAgICBpZiAoaGFzS2V5KGZ1bmMsIHByb3BlcnR5KSkge1xuICAgICAgICAgIHdyYXBwZWRbcHJvcGVydHldID0gZnVuY1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgd3JhcHBlZC5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTtcbiAgICAgIGZ1bmMuX19scl93cmFwcGVyX18gPSB3cmFwcGVkOyAvLyBTaWduYWwgdGhhdCB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIHdyYXBwZWQgYWxyZWFkeVxuICAgICAgLy8gZm9yIGJvdGggZGVidWdnaW5nIGFuZCB0byBwcmV2ZW50IGl0IHRvIGJlaW5nIHdyYXBwZWQgdHdpY2VcblxuICAgICAgd3JhcHBlZC5fX2xyX18gPSB0cnVlO1xuICAgICAgd3JhcHBlZC5fX2lubmVyX18gPSBmdW5jO1xuICAgICAgcmV0dXJuIHdyYXBwZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9pbnN0cnVtZW50VHJ5Q2F0Y2hcIixcbiAgICB2YWx1ZTpcbiAgICAvKipcbiAgICAgKiBJbnN0YWxsIGFueSBxdWV1ZWQgcGx1Z2luc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIF9pbnN0cnVtZW50VHJ5Q2F0Y2goKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgd3JhcHBlZEJ1aWx0SW5zID0gc2VsZi5fd3JhcHBlZEJ1aWx0SW5zO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwVGltZUZuKG9yaWcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdCkge1xuICAgICAgICAgIC8vIHByZXNlcnZlIGFyaXR5XG4gICAgICAgICAgLy8gTWFrZSBhIGNvcHkgb2YgdGhlIGFyZ3VtZW50cyB0byBwcmV2ZW50IGRlb3B0aW1pemF0aW9uXG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZC93aWtpL09wdGltaXphdGlvbi1raWxsZXJzIzMyLWxlYWtpbmctYXJndW1lbnRzXG4gICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG9yaWdpbmFsQ2FsbGJhY2sgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3JpZ2luYWxDYWxsYmFjaykpIHtcbiAgICAgICAgICAgIGFyZ3NbMF0gPSBzZWxmLndyYXAob3JpZ2luYWxDYWxsYmFjayk7XG4gICAgICAgICAgfSAvLyBJRSA8IDkgZG9lc24ndCBzdXBwb3J0IC5jYWxsLy5hcHBseSBvbiBzZXRJbnRlcnZhbC9zZXRUaW1lb3V0LCBidXQgaXRcbiAgICAgICAgICAvLyBhbHNvIHN1cHBvcnRzIG9ubHkgdHdvIGFyZ3VtZW50cyBhbmQgZG9lc24ndCBjYXJlIHdoYXQgdGhpcyBpcywgc28gd2VcbiAgICAgICAgICAvLyBjYW4ganVzdCBjYWxsIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBkaXJlY3RseS5cblxuXG4gICAgICAgICAgaWYgKG9yaWcuYXBwbHkpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZyhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBFdmVudFRhcmdldChnbG9iYWwpIHtcbiAgICAgICAgdmFyIHByb3RvID0gX3dpbmRvd1tnbG9iYWxdICYmIF93aW5kb3dbZ2xvYmFsXS5wcm90b3R5cGU7XG5cbiAgICAgICAgaWYgKHByb3RvICYmIHByb3RvLmhhc093blByb3BlcnR5ICYmIHByb3RvLmhhc093blByb3BlcnR5KCdhZGRFdmVudExpc3RlbmVyJykpIHtcbiAgICAgICAgICBmaWxsKHByb3RvLCAnYWRkRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2dE5hbWUsIGZuLCBjYXB0dXJlLCBzZWN1cmUpIHtcbiAgICAgICAgICAgICAgLy8gcHJlc2VydmUgYXJpdHlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoZm4gJiYgZm4uaGFuZGxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGZuLmhhbmRsZUV2ZW50ID0gc2VsZi53cmFwKGZuLmhhbmRsZUV2ZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikgey8vIGNhbiBzb21ldGltZXMgZ2V0ICdQZXJtaXNzaW9uIGRlbmllZCB0byBhY2Nlc3MgcHJvcGVydHkgXCJoYW5kbGUgRXZlbnQnXG4gICAgICAgICAgICAgIH0gLy8gTW9yZSBicmVhZGNydW1iIERPTSBjYXB0dXJlIC4uLiBkb25lIGhlcmUgYW5kIG5vdCBpbiBgX2luc3RydW1lbnRCcmVhZGNydW1ic2BcbiAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBkb24ndCBoYXZlIG1vcmUgdGhhbiBvbmUgd3JhcHBlciBmdW5jdGlvblxuXG5cbiAgICAgICAgICAgICAgdmFyIGJlZm9yZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9yaWcuY2FsbCh0aGlzLCBldnROYW1lLCBzZWxmLndyYXAoZm4sIHVuZGVmaW5lZCwgYmVmb3JlKSwgY2FwdHVyZSwgc2VjdXJlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSwgd3JhcHBlZEJ1aWx0SW5zKTtcbiAgICAgICAgICBmaWxsKHByb3RvLCAncmVtb3ZlRXZlbnRMaXN0ZW5lcicsIGZ1bmN0aW9uIChvcmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2dCwgZm4sIGNhcHR1cmUsIHNlY3VyZSkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZuID0gZm4gJiYgKGZuLl9fbHJfd3JhcHBlcl9fID8gZm4uX19scl93cmFwcGVyX18gOiBmbik7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsvLyBpZ25vcmUsIGFjY2Vzc2luZyBfX2xyX3dyYXBwZXJfXyB3aWxsIHRocm93IGluIHNvbWUgU2VsZW5pdW0gZW52aXJvbm1lbnRzXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIGV2dCwgZm4sIGNhcHR1cmUsIHNlY3VyZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sIHdyYXBwZWRCdWlsdElucyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmlsbChfd2luZG93LCAnc2V0VGltZW91dCcsIHdyYXBUaW1lRm4sIHdyYXBwZWRCdWlsdElucyk7XG4gICAgICBmaWxsKF93aW5kb3csICdzZXRJbnRlcnZhbCcsIHdyYXBUaW1lRm4sIHdyYXBwZWRCdWlsdElucyk7XG5cbiAgICAgIGlmIChfd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICBmaWxsKF93aW5kb3csICdyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnLCBmdW5jdGlvbiAob3JpZykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnKHNlbGYud3JhcChjYikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sIHdyYXBwZWRCdWlsdElucyk7XG4gICAgICB9IC8vIGV2ZW50IHRhcmdldHMgYm9ycm93ZWQgZnJvbSBidWdzbmFnLWpzOlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2J1Z3NuYWcvYnVnc25hZy1qcy9ibG9iL21hc3Rlci9zcmMvYnVnc25hZy5qcyNMNjY2XG5cblxuICAgICAgdmFyIGV2ZW50VGFyZ2V0cyA9IFsnRXZlbnRUYXJnZXQnLCAnV2luZG93JywgJ05vZGUnLCAnQXBwbGljYXRpb25DYWNoZScsICdBdWRpb1RyYWNrTGlzdCcsICdDaGFubmVsTWVyZ2VyTm9kZScsICdDcnlwdG9PcGVyYXRpb24nLCAnRXZlbnRTb3VyY2UnLCAnRmlsZVJlYWRlcicsICdIVE1MVW5rbm93bkVsZW1lbnQnLCAnSURCRGF0YWJhc2UnLCAnSURCUmVxdWVzdCcsICdJREJUcmFuc2FjdGlvbicsICdLZXlPcGVyYXRpb24nLCAnTWVkaWFDb250cm9sbGVyJywgJ01lc3NhZ2VQb3J0JywgJ01vZGFsV2luZG93JywgJ05vdGlmaWNhdGlvbicsICdTVkdFbGVtZW50SW5zdGFuY2UnLCAnU2NyZWVuJywgJ1RleHRUcmFjaycsICdUZXh0VHJhY2tDdWUnLCAnVGV4dFRyYWNrTGlzdCcsICdXZWJTb2NrZXQnLCAnV2ViU29ja2V0V29ya2VyJywgJ1dvcmtlcicsICdYTUxIdHRwUmVxdWVzdCcsICdYTUxIdHRwUmVxdWVzdEV2ZW50VGFyZ2V0JywgJ1hNTEh0dHBSZXF1ZXN0VXBsb2FkJ107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRUYXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdyYXBFdmVudFRhcmdldChldmVudFRhcmdldHNbaV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgJCA9IF93aW5kb3cualF1ZXJ5IHx8IF93aW5kb3cuJDtcblxuICAgICAgaWYgKCQgJiYgJC5mbiAmJiAkLmZuLnJlYWR5KSB7XG4gICAgICAgIGZpbGwoJC5mbiwgJ3JlYWR5JywgZnVuY3Rpb24gKG9yaWcpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZy5jYWxsKHRoaXMsIHNlbGYud3JhcChmbikpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0sIHdyYXBwZWRCdWlsdElucyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBIYW5kbGVyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBIYW5kbGVyO1xuO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvcmVnaXN0ZXJFeGNlcHRpb25zLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL3JlZ2lzdGVyRXhjZXB0aW9ucy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZC5qc1wiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdCAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVnaXN0ZXJDb3JlO1xuXG52YXIgX3JhdmVuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JhdmVuL3JhdmVuICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL3JhdmVuL3JhdmVuLmpzXCIpKTtcblxudmFyIENhcHR1cmUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NhcHR1cmUgKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvZXhjZXB0aW9ucy9zcmMvQ2FwdHVyZS5qc1wiKSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyQ29yZShsb2dnZXIpIHtcbiAgdmFyIHJhdmVuID0gbmV3IF9yYXZlbi5kZWZhdWx0KHtcbiAgICBjYXB0dXJlRXhjZXB0aW9uOiBmdW5jdGlvbiBjYXB0dXJlRXhjZXB0aW9uKGVycm9yUmVwb3J0KSB7XG4gICAgICBDYXB0dXJlLmNhcHR1cmVFeGNlcHRpb24obG9nZ2VyLCBudWxsLCBudWxsLCBlcnJvclJlcG9ydCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcmVqZWN0aW9uSGFuZGxlciA9IGZ1bmN0aW9uIHJlamVjdGlvbkhhbmRsZXIoZXZ0KSB7XG4gICAgLy8gaHR0cDovLzJhbGl0eS5jb20vMjAxNi8wNC91bmhhbmRsZWQtcmVqZWN0aW9ucy5odG1sXG4gICAgbG9nZ2VyLmFkZEV2ZW50KCdsci5jb3JlLkV4Y2VwdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4Y2VwdGlvblR5cGU6ICdVTkhBTkRMRURfUkVKRUNUSU9OJyxcbiAgICAgICAgbWVzc2FnZTogZXZ0LnJlYXNvbiB8fCAnVW5oYW5kbGVkIFByb21pc2UgcmVqZWN0aW9uJ1xuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndW5oYW5kbGVkcmVqZWN0aW9uJywgcmVqZWN0aW9uSGFuZGxlcik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHJlamVjdGlvbkhhbmRsZXIpO1xuICAgIHJhdmVuLnVuaW5zdGFsbCgpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL3N0YWNrVHJhY2VGcm9tRXJyb3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL3N0YWNrVHJhY2VGcm9tRXJyb3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YWNrVHJhY2VGcm9tRXJyb3I7XG5cbmZ1bmN0aW9uIHN0YWNrVHJhY2VGcm9tRXJyb3IoZXJyb3JSZXBvcnQpIHtcbiAgZnVuY3Rpb24gbWFrZU5vdE51bGwodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHZhbDtcbiAgfVxuXG4gIHJldHVybiBlcnJvclJlcG9ydC5zdGFjayA/IGVycm9yUmVwb3J0LnN0YWNrLm1hcChmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZU51bWJlcjogbWFrZU5vdE51bGwoZnJhbWUubGluZSksXG4gICAgICBjb2x1bW5OdW1iZXI6IG1ha2VOb3ROdWxsKGZyYW1lLmNvbHVtbiksXG4gICAgICBmaWxlTmFtZTogbWFrZU5vdE51bGwoZnJhbWUudXJsKSxcbiAgICAgIGZ1bmN0aW9uTmFtZTogbWFrZU5vdE51bGwoZnJhbWUuZnVuYylcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9uZXR3b3JrL3NyYy9mZXRjaEludGVyY2VwdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL2ZldGNoSW50ZXJjZXB0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheS5qc1wiKSk7XG5cbnZhciBfcmVnaXN0ZXJYSFIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZ2lzdGVyWEhSICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL3JlZ2lzdGVyWEhSLmpzXCIpO1xuXG52YXIgaW50ZXJjZXB0b3JzID0gW107XG5cbmZ1bmN0aW9uIG1ha2VJbnRlcmNlcHRvcihmZXRjaCwgZmV0Y2hJZCkge1xuICB2YXIgcmV2ZXJzZWRJbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRvcnMucmVkdWNlKGZ1bmN0aW9uIChhcnJheSwgaW50ZXJjZXB0b3IpIHtcbiAgICByZXR1cm4gW2ludGVyY2VwdG9yXS5jb25jYXQoYXJyYXkpO1xuICB9LCBbXSk7IC8vIGlmIGEgYnJvd3NlciBzdXBwb3J0cyBmZXRjaCwgaXQgc3VwcG9ydHMgcHJvbWlzZVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSwgX2tleSA9IDI7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAyXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGFyZ3MpOyAvLyBSZWdpc3RlciByZXF1ZXN0IGludGVyY2VwdG9yc1xuXG4gIHJldmVyc2VkSW50ZXJjZXB0b3JzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgcmVxdWVzdCA9IF9yZWYucmVxdWVzdCxcbiAgICAgICAgcmVxdWVzdEVycm9yID0gX3JlZi5yZXF1ZXN0RXJyb3I7XG5cbiAgICBpZiAocmVxdWVzdCB8fCByZXF1ZXN0RXJyb3IpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3QuYXBwbHkodm9pZCAwLCBbZmV0Y2hJZF0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyLmRlZmF1bHQpKGFyZ3MpKSk7XG4gICAgICB9LCBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICByZXR1cm4gcmVxdWVzdEVycm9yLmFwcGx5KHZvaWQgMCwgW2ZldGNoSWRdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShhcmdzKSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbiAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoYXJncykge1xuICAgICgwLCBfcmVnaXN0ZXJYSFIuc2V0QWN0aXZlKShmYWxzZSk7XG4gICAgdmFyIHJlcztcbiAgICB2YXIgZXJyO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlcyA9IGZldGNoLmFwcGx5KHZvaWQgMCwgKDAsIF90b0NvbnN1bWFibGVBcnJheTIuZGVmYXVsdCkoYXJncykpO1xuICAgIH0gY2F0Y2ggKF9lcnIpIHtcbiAgICAgIGVyciA9IF9lcnI7XG4gICAgfVxuXG4gICAgKDAsIF9yZWdpc3RlclhIUi5zZXRBY3RpdmUpKHRydWUpO1xuXG4gICAgaWYgKGVycikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH0pO1xuICByZXZlcnNlZEludGVyY2VwdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciByZXNwb25zZSA9IF9yZWYyLnJlc3BvbnNlLFxuICAgICAgICByZXNwb25zZUVycm9yID0gX3JlZjIucmVzcG9uc2VFcnJvcjtcblxuICAgIGlmIChyZXNwb25zZSB8fCByZXNwb25zZUVycm9yKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlKGZldGNoSWQsIHJlcyk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZUVycm9yICYmIHJlc3BvbnNlRXJyb3IoZmV0Y2hJZCwgZXJyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goZW52KSB7XG4gIGlmICghZW52LmZldGNoIHx8ICFlbnYuUHJvbWlzZSkge1xuICAgIC8vIE1ha2Ugc3VyZSBmZXRjaCBpcyBhdmFpbGFibGUgaW4gdGhlIGdpdmVuIGVudmlyb25tZW50LiBJZiBpdCdzIG5vdCwgdGhlblxuICAgIC8vIGRlZmF1bHQgdG8gdXNpbmcgWEhSIGludGVyY2VwdC5cbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgaXNQb2x5ZmlsbCA9IGVudi5mZXRjaC5wb2x5ZmlsbDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgZW52LmZldGNoID0gZnVuY3Rpb24gKGZldGNoKSB7XG4gICAgdmFyIGZldGNoSWQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFrZUludGVyY2VwdG9yLmFwcGx5KHZvaWQgMCwgW2ZldGNoLCBmZXRjaElkKytdLmNvbmNhdChhcmdzKSk7XG4gICAgfTtcbiAgfShlbnYuZmV0Y2gpOyAvLyBGb3J3YXJkIHRoZSBwb2x5ZmlsbCBwcm9wZXJseSBmcm9tIGZldGNoIChzZXQgYnkgZ2l0aHViL3doYXR3Zy1mZXRjaCkuXG5cblxuICBpZiAoaXNQb2x5ZmlsbCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGVudi5mZXRjaC5wb2x5ZmlsbCA9IGlzUG9seWZpbGw7XG4gIH1cbn0gLy8gVE9ETzogUmVhY3QgTmF0aXZlXG4vLyAgIGF0dGFjaChnbG9iYWwpO1xuXG5cbnZhciBkaWRBdHRhY2ggPSBmYWxzZTtcbnZhciBfZGVmYXVsdCA9IHtcbiAgcmVnaXN0ZXI6IGZ1bmN0aW9uIHJlZ2lzdGVyKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKCFkaWRBdHRhY2gpIHtcbiAgICAgIGRpZEF0dGFjaCA9IHRydWU7XG4gICAgICBhdHRhY2god2luZG93KTtcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRvcnMucHVzaChpbnRlcmNlcHRvcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpbmRleCA9IGludGVyY2VwdG9ycy5pbmRleE9mKGludGVyY2VwdG9yKTtcblxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgaW50ZXJjZXB0b3JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGludGVyY2VwdG9ycyA9IFtdO1xuICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvbmV0d29yay9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlZ2lzdGVyTmV0d29yaztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzXCIpKTtcblxudmFyIF90eXBlb2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3R5cGVvZiAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzXCIpKTtcblxudmFyIF9yZWdpc3RlckZldGNoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZ2lzdGVyRmV0Y2ggKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvbmV0d29yay9zcmMvcmVnaXN0ZXJGZXRjaC5qc1wiKSk7XG5cbnZhciBfcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24gKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvbmV0d29yay9zcmMvcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24uanNcIikpO1xuXG52YXIgX3JlZ2lzdGVyWEhSID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3JlZ2lzdGVyWEhSICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL3JlZ2lzdGVyWEhSLmpzXCIpKTtcblxudmFyIF9tYXBWYWx1ZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvdXRpbHMvc3JjL21hcFZhbHVlcyAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvbWFwVmFsdWVzLmpzXCIpKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbmZ1bmN0aW9uIHJlZ2lzdGVyTmV0d29yayhsb2dnZXIpIHtcbiAgdmFyIGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgIGlzUmVhY3ROYXRpdmU6IGZhbHNlXG4gIH07XG4gIHZhciBpc1JlYWN0TmF0aXZlID0gY29uZmlnLmlzUmVhY3ROYXRpdmUsXG4gICAgICBzaG91bGRBdWdtZW50TlBTID0gY29uZmlnLnNob3VsZEF1Z21lbnROUFMsXG4gICAgICBzaG91bGRQYXJzZVhIUkJsb2IgPSBjb25maWcuc2hvdWxkUGFyc2VYSFJCbG9iO1xuICB2YXIgaWdub3JlZE5ldHdvcmsgPSB7fTsgLy8gdHJ1bmNhdGUgaWYgPiA0TUIgaW4gc2l6ZVxuXG4gIHZhciB0cnVuY2F0ZSA9IGZ1bmN0aW9uIHRydW5jYXRlKGRhdGEpIHtcbiAgICB2YXIgbGltaXQgPSAxMDI0ICogMTAwMCAqIDQ7XG4gICAgdmFyIHN0ciA9IGRhdGE7XG5cbiAgICBpZiAoKDAsIF90eXBlb2YyLmRlZmF1bHQpKGRhdGEpID09PSAnb2JqZWN0JyAmJiBkYXRhICE9IG51bGwpIHtcbiAgICAgIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihkYXRhKTtcblxuICAgICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlIHx8IHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIC8vIHBsYWluIG9iamVjdCAtIGpzb25pZnkgZm9yIHRoZSBzaXplIGNoZWNrXG4gICAgICAgIHN0ciA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdHIgJiYgc3RyLmxlbmd0aCAmJiBzdHIubGVuZ3RoID4gbGltaXQgJiYgdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBiZWdpbm5pbmcgPSBzdHIuc3Vic3RyaW5nKDAsIDEwMDApO1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGJlZ2lubmluZywgXCIgLi4uIExvZ1JvY2tldCB0cnVuY2F0aW5nIHRvIGZpcnN0IDEwMDAgY2hhcmFjdGVycy5cXG4gICAgICBLZWVwIGRhdGEgdW5kZXIgNE1CIHRvIHByZXZlbnQgdHJ1bmNhdGlvbi4gaHR0cHM6Ly9kb2NzLmxvZ3JvY2tldC5jb20vcmVmZXJlbmNlI25ldHdvcmtcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgdmFyIGFkZFJlcXVlc3QgPSBmdW5jdGlvbiBhZGRSZXF1ZXN0KHJlcUlkLCByZXF1ZXN0KSB7XG4gICAgdmFyIG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxvZ2dlci5hZGRFdmVudCgnbHIubmV0d29yay5SZXF1ZXN0RXZlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgX3JlZiRpc0VuYWJsZWQgPSBfcmVmLmlzRW5hYmxlZCxcbiAgICAgICAgICBpc0VuYWJsZWQgPSBfcmVmJGlzRW5hYmxlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkaXNFbmFibGVkLFxuICAgICAgICAgIF9yZWYkcmVxdWVzdFNhbml0aXplciA9IF9yZWYucmVxdWVzdFNhbml0aXplcixcbiAgICAgICAgICByZXF1ZXN0U2FuaXRpemVyID0gX3JlZiRyZXF1ZXN0U2FuaXRpemVyID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0gOiBfcmVmJHJlcXVlc3RTYW5pdGl6ZXI7XG5cbiAgICAgIGlmICghaXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2FuaXRpemVkID0gbnVsbDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuICAgICAgICBzYW5pdGl6ZWQgPSByZXF1ZXN0U2FuaXRpemVyKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmVxdWVzdCksIHt9LCB7XG4gICAgICAgICAgcmVxSWQ6IHJlcUlkXG4gICAgICAgIH0pKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzYW5pdGl6ZWQpIHtcbiAgICAgICAgdmFyIHVybCA9IHNhbml0aXplZC51cmw7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBXcml0aW5nIGFuZCB0aGVuIHJlYWRpbmcgZnJvbSBhbiBhIHRhZyB0dXJucyBhIHJlbGF0aXZlXG4gICAgICAgICAgLy8gdXJsIGludG8gYW4gYWJzb2x1dGUgb25lLlxuICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIGEuaHJlZiA9IHNhbml0aXplZC51cmw7XG4gICAgICAgICAgdXJsID0gYS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXFJZDogcmVxSWQsXG4gICAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIC8vIHNhbml0aXplZFxuICAgICAgICAgIGhlYWRlcnM6ICgwLCBfbWFwVmFsdWVzLmRlZmF1bHQpKHNhbml0aXplZC5oZWFkZXJzLCBmdW5jdGlvbiAoaGVhZGVyVmFsdWUpIHtcbiAgICAgICAgICAgIC8vIHNhbml0aXplZFxuICAgICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGhlYWRlclZhbHVlKTtcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBib2R5OiB0cnVuY2F0ZShzYW5pdGl6ZWQuYm9keSksXG4gICAgICAgICAgLy8gc2FuaXRpemVkXG4gICAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICAgIHJlZmVycmVyOiBzYW5pdGl6ZWQucmVmZXJyZXIgfHwgdW5kZWZpbmVkLFxuICAgICAgICAgIC8vIHNhbml0aXplZFxuICAgICAgICAgIG1vZGU6IHNhbml0aXplZC5tb2RlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBzYW5pdGl6ZWRcbiAgICAgICAgICBjcmVkZW50aWFsczogc2FuaXRpemVkLmNyZWRlbnRpYWxzIHx8IHVuZGVmaW5lZCAvLyBzYW5pdGl6ZWRcblxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZ25vcmVkTmV0d29ya1tyZXFJZF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGFkZFJlc3BvbnNlID0gZnVuY3Rpb24gYWRkUmVzcG9uc2UocmVxSWQsIHJlc3BvbnNlKSB7XG4gICAgdmFyIG1ldGhvZCA9IHJlc3BvbnNlLm1ldGhvZCxcbiAgICAgICAgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzO1xuICAgIGxvZ2dlci5hZGRFdmVudCgnbHIubmV0d29yay5SZXNwb25zZUV2ZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgICAgICBfcmVmMiRpc0VuYWJsZWQgPSBfcmVmMi5pc0VuYWJsZWQsXG4gICAgICAgICAgaXNFbmFibGVkID0gX3JlZjIkaXNFbmFibGVkID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkaXNFbmFibGVkLFxuICAgICAgICAgIF9yZWYyJHJlc3BvbnNlU2FuaXRpeiA9IF9yZWYyLnJlc3BvbnNlU2FuaXRpemVyLFxuICAgICAgICAgIHJlc3BvbnNlU2FuaXRpemVyID0gX3JlZjIkcmVzcG9uc2VTYW5pdGl6ID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZjtcbiAgICAgIH0gOiBfcmVmMiRyZXNwb25zZVNhbml0aXo7XG5cbiAgICAgIGlmICghaXNFbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSBlbHNlIGlmIChpZ25vcmVkTmV0d29ya1tyZXFJZF0pIHtcbiAgICAgICAgZGVsZXRlIGlnbm9yZWROZXR3b3JrW3JlcUlkXTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBzYW5pdGl6ZWQgPSBudWxsO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBvbmx5IHRyeSBjYXRjaCB1c2VyIGRlZmluZWQgZnVuY3Rpb25zXG4gICAgICAgIHNhbml0aXplZCA9IHJlc3BvbnNlU2FuaXRpemVyKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcmVzcG9uc2UpLCB7fSwge1xuICAgICAgICAgIHJlcUlkOiByZXFJZFxuICAgICAgICB9KSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOyAvLyBmYWxsIHRocm91Z2ggdG8gcmVkYWN0ZWQgbG9nXG4gICAgICB9XG5cbiAgICAgIGlmIChzYW5pdGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXFJZDogcmVxSWQsXG4gICAgICAgICAgLy8gZGVmYXVsdFxuICAgICAgICAgIHN0YXR1czogc2FuaXRpemVkLnN0YXR1cyxcbiAgICAgICAgICAvLyBzYW5pdGl6ZWRcbiAgICAgICAgICBoZWFkZXJzOiAoMCwgX21hcFZhbHVlcy5kZWZhdWx0KShzYW5pdGl6ZWQuaGVhZGVycywgZnVuY3Rpb24gKGhlYWRlclZhbHVlKSB7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZWRcbiAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChoZWFkZXJWYWx1ZSk7XG4gICAgICAgICAgfSksXG4gICAgICAgICAgYm9keTogdHJ1bmNhdGUoc2FuaXRpemVkLmJvZHkpLFxuICAgICAgICAgIC8vIHNhbml0aXplZFxuICAgICAgICAgIG1ldGhvZDogbWV0aG9kIC8vIGRlZmF1bHRcblxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXFJZDogcmVxSWQsXG4gICAgICAgIC8vIGRlZmF1bHRcbiAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgIC8vIGRlZmF1bHRcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgIC8vIHJlZGFjdGVkXG4gICAgICAgIGJvZHk6IG51bGwsXG4gICAgICAgIC8vIHJlZGFjdGVkXG4gICAgICAgIG1ldGhvZDogbWV0aG9kIC8vIGRlZmF1bHRcblxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgaXNJZ25vcmVkID0gZnVuY3Rpb24gaXNJZ25vcmVkKHJlcUlkKSB7XG4gICAgcmV0dXJuIGxvZ2dlci5pc0Rpc2FibGVkIHx8IGlnbm9yZWROZXR3b3JrW3JlcUlkXSA9PT0gdHJ1ZTtcbiAgfTtcblxuICB2YXIgdW5zdWJGZXRjaCA9ICgwLCBfcmVnaXN0ZXJGZXRjaC5kZWZhdWx0KSh7XG4gICAgYWRkUmVxdWVzdDogYWRkUmVxdWVzdCxcbiAgICBhZGRSZXNwb25zZTogYWRkUmVzcG9uc2UsXG4gICAgaXNJZ25vcmVkOiBpc0lnbm9yZWRcbiAgfSk7XG4gIHZhciB1bnN1YlhIUiA9ICgwLCBfcmVnaXN0ZXJYSFIuZGVmYXVsdCkoe1xuICAgIGFkZFJlcXVlc3Q6IGFkZFJlcXVlc3QsXG4gICAgYWRkUmVzcG9uc2U6IGFkZFJlc3BvbnNlLFxuICAgIGlzSWdub3JlZDogaXNJZ25vcmVkLFxuICAgIGxvZ2dlcjogbG9nZ2VyLFxuICAgIHNob3VsZEF1Z21lbnROUFM6IHNob3VsZEF1Z21lbnROUFMsXG4gICAgc2hvdWxkUGFyc2VYSFJCbG9iOiBzaG91bGRQYXJzZVhIUkJsb2JcbiAgfSk7XG4gIHZhciB1bnN1Yk5ldHdvcmtJbmZvcm1hdGlvbiA9IGlzUmVhY3ROYXRpdmUgPyBmdW5jdGlvbiAoKSB7fSA6ICgwLCBfcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24uZGVmYXVsdCkobG9nZ2VyKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB1bnN1Yk5ldHdvcmtJbmZvcm1hdGlvbigpO1xuICAgIHVuc3ViRmV0Y2goKTtcbiAgICB1bnN1YlhIUigpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL3JlZ2lzdGVyRmV0Y2guanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL3JlZ2lzdGVyRmV0Y2guanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdCAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0LmpzXCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVnaXN0ZXJGZXRjaDtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzXCIpKTtcblxudmFyIF9tYXBWYWx1ZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvdXRpbHMvc3JjL21hcFZhbHVlcyAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvbWFwVmFsdWVzLmpzXCIpKTtcblxudmFyIF9mZXRjaEludGVyY2VwdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9mZXRjaEludGVyY2VwdCAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9uZXR3b3JrL3NyYy9mZXRjaEludGVyY2VwdC5qc1wiKSk7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIG1ha2VPYmplY3RGcm9tSGVhZGVycyhoZWFkZXJzKSB7XG4gIC8vIElmIHVzaW5nIHJlYWwgZmV0Y2gsIHdlIG11c3Qgc3RyaW5naWZ5IHRoZSBIZWFkZXJzIG9iamVjdC5cbiAgaWYgKGhlYWRlcnMgPT0gbnVsbCB8fCB0eXBlb2YgaGVhZGVycy5mb3JFYWNoICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge307XG4gIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgIGlmIChyZXN1bHRba2V5XSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBcIlwiLmNvbmNhdChyZXN1bHRba2V5XSwgXCIsXCIpLmNvbmNhdCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gXCJcIi5jb25jYXQodmFsdWUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59IC8vIFhIUiBzcGVjaWZpY2F0aW9uIGlzIHVuY2xlYXIgb2Ygd2hhdCB0eXBlcyB0byBhbGxvdyBpbiB2YWx1ZSBzbyB1c2luZyB0b1N0cmluZyBtZXRob2QgZm9yIG5vd1xuXG5cbnZhciBzdHJpbmdpZnlIZWFkZXJzID0gZnVuY3Rpb24gc3RyaW5naWZ5SGVhZGVycyhoZWFkZXJzKSB7XG4gIHJldHVybiAoMCwgX21hcFZhbHVlcy5kZWZhdWx0KShtYWtlT2JqZWN0RnJvbUhlYWRlcnMoaGVhZGVycyksIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdCh2YWx1ZSk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gcGx1Y2tGZXRjaEZpZWxkcygpIHtcbiAgdmFyIGFyZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHJldHVybiB7XG4gICAgdXJsOiBhcmcudXJsLFxuICAgIGhlYWRlcnM6IHN0cmluZ2lmeUhlYWRlcnMoYXJnLmhlYWRlcnMpLFxuICAgIG1ldGhvZDogYXJnLm1ldGhvZCAmJiBhcmcubWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgcmVmZXJyZXI6IGFyZy5yZWZlcnJlciB8fCB1bmRlZmluZWQsXG4gICAgbW9kZTogYXJnLm1vZGUgfHwgdW5kZWZpbmVkLFxuICAgIGNyZWRlbnRpYWxzOiBhcmcuY3JlZGVudGlhbHMgfHwgdW5kZWZpbmVkXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRmV0Y2goX3JlZikge1xuICB2YXIgYWRkUmVxdWVzdCA9IF9yZWYuYWRkUmVxdWVzdCxcbiAgICAgIGFkZFJlc3BvbnNlID0gX3JlZi5hZGRSZXNwb25zZSxcbiAgICAgIGlzSWdub3JlZCA9IF9yZWYuaXNJZ25vcmVkO1xuICB2YXIgTE9HUk9DS0VUX0ZFVENIX0xBQkVMID0gJ2ZldGNoLSc7XG4gIHZhciBmZXRjaE1ldGhvZE1hcCA9IHt9O1xuXG4gIHZhciB1bnJlZ2lzdGVyID0gX2ZldGNoSW50ZXJjZXB0LmRlZmF1bHQucmVnaXN0ZXIoe1xuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIHJlcXVlc3QoZmV0Y2hJZCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIHA7XG5cbiAgICAgIGlmICh0eXBlb2YgUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgYXJnc1swXSBpbnN0YW5jZW9mIFJlcXVlc3QpIHtcbiAgICAgICAgdmFyIGNsb25lZFRleHQ7IC8vIFJlcXVlc3QuY2xvbmUoKSBhbmQgUmVxdWVzdC50ZXh0KCkgbWF5IHRocm93IGluIFNhZmFyaSAoZS5nLiwgd2hlblxuICAgICAgICAvLyByZXF1ZXN0IGJvZHkgY29udGFpbnMgRm9ybURhdGEpXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9uZWRUZXh0ID0gYXJnc1swXS5jbG9uZSgpLnRleHQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gaWYgYSBicm93c2VyIHN1cHBvcnRzIGZldGNoLCBpdCBzdXBwb3J0cyBwcm9taXNlXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcbiAgICAgICAgICBjbG9uZWRUZXh0ID0gUHJvbWlzZS5yZXNvbHZlKFwiTG9nUm9ja2V0IGZldGNoIGVycm9yOiBcIi5jb25jYXQoZXJyLm1lc3NhZ2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHAgPSBjbG9uZWRUZXh0LnRoZW4oZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBwbHVja0ZldGNoRmllbGRzKGFyZ3NbMF0pKSwge30sIHtcbiAgICAgICAgICAgIGJvZHk6IGJvZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBsdWNrRmV0Y2hGaWVsZHMoYXJnc1swXSkpLCB7fSwge1xuICAgICAgICAgICAgYm9keTogXCJMb2dSb2NrZXQgZmV0Y2ggZXJyb3I6IFwiLmNvbmNhdChlcnIubWVzc2FnZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBhIGJyb3dzZXIgc3VwcG9ydHMgZmV0Y2gsIGl0IHN1cHBvcnRzIHByb21pc2VcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcbiAgICAgICAgcCA9IFByb21pc2UucmVzb2x2ZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHBsdWNrRmV0Y2hGaWVsZHMoYXJnc1sxXSkpLCB7fSwge1xuICAgICAgICAgIHVybDogXCJcIi5jb25jYXQoYXJnc1swXSksXG4gICAgICAgICAgYm9keTogKGFyZ3NbMV0gfHwge30pLmJvZHlcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uIChyZXEpIHtcbiAgICAgICAgZmV0Y2hNZXRob2RNYXBbZmV0Y2hJZF0gPSByZXEubWV0aG9kO1xuICAgICAgICBhZGRSZXF1ZXN0KFwiXCIuY29uY2F0KExPR1JPQ0tFVF9GRVRDSF9MQUJFTCkuY29uY2F0KGZldGNoSWQpLCByZXEpO1xuICAgICAgICByZXR1cm4gYXJncztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVxdWVzdEVycm9yOiBmdW5jdGlvbiByZXF1ZXN0RXJyb3IoZmV0Y2hJZCwgZXJyb3IpIHtcbiAgICAgIC8vIGlmIGEgYnJvd3NlciBzdXBwb3J0cyBmZXRjaCwgaXQgc3VwcG9ydHMgcHJvbWlzZVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBhdC9jb21wYXRcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfSxcbiAgICByZXNwb25zZTogZnVuY3Rpb24gcmVzcG9uc2UoZmV0Y2hJZCwgX3Jlc3BvbnNlKSB7XG4gICAgICB2YXIgcmVzcG9uc2VDbG9uZTtcbiAgICAgIHZhciByZXNwb25zZVRleHRQcm9taXNlO1xuXG4gICAgICBpZiAoaXNJZ25vcmVkKFwiXCIuY29uY2F0KExPR1JPQ0tFVF9GRVRDSF9MQUJFTCkuY29uY2F0KGZldGNoSWQpKSkge1xuICAgICAgICAvLyBEb24ndCBldmVuIHRyeSB0byByZWFkIGlnbm9yZWQgcmVxdWVzdHNcbiAgICAgICAgcmV0dXJuIF9yZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVE9ETzogZW5oYW5jZSBmdW5jdGlvbiBvbiBvcmlnaW5hbCByZXNwb25zZSBhbmQgZnV0dXJlIGNsb25lcyBmb3I6XG4gICAgICAgIC8vIHRleHQoKSwganNvbigpLCBibG9iKCksIGZvcm1kYXRhKCksIGFycmF5YnVmZmVyKClcbiAgICAgICAgcmVzcG9uc2VDbG9uZSA9IF9yZXNwb25zZS5jbG9uZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHNhZmFyaSBoYXMgYSBidWcgd2hlcmUgY2xvbmluZyBjYW4gZmFpbFxuICAgICAgICB2YXIgcmVzcG9uc2VIYXNoID0ge1xuICAgICAgICAgIHVybDogX3Jlc3BvbnNlLnVybCxcbiAgICAgICAgICBzdGF0dXM6IF9yZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgaGVhZGVyczogc3RyaW5naWZ5SGVhZGVycyhfcmVzcG9uc2UuaGVhZGVycyksXG4gICAgICAgICAgYm9keTogXCJMb2dSb2NrZXQgZmV0Y2ggZXJyb3I6IFwiLmNvbmNhdChlcnIubWVzc2FnZSksXG4gICAgICAgICAgbWV0aG9kOiBmZXRjaE1ldGhvZE1hcFtmZXRjaElkXVxuICAgICAgICB9O1xuICAgICAgICBkZWxldGUgZmV0Y2hNZXRob2RNYXBbZmV0Y2hJZF07XG4gICAgICAgIGFkZFJlc3BvbnNlKFwiXCIuY29uY2F0KExPR1JPQ0tFVF9GRVRDSF9MQUJFTCkuY29uY2F0KGZldGNoSWQpLCByZXNwb25zZUhhc2gpO1xuICAgICAgICByZXR1cm4gX3Jlc3BvbnNlO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAod2luZG93LlRleHREZWNvZGVyKSB7XG4gICAgICAgICAgLy8gdXNlIGEgcmVhZGVyIHRvIG1hbnVhbGx5IHJlYWQgdGhlIHJlc3BvbnNlIGJvZHkgcmF0aGVyIHRoYW4gY2FsbGluZyByZXNwb25zZS50ZXh0KClcbiAgICAgICAgICAvLyByZXNwb25zZS50ZXh0KCkgd2FzIHRpbWluZyBvdXQgZm9yIHNvbWUgcmVzcG9uc2VzLCBpbiBzb21lIGNhc2VzIGJlY2F1c2UgQXBvbGxvIHNlbmRzXG4gICAgICAgICAgLy8gICBhbiBhYm9ydCBzaWduYWwgb3IgYmVjYXVzZSB0aGUgc3RyZWFtIHdhc24ndCBnZXR0aW5nIHRlcm1pbmF0ZWQgY2xlYW5seVxuICAgICAgICAgIC8vIHVzaW5nIGEgcmVhZGVyIGFsbG93cyB1cyB0byBjYXB0dXJlIHdoYXQgd2UgY2FuIGZyb20gcmVzcG9uc2UgYm9kaWVzIGJlZm9yZSB0aGVcbiAgICAgICAgICAvLyAgIHJlc3BvbnNlIHJlY2VpdmVzIGFuIGFib3J0IHNpZ25hbFxuICAgICAgICAgIHZhciByZWFkZXIgPSByZXNwb25zZUNsb25lLmJvZHkuZ2V0UmVhZGVyKCk7IC8vIHJlc3BvbnNlIGJvZGllcyBhbHdheXMgZGVjb2RlIHdpdGggVVRGLThcbiAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVzcG9uc2UvdGV4dFxuXG4gICAgICAgICAgdmFyIHV0ZjhEZWNvZGVyID0gbmV3IHdpbmRvdy5UZXh0RGVjb2RlcigndXRmLTgnKTtcbiAgICAgICAgICB2YXIgYm9keUNvbnRlbnRzID0gJyc7XG4gICAgICAgICAgcmVzcG9uc2VUZXh0UHJvbWlzZSA9IHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiByZWFkUmVzcG9uc2VCb2R5KF9yZWYyKSB7XG4gICAgICAgICAgICB2YXIgZG9uZSA9IF9yZWYyLmRvbmUsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfcmVmMi52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJvZHlDb250ZW50cztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNodW5rID0gdmFsdWUgPyB1dGY4RGVjb2Rlci5kZWNvZGUodmFsdWUsIHtcbiAgICAgICAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICAgICAgICB9KSA6ICcnO1xuICAgICAgICAgICAgYm9keUNvbnRlbnRzICs9IGNodW5rO1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5yZWFkKCkudGhlbihyZWFkUmVzcG9uc2VCb2R5KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUZXh0RGVjb2RlciBkb2Vzbid0IGhhdmUgc3VwcG9ydCBhY3Jvc3MgYWxsIGJyb3dzZXJzIHRoYXQgTFIgc3VwcG9ydHMsIHNvIGlmIHRoZXJlJ3NcbiAgICAgICAgICAvLyAgbm8gVGV4dERlY29kZXIsIGZhbGwgYmFjayB0byB0aGUgb2xkIGFwcHJvYWNoXG4gICAgICAgICAgcmVzcG9uc2VUZXh0UHJvbWlzZSA9IHJlc3BvbnNlQ2xvbmUudGV4dCgpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuICAgICAgICByZXNwb25zZVRleHRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKFwiTG9nUm9ja2V0IGVycm9yIHJlYWRpbmcgYm9keTogXCIuY29uY2F0KGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgIH1cblxuICAgICAgcmVzcG9uc2VUZXh0UHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgLy8gZG9uJ3QgZHJvcCByZXF1ZXN0ICYgbG9nIHRvIGNvbnNvbGUgd2hlbiB0aGUgcmVxdWVzdCBpcyBhYm9ydGVkLFxuICAgICAgICAvLyBhcyBpdCBtYXkgaGF2ZSBhbHJlYWR5IGNvbXBsZXRlZFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTG9nUm9ja2V0L2xvZ3JvY2tldC9pc3N1ZXMvMzRcbiAgICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJyAmJiBlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBcIkxvZ1JvY2tldCBlcnJvciByZWFkaW5nIGJvZHk6IFwiLmNvbmNhdChlcnJvci5tZXNzYWdlKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdmFyIHJlc3BvbnNlSGFzaCA9IHtcbiAgICAgICAgICB1cmw6IF9yZXNwb25zZS51cmwsXG4gICAgICAgICAgc3RhdHVzOiBfcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnM6IHN0cmluZ2lmeUhlYWRlcnMoX3Jlc3BvbnNlLmhlYWRlcnMpLFxuICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgbWV0aG9kOiBmZXRjaE1ldGhvZE1hcFtmZXRjaElkXVxuICAgICAgICB9O1xuICAgICAgICBkZWxldGUgZmV0Y2hNZXRob2RNYXBbZmV0Y2hJZF07XG4gICAgICAgIGFkZFJlc3BvbnNlKFwiXCIuY29uY2F0KExPR1JPQ0tFVF9GRVRDSF9MQUJFTCkuY29uY2F0KGZldGNoSWQpLCByZXNwb25zZUhhc2gpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3Jlc3BvbnNlO1xuICAgIH0sXG4gICAgcmVzcG9uc2VFcnJvcjogZnVuY3Rpb24gcmVzcG9uc2VFcnJvcihmZXRjaElkLCBlcnJvcikge1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICB1cmw6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhdHVzOiAwLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgYm9keTogXCJcIi5jb25jYXQoZXJyb3IpXG4gICAgICB9O1xuICAgICAgYWRkUmVzcG9uc2UoXCJcIi5jb25jYXQoTE9HUk9DS0VUX0ZFVENIX0xBQkVMKS5jb25jYXQoZmV0Y2hJZCksIHJlc3BvbnNlKTsgLy8gaWYgYSBicm93c2VyIHN1cHBvcnRzIGZldGNoLCBpdCBzdXBwb3J0cyBwcm9taXNlXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGF0L2NvbXBhdFxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHVucmVnaXN0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvbmV0d29yay9zcmMvcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC9uZXR3b3JrL3NyYy9yZWdpc3Rlck5ldHdvcmtJbmZvcm1hdGlvbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlZ2lzdGVyTmV0d29ya0luZm9ybWF0aW9uO1xudmFyIEVGRkVDVElWRV9UWVBFX1ZBTFMgPSB7XG4gICdzbG93LTJnJzogJ1NMT1cyRycsXG4gICcyZyc6ICdUV09HJyxcbiAgJzNnJzogJ1RIUkVFRycsXG4gICc0Zyc6ICdGT1VSRydcbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyTmV0d29ya0luZm9ybWF0aW9uKGxvZ2dlcikge1xuICB2YXIgbGFzdFN0YXR1cyA9IHVuZGVmaW5lZDtcblxuICBmdW5jdGlvbiBzZW5kTmV0d29ya0luZm9ybWF0aW9uKCkge1xuICAgIHZhciBuZXdTdGF0dXMgPSB7XG4gICAgICBvbmxpbmU6IHdpbmRvdy5uYXZpZ2F0b3Iub25MaW5lLFxuICAgICAgZWZmZWN0aXZlVHlwZTogJ1VOS09XTidcbiAgICB9O1xuXG4gICAgaWYgKCF3aW5kb3cubmF2aWdhdG9yLm9uTGluZSkge1xuICAgICAgbmV3U3RhdHVzLmVmZmVjdGl2ZVR5cGUgPSAnTk9ORSc7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24gJiYgd2luZG93Lm5hdmlnYXRvci5jb25uZWN0aW9uLmVmZmVjdGl2ZVR5cGUpIHtcbiAgICAgIG5ld1N0YXR1cy5lZmZlY3RpdmVUeXBlID0gRUZGRUNUSVZFX1RZUEVfVkFMU1t3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24uZWZmZWN0aXZlVHlwZV0gfHwgJ1VOS05PV04nO1xuICAgIH1cblxuICAgIGlmIChsYXN0U3RhdHVzICYmIG5ld1N0YXR1cy5vbmxpbmUgPT09IGxhc3RTdGF0dXMub25saW5lICYmIG5ld1N0YXR1cy5lZmZlY3RpdmVUeXBlID09PSBsYXN0U3RhdHVzLmVmZmVjdGl2ZVR5cGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0U3RhdHVzID0gbmV3U3RhdHVzO1xuICAgIGxvZ2dlci5hZGRFdmVudCgnbHIubmV0d29yay5OZXR3b3JrU3RhdHVzRXZlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICAgICAgX3JlZiRpc0VuYWJsZWQgPSBfcmVmLmlzRW5hYmxlZCxcbiAgICAgICAgICBpc0VuYWJsZWQgPSBfcmVmJGlzRW5hYmxlZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYkaXNFbmFibGVkO1xuXG4gICAgICBpZiAoIWlzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1N0YXR1cztcbiAgICB9KTtcbiAgfVxuXG4gIHNldFRpbWVvdXQoc2VuZE5ldHdvcmtJbmZvcm1hdGlvbik7XG5cbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IuY29ubmVjdGlvbiAmJiB0eXBlb2Ygd2luZG93Lm5hdmlnYXRvci5jb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgc2VuZE5ldHdvcmtJbmZvcm1hdGlvbik7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgc2VuZE5ldHdvcmtJbmZvcm1hdGlvbik7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgc2VuZE5ldHdvcmtJbmZvcm1hdGlvbik7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBzZW5kTmV0d29ya0luZm9ybWF0aW9uKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgc2VuZE5ldHdvcmtJbmZvcm1hdGlvbik7XG5cbiAgICBpZiAod2luZG93Lm5hdmlnYXRvci5jb25uZWN0aW9uICYmIHR5cGVvZiB3aW5kb3cubmF2aWdhdG9yLmNvbm5lY3Rpb24ucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd2luZG93Lm5hdmlnYXRvci5jb25uZWN0aW9uLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHNlbmROZXR3b3JrSW5mb3JtYXRpb24pO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9uZXR3b3JrL3NyYy9yZWdpc3RlclhIUi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL3JlZ2lzdGVyWEhSLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnNldEFjdGl2ZSA9IHNldEFjdGl2ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHJlZ2lzdGVyWEhSO1xuXG52YXIgX21hcFZhbHVlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC91dGlscy9zcmMvbWFwVmFsdWVzICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3V0aWxzL3NyYy9tYXBWYWx1ZXMuanNcIikpO1xuXG52YXIgX2VuaGFuY2VGdW5jID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAbG9ncm9ja2V0L3V0aWxzL3NyYy9lbmhhbmNlRnVuYyAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvZW5oYW5jZUZ1bmMuanNcIikpO1xuXG52YXIgX3N0YXJ0c1dpdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvdXRpbHMvc3JjL3N0YXJ0c1dpdGggKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL3N0YXJ0c1dpdGguanNcIikpO1xuXG52YXIgX25wcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvdXRpbHMvc3JjL2NvbnN0YW50cy9ucHMgKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL2NvbnN0YW50cy9ucHMuanNcIik7XG5cbi8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG4vLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLWltcG9ydHNcbnZhciBpc0FjdGl2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZShzaG91bGRCZUFjdGl2ZSkge1xuICBpc0FjdGl2ZSA9IHNob3VsZEJlQWN0aXZlO1xufVxuXG52YXIgY3VycmVudFhIUklkID0gMDtcblxuZnVuY3Rpb24gcmVnaXN0ZXJYSFIoX3JlZikge1xuICB2YXIgYWRkUmVxdWVzdCA9IF9yZWYuYWRkUmVxdWVzdCxcbiAgICAgIGFkZFJlc3BvbnNlID0gX3JlZi5hZGRSZXNwb25zZSxcbiAgICAgIGlzSWdub3JlZCA9IF9yZWYuaXNJZ25vcmVkLFxuICAgICAgbG9nZ2VyID0gX3JlZi5sb2dnZXIsXG4gICAgICBfcmVmJHNob3VsZEF1Z21lbnROUFMgPSBfcmVmLnNob3VsZEF1Z21lbnROUFMsXG4gICAgICBzaG91bGRBdWdtZW50TlBTID0gX3JlZiRzaG91bGRBdWdtZW50TlBTID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiRzaG91bGRBdWdtZW50TlBTLFxuICAgICAgX3JlZiRzaG91bGRQYXJzZVhIUkJsID0gX3JlZi5zaG91bGRQYXJzZVhIUkJsb2IsXG4gICAgICBzaG91bGRQYXJzZVhIUkJsb2IgPSBfcmVmJHNob3VsZFBhcnNlWEhSQmwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRzaG91bGRQYXJzZVhIUkJsO1xuICB2YXIgX1hIUiA9IFhNTEh0dHBSZXF1ZXN0O1xuICB2YXIgeGhyTWFwID0gbmV3IFdlYWtNYXAoKTtcbiAgdmFyIHVuc3Vic2NyaWJlZEZyb21YaHIgPSBmYWxzZTtcbiAgdmFyIExPR1JPQ0tFVF9YSFJfTEFCRUwgPSAneGhyLSc7XG4gIHdpbmRvdy5fbHJYTUxIdHRwUmVxdWVzdCA9IFhNTEh0dHBSZXF1ZXN0OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmF0aXZlLXJlYXNzaWduXG5cbiAgWE1MSHR0cFJlcXVlc3QgPSBmdW5jdGlvbiBYTUxIdHRwUmVxdWVzdChtb3pBbm9uLCBtb3pTeXN0ZW0pIHtcbiAgICB2YXIgeGhyT2JqZWN0ID0gbmV3IF9YSFIobW96QW5vbiwgbW96U3lzdGVtKTtcblxuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiB4aHJPYmplY3Q7XG4gICAgfVxuXG4gICAgeGhyTWFwLnNldCh4aHJPYmplY3QsIHtcbiAgICAgIHhocklkOiArK2N1cnJlbnRYSFJJZCxcbiAgICAgIGhlYWRlcnM6IHt9XG4gICAgfSk7XG4gICAgdmFyIG9wZW5PcmlnaW5hbCA9IHhock9iamVjdC5vcGVuO1xuXG4gICAgZnVuY3Rpb24gb3BlblNoaW0oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHVybCA9IGFyZ3NbMV07XG5cbiAgICAgICAgaWYgKHdpbmRvdy5VUkwgJiYgdHlwZW9mIHdpbmRvdy5VUkwgPT09ICdmdW5jdGlvbicgJiYgdXJsLnNlYXJjaChfbnBzLldPT1RSSUNfUkVTUE9OU0VTX1JFR0VYKSA9PT0gMCkge1xuICAgICAgICAgIHZhciBsb2dyb2NrZXRTZXNzaW9uVVJMID0gbmV3IHdpbmRvdy5VUkwobG9nZ2VyLnJlY29yZGluZ1VSTCk7XG4gICAgICAgICAgbG9ncm9ja2V0U2Vzc2lvblVSTC5zZWFyY2hQYXJhbXMuc2V0KCducHMnLCAnd29vdHJpYycpO1xuICAgICAgICAgIHZhciB1cmxPYmogPSBuZXcgd2luZG93LlVSTCh1cmwpO1xuICAgICAgICAgIHZhciByZXNwb25zZVRleHQgPSB1cmxPYmouc2VhcmNoUGFyYW1zLmdldCgncmVzcG9uc2VbdGV4dF0nKTtcbiAgICAgICAgICB2YXIgZmVlZGJhY2sgPSByZXNwb25zZVRleHQgPyBcIlwiLmNvbmNhdChyZXNwb25zZVRleHQsIFwiXFxuXFxuXCIpIDogJyc7XG4gICAgICAgICAgdXJsT2JqLnNlYXJjaFBhcmFtcy5zZXQoJ3Jlc3BvbnNlW3RleHRdJywgXCJcIi5jb25jYXQoZmVlZGJhY2ssIFwiPFwiKS5jb25jYXQobG9ncm9ja2V0U2Vzc2lvblVSTC5ocmVmLCBcInxWaWV3IExvZ1JvY2tldCBzZXNzaW9uPlwiKSk7XG4gICAgICAgICAgYXJnc1sxXSA9IHVybE9iai5ocmVmOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogZG8gbm90aGluZyAqL1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3Blbk9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBzZW5kT3JpZ2luYWwgPSB4aHJPYmplY3Quc2VuZDtcblxuICAgIGZ1bmN0aW9uIHNlbmRTaGltKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGN1cnJlbnRYSFIgPSB4aHJNYXAuZ2V0KHhock9iamVjdCk7XG5cbiAgICAgICAgaWYgKHdpbmRvdy5VUkwgJiYgdHlwZW9mIHdpbmRvdy5VUkwgPT09ICdmdW5jdGlvbicgJiYgY3VycmVudFhIUiAmJiBjdXJyZW50WEhSLnVybCAmJiBjdXJyZW50WEhSLnVybC5zZWFyY2goX25wcy5ERUxJR0hURURfUkVTUE9OU0VTX1JFR0VYKSA9PT0gMCAmJiBhcmdzLmxlbmd0aCAmJiBhcmdzWzBdLmluZGV4T2YoX25wcy5ERUxJR0hURURfRkVFREJBQ0tfUFJFRklYKSAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkaW5nVVJMID0gbmV3IHdpbmRvdy5VUkwobG9nZ2VyLnJlY29yZGluZ1VSTCk7XG4gICAgICAgICAgcmVjb3JkaW5nVVJMLnNlYXJjaFBhcmFtcy5zZXQoJ25wcycsICdkZWxpZ2h0ZWQnKTtcbiAgICAgICAgICB2YXIgbG9ncm9ja2V0U2Vzc2lvblVSTCA9IGVuY29kZVVSSUNvbXBvbmVudChyZWNvcmRpbmdVUkwuaHJlZik7XG4gICAgICAgICAgdmFyIGRhdGEgPSBhcmdzWzBdLnNwbGl0KCcmJykubWFwKGZ1bmN0aW9uIChkYXRhU3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoKDAsIF9zdGFydHNXaXRoLmRlZmF1bHQpKGRhdGFTdHJpbmcsIF9ucHMuREVMSUdIVEVEX0ZFRURCQUNLX1BSRUZJWCkpIHtcbiAgICAgICAgICAgICAgdmFyIGlzRW1wdHkgPSBkYXRhU3RyaW5nID09PSBfbnBzLkRFTElHSFRFRF9GRUVEQkFDS19QUkVGSVg7XG4gICAgICAgICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChkYXRhU3RyaW5nKS5jb25jYXQoaXNFbXB0eSA/ICcnIDogJ1xcblxcbicsIFwiPFwiKS5jb25jYXQobG9ncm9ja2V0U2Vzc2lvblVSTCwgXCJ8VmlldyBMb2dSb2NrZXQgc2Vzc2lvbj5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRhU3RyaW5nO1xuICAgICAgICAgIH0pLmpvaW4oJyYnKTtcbiAgICAgICAgICBhcmdzWzBdID0gZGF0YTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGRvIG5vdGhpbmcgKi9cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlbmRPcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkQXVnbWVudE5QUykge1xuICAgICAgeGhyT2JqZWN0Lm9wZW4gPSBvcGVuU2hpbTtcbiAgICAgIHhock9iamVjdC5zZW5kID0gc2VuZFNoaW07XG4gICAgfSAvLyAuLi4sICdvcGVuJywgKG1ldGhvZCwgdXJsLCBhc3luYywgdXNlcm5hbWUsIHBhc3N3b3JkKSA9PiB7XG5cblxuICAgICgwLCBfZW5oYW5jZUZ1bmMuZGVmYXVsdCkoeGhyT2JqZWN0LCAnb3BlbicsIGZ1bmN0aW9uIChtZXRob2QsIHVybCkge1xuICAgICAgaWYgKHVuc3Vic2NyaWJlZEZyb21YaHIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFhIUiA9IHhock1hcC5nZXQoeGhyT2JqZWN0KTtcbiAgICAgIGN1cnJlbnRYSFIubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY3VycmVudFhIUi51cmwgPSB1cmw7XG4gICAgfSk7XG4gICAgKDAsIF9lbmhhbmNlRnVuYy5kZWZhdWx0KSh4aHJPYmplY3QsICdzZW5kJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZWRGcm9tWGhyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRYSFIgPSB4aHJNYXAuZ2V0KHhock9iamVjdCk7XG5cbiAgICAgIGlmICghY3VycmVudFhIUikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICB1cmw6IGN1cnJlbnRYSFIudXJsLFxuICAgICAgICBtZXRob2Q6IGN1cnJlbnRYSFIubWV0aG9kICYmIGN1cnJlbnRYSFIubWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICAgIGhlYWRlcnM6ICgwLCBfbWFwVmFsdWVzLmRlZmF1bHQpKGN1cnJlbnRYSFIuaGVhZGVycyB8fCB7fSwgZnVuY3Rpb24gKGhlYWRlclZhbHVlcykge1xuICAgICAgICAgIHJldHVybiBoZWFkZXJWYWx1ZXMuam9pbignLCAnKTtcbiAgICAgICAgfSksXG4gICAgICAgIGJvZHk6IGRhdGFcbiAgICAgIH07XG4gICAgICBhZGRSZXF1ZXN0KFwiXCIuY29uY2F0KExPR1JPQ0tFVF9YSFJfTEFCRUwpLmNvbmNhdChjdXJyZW50WEhSLnhocklkKSwgcmVxdWVzdCk7XG4gICAgfSk7XG4gICAgKDAsIF9lbmhhbmNlRnVuYy5kZWZhdWx0KSh4aHJPYmplY3QsICdzZXRSZXF1ZXN0SGVhZGVyJywgZnVuY3Rpb24gKGhlYWRlciwgdmFsdWUpIHtcbiAgICAgIGlmICh1bnN1YnNjcmliZWRGcm9tWGhyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRYSFIgPSB4aHJNYXAuZ2V0KHhock9iamVjdCk7XG5cbiAgICAgIGlmICghY3VycmVudFhIUikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN1cnJlbnRYSFIuaGVhZGVycyA9IGN1cnJlbnRYSFIuaGVhZGVycyB8fCB7fTtcbiAgICAgIGN1cnJlbnRYSFIuaGVhZGVyc1toZWFkZXJdID0gY3VycmVudFhIUi5oZWFkZXJzW2hlYWRlcl0gfHwgW107XG4gICAgICBjdXJyZW50WEhSLmhlYWRlcnNbaGVhZGVyXS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICB2YXIgeGhyTGlzdGVuZXJzID0ge1xuICAgICAgcmVhZHlzdGF0ZWNoYW5nZTogZnVuY3Rpb24gcmVhZHlzdGF0ZWNoYW5nZSgpIHtcbiAgICAgICAgaWYgKHVuc3Vic2NyaWJlZEZyb21YaHIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoeGhyT2JqZWN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICB2YXIgY3VycmVudFhIUiA9IHhock1hcC5nZXQoeGhyT2JqZWN0KTtcblxuICAgICAgICAgIGlmICghY3VycmVudFhIUikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gLy8gRG8gbm90IHJlYWQgaWdub3JlZCByZXF1ZXN0cyBhdCBhbGwuXG5cblxuICAgICAgICAgIGlmIChpc0lnbm9yZWQoXCJcIi5jb25jYXQoTE9HUk9DS0VUX1hIUl9MQUJFTCkuY29uY2F0KGN1cnJlbnRYSFIueGhySWQpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBoZWFkZXJTdHJpbmcgPSB4aHJPYmplY3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJyc7XG4gICAgICAgICAgdmFyIGhlYWRlcnMgPSBoZWFkZXJTdHJpbmcuc3BsaXQoL1tcXHJcXG5dKy8pLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gcHJldmlvdXM7XG4gICAgICAgICAgICB2YXIgaGVhZGVyUGFydHMgPSBjdXJyZW50LnNwbGl0KCc6ICcpO1xuXG4gICAgICAgICAgICBpZiAoaGVhZGVyUGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB2YXIga2V5ID0gaGVhZGVyUGFydHMuc2hpZnQoKTsgLy8gZmlyc3QgaW5kZXggb2YgdGhlIGFycmF5XG5cbiAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaGVhZGVyUGFydHMuam9pbignOiAnKTsgLy8gcmVzdCBvZiB0aGUgYXJyYXkgcmVwYWlyZWRcblxuICAgICAgICAgICAgICBpZiAocHJldmlvdXNba2V5XSkge1xuICAgICAgICAgICAgICAgIG5leHRba2V5XSArPSBcIiwgXCIuY29uY2F0KHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgdmFyIGJvZHk7IC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiB0cnlpbmcgdG8gYWNjZXNzIGxhcmdlIHJlc3BvbnNlc1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN3aXRjaCAoeGhyT2JqZWN0LnJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICAgICAgICBib2R5ID0gbG9nZ2VyLl9zaG91bGRDbG9uZVJlc3BvbnNlID8gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh4aHJPYmplY3QucmVzcG9uc2UpKSA6IHhock9iamVjdC5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlICdhcnJheWJ1ZmZlcic6XG4gICAgICAgICAgICAgIGNhc2UgJ2Jsb2InOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGJvZHkgPSB4aHJPYmplY3QucmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGJvZHkgPSB4aHJPYmplY3QucmVzcG9uc2VYTUw7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgIGNhc2UgJyc6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYm9keSA9IHhock9iamVjdC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBib2R5ID0gJyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgYm9keSA9ICdMb2dSb2NrZXQ6IEVycm9yIGFjY2Vzc2luZyByZXNwb25zZS4nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHVybDogY3VycmVudFhIUi51cmwsXG4gICAgICAgICAgICBzdGF0dXM6IHhock9iamVjdC5zdGF0dXMsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIG1ldGhvZDogKGN1cnJlbnRYSFIubWV0aG9kIHx8ICcnKS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChzaG91bGRQYXJzZVhIUkJsb2IgJiYgcmVzcG9uc2UuYm9keSBpbnN0YW5jZW9mIEJsb2IpIHtcbiAgICAgICAgICAgIHZhciBibG9iUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgIGJsb2JSZWFkZXIucmVhZEFzVGV4dChyZXNwb25zZS5ib2R5KTtcblxuICAgICAgICAgICAgYmxvYlJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IEpTT04ucGFyc2UoYmxvYlJlYWRlci5yZXN1bHQpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cblxuICAgICAgICAgICAgICBhZGRSZXNwb25zZShcIlwiLmNvbmNhdChMT0dST0NLRVRfWEhSX0xBQkVMKS5jb25jYXQoY3VycmVudFhIUi54aHJJZCksIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZFJlc3BvbnNlKFwiXCIuY29uY2F0KExPR1JPQ0tFVF9YSFJfTEFCRUwpLmNvbmNhdChjdXJyZW50WEhSLnhocklkKSwgcmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyAvLyBVbnVzZWQgRXZlbnQgTGlzdGVuZXJzXG4gICAgICAvLyBsb2Fkc3RhcnQ6ICgpID0+IHt9LFxuICAgICAgLy8gcHJvZ3Jlc3M6ICgpID0+IHt9LFxuICAgICAgLy8gYWJvcnQ6ICgpID0+IHt9LFxuICAgICAgLy8gZXJyb3I6ICgpID0+IHt9LFxuICAgICAgLy8gbG9hZDogKCkgPT4ge30sXG4gICAgICAvLyB0aW1lb3V0OiAoKSA9PiB7fSxcbiAgICAgIC8vIGxvYWRlbmQ6ICgpID0+IHt9LFxuXG4gICAgfTtcbiAgICBPYmplY3Qua2V5cyh4aHJMaXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgeGhyT2JqZWN0LmFkZEV2ZW50TGlzdGVuZXIoa2V5LCB4aHJMaXN0ZW5lcnNba2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHhock9iamVjdDtcbiAgfTsgLy8gdGhpcyBhbGxvd3MgXCJpbnN0YW5jZW9mIFhNTEh0dHBSZXF1ZXN0XCIgdG8gd29ya1xuXG5cbiAgWE1MSHR0cFJlcXVlc3QucHJvdG90eXBlID0gX1hIUi5wcm90b3R5cGU7IC8vIFBlcnNpc3QgdGhlIHN0YXRpYyB2YXJpYWJsZXMuXG5cbiAgWydVTlNFTlQnLCAnT1BFTkVEJywgJ0hFQURFUlNfUkVDRUlWRUQnLCAnTE9BRElORycsICdET05FJ10uZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgICBYTUxIdHRwUmVxdWVzdFt2YXJpYWJsZV0gPSBfWEhSW3ZhcmlhYmxlXTtcbiAgfSk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdW5zdWJzY3JpYmVkRnJvbVhociA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uYXRpdmUtcmVhc3NpZ25cblxuICAgIFhNTEh0dHBSZXF1ZXN0ID0gX1hIUjtcbiAgfTtcbn1cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25vdy9zcmMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25vdy9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogZXNsaW50LWRpc2FibGUgY29tcGF0L2NvbXBhdCAqL1xudmFyIGRhdGVOb3cgPSBEYXRlLm5vdy5iaW5kKERhdGUpO1xudmFyIGxvYWRUaW1lID0gZGF0ZU5vdygpO1xuXG52YXIgX2RlZmF1bHQgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRhdGVOb3coKSAtIGxvYWRUaW1lO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9jcmVhdGVFbmhhbmNlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC9yZWR1eC9zcmMvY3JlYXRlRW5oYW5jZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVFbmhhbmNlcjtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzXCIpKTtcblxudmFyIF9ub3cgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvbm93ICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25vdy9zcmMvaW5kZXguanNcIikpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgc3RvcmVJZENvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBjcmVhdGVFbmhhbmNlcihsb2dnZXIpIHtcbiAgdmFyIF9yZWYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZiRzdGF0ZVNhbml0aXplciA9IF9yZWYuc3RhdGVTYW5pdGl6ZXIsXG4gICAgICBzdGF0ZVNhbml0aXplciA9IF9yZWYkc3RhdGVTYW5pdGl6ZXIgPT09IHZvaWQgMCA/IGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIGY7XG4gIH0gOiBfcmVmJHN0YXRlU2FuaXRpemVyLFxuICAgICAgX3JlZiRhY3Rpb25TYW5pdGl6ZXIgPSBfcmVmLmFjdGlvblNhbml0aXplcixcbiAgICAgIGFjdGlvblNhbml0aXplciA9IF9yZWYkYWN0aW9uU2FuaXRpemVyID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmO1xuICB9IDogX3JlZiRhY3Rpb25TYW5pdGl6ZXI7XG5cbiAgLy8gYW4gZW5oYW5jZXIgaXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBTdG9yZVxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGVuaGFuY2VyKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZShyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGVuaGFuY2VyKTtcbiAgICAgIHZhciBvcmlnaW5hbERpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgICB2YXIgc3RvcmVJZCA9IHN0b3JlSWRDb3VudGVyKys7XG4gICAgICBsb2dnZXIuYWRkRXZlbnQoJ2xyLnJlZHV4LkluaXRpYWxTdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNhbml0aXplZFN0YXRlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuICAgICAgICAgIHNhbml0aXplZFN0YXRlID0gc3RhdGVTYW5pdGl6ZXIoc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdGF0ZTogc2FuaXRpemVkU3RhdGUsXG4gICAgICAgICAgc3RvcmVJZDogc3RvcmVJZFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBkaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgICAgICB2YXIgc3RhcnQgPSAoMCwgX25vdy5kZWZhdWx0KSgpO1xuICAgICAgICB2YXIgZXJyO1xuICAgICAgICB2YXIgcmVzO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gb3JpZ2luYWxEaXNwYXRjaChhY3Rpb24pO1xuICAgICAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgZXJyID0gX2VycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoMCwgX25vdy5kZWZhdWx0KSgpIC0gc3RhcnQ7XG4gICAgICAgICAgbG9nZ2VyLmFkZEV2ZW50KCdsci5yZWR1eC5SZWR1eEFjdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzYW5pdGl6ZWRTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc2FuaXRpemVkQWN0aW9uID0gbnVsbDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8gb25seSB0cnkgY2F0Y2ggdXNlciBkZWZpbmVkIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICBzYW5pdGl6ZWRTdGF0ZSA9IHN0YXRlU2FuaXRpemVyKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgICAgICAgICAgICBzYW5pdGl6ZWRBY3Rpb24gPSBhY3Rpb25TYW5pdGl6ZXIoYWN0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNhbml0aXplZFN0YXRlICYmIHNhbml0aXplZEFjdGlvbikge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0b3JlSWQ6IHN0b3JlSWQsXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBzYW5pdGl6ZWRBY3Rpb24sXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHN0YXRlRGVsdGE6IHNhbml0aXplZFN0YXRlXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzdG9yZSksIHt9LCB7XG4gICAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9yZWR1eC9zcmMvY3JlYXRlTWlkZGxld2FyZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9jcmVhdGVNaWRkbGV3YXJlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNaWRkbGV3YXJlO1xuXG52YXIgX25vdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC9ub3cgKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvbm93L3NyYy9pbmRleC5qc1wiKSk7XG5cbnZhciBzdG9yZUlkQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1pZGRsZXdhcmUobG9nZ2VyKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkc3RhdGVTYW5pdGl6ZXIgPSBfcmVmLnN0YXRlU2FuaXRpemVyLFxuICAgICAgc3RhdGVTYW5pdGl6ZXIgPSBfcmVmJHN0YXRlU2FuaXRpemVyID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoZikge1xuICAgIHJldHVybiBmO1xuICB9IDogX3JlZiRzdGF0ZVNhbml0aXplcixcbiAgICAgIF9yZWYkYWN0aW9uU2FuaXRpemVyID0gX3JlZi5hY3Rpb25TYW5pdGl6ZXIsXG4gICAgICBhY3Rpb25TYW5pdGl6ZXIgPSBfcmVmJGFjdGlvblNhbml0aXplciA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKGYpIHtcbiAgICByZXR1cm4gZjtcbiAgfSA6IF9yZWYkYWN0aW9uU2FuaXRpemVyO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoc3RvcmUpIHtcbiAgICB2YXIgc3RvcmVJZCA9IHN0b3JlSWRDb3VudGVyKys7XG4gICAgbG9nZ2VyLmFkZEV2ZW50KCdsci5yZWR1eC5Jbml0aWFsU3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2FuaXRpemVkU3RhdGU7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIG9ubHkgdHJ5IGNhdGNoIHVzZXIgZGVmaW5lZCBmdW5jdGlvbnNcbiAgICAgICAgc2FuaXRpemVkU3RhdGUgPSBzdGF0ZVNhbml0aXplcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVyci50b1N0cmluZygpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdGU6IHNhbml0aXplZFN0YXRlLFxuICAgICAgICBzdG9yZUlkOiBzdG9yZUlkXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gKDAsIF9ub3cuZGVmYXVsdCkoKTtcbiAgICAgICAgdmFyIGVycjtcbiAgICAgICAgdmFyIHJlcztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlcyA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgICAgIGVyciA9IF9lcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdmFyIGR1cmF0aW9uID0gKDAsIF9ub3cuZGVmYXVsdCkoKSAtIHN0YXJ0O1xuICAgICAgICAgIGxvZ2dlci5hZGRFdmVudCgnbHIucmVkdXguUmVkdXhBY3Rpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc2FuaXRpemVkU3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgdmFyIHNhbml0aXplZEFjdGlvbiA9IG51bGw7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIG9ubHkgdHJ5IGNhdGNoIHVzZXIgZGVmaW5lZCBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgc2FuaXRpemVkU3RhdGUgPSBzdGF0ZVNhbml0aXplcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICAgICAgICAgICAgc2FuaXRpemVkQWN0aW9uID0gYWN0aW9uU2FuaXRpemVyKGFjdGlvbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzYW5pdGl6ZWRTdGF0ZSAmJiBzYW5pdGl6ZWRBY3Rpb24pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdG9yZUlkOiBzdG9yZUlkLFxuICAgICAgICAgICAgICAgIGFjdGlvbjogc2FuaXRpemVkQWN0aW9uLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICBzdGF0ZURlbHRhOiBzYW5pdGl6ZWRTdGF0ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC9yZWR1eC9zcmMvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVFbmhhbmNlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfY3JlYXRlRW5oYW5jZXIuZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVNaWRkbGV3YXJlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9jcmVhdGVNaWRkbGV3YXJlLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUVuaGFuY2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NyZWF0ZUVuaGFuY2VyICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9jcmVhdGVFbmhhbmNlci5qc1wiKSk7XG5cbnZhciBfY3JlYXRlTWlkZGxld2FyZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jcmVhdGVNaWRkbGV3YXJlICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9jcmVhdGVNaWRkbGV3YXJlLmpzXCIpKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3V0aWxzL3NyYy9UcmFjZUtpdC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvVHJhY2VLaXQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKlxuIFRyYWNlS2l0IC0gQ3Jvc3MgYnJvd2VyIHN0YWNrIHRyYWNlcyAtIGdpdGh1Yi5jb20vb2NjL1RyYWNlS2l0XG5cbiBUaGlzIHdhcyBvcmlnaW5hbGx5IGZvcmtlZCBmcm9tIGdpdGh1Yi5jb20vb2NjL1RyYWNlS2l0LCBidXQgaGFzIHNpbmNlIGJlZW5cbiBsYXJnZWx5IHJlLXdyaXR0ZW4gYW5kIGlzIG5vdyBtYWludGFpbmVkIGFzIHBhcnQgb2YgcmF2ZW4tanMuICBUZXN0cyBmb3JcbiB0aGlzIGFyZSBpbiB0ZXN0L3ZlbmRvci5cblxuIE1JVCBsaWNlbnNlXG4qL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIFRyYWNlS2l0ID0ge1xuICBjb2xsZWN0V2luZG93RXJyb3JzOiB0cnVlLFxuICBkZWJ1ZzogZmFsc2Vcbn07IC8vIFRoaXMgaXMgdG8gYmUgZGVmZW5zaXZlIGluIGVudmlyb25tZW50cyB3aGVyZSB3aW5kb3cgZG9lcyBub3QgZXhpc3QgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JhdmVuLWpzL3B1bGwvNzg1KVxuXG52YXIgX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307IC8vIGdsb2JhbCByZWZlcmVuY2UgdG8gc2xpY2VcblxuXG52YXIgX3NsaWNlID0gW10uc2xpY2U7XG52YXIgVU5LTk9XTl9GVU5DVElPTiA9ICc/JzsgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjRXJyb3JfdHlwZXNcblxudmFyIEVSUk9SX1RZUEVTX1JFID0gL14oPzpVbmNhdWdodCAoPzpleGNlcHRpb246ICk/KT8oKD86RXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yKTogPyguKikkLztcblxuZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZG9jdW1lbnQubG9jYXRpb24gPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7XG4gIHJldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xufVxuLyoqXG4gKiBUcmFjZUtpdC5yZXBvcnQ6IGNyb3NzLWJyb3dzZXIgcHJvY2Vzc2luZyBvZiB1bmhhbmRsZWQgZXhjZXB0aW9uc1xuICpcbiAqIFN5bnRheDpcbiAqICAgVHJhY2VLaXQucmVwb3J0LnN1YnNjcmliZShmdW5jdGlvbihzdGFja0luZm8pIHsgLi4uIH0pXG4gKiAgIFRyYWNlS2l0LnJlcG9ydC51bnN1YnNjcmliZShmdW5jdGlvbihzdGFja0luZm8pIHsgLi4uIH0pXG4gKiAgIFRyYWNlS2l0LnJlcG9ydChleGNlcHRpb24pXG4gKiAgIHRyeSB7IC4uLmNvZGUuLi4gfSBjYXRjaChleCkgeyBUcmFjZUtpdC5yZXBvcnQoZXgpOyB9XG4gKlxuICogU3VwcG9ydHM6XG4gKiAgIC0gRmlyZWZveDogZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgbnVtYmVycywgcGx1cyBjb2x1bW4gbnVtYmVyXG4gKiAgICAgICAgICAgICAgb24gdG9wIGZyYW1lOyBjb2x1bW4gbnVtYmVyIGlzIG5vdCBndWFyYW50ZWVkXG4gKiAgIC0gT3BlcmE6ICAgZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzXG4gKiAgIC0gQ2hyb21lOiAgZnVsbCBzdGFjayB0cmFjZSB3aXRoIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzXG4gKiAgIC0gU2FmYXJpOiAgbGluZSBhbmQgY29sdW1uIG51bWJlciBmb3IgdGhlIHRvcCBmcmFtZSBvbmx5OyBzb21lIGZyYW1lc1xuICogICAgICAgICAgICAgIG1heSBiZSBtaXNzaW5nLCBhbmQgY29sdW1uIG51bWJlciBpcyBub3QgZ3VhcmFudGVlZFxuICogICAtIElFOiAgICAgIGxpbmUgYW5kIGNvbHVtbiBudW1iZXIgZm9yIHRoZSB0b3AgZnJhbWUgb25seTsgc29tZSBmcmFtZXNcbiAqICAgICAgICAgICAgICBtYXkgYmUgbWlzc2luZywgYW5kIGNvbHVtbiBudW1iZXIgaXMgbm90IGd1YXJhbnRlZWRcbiAqXG4gKiBJbiB0aGVvcnksIFRyYWNlS2l0IHNob3VsZCB3b3JrIG9uIGFsbCBvZiB0aGUgZm9sbG93aW5nIHZlcnNpb25zOlxuICogICAtIElFNS41KyAob25seSA4LjAgdGVzdGVkKVxuICogICAtIEZpcmVmb3ggMC45KyAob25seSAzLjUrIHRlc3RlZClcbiAqICAgLSBPcGVyYSA3KyAob25seSAxMC41MCB0ZXN0ZWQ7IHZlcnNpb25zIDkgYW5kIGVhcmxpZXIgbWF5IHJlcXVpcmVcbiAqICAgICBFeGNlcHRpb25zIEhhdmUgU3RhY2t0cmFjZSB0byBiZSBlbmFibGVkIGluIG9wZXJhOmNvbmZpZylcbiAqICAgLSBTYWZhcmkgMysgKG9ubHkgNCsgdGVzdGVkKVxuICogICAtIENocm9tZSAxKyAob25seSA1KyB0ZXN0ZWQpXG4gKiAgIC0gS29ucXVlcm9yIDMuNSsgKHVudGVzdGVkKVxuICpcbiAqIFJlcXVpcmVzIFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlLlxuICpcbiAqIFRyaWVzIHRvIGNhdGNoIGFsbCB1bmhhbmRsZWQgZXhjZXB0aW9ucyBhbmQgcmVwb3J0IHRoZW0gdG8gdGhlXG4gKiBzdWJzY3JpYmVkIGhhbmRsZXJzLiBQbGVhc2Ugbm90ZSB0aGF0IFRyYWNlS2l0LnJlcG9ydCB3aWxsIHJldGhyb3cgdGhlXG4gKiBleGNlcHRpb24uIFRoaXMgaXMgUkVRVUlSRUQgaW4gb3JkZXIgdG8gZ2V0IGEgdXNlZnVsIHN0YWNrIHRyYWNlIGluIElFLlxuICogSWYgdGhlIGV4Y2VwdGlvbiBkb2VzIG5vdCByZWFjaCB0aGUgdG9wIG9mIHRoZSBicm93c2VyLCB5b3Ugd2lsbCBvbmx5XG4gKiBnZXQgYSBzdGFjayB0cmFjZSBmcm9tIHRoZSBwb2ludCB3aGVyZSBUcmFjZUtpdC5yZXBvcnQgd2FzIGNhbGxlZC5cbiAqXG4gKiBIYW5kbGVycyByZWNlaXZlIGEgc3RhY2tJbmZvIG9iamVjdCBhcyBkZXNjcmliZWQgaW4gdGhlXG4gKiBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZSBkb2NzLlxuICovXG5cblxuVHJhY2VLaXQucmVwb3J0ID0gZnVuY3Rpb24gcmVwb3J0TW9kdWxlV3JhcHBlcigpIHtcbiAgdmFyIGhhbmRsZXJzID0gW10sXG4gICAgICBsYXN0QXJncyA9IG51bGwsXG4gICAgICBsYXN0RXhjZXB0aW9uID0gbnVsbCxcbiAgICAgIGxhc3RFeGNlcHRpb25TdGFjayA9IG51bGw7XG4gIC8qKlxuICAgKiBBZGQgYSBjcmFzaCBoYW5kbGVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShoYW5kbGVyKSB7XG4gICAgaW5zdGFsbEdsb2JhbEhhbmRsZXIoKTtcbiAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYSBjcmFzaCBoYW5kbGVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdW5zdWJzY3JpYmUoaGFuZGxlcikge1xuICAgIGZvciAodmFyIGkgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgaWYgKGhhbmRsZXJzW2ldID09PSBoYW5kbGVyKSB7XG4gICAgICAgIGhhbmRsZXJzLnNwbGljZShpLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgY3Jhc2ggaGFuZGxlcnMuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdW5zdWJzY3JpYmVBbGwoKSB7XG4gICAgdW5pbnN0YWxsR2xvYmFsSGFuZGxlcigpO1xuICAgIGhhbmRsZXJzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIERpc3BhdGNoIHN0YWNrIGluZm9ybWF0aW9uIHRvIGFsbCBoYW5kbGVycy5cbiAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywgKj59IHN0YWNrXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gbm90aWZ5SGFuZGxlcnMoc3RhY2ssIGlzV2luZG93RXJyb3IpIHtcbiAgICB2YXIgZXhjZXB0aW9uID0gbnVsbDtcblxuICAgIGlmIChpc1dpbmRvd0Vycm9yICYmICFUcmFjZUtpdC5jb2xsZWN0V2luZG93RXJyb3JzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhbmRsZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaGFuZGxlcnNbaV0uYXBwbHkobnVsbCwgW3N0YWNrXS5jb25jYXQoX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSkpO1xuICAgICAgICB9IGNhdGNoIChpbm5lcikge1xuICAgICAgICAgIGV4Y2VwdGlvbiA9IGlubmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGV4Y2VwdGlvbikge1xuICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfb2xkT25lcnJvckhhbmRsZXIsIF9vbkVycm9ySGFuZGxlckluc3RhbGxlZDtcbiAgLyoqXG4gICAqIEVuc3VyZXMgYWxsIGdsb2JhbCB1bmhhbmRsZWQgZXhjZXB0aW9ucyBhcmUgcmVjb3JkZWQuXG4gICAqIFN1cHBvcnRlZCBieSBHZWNrbyBhbmQgSUUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIG9mIHNjcmlwdCB0aGF0IGdlbmVyYXRlZCB0aGUgZXhjZXB0aW9uLlxuICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gbGluZU5vIFRoZSBsaW5lIG51bWJlciBhdCB3aGljaCB0aGUgZXJyb3JcbiAgICogb2NjdXJyZWQuXG4gICAqIEBwYXJhbSB7PyhudW1iZXJ8c3RyaW5nKX0gY29sTm8gVGhlIGNvbHVtbiBudW1iZXIgYXQgd2hpY2ggdGhlIGVycm9yXG4gICAqIG9jY3VycmVkLlxuICAgKiBAcGFyYW0gez9FcnJvcn0gZXggVGhlIGFjdHVhbCBFcnJvciBvYmplY3QuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdHJhY2VLaXRXaW5kb3dPbkVycm9yKG1lc3NhZ2UsIHVybCwgbGluZU5vLCBjb2xObywgZXgpIHtcbiAgICB2YXIgc3RhY2sgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RFeGNlcHRpb25TdGFjaykge1xuICAgICAgVHJhY2VLaXQuY29tcHV0ZVN0YWNrVHJhY2UuYXVnbWVudFN0YWNrVHJhY2VXaXRoSW5pdGlhbEVsZW1lbnQobGFzdEV4Y2VwdGlvblN0YWNrLCB1cmwsIGxpbmVObywgbWVzc2FnZSk7XG4gICAgICBwcm9jZXNzTGFzdEV4Y2VwdGlvbigpO1xuICAgIH0gZWxzZSBpZiAoZXgpIHtcbiAgICAgIC8vIE5ldyBjaHJvbWUgYW5kIGJsaW5rIHNlbmQgYWxvbmcgYSByZWFsIGVycm9yIG9iamVjdFxuICAgICAgLy8gTGV0J3MganVzdCByZXBvcnQgdGhhdCBsaWtlIGEgbm9ybWFsIGVycm9yLlxuICAgICAgLy8gU2VlOiBodHRwczovL21pa2V3ZXN0Lm9yZy8yMDEzLzA4L2RlYnVnZ2luZy1ydW50aW1lLWVycm9ycy13aXRoLXdpbmRvdy1vbmVycm9yXG4gICAgICBzdGFjayA9IFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlKGV4KTtcbiAgICAgIG5vdGlmeUhhbmRsZXJzKHN0YWNrLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0ge1xuICAgICAgICAndXJsJzogdXJsLFxuICAgICAgICAnbGluZSc6IGxpbmVObyxcbiAgICAgICAgJ2NvbHVtbic6IGNvbE5vXG4gICAgICB9O1xuICAgICAgdmFyIG5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICB2YXIgbXNnID0gbWVzc2FnZTsgLy8gbXVzdCBiZSBuZXcgdmFyIG9yIHdpbGwgbW9kaWZ5IG9yaWdpbmFsIGBhcmd1bWVudHNgXG5cbiAgICAgIHZhciBncm91cHM7XG5cbiAgICAgIGlmICh7fS50b1N0cmluZy5jYWxsKG1lc3NhZ2UpID09PSAnW29iamVjdCBTdHJpbmddJykge1xuICAgICAgICB2YXIgZ3JvdXBzID0gbWVzc2FnZS5tYXRjaChFUlJPUl9UWVBFU19SRSk7XG5cbiAgICAgICAgaWYgKGdyb3Vwcykge1xuICAgICAgICAgIG5hbWUgPSBncm91cHNbMV07XG4gICAgICAgICAgbXNnID0gZ3JvdXBzWzJdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uLmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuICAgICAgc3RhY2sgPSB7XG4gICAgICAgICduYW1lJzogbmFtZSxcbiAgICAgICAgJ21lc3NhZ2UnOiBtc2csXG4gICAgICAgICd1cmwnOiBnZXRMb2NhdGlvbkhyZWYoKSxcbiAgICAgICAgJ3N0YWNrJzogW2xvY2F0aW9uXVxuICAgICAgfTtcbiAgICAgIG5vdGlmeUhhbmRsZXJzKHN0YWNrLCB0cnVlKTtcbiAgICB9XG5cbiAgICBpZiAoX29sZE9uZXJyb3JIYW5kbGVyKSB7XG4gICAgICByZXR1cm4gX29sZE9uZXJyb3JIYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zdGFsbEdsb2JhbEhhbmRsZXIoKSB7XG4gICAgaWYgKF9vbkVycm9ySGFuZGxlckluc3RhbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF9vbGRPbmVycm9ySGFuZGxlciA9IF93aW5kb3cub25lcnJvcjtcbiAgICBfd2luZG93Lm9uZXJyb3IgPSB0cmFjZUtpdFdpbmRvd09uRXJyb3I7XG4gICAgX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuaW5zdGFsbEdsb2JhbEhhbmRsZXIoKSB7XG4gICAgaWYgKCFfb25FcnJvckhhbmRsZXJJbnN0YWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBfd2luZG93Lm9uZXJyb3IgPSBfb2xkT25lcnJvckhhbmRsZXI7XG4gICAgX29uRXJyb3JIYW5kbGVySW5zdGFsbGVkID0gZmFsc2U7XG4gICAgX29sZE9uZXJyb3JIYW5kbGVyID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0xhc3RFeGNlcHRpb24oKSB7XG4gICAgdmFyIF9sYXN0RXhjZXB0aW9uU3RhY2sgPSBsYXN0RXhjZXB0aW9uU3RhY2ssXG4gICAgICAgIF9sYXN0QXJncyA9IGxhc3RBcmdzO1xuICAgIGxhc3RBcmdzID0gbnVsbDtcbiAgICBsYXN0RXhjZXB0aW9uU3RhY2sgPSBudWxsO1xuICAgIGxhc3RFeGNlcHRpb24gPSBudWxsO1xuICAgIG5vdGlmeUhhbmRsZXJzLmFwcGx5KG51bGwsIFtfbGFzdEV4Y2VwdGlvblN0YWNrLCBmYWxzZV0uY29uY2F0KF9sYXN0QXJncykpO1xuICB9XG4gIC8qKlxuICAgKiBSZXBvcnRzIGFuIHVuaGFuZGxlZCBFcnJvciB0byBUcmFjZUtpdC5cbiAgICogQHBhcmFtIHtFcnJvcn0gZXhcbiAgICogQHBhcmFtIHs/Ym9vbGVhbn0gcmV0aHJvdyBJZiBmYWxzZSwgZG8gbm90IHJlLXRocm93IHRoZSBleGNlcHRpb24uXG4gICAqIE9ubHkgdXNlZCBmb3Igd2luZG93Lm9uZXJyb3IgdG8gbm90IGNhdXNlIGFuIGluZmluaXRlIGxvb3Agb2ZcbiAgICogcmV0aHJvd2luZy5cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBvcnQoZXgsIHJldGhyb3cpIHtcbiAgICB2YXIgYXJncyA9IF9zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICBpZiAobGFzdEV4Y2VwdGlvblN0YWNrKSB7XG4gICAgICBpZiAobGFzdEV4Y2VwdGlvbiA9PT0gZXgpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBhbHJlYWR5IGNhdWdodCBieSBhbiBpbm5lciBjYXRjaCBibG9jaywgaWdub3JlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzTGFzdEV4Y2VwdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdGFjayA9IFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlKGV4KTtcbiAgICBsYXN0RXhjZXB0aW9uU3RhY2sgPSBzdGFjaztcbiAgICBsYXN0RXhjZXB0aW9uID0gZXg7XG4gICAgbGFzdEFyZ3MgPSBhcmdzOyAvLyBJZiB0aGUgc3RhY2sgdHJhY2UgaXMgaW5jb21wbGV0ZSwgd2FpdCBmb3IgMiBzZWNvbmRzIGZvclxuICAgIC8vIHNsb3cgc2xvdyBJRSB0byBzZWUgaWYgb25lcnJvciBvY2N1cnMgb3Igbm90IGJlZm9yZSByZXBvcnRpbmdcbiAgICAvLyB0aGlzIGV4Y2VwdGlvbjsgb3RoZXJ3aXNlLCB3ZSB3aWxsIGVuZCB1cCB3aXRoIGFuIGluY29tcGxldGVcbiAgICAvLyBzdGFjayB0cmFjZVxuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobGFzdEV4Y2VwdGlvbiA9PT0gZXgpIHtcbiAgICAgICAgcHJvY2Vzc0xhc3RFeGNlcHRpb24oKTtcbiAgICAgIH1cbiAgICB9LCBzdGFjay5pbmNvbXBsZXRlID8gMjAwMCA6IDApO1xuXG4gICAgaWYgKHJldGhyb3cgIT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBleDsgLy8gcmUtdGhyb3cgdG8gcHJvcGFnYXRlIHRvIHRoZSB0b3AgbGV2ZWwgKGFuZCBjYXVzZSB3aW5kb3cub25lcnJvcilcbiAgICB9XG4gIH1cblxuICByZXBvcnQuc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICByZXBvcnQudW5zdWJzY3JpYmUgPSB1bnN1YnNjcmliZTtcbiAgcmVwb3J0LnVuaW5zdGFsbCA9IHVuc3Vic2NyaWJlQWxsO1xuICByZXR1cm4gcmVwb3J0O1xufSgpO1xuLyoqXG4gKiBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZTogY3Jvc3MtYnJvd3NlciBzdGFjayB0cmFjZXMgaW4gSmF2YVNjcmlwdFxuICpcbiAqIFN5bnRheDpcbiAqICAgcyA9IFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlKGV4Y2VwdGlvbikgLy8gY29uc2lkZXIgdXNpbmcgVHJhY2VLaXQucmVwb3J0IGluc3RlYWQgKHNlZSBiZWxvdylcbiAqIFJldHVybnM6XG4gKiAgIHMubmFtZSAgICAgICAgICAgICAgLSBleGNlcHRpb24gbmFtZVxuICogICBzLm1lc3NhZ2UgICAgICAgICAgIC0gZXhjZXB0aW9uIG1lc3NhZ2VcbiAqICAgcy5zdGFja1tpXS51cmwgICAgICAtIEphdmFTY3JpcHQgb3IgSFRNTCBmaWxlIFVSTFxuICogICBzLnN0YWNrW2ldLmZ1bmMgICAgIC0gZnVuY3Rpb24gbmFtZSwgb3IgZW1wdHkgZm9yIGFub255bW91cyBmdW5jdGlvbnMgKGlmIGd1ZXNzaW5nIGRpZCBub3Qgd29yaylcbiAqICAgcy5zdGFja1tpXS5hcmdzICAgICAtIGFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uLCBpZiBrbm93blxuICogICBzLnN0YWNrW2ldLmxpbmUgICAgIC0gbGluZSBudW1iZXIsIGlmIGtub3duXG4gKiAgIHMuc3RhY2tbaV0uY29sdW1uICAgLSBjb2x1bW4gbnVtYmVyLCBpZiBrbm93blxuICpcbiAqIFN1cHBvcnRzOlxuICogICAtIEZpcmVmb3g6ICBmdWxsIHN0YWNrIHRyYWNlIHdpdGggbGluZSBudW1iZXJzIGFuZCB1bnJlbGlhYmxlIGNvbHVtblxuICogICAgICAgICAgICAgICBudW1iZXIgb24gdG9wIGZyYW1lXG4gKiAgIC0gT3BlcmEgMTA6IGZ1bGwgc3RhY2sgdHJhY2Ugd2l0aCBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyc1xuICogICAtIE9wZXJhIDktOiBmdWxsIHN0YWNrIHRyYWNlIHdpdGggbGluZSBudW1iZXJzXG4gKiAgIC0gQ2hyb21lOiAgIGZ1bGwgc3RhY2sgdHJhY2Ugd2l0aCBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyc1xuICogICAtIFNhZmFyaTogICBsaW5lIGFuZCBjb2x1bW4gbnVtYmVyIGZvciB0aGUgdG9wbW9zdCBzdGFja3RyYWNlIGVsZW1lbnRcbiAqICAgICAgICAgICAgICAgb25seVxuICogICAtIElFOiAgICAgICBubyBsaW5lIG51bWJlcnMgd2hhdHNvZXZlclxuICpcbiAqIFRyaWVzIHRvIGd1ZXNzIG5hbWVzIG9mIGFub255bW91cyBmdW5jdGlvbnMgYnkgbG9va2luZyBmb3IgYXNzaWdubWVudHNcbiAqIGluIHRoZSBzb3VyY2UgY29kZS4gSW4gSUUgYW5kIFNhZmFyaSwgd2UgaGF2ZSB0byBndWVzcyBzb3VyY2UgZmlsZSBuYW1lc1xuICogYnkgc2VhcmNoaW5nIGZvciBmdW5jdGlvbiBib2RpZXMgaW5zaWRlIGFsbCBwYWdlIHNjcmlwdHMuIFRoaXMgd2lsbCBub3RcbiAqIHdvcmsgZm9yIHNjcmlwdHMgdGhhdCBhcmUgbG9hZGVkIGNyb3NzLWRvbWFpbi5cbiAqIEhlcmUgYmUgZHJhZ29uczogc29tZSBmdW5jdGlvbiBuYW1lcyBtYXkgYmUgZ3Vlc3NlZCBpbmNvcnJlY3RseSwgYW5kXG4gKiBkdXBsaWNhdGUgZnVuY3Rpb25zIG1heSBiZSBtaXNtYXRjaGVkLlxuICpcbiAqIFRyYWNlS2l0LmNvbXB1dGVTdGFja1RyYWNlIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yIHRyYWNpbmcgcHVycG9zZXMuXG4gKiBMb2dnaW5nIG9mIHVuaGFuZGxlZCBleGNlcHRpb25zIHNob3VsZCBiZSBkb25lIHdpdGggVHJhY2VLaXQucmVwb3J0LFxuICogd2hpY2ggYnVpbGRzIG9uIHRvcCBvZiBUcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZSBhbmQgcHJvdmlkZXMgYmV0dGVyXG4gKiBJRSBzdXBwb3J0IGJ5IHV0aWxpemluZyB0aGUgd2luZG93Lm9uZXJyb3IgZXZlbnQgdG8gcmV0cmlldmUgaW5mb3JtYXRpb25cbiAqIGFib3V0IHRoZSB0b3Agb2YgdGhlIHN0YWNrLlxuICpcbiAqIE5vdGU6IEluIElFIGFuZCBTYWZhcmksIG5vIHN0YWNrIHRyYWNlIGlzIHJlY29yZGVkIG9uIHRoZSBFcnJvciBvYmplY3QsXG4gKiBzbyBjb21wdXRlU3RhY2tUcmFjZSBpbnN0ZWFkIHdhbGtzIGl0cyAqb3duKiBjaGFpbiBvZiBjYWxsZXJzLlxuICogVGhpcyBtZWFucyB0aGF0OlxuICogICogaW4gU2FmYXJpLCBzb21lIG1ldGhvZHMgbWF5IGJlIG1pc3NpbmcgZnJvbSB0aGUgc3RhY2sgdHJhY2U7XG4gKiAgKiBpbiBJRSwgdGhlIHRvcG1vc3QgZnVuY3Rpb24gaW4gdGhlIHN0YWNrIHRyYWNlIHdpbGwgYWx3YXlzIGJlIHRoZVxuICogICAgY2FsbGVyIG9mIGNvbXB1dGVTdGFja1RyYWNlLlxuICpcbiAqIFRoaXMgaXMgb2theSBmb3IgdHJhY2luZyAoYmVjYXVzZSB5b3UgYXJlIGxpa2VseSB0byBiZSBjYWxsaW5nXG4gKiBjb21wdXRlU3RhY2tUcmFjZSBmcm9tIHRoZSBmdW5jdGlvbiB5b3Ugd2FudCB0byBiZSB0aGUgdG9wbW9zdCBlbGVtZW50XG4gKiBvZiB0aGUgc3RhY2sgdHJhY2UgYW55d2F5KSwgYnV0IG5vdCBva2F5IGZvciBsb2dnaW5nIHVuaGFuZGxlZFxuICogZXhjZXB0aW9ucyAoYmVjYXVzZSB5b3VyIGNhdGNoIGJsb2NrIHdpbGwgbGlrZWx5IGJlIGZhciBhd2F5IGZyb20gdGhlXG4gKiBpbm5lciBmdW5jdGlvbiB0aGF0IGFjdHVhbGx5IGNhdXNlZCB0aGUgZXhjZXB0aW9uKS5cbiAqXG4gKi9cblxuXG5UcmFjZUtpdC5jb21wdXRlU3RhY2tUcmFjZSA9IGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlV3JhcHBlcigpIHtcbiAgLyoqXG4gICAqIEVzY2FwZXMgc3BlY2lhbCBjaGFyYWN0ZXJzLCBleGNlcHQgZm9yIHdoaXRlc3BhY2UsIGluIGEgc3RyaW5nIHRvIGJlXG4gICAqIHVzZWQgaW5zaWRlIGEgcmVndWxhciBleHByZXNzaW9uIGFzIGEgc3RyaW5nIGxpdGVyYWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSBzdHJpbmcuXG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGVzY2FwZWQgc3RyaW5nIGxpdGVyYWwuXG4gICAqL1xuICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1tcXC1cXFtcXF17fSgpKis/LixcXFxcXFxeJHwjXS9nLCAnXFxcXCQmJyk7XG4gIH1cbiAgLyoqXG4gICAqIEVzY2FwZXMgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGEgc3RyaW5nIHRvIGJlIHVzZWQgaW5zaWRlIGEgcmVndWxhclxuICAgKiBleHByZXNzaW9uIGFzIGEgc3RyaW5nIGxpdGVyYWwuIEFsc28gZW5zdXJlcyB0aGF0IEhUTUwgZW50aXRpZXMgd2lsbFxuICAgKiBiZSBtYXRjaGVkIHRoZSBzYW1lIGFzIHRoZWlyIGxpdGVyYWwgZnJpZW5kcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGJvZHkgVGhlIHN0cmluZy5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgZXNjYXBlZCBzdHJpbmcuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZXNjYXBlQ29kZUFzUmVnRXhwRm9yTWF0Y2hpbmdJbnNpZGVIVE1MKGJvZHkpIHtcbiAgICByZXR1cm4gZXNjYXBlUmVnRXhwKGJvZHkpLnJlcGxhY2UoJzwnLCAnKD86PHwmbHQ7KScpLnJlcGxhY2UoJz4nLCAnKD86PnwmZ3Q7KScpLnJlcGxhY2UoJyYnLCAnKD86JnwmYW1wOyknKS5yZXBsYWNlKCdcIicsICcoPzpcInwmcXVvdDspJykucmVwbGFjZSgvXFxzKy9nLCAnXFxcXHMrJyk7XG4gIH0gLy8gQ29udGVudHMgb2YgRXhjZXB0aW9uIGluIHZhcmlvdXMgYnJvd3NlcnMuXG4gIC8vXG4gIC8vIFNBRkFSSTpcbiAgLy8gZXgubWVzc2FnZSA9IENhbid0IGZpbmQgdmFyaWFibGU6IHFxXG4gIC8vIGV4LmxpbmUgPSA1OVxuICAvLyBleC5zb3VyY2VJZCA9IDU4MDIzODE5MlxuICAvLyBleC5zb3VyY2VVUkwgPSBodHRwOi8vLi4uXG4gIC8vIGV4LmV4cHJlc3Npb25CZWdpbk9mZnNldCA9IDk2XG4gIC8vIGV4LmV4cHJlc3Npb25DYXJldE9mZnNldCA9IDk4XG4gIC8vIGV4LmV4cHJlc3Npb25FbmRPZmZzZXQgPSA5OFxuICAvLyBleC5uYW1lID0gUmVmZXJlbmNlRXJyb3JcbiAgLy9cbiAgLy8gRklSRUZPWDpcbiAgLy8gZXgubWVzc2FnZSA9IHFxIGlzIG5vdCBkZWZpbmVkXG4gIC8vIGV4LmZpbGVOYW1lID0gaHR0cDovLy4uLlxuICAvLyBleC5saW5lTnVtYmVyID0gNTlcbiAgLy8gZXguY29sdW1uTnVtYmVyID0gNjlcbiAgLy8gZXguc3RhY2sgPSAuLi5zdGFjayB0cmFjZS4uLiAoc2VlIHRoZSBleGFtcGxlIGJlbG93KVxuICAvLyBleC5uYW1lID0gUmVmZXJlbmNlRXJyb3JcbiAgLy9cbiAgLy8gQ0hST01FOlxuICAvLyBleC5tZXNzYWdlID0gcXEgaXMgbm90IGRlZmluZWRcbiAgLy8gZXgubmFtZSA9IFJlZmVyZW5jZUVycm9yXG4gIC8vIGV4LnR5cGUgPSBub3RfZGVmaW5lZFxuICAvLyBleC5hcmd1bWVudHMgPSBbJ2FhJ11cbiAgLy8gZXguc3RhY2sgPSAuLi5zdGFjayB0cmFjZS4uLlxuICAvL1xuICAvLyBJTlRFUk5FVCBFWFBMT1JFUjpcbiAgLy8gZXgubWVzc2FnZSA9IC4uLlxuICAvLyBleC5uYW1lID0gUmVmZXJlbmNlRXJyb3JcbiAgLy9cbiAgLy8gT1BFUkE6XG4gIC8vIGV4Lm1lc3NhZ2UgPSAuLi5tZXNzYWdlLi4uIChzZWUgdGhlIGV4YW1wbGUgYmVsb3cpXG4gIC8vIGV4Lm5hbWUgPSBSZWZlcmVuY2VFcnJvclxuICAvLyBleC5vcGVyYSNzb3VyY2Vsb2MgPSAxMSAgKHByZXR0eSBtdWNoIHVzZWxlc3MsIGR1cGxpY2F0ZXMgdGhlIGluZm8gaW4gZXgubWVzc2FnZSlcbiAgLy8gZXguc3RhY2t0cmFjZSA9IG4vYTsgc2VlICdvcGVyYTpjb25maWcjVXNlclByZWZzfEV4Y2VwdGlvbnMgSGF2ZSBTdGFja3RyYWNlJ1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBzdGFjayB0cmFjZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBzdGFjayBwcm9wZXJ0eS5cbiAgICogQ2hyb21lIGFuZCBHZWNrbyB1c2UgdGhpcyBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtFcnJvcn0gZXhcbiAgICogQHJldHVybiB7P09iamVjdC48c3RyaW5nLCAqPn0gU3RhY2sgdHJhY2UgaW5mb3JtYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY29tcHV0ZVN0YWNrVHJhY2VGcm9tU3RhY2tQcm9wKGV4KSB7XG4gICAgaWYgKHR5cGVvZiBleC5zdGFjayA9PT0gJ3VuZGVmaW5lZCcgfHwgIWV4LnN0YWNrKSByZXR1cm47XG4gICAgdmFyIGNocm9tZSA9IC9eXFxzKmF0ICguKj8pID9cXCgoKD86ZmlsZXxodHRwcz98YmxvYnxjaHJvbWUtZXh0ZW5zaW9ufG5hdGl2ZXxldmFsfDxhbm9ueW1vdXM+KS4qPykoPzo6KFxcZCspKT8oPzo6KFxcZCspKT9cXCk/XFxzKiQvaSxcbiAgICAgICAgZ2Vja28gPSAvXlxccyooLio/KSg/OlxcKCguKj8pXFwpKT8oPzpefEApKCg/OmZpbGV8aHR0cHM/fGJsb2J8Y2hyb21lfHJlc291cmNlfFxcW25hdGl2ZSkuKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFxzKiQvaSxcbiAgICAgICAgd2luanMgPSAvXlxccyphdCAoPzooKD86XFxbb2JqZWN0IG9iamVjdFxcXSk/LispICk/XFwoPygoPzpmaWxlfG1zLWFwcHh8aHR0cHM/fGJsb2IpOi4qPyk6KFxcZCspKD86OihcXGQrKSk/XFwpP1xccyokL2ksXG4gICAgICAgIGxpbmVzID0gZXguc3RhY2suc3BsaXQoJ1xcbicpLFxuICAgICAgICBzdGFjayA9IFtdLFxuICAgICAgICBwYXJ0cyxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgcmVmZXJlbmNlID0gL14oLiopIGlzIHVuZGVmaW5lZCQvLmV4ZWMoZXgubWVzc2FnZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGxpbmVzLmxlbmd0aDsgaSA8IGo7ICsraSkge1xuICAgICAgaWYgKHBhcnRzID0gY2hyb21lLmV4ZWMobGluZXNbaV0pKSB7XG4gICAgICAgIHZhciBpc05hdGl2ZSA9IHBhcnRzWzJdICYmIHBhcnRzWzJdLmluZGV4T2YoJ25hdGl2ZScpICE9PSAtMTtcbiAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAndXJsJzogIWlzTmF0aXZlID8gcGFydHNbMl0gOiBudWxsLFxuICAgICAgICAgICdmdW5jJzogcGFydHNbMV0gfHwgVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgICAnYXJncyc6IGlzTmF0aXZlID8gW3BhcnRzWzJdXSA6IFtdLFxuICAgICAgICAgICdsaW5lJzogcGFydHNbM10gPyArcGFydHNbM10gOiBudWxsLFxuICAgICAgICAgICdjb2x1bW4nOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGxcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAocGFydHMgPSB3aW5qcy5leGVjKGxpbmVzW2ldKSkge1xuICAgICAgICBlbGVtZW50ID0ge1xuICAgICAgICAgICd1cmwnOiBwYXJ0c1syXSxcbiAgICAgICAgICAnZnVuYyc6IHBhcnRzWzFdIHx8IFVOS05PV05fRlVOQ1RJT04sXG4gICAgICAgICAgJ2FyZ3MnOiBbXSxcbiAgICAgICAgICAnbGluZSc6ICtwYXJ0c1szXSxcbiAgICAgICAgICAnY29sdW1uJzogcGFydHNbNF0gPyArcGFydHNbNF0gOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKHBhcnRzID0gZ2Vja28uZXhlYyhsaW5lc1tpXSkpIHtcbiAgICAgICAgZWxlbWVudCA9IHtcbiAgICAgICAgICAndXJsJzogcGFydHNbM10sXG4gICAgICAgICAgJ2Z1bmMnOiBwYXJ0c1sxXSB8fCBVTktOT1dOX0ZVTkNUSU9OLFxuICAgICAgICAgICdhcmdzJzogcGFydHNbMl0gPyBwYXJ0c1syXS5zcGxpdCgnLCcpIDogW10sXG4gICAgICAgICAgJ2xpbmUnOiBwYXJ0c1s0XSA/ICtwYXJ0c1s0XSA6IG51bGwsXG4gICAgICAgICAgJ2NvbHVtbic6IHBhcnRzWzVdID8gK3BhcnRzWzVdIDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghZWxlbWVudC5mdW5jICYmIGVsZW1lbnQubGluZSkge1xuICAgICAgICBlbGVtZW50LmZ1bmMgPSBVTktOT1dOX0ZVTkNUSU9OO1xuICAgICAgfVxuXG4gICAgICBzdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmICghc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIXN0YWNrWzBdLmNvbHVtbiAmJiB0eXBlb2YgZXguY29sdW1uTnVtYmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gRmlyZUZveCB1c2VzIHRoaXMgYXdlc29tZSBjb2x1bW5OdW1iZXIgcHJvcGVydHkgZm9yIGl0cyB0b3AgZnJhbWVcbiAgICAgIC8vIEFsc28gbm90ZSwgRmlyZWZveCdzIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZCBhbmQgZXZlcnl0aGluZyBlbHNlIGV4cGVjdHMgMS1iYXNlZCxcbiAgICAgIC8vIHNvIGFkZGluZyAxXG4gICAgICBzdGFja1swXS5jb2x1bW4gPSBleC5jb2x1bW5OdW1iZXIgKyAxO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAnbmFtZSc6IGV4Lm5hbWUsXG4gICAgICAnbWVzc2FnZSc6IGV4Lm1lc3NhZ2UsXG4gICAgICAndXJsJzogZ2V0TG9jYXRpb25IcmVmKCksXG4gICAgICAnc3RhY2snOiBzdGFja1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGZpcnN0IGZyYW1lIHRvIGluY29tcGxldGUgc3RhY2sgdHJhY2VzLlxuICAgKiBTYWZhcmkgYW5kIElFIHJlcXVpcmUgdGhpcyB0byBnZXQgY29tcGxldGUgZGF0YSBvbiB0aGUgZmlyc3QgZnJhbWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+fSBzdGFja0luZm8gU3RhY2sgdHJhY2UgaW5mb3JtYXRpb24gZnJvbVxuICAgKiBvbmUgb2YgdGhlIGNvbXB1dGUqIG1ldGhvZHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCBvZiB0aGUgc2NyaXB0IHRoYXQgY2F1c2VkIGFuIGVycm9yLlxuICAgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gbGluZU5vIFRoZSBsaW5lIG51bWJlciBvZiB0aGUgc2NyaXB0IHRoYXRcbiAgICogY2F1c2VkIGFuIGVycm9yLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIGVycm9yIGdlbmVyYXRlZCBieSB0aGUgYnJvd3Nlciwgd2hpY2hcbiAgICogaG9wZWZ1bGx5IGNvbnRhaW5zIHRoZSBuYW1lIG9mIHRoZSBvYmplY3QgdGhhdCBjYXVzZWQgdGhlIGVycm9yLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgc3RhY2sgaW5mb3JtYXRpb24gd2FzXG4gICAqIGF1Z21lbnRlZC5cbiAgICovXG5cblxuICBmdW5jdGlvbiBhdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudChzdGFja0luZm8sIHVybCwgbGluZU5vLCBtZXNzYWdlKSB7XG4gICAgdmFyIGluaXRpYWwgPSB7XG4gICAgICAndXJsJzogdXJsLFxuICAgICAgJ2xpbmUnOiBsaW5lTm9cbiAgICB9O1xuXG4gICAgaWYgKGluaXRpYWwudXJsICYmIGluaXRpYWwubGluZSkge1xuICAgICAgc3RhY2tJbmZvLmluY29tcGxldGUgPSBmYWxzZTtcblxuICAgICAgaWYgKCFpbml0aWFsLmZ1bmMpIHtcbiAgICAgICAgaW5pdGlhbC5mdW5jID0gVU5LTk9XTl9GVU5DVElPTjtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YWNrSW5mby5zdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzdGFja0luZm8uc3RhY2tbMF0udXJsID09PSBpbml0aWFsLnVybCkge1xuICAgICAgICAgIGlmIChzdGFja0luZm8uc3RhY2tbMF0ubGluZSA9PT0gaW5pdGlhbC5saW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIGFscmVhZHkgaW4gc3RhY2sgdHJhY2VcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGFja0luZm8uc3RhY2tbMF0ubGluZSAmJiBzdGFja0luZm8uc3RhY2tbMF0uZnVuYyA9PT0gaW5pdGlhbC5mdW5jKSB7XG4gICAgICAgICAgICBzdGFja0luZm8uc3RhY2tbMF0ubGluZSA9IGluaXRpYWwubGluZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RhY2tJbmZvLnN0YWNrLnVuc2hpZnQoaW5pdGlhbCk7XG4gICAgICBzdGFja0luZm8ucGFydGlhbCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhY2tJbmZvLmluY29tcGxldGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogQ29tcHV0ZXMgc3RhY2sgdHJhY2UgaW5mb3JtYXRpb24gYnkgd2Fsa2luZyB0aGUgYXJndW1lbnRzLmNhbGxlclxuICAgKiBjaGFpbiBhdCB0aGUgdGltZSB0aGUgZXhjZXB0aW9uIG9jY3VycmVkLiBUaGlzIHdpbGwgY2F1c2UgZWFybGllclxuICAgKiBmcmFtZXMgdG8gYmUgbWlzc2VkIGJ1dCBpcyB0aGUgb25seSB3YXkgdG8gZ2V0IGFueSBzdGFjayB0cmFjZSBpblxuICAgKiBTYWZhcmkgYW5kIElFLiBUaGUgdG9wIGZyYW1lIGlzIHJlc3RvcmVkIGJ5XG4gICAqIHtAbGluayBhdWdtZW50U3RhY2tUcmFjZVdpdGhJbml0aWFsRWxlbWVudH0uXG4gICAqIEBwYXJhbSB7RXJyb3J9IGV4XG4gICAqIEByZXR1cm4gez9PYmplY3QuPHN0cmluZywgKj59IFN0YWNrIHRyYWNlIGluZm9ybWF0aW9uLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlQnlXYWxraW5nQ2FsbGVyQ2hhaW4oZXgsIGRlcHRoKSB7XG4gICAgdmFyIGZ1bmN0aW9uTmFtZSA9IC9mdW5jdGlvblxccysoW18kYS16QS1aXFx4QTAtXFx1RkZGRl1bXyRhLXpBLVowLTlcXHhBMC1cXHVGRkZGXSopP1xccypcXCgvaSxcbiAgICAgICAgc3RhY2sgPSBbXSxcbiAgICAgICAgZnVuY3MgPSB7fSxcbiAgICAgICAgcmVjdXJzaW9uID0gZmFsc2UsXG4gICAgICAgIHBhcnRzLFxuICAgICAgICBpdGVtLFxuICAgICAgICBzb3VyY2U7XG5cbiAgICBmb3IgKHZhciBjdXJyID0gY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbi5jYWxsZXI7IGN1cnIgJiYgIXJlY3Vyc2lvbjsgY3VyciA9IGN1cnIuY2FsbGVyKSB7XG4gICAgICBpZiAoY3VyciA9PT0gY29tcHV0ZVN0YWNrVHJhY2UgfHwgY3VyciA9PT0gVHJhY2VLaXQucmVwb3J0KSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdza2lwcGluZyBpbnRlcm5hbCBmdW5jdGlvbicpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaXRlbSA9IHtcbiAgICAgICAgJ3VybCc6IG51bGwsXG4gICAgICAgICdmdW5jJzogVU5LTk9XTl9GVU5DVElPTixcbiAgICAgICAgJ2xpbmUnOiBudWxsLFxuICAgICAgICAnY29sdW1uJzogbnVsbFxuICAgICAgfTtcblxuICAgICAgaWYgKGN1cnIubmFtZSkge1xuICAgICAgICBpdGVtLmZ1bmMgPSBjdXJyLm5hbWU7XG4gICAgICB9IGVsc2UgaWYgKHBhcnRzID0gZnVuY3Rpb25OYW1lLmV4ZWMoY3Vyci50b1N0cmluZygpKSkge1xuICAgICAgICBpdGVtLmZ1bmMgPSBwYXJ0c1sxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVtLmZ1bmMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaXRlbS5mdW5jID0gcGFydHMuaW5wdXQuc3Vic3RyaW5nKDAsIHBhcnRzLmlucHV0LmluZGV4T2YoJ3snKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG5cbiAgICAgIGlmIChmdW5jc1snJyArIGN1cnJdKSB7XG4gICAgICAgIHJlY3Vyc2lvbiA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmdW5jc1snJyArIGN1cnJdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc3RhY2sucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICBpZiAoZGVwdGgpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdkZXB0aCBpcyAnICsgZGVwdGgpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3N0YWNrIGlzICcgKyBzdGFjay5sZW5ndGgpO1xuICAgICAgc3RhY2suc3BsaWNlKDAsIGRlcHRoKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgJ25hbWUnOiBleC5uYW1lLFxuICAgICAgJ21lc3NhZ2UnOiBleC5tZXNzYWdlLFxuICAgICAgJ3VybCc6IGdldExvY2F0aW9uSHJlZigpLFxuICAgICAgJ3N0YWNrJzogc3RhY2tcbiAgICB9O1xuICAgIGF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50KHJlc3VsdCwgZXguc291cmNlVVJMIHx8IGV4LmZpbGVOYW1lLCBleC5saW5lIHx8IGV4LmxpbmVOdW1iZXIsIGV4Lm1lc3NhZ2UgfHwgZXguZGVzY3JpcHRpb24pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIENvbXB1dGVzIGEgc3RhY2sgdHJhY2UgZm9yIGFuIGV4Y2VwdGlvbi5cbiAgICogQHBhcmFtIHtFcnJvcn0gZXhcbiAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcik9fSBkZXB0aFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNvbXB1dGVTdGFja1RyYWNlKGV4LCBkZXB0aCkge1xuICAgIHZhciBzdGFjayA9IG51bGw7XG4gICAgZGVwdGggPSBkZXB0aCA9PSBudWxsID8gMCA6ICtkZXB0aDtcblxuICAgIHRyeSB7XG4gICAgICBzdGFjayA9IGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcChleCk7XG5cbiAgICAgIGlmIChzdGFjaykge1xuICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKFRyYWNlS2l0LmRlYnVnKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHN0YWNrID0gY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbihleCwgZGVwdGggKyAxKTtcblxuICAgICAgaWYgKHN0YWNrKSB7XG4gICAgICAgIHJldHVybiBzdGFjaztcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoVHJhY2VLaXQuZGVidWcpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgJ25hbWUnOiBleC5uYW1lLFxuICAgICAgJ21lc3NhZ2UnOiBleC5tZXNzYWdlLFxuICAgICAgJ3VybCc6IGdldExvY2F0aW9uSHJlZigpXG4gICAgfTtcbiAgfVxuXG4gIGNvbXB1dGVTdGFja1RyYWNlLmF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50ID0gYXVnbWVudFN0YWNrVHJhY2VXaXRoSW5pdGlhbEVsZW1lbnQ7XG4gIGNvbXB1dGVTdGFja1RyYWNlLmNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcCA9IGNvbXB1dGVTdGFja1RyYWNlRnJvbVN0YWNrUHJvcDtcbiAgcmV0dXJuIGNvbXB1dGVTdGFja1RyYWNlO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBUcmFjZUtpdDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2dsb2JhbC5qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcIikpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL2NvbnN0YW50cy9ucHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvY29uc3RhbnRzL25wcy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuREVMSUdIVEVEX0ZFRURCQUNLX1BSRUZJWCA9IGV4cG9ydHMuREVMSUdIVEVEX1JFU1BPTlNFU19SRUdFWCA9IGV4cG9ydHMuV09PVFJJQ19SRVNQT05TRVNfUkVHRVggPSB2b2lkIDA7XG52YXIgV09PVFJJQ19SRVNQT05TRVNfUkVHRVggPSAvXmh0dHBzOlxcL1xcL3Byb2R1Y3Rpb24ud29vdHJpYy5jb21cXC9yZXNwb25zZXMvO1xuZXhwb3J0cy5XT09UUklDX1JFU1BPTlNFU19SRUdFWCA9IFdPT1RSSUNfUkVTUE9OU0VTX1JFR0VYO1xudmFyIERFTElHSFRFRF9SRVNQT05TRVNfUkVHRVggPSAvXmh0dHBzOlxcL1xcL3dlYi5kZWxpZ2h0ZWQuY29tXFwvZVxcL1thLXpBLVotXSpcXC9jLztcbmV4cG9ydHMuREVMSUdIVEVEX1JFU1BPTlNFU19SRUdFWCA9IERFTElHSFRFRF9SRVNQT05TRVNfUkVHRVg7XG52YXIgREVMSUdIVEVEX0ZFRURCQUNLX1BSRUZJWCA9ICdjb21tZW50PSc7XG5leHBvcnRzLkRFTElHSFRFRF9GRUVEQkFDS19QUkVGSVggPSBERUxJR0hURURfRkVFREJBQ0tfUFJFRklYO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL2VuaGFuY2VGdW5jLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3V0aWxzL3NyYy9lbmhhbmNlRnVuYy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBlbmhhbmNlRnVuYztcblxuLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBbXCJlcnJvclwiLCB7IFwicHJvcHNcIjogZmFsc2UgfV0gKi9cbmZ1bmN0aW9uIGVuaGFuY2VGdW5jKG9iaiwgbWV0aG9kLCBoYW5kbGVyKSB7XG4gIHZhciBvcmlnaW5hbCA9IG9ialttZXRob2RdO1xuXG4gIGZ1bmN0aW9uIHNoaW0oKSB7XG4gICAgdmFyIHJlcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAob3JpZ2luYWwpIHtcbiAgICAgIHJlcyA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4gIG9ialttZXRob2RdID0gc2hpbTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBvYmpbbWV0aG9kXSA9IG9yaWdpbmFsO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3V0aWxzL3NyYy9tYXBWYWx1ZXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3V0aWxzL3NyYy9tYXBWYWx1ZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG1hcFZhbHVlcztcblxuZnVuY3Rpb24gbWFwVmFsdWVzKG9iaiwgZikge1xuICBpZiAob2JqID09IG51bGwpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICB2YXIgcmVzID0ge307XG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmVzW2tleV0gPSBmKG9ialtrZXldKTtcbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL0Bsb2dyb2NrZXQvdXRpbHMvc3JjL3N0YXJ0c1dpdGguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvQGxvZ3JvY2tldC91dGlscy9zcmMvc3RhcnRzV2l0aC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHN0YXJ0c1dpdGg7XG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgodmFsdWUsIHNlYXJjaCkge1xuICB2YXIgcG9zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICByZXR1cm4gdmFsdWUgJiYgc2VhcmNoICYmIHZhbHVlLnN1YnN0cmluZyhwb3MsIHBvcyArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvTG9nUm9ja2V0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9wYWNrYWdlcy9sb2dyb2NrZXQvc3JjL0xvZ1JvY2tldC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuTUFYX1FVRVVFX1NJWkUgPSB2b2lkIDA7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qc1wiKSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qc1wiKSk7XG5cbnZhciBfbmV0d29yayA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC9uZXR3b3JrICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L25ldHdvcmsvc3JjL2luZGV4LmpzXCIpKTtcblxudmFyIF9leGNlcHRpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGxvZ3JvY2tldC9leGNlcHRpb25zICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L2V4Y2VwdGlvbnMvc3JjL2luZGV4LmpzXCIpO1xuXG52YXIgX2NvbnNvbGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIEBsb2dyb2NrZXQvY29uc29sZSAqLyBcIi4vcGFja2FnZXMvQGxvZ3JvY2tldC9jb25zb2xlL3NyYy9pbmRleC5qc1wiKSk7XG5cbnZhciBfcmVkdXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAbG9ncm9ja2V0L3JlZHV4ICovIFwiLi9wYWNrYWdlcy9AbG9ncm9ja2V0L3JlZHV4L3NyYy9pbmRleC5qc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIE1BWF9RVUVVRV9TSVpFID0gMTAwMDtcbmV4cG9ydHMuTUFYX1FVRVVFX1NJWkUgPSBNQVhfUVVFVUVfU0laRTtcblxudmFyIGNvbnNpZGVySW5nZXN0U2VydmVyT3B0aW9uID0gZnVuY3Rpb24gY29uc2lkZXJJbmdlc3RTZXJ2ZXJPcHRpb24oKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSxcbiAgICAgIGluZ2VzdFNlcnZlciA9IF9yZWYuaW5nZXN0U2VydmVyLFxuICAgICAgb3B0aW9ucyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIFtcImluZ2VzdFNlcnZlclwiXSk7XG5cbiAgaWYgKGluZ2VzdFNlcnZlcikge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHtcbiAgICAgIHNlcnZlclVSTDogXCJcIi5jb25jYXQoaW5nZXN0U2VydmVyLCBcIi9pXCIpLFxuICAgICAgc3RhdHNVUkw6IFwiXCIuY29uY2F0KGluZ2VzdFNlcnZlciwgXCIvc1wiKVxuICAgIH0sIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG52YXIgTG9nUm9ja2V0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTG9nUm9ja2V0KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLCBMb2dSb2NrZXQpO1xuICAgIHRoaXMuX2J1ZmZlciA9IFtdO1xuICAgIC8vIFRPRE86IHRlc3RzIGZvciB0aGVzZSBleHBvc2VkIG1ldGhvZHMuXG4gICAgWydsb2cnLCAnaW5mbycsICd3YXJuJywgJ2Vycm9yJywgJ2RlYnVnJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgICBfdGhpc1ttZXRob2RdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuYWRkRXZlbnQoJ2xyLmNvcmUuTG9nRXZlbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGNvbnNvbGVPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICAgIGlmIChtZXRob2QgPT09ICdlcnJvcicgJiYgY29uc29sZU9wdGlvbnMuc2hvdWxkQWdncmVnYXRlQ29uc29sZUVycm9ycykge1xuICAgICAgICAgICAgX2V4Y2VwdGlvbnMuQ2FwdHVyZS5jYXB0dXJlTWVzc2FnZShfdGhpcywgYXJnc1swXSwgYXJncywge30sIHRydWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsb2dMZXZlbDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICBhcmdzOiBhcmdzXG4gICAgICAgICAgfTtcbiAgICAgICAgfSwge1xuICAgICAgICAgIHNob3VsZENhcHR1cmVTdGFja1RyYWNlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5faW5zdGFsbGVkID0gW107IC8vIGV4cG9zZSBhIGNhbGxiYWNrIHRvIGdldCB0aGUgc2Vzc2lvbiBVUkwgZnJvbSB0aGUgZ2xvYmFsIGNvbnRleHRcblxuICAgIHdpbmRvdy5fbHJfc3VybF9jYiA9IHRoaXMuZ2V0U2Vzc2lvblVSTC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczIuZGVmYXVsdCkoTG9nUm9ja2V0LCBbe1xuICAgIGtleTogXCJhZGRFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRFdmVudCh0eXBlLCBnZXRNZXNzYWdlKSB7XG4gICAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICB2YXIgdGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgICAgIGxvZ2dlci5hZGRFdmVudCh0eXBlLCBnZXRNZXNzYWdlLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdHMpLCB7fSwge1xuICAgICAgICAgIHRpbWVPdmVycmlkZTogdGltZVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25Mb2dnZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25Mb2dnZXIobG9nZ2VyKSB7XG4gICAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXI7XG5cbiAgICAgIHdoaWxlICh0aGlzLl9idWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZiA9IHRoaXMuX2J1ZmZlci5zaGlmdCgpO1xuXG4gICAgICAgIGYodGhpcy5fbG9nZ2VyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3J1blwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcnVuKGYpIHtcbiAgICAgIGlmICh0aGlzLl9pc0Rpc2FibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xvZ2dlcikge1xuICAgICAgICBmKHRoaXMuX2xvZ2dlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fYnVmZmVyLmxlbmd0aCA+PSBNQVhfUVVFVUVfU0laRSkge1xuICAgICAgICAgIHRoaXMuX2lzRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgIGNvbnNvbGUud2FybignTG9nUm9ja2V0OiBzY3JpcHQgZGlkIG5vdCBsb2FkLiBDaGVjayB0aGF0IHlvdSBoYXZlIGEgdmFsaWQgbmV0d29yayBjb25uZWN0aW9uLicpO1xuICAgICAgICAgIHRoaXMudW5pbnN0YWxsKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYnVmZmVyLnB1c2goZi5iaW5kKHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaW5pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KGFwcElEKSB7XG4gICAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICAgIGlmICghdGhpcy5faXNJbml0aWFsaXplZCkge1xuICAgICAgICB2YXIgX29wdHMkc2hvdWxkQXVnbWVudE5QID0gb3B0cy5zaG91bGRBdWdtZW50TlBTLFxuICAgICAgICAgICAgc2hvdWxkQXVnbWVudE5QUyA9IF9vcHRzJHNob3VsZEF1Z21lbnROUCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRzJHNob3VsZEF1Z21lbnROUCxcbiAgICAgICAgICAgIF9vcHRzJHNob3VsZFBhcnNlWEhSQiA9IG9wdHMuc2hvdWxkUGFyc2VYSFJCbG9iLFxuICAgICAgICAgICAgc2hvdWxkUGFyc2VYSFJCbG9iID0gX29wdHMkc2hvdWxkUGFyc2VYSFJCID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRzJHNob3VsZFBhcnNlWEhSQjtcblxuICAgICAgICB0aGlzLl9pbnN0YWxsZWQucHVzaCgoMCwgX2V4Y2VwdGlvbnMucmVnaXN0ZXJFeGNlcHRpb25zKSh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5faW5zdGFsbGVkLnB1c2goKDAsIF9uZXR3b3JrLmRlZmF1bHQpKHRoaXMsIHtcbiAgICAgICAgICBzaG91bGRBdWdtZW50TlBTOiAhIXNob3VsZEF1Z21lbnROUFMsXG4gICAgICAgICAgc2hvdWxkUGFyc2VYSFJCbG9iOiAhIXNob3VsZFBhcnNlWEhSQmxvYlxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGhpcy5faW5zdGFsbGVkLnB1c2goKDAsIF9jb25zb2xlLmRlZmF1bHQpKHRoaXMpKTtcblxuICAgICAgICB0aGlzLl9pc0luaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9ydW4oZnVuY3Rpb24gKGxvZ2dlcikge1xuICAgICAgICAgIGxvZ2dlci5pbml0KGFwcElELCBjb25zaWRlckluZ2VzdFNlcnZlck9wdGlvbihvcHRzKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgICAgIGxvZ2dlci5zdGFydCgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInVuaW5zdGFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmluc3RhbGwoKSB7XG4gICAgICB0aGlzLl9pbnN0YWxsZWQuZm9yRWFjaChmdW5jdGlvbiAoZikge1xuICAgICAgICByZXR1cm4gZigpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2J1ZmZlciA9IFtdO1xuXG4gICAgICB0aGlzLl9ydW4oZnVuY3Rpb24gKGxvZ2dlcikge1xuICAgICAgICBsb2dnZXIudW5pbnN0YWxsKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaWRlbnRpZnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaWRlbnRpZnkoaWQsIG9wdHMpIHtcbiAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgICAgIGxvZ2dlci5pZGVudGlmeShpZCwgb3B0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnROZXdTZXNzaW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0TmV3U2Vzc2lvbigpIHtcbiAgICAgIHRoaXMuX3J1bihmdW5jdGlvbiAobG9nZ2VyKSB7XG4gICAgICAgIGxvZ2dlci5zdGFydE5ld1Nlc3Npb24oKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0cmFja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjayhjdXN0b21FdmVudE5hbWUsIGV2ZW50UHJvcGVydGllcykge1xuICAgICAgdGhpcy5fcnVuKGZ1bmN0aW9uIChsb2dnZXIpIHtcbiAgICAgICAgbG9nZ2VyLnRyYWNrKGN1c3RvbUV2ZW50TmFtZSwgZXZlbnRQcm9wZXJ0aWVzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRTZXNzaW9uVVJMXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNlc3Npb25VUkwoY2IpIHtcbiAgICAgIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dSb2NrZXQ6IG11c3QgcGFzcyBjYWxsYmFjayB0byBnZXRTZXNzaW9uVVJMKCknKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcnVuKGZ1bmN0aW9uIChsb2dnZXIpIHtcbiAgICAgICAgaWYgKGxvZ2dlci5nZXRTZXNzaW9uVVJMKSB7XG4gICAgICAgICAgbG9nZ2VyLmdldFNlc3Npb25VUkwoY2IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNiKGxvZ2dlci5yZWNvcmRpbmdVUkwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VmVyc2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWZXJzaW9uKGNiKSB7XG4gICAgICB0aGlzLl9ydW4oZnVuY3Rpb24gKGxvZ2dlcikge1xuICAgICAgICBjYihsb2dnZXIudmVyc2lvbik7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2FwdHVyZU1lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FwdHVyZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgICBfZXhjZXB0aW9ucy5DYXB0dXJlLmNhcHR1cmVNZXNzYWdlKHRoaXMsIG1lc3NhZ2UsIFttZXNzYWdlXSwgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNhcHR1cmVFeGNlcHRpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FwdHVyZUV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgX2V4Y2VwdGlvbnMuQ2FwdHVyZS5jYXB0dXJlRXhjZXB0aW9uKHRoaXMsIGV4Y2VwdGlvbiwgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInZlcnNpb25cIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnZlcnNpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInNlc3Npb25VUkxcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnJlY29yZGluZ1VSTDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVjb3JkaW5nVVJMXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9nZ2VyICYmIHRoaXMuX2xvZ2dlci5yZWNvcmRpbmdVUkw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlY29yZGluZ0lEXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbG9nZ2VyICYmIHRoaXMuX2xvZ2dlci5yZWNvcmRpbmdJRDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwidGhyZWFkSURcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLnRocmVhZElEO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ0YWJJRFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xvZ2dlciAmJiB0aGlzLl9sb2dnZXIudGFiSUQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlZHV4RW5oYW5jZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVkdXhFbmhhbmNlcigpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiAoMCwgX3JlZHV4LmNyZWF0ZUVuaGFuY2VyKSh0aGlzLCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVkdXhNaWRkbGV3YXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZHV4TWlkZGxld2FyZSgpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHJldHVybiAoMCwgX3JlZHV4LmNyZWF0ZU1pZGRsZXdhcmUpKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0Rpc2FibGVkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gISEodGhpcy5faXNEaXNhYmxlZCB8fCB0aGlzLl9sb2dnZXIgJiYgdGhpcy5fbG9nZ2VyLl9pc0Rpc2FibGVkKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExvZ1JvY2tldDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gTG9nUm9ja2V0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvbWFrZUxvZ1JvY2tldC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvbWFrZUxvZ1JvY2tldC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0ICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanNcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBtYWtlTG9nUm9ja2V0O1xuXG52YXIgX0xvZ1JvY2tldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Mb2dSb2NrZXQgKi8gXCIuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvTG9nUm9ja2V0LmpzXCIpKTtcblxudmFyIFJFQUNUX05BVElWRV9OT1RJQ0UgPSAnTG9nUm9ja2V0IGRvZXMgbm90IHlldCBzdXBwb3J0IFJlYWN0IE5hdGl2ZS4nO1xuXG52YXIgbWFrZU5vb3BQb2x5ZmlsbCA9IGZ1bmN0aW9uIG1ha2VOb29wUG9seWZpbGwoKSB7XG4gIHJldHVybiB7XG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHt9LFxuICAgIHVuaW5zdGFsbDogZnVuY3Rpb24gdW5pbnN0YWxsKCkge30sXG4gICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7fSxcbiAgICBpbmZvOiBmdW5jdGlvbiBpbmZvKCkge30sXG4gICAgd2FybjogZnVuY3Rpb24gd2FybigpIHt9LFxuICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcigpIHt9LFxuICAgIGRlYnVnOiBmdW5jdGlvbiBkZWJ1ZygpIHt9LFxuICAgIGFkZEV2ZW50OiBmdW5jdGlvbiBhZGRFdmVudCgpIHt9LFxuICAgIGlkZW50aWZ5OiBmdW5jdGlvbiBpZGVudGlmeSgpIHt9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydCgpIHt9LFxuXG4gICAgZ2V0IHRocmVhZElEKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIGdldCByZWNvcmRpbmdJRCgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG5cbiAgICBnZXQgcmVjb3JkaW5nVVJMKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIHJlZHV4RW5oYW5jZXI6IGZ1bmN0aW9uIHJlZHV4RW5oYW5jZXIoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSxcbiAgICByZWR1eE1pZGRsZXdhcmU6IGZ1bmN0aW9uIHJlZHV4TWlkZGxld2FyZSgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0sXG4gICAgdHJhY2s6IGZ1bmN0aW9uIHRyYWNrKCkge30sXG4gICAgZ2V0U2Vzc2lvblVSTDogZnVuY3Rpb24gZ2V0U2Vzc2lvblVSTCgpIHt9LFxuICAgIGdldFZlcnNpb246IGZ1bmN0aW9uIGdldFZlcnNpb24oKSB7fSxcbiAgICBzdGFydE5ld1Nlc3Npb246IGZ1bmN0aW9uIHN0YXJ0TmV3U2Vzc2lvbigpIHt9LFxuICAgIG9uTG9nZ2VyOiBmdW5jdGlvbiBvbkxvZ2dlcigpIHt9LFxuICAgIHNldENsb2NrOiBmdW5jdGlvbiBzZXRDbG9jaygpIHt9LFxuICAgIGNhcHR1cmVNZXNzYWdlOiBmdW5jdGlvbiBjYXB0dXJlTWVzc2FnZSgpIHt9LFxuICAgIGNhcHR1cmVFeGNlcHRpb246IGZ1bmN0aW9uIGNhcHR1cmVFeGNlcHRpb24oKSB7fVxuICB9O1xufTtcblxuZnVuY3Rpb24gbWFrZUxvZ1JvY2tldCgpIHtcbiAgdmFyIGdldExvZ2dlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZnVuY3Rpb24gKCkge307XG5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFJFQUNUX05BVElWRV9OT1RJQ0UpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHdpbmRvdy5fZGlzYWJsZUxvZ1JvY2tldCkge1xuICAgICAgcmV0dXJuIG1ha2VOb29wUG9seWZpbGwoKTtcbiAgICB9XG5cbiAgICBpZiAod2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgJiYgd2luZG93LldlYWtNYXApIHtcbiAgICAgIC8vIFNhdmUgd2luZG93IGdsb2JhbHMgdGhhdCB3ZSByZWx5IG9uLlxuICAgICAgd2luZG93Ll9sck11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcjtcbiAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBfTG9nUm9ja2V0LmRlZmF1bHQoKTtcbiAgICAgIGdldExvZ2dlcihpbnN0YW5jZSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ha2VOb29wUG9seWZpbGwoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vcGFja2FnZXMvbG9ncm9ja2V0L3NyYy9tb2R1bGUtbnBtLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vcGFja2FnZXMvbG9ncm9ja2V0L3NyYy9tb2R1bGUtbnBtLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zZXR1cCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zZXR1cCAqLyBcIi4vcGFja2FnZXMvbG9ncm9ja2V0L3NyYy9zZXR1cC5qc1wiKSk7XG5cbnZhciBpbnN0YW5jZSA9ICgwLCBfc2V0dXAuZGVmYXVsdCkoKTtcbnZhciBfZGVmYXVsdCA9IGluc3RhbmNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9wYWNrYWdlcy9sb2dyb2NrZXQvc3JjL3NldHVwLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvc2V0dXAuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qc1wiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNldHVwO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanNcIikpO1xuXG52YXIgX21ha2VMb2dSb2NrZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbWFrZUxvZ1JvY2tldCAqLyBcIi4vcGFja2FnZXMvbG9ncm9ja2V0L3NyYy9tYWtlTG9nUm9ja2V0LmpzXCIpKTtcblxudmFyIENETl9TRVJWRVJfTUFQID0ge1xuICAnY2RuLmxvZ3JvY2tldC5pbyc6ICdodHRwczovL3IubG9ncm9ja2V0LmlvJyxcbiAgJ2Nkbi5sci1pbmdlc3QuaW8nOiAnaHR0cHM6Ly9yLmxyLWluZ2VzdC5pbycsXG4gICdjZG4ubHItaW4uY29tJzogJ2h0dHBzOi8vci5sci1pbi5jb20nLFxuICAnY2RuLmxyLWluLXByb2QuY29tJzogJ2h0dHBzOi8vci5sci1pbi1wcm9kLmNvbScsXG4gICdjZG4tc3RhZ2luZy5sb2dyb2NrZXQuaW8nOiAnaHR0cHM6Ly9zdGFnaW5nLWkubG9ncm9ja2V0LmlvJyxcbiAgJ2Nkbi1zdGFnaW5nLmxyLWluZ2VzdC5pbyc6ICdodHRwczovL3N0YWdpbmctaS5sci1pbmdlc3QuaW8nLFxuICAnY2RuLXN0YWdpbmcubHItaW4uY29tJzogJ2h0dHBzOi8vc3RhZ2luZy1pLmxyLWluLmNvbScsXG4gICdjZG4tc3RhZ2luZy5sci1pbi1wcm9kLmNvbSc6ICdodHRwczovL3N0YWdpbmctaS5sci1pbi1wcm9kLmNvbSdcbn07XG5cbmZ1bmN0aW9uIHNldHVwKCkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge30sXG4gICAgICBlbnRlcnByaXNlU2VydmVyID0gX3JlZi5lbnRlcnByaXNlU2VydmVyLFxuICAgICAgX3JlZiRzZGtWZXJzaW9uID0gX3JlZi5zZGtWZXJzaW9uLFxuICAgICAgc2RrVmVyc2lvbiA9IF9yZWYkc2RrVmVyc2lvbiA9PT0gdm9pZCAwID8gXCIzLjAuMVwiIDogX3JlZiRzZGtWZXJzaW9uLFxuICAgICAgb3B0cyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyLmRlZmF1bHQpKF9yZWYsIFtcImVudGVycHJpc2VTZXJ2ZXJcIiwgXCJzZGtWZXJzaW9uXCJdKTtcblxuICB2YXIgc2NyaXB0T3JpZ2luID0gdW5kZWZpbmVkID09PSAnc3RhZ2luZycgPyAnaHR0cHM6Ly9jZG4tc3RhZ2luZy5sb2dyb2NrZXQuaW8nIDogJ2h0dHBzOi8vY2RuLmxvZ3JvY2tldC5pbyc7XG4gIHZhciBzY3JpcHRJbmdlc3Q7XG5cbiAgaWYgKHNka1ZlcnNpb24gPT09ICdzY3JpcHQnKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wYXQvY29tcGF0XG4gICAgICB2YXIgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcbiAgICAgIHZhciBtYXRjaGVzID0gc2NyaXB0VGFnLnNyYy5tYXRjaCgvXihodHRwcz86XFwvXFwvKFteXFxcXF0rKSlcXC8uKyQvKTtcbiAgICAgIHZhciBzY3JpcHRIb3N0bmFtZSA9IG1hdGNoZXMgJiYgbWF0Y2hlc1syXTtcblxuICAgICAgaWYgKHNjcmlwdEhvc3RuYW1lICYmIENETl9TRVJWRVJfTUFQW3NjcmlwdEhvc3RuYW1lXSkge1xuICAgICAgICBzY3JpcHRPcmlnaW4gPSBtYXRjaGVzICYmIG1hdGNoZXNbMV07XG4gICAgICAgIHNjcmlwdEluZ2VzdCA9IENETl9TRVJWRVJfTUFQW3NjcmlwdEhvc3RuYW1lXTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChfKSB7XG4gICAgICAvKiBuby1vcCAqL1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBOUE1cbiAgICBzY3JpcHRPcmlnaW4gPSB1bmRlZmluZWQgPT09ICdzdGFnaW5nJyA/ICdodHRwczovL2Nkbi1zdGFnaW5nLmxyLWluLXByb2QuY29tJyA6ICdodHRwczovL2Nkbi5sci1pbi1wcm9kLmNvbSc7XG4gICAgc2NyaXB0SW5nZXN0ID0gdW5kZWZpbmVkID09PSAnc3RhZ2luZycgPyAnaHR0cHM6Ly9zdGFnaW5nLWkubHItaW4tcHJvZC5jb20nIDogJ2h0dHBzOi8vci5sci1pbi1wcm9kLmNvbSc7XG4gIH1cblxuICB2YXIgc2RrU2VydmVyID0gb3B0cy5zZGtTZXJ2ZXIgfHwgZW50ZXJwcmlzZVNlcnZlcjtcbiAgdmFyIGluZ2VzdFNlcnZlciA9IG9wdHMuaW5nZXN0U2VydmVyIHx8IGVudGVycHJpc2VTZXJ2ZXIgfHwgc2NyaXB0SW5nZXN0O1xuICB2YXIgaW5zdGFuY2UgPSAoMCwgX21ha2VMb2dSb2NrZXQuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuICAgIGlmIChpbmdlc3RTZXJ2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93Ll9fU0RLQ09ORklHX18gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy5fX1NES0NPTkZJR19fID0ge307XG4gICAgICB9XG5cbiAgICAgIHdpbmRvdy5fX1NES0NPTkZJR19fLnNlcnZlclVSTCA9IFwiXCIuY29uY2F0KGluZ2VzdFNlcnZlciwgXCIvaVwiKTtcbiAgICAgIHdpbmRvdy5fX1NES0NPTkZJR19fLnN0YXRzVVJMID0gXCJcIi5jb25jYXQoaW5nZXN0U2VydmVyLCBcIi9zXCIpO1xuICAgIH1cblxuICAgIGlmIChzZGtTZXJ2ZXIpIHtcbiAgICAgIHNjcmlwdC5zcmMgPSBcIlwiLmNvbmNhdChzZGtTZXJ2ZXIsIFwiL2xvZ2dlci5taW4uanNcIik7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuX19TREtDT05GSUdfXyAmJiB3aW5kb3cuX19TREtDT05GSUdfXy5sb2dnZXJVUkwpIHtcbiAgICAgIHNjcmlwdC5zcmMgPSB3aW5kb3cuX19TREtDT05GSUdfXy5sb2dnZXJVUkw7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuX2xyQXN5bmNTY3JpcHQpIHtcbiAgICAgIHNjcmlwdC5zcmMgPSB3aW5kb3cuX2xyQXN5bmNTY3JpcHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcmlwdC5zcmMgPSBcIlwiLmNvbmNhdChzY3JpcHRPcmlnaW4sIFwiL2xvZ2dlci0xLm1pbi5qc1wiKTtcbiAgICB9XG5cbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblxuICAgIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBCcmF2ZSBicm93c2VyOiBBZHZlcnRpc2VzIGl0cyB1c2VyLWFnZW50IGFzIENocm9tZSAjIy4jIy4uLiB0aGVuXG4gICAgICAvLyBsb2FkcyBsb2dnZXIubWluLmpzLCBidXQgYmxvY2tzIHRoZSBleGVjdXRpb24gb2YgdGhlIHNjcmlwdFxuICAgICAgLy8gY2F1c2luZyBfTFJsb2dnZXIgdG8gYmUgdW5kZWZpbmVkLiAgTGV0J3MgbWFrZSBzdXJlIGl0cyB0aGVyZSBmaXJzdC5cbiAgICAgIGlmICh0eXBlb2Ygd2luZG93Ll9MUkxvZ2dlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnN0YW5jZS5vbkxvZ2dlcihuZXcgd2luZG93Ll9MUkxvZ2dlcih7XG4gICAgICAgICAgc2RrVmVyc2lvbjogc2RrVmVyc2lvblxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oJ0xvZ1JvY2tldDogc2NyaXB0IGV4ZWN1dGlvbiBoYXMgYmVlbiBibG9ja2VkIGJ5IGEgcHJvZHVjdCBvciBzZXJ2aWNlLicpO1xuICAgICAgICBpbnN0YW5jZS51bmluc3RhbGwoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ0xvZ1JvY2tldDogc2NyaXB0IGNvdWxkIG5vdCBsb2FkLiBDaGVjayB0aGF0IHlvdSBoYXZlIGEgdmFsaWQgbmV0d29yayBjb25uZWN0aW9uLicpO1xuICAgICAgaW5zdGFuY2UudW5pbnN0YWxsKCk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAwOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBtdWx0aSAuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvbW9kdWxlLW5wbS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC9yb290L3Byb2plY3QvcGFja2FnZXMvbG9ncm9ja2V0L3NyYy9tb2R1bGUtbnBtLmpzICovXCIuL3BhY2thZ2VzL2xvZ3JvY2tldC9zcmMvbW9kdWxlLW5wbS5qc1wiKTtcblxuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTtcbn0pOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gTGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIE1nPVVmKG51bGwpLE5nPW51bGwsT2c9bnVsbCxQZz1udWxsO2Z1bmN0aW9uIFFnKCl7UGc9T2c9Tmc9bnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1NZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gU2coYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBUZyhhLGIpe05nPWE7UGc9T2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihVZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBWZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoUGchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09T2cpe2lmKG51bGw9PT1OZyl0aHJvdyBFcnJvcihwKDMwOCkpO09nPWE7TmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIE9nPU9nLm5leHQ9YTtyZXR1cm4gYn12YXIgV2c9bnVsbDtmdW5jdGlvbiBYZyhhKXtudWxsPT09V2c/V2c9W2FdOldnLnB1c2goYSl9ZnVuY3Rpb24gWWcoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsWGcoYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIFpnKGEsZCl9XG5mdW5jdGlvbiBaZyhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyICRnPSExO2Z1bmN0aW9uIGFoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBiaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBjaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBaZyhhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsWGcoZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIFpnKGEsYyl9ZnVuY3Rpb24gZWgoYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlOyRnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOiRnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtoaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgamg9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24ga2goYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIG5oPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TCgpLGQ9XG5saChhKSxlPWNoKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1kaChhLGUsZCk7bnVsbCE9PWImJihtaChiLGEsZCxjKSxlaChiLGEsZCkpfX07ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBwaChhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1WZyhmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9bmg7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiByaChhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpoO2FoKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9VmcoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2goYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZ2goYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PWpoJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiB0aChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiB1aChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gdmgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9d2goYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZ1aChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXNoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD15aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1zaChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXpoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1BaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj14aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz15aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXNoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj16aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9QWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7dGgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTt0aChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTt0aChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZ1aChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9c2goYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPUFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD15aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1zaChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTt0aChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXhoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIEJoPXZoKCEwKSxDaD12aCghMSksRGg9e30sRWg9VWYoRGgpLEZoPVVmKERoKSxHaD1VZihEaCk7ZnVuY3Rpb24gSGgoYSl7aWYoYT09PURoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gSWgoYSxiKXtHKEdoLGIpO0coRmgsYSk7RyhFaCxEaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKEVoKTtHKEVoLGIpfWZ1bmN0aW9uIEpoKCl7RShFaCk7RShGaCk7RShHaCl9XG5mdW5jdGlvbiBLaChhKXtIaChHaC5jdXJyZW50KTt2YXIgYj1IaChFaC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKEZoLGEpLEcoRWgsYykpfWZ1bmN0aW9uIExoKGEpe0ZoLmN1cnJlbnQ9PT1hJiYoRShFaCksRShGaCkpfXZhciBNPVVmKDApO1xuZnVuY3Rpb24gTWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5oPVtdO1xuZnVuY3Rpb24gT2goKXtmb3IodmFyIGE9MDthPE5oLmxlbmd0aDthKyspTmhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtOaC5sZW5ndGg9MH12YXIgUGg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxSaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLFNoPSExLFRoPSExLFVoPTAsVmg9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gV2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSxmKXtSaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO1BoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/WWg6Wmg7YT1jKGQsZSk7aWYoVGgpe2Y9MDtkb3tUaD0hMTtVaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7UGguY3VycmVudD0kaDthPWMoZCxlKX13aGlsZShUaCl9UGguY3VycmVudD1haTtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1JoPTA7UD1PPU49bnVsbDtTaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmkoKXt2YXIgYT0wIT09VWg7VWg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGNpKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIGRpKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiBlaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoUmgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtOLmxhbmVzfD1tO2hofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE4ubGFuZXN8PWYsaGh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBnaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBoaSgpe31cbmZ1bmN0aW9uIGlpKGEsYil7dmFyIGM9TixkPWRpKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxVZz0hMCk7ZD1kLnF1ZXVlO2ppKGtpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVAmJlAubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIG5pKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIG1pKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7b2koYikmJnBpKGEpfWZ1bmN0aW9uIGtpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe29pKGIpJiZwaShhKX0pfWZ1bmN0aW9uIG9pKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIHBpKGEpe3ZhciBiPVpnKGEsMSk7bnVsbCE9PWImJm1oKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIHFpKGEpe3ZhciBiPWNpKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6ZWksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1yaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB0aShhLGIsYyxkKXt2YXIgZT1jaSgpO04uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1kaSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJldoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWxpKGIsYyxmLGQpO3JldHVybn19Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsZixkKX1mdW5jdGlvbiB2aShhLGIpe3JldHVybiB0aSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBqaShhLGIpe3JldHVybiB1aSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiB3aShhLGIpe3JldHVybiB1aSg0LDIsYSxiKX1mdW5jdGlvbiB4aShhLGIpe3JldHVybiB1aSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gemkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB1aSg0LDQseWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gQWkoKXt9ZnVuY3Rpb24gQmkoYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBDaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBEaShhLGIsYyl7aWYoMD09PShSaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsVWc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTi5sYW5lc3w9YyxoaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gRWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9UWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsUWgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBGaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9bGgoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixjKTtlbHNlIGlmKGM9WWcoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPUwoKTttaChjLGEsZCxlKTtKaShjLGIsZCl9fVxuZnVuY3Rpb24gcmkoYSxiLGMpe3ZhciBkPWxoKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLFhnKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9WWcoYSxiLGUsZCk7bnVsbCE9PWMmJihlPUwoKSxtaChjLGEsZCxlKSxKaShjLGIsZCkpfX1cbmZ1bmN0aW9uIEhpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09Tnx8bnVsbCE9PWImJmI9PT1OfWZ1bmN0aW9uIElpKGEsYil7VGg9U2g9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBKaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIGFpPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlSW5zZXJ0aW9uRWZmZWN0OlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRLHVzZU11dGFibGVTb3VyY2U6USx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpRLHVzZUlkOlEsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxZaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtjaSgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDp2aSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGkoNDE5NDMwOCxcbjQseWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9Y2koKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Y2koKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1HaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jaSgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpxaSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9cWkoITEpLGI9YVswXTthPUVpLmJpbmQobnVsbCxhWzFdKTtjaSgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU4sZT1jaSgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7dmkoa2kuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9Y2koKSxiPVIuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9VWgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVZoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxaaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpmaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmkoZWkpfSxcbnVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LCRoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmdpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBnaShlaSl9LHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBudWxsPT09XG5PP2IubWVtb2l6ZWRTdGF0ZT1hOkRpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Z2koZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gS2koYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fWZ1bmN0aW9uIExpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE5pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE9pKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1BpfHwoUGk9ITAsUWk9ZCk7TWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TaT9TaT1uZXcgU2V0KFt0aGlzXSk6U2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1VaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBWaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPWNoKC0xLDEpLGIudGFnPTIsZGgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFhpPXVhLlJlYWN0Q3VycmVudE93bmVyLFVnPSExO2Z1bmN0aW9uIFlpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Q2goYixudWxsLGMsZCk6QmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7VGcoYixlKTtkPVhoKGEsYixjLGQsZixlKTtjPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYmooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsY2ooYSxiLGYsZCxlKTthPXloKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiAkaShhLGIsZSl9Yi5mbGFnc3w9MTthPXdoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoVWc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKFVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsJGkoYSxiLGUpfXJldHVybiBkaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGZqLGdqKSxnanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGZqLGdqKSxnanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZmosZ2opO2dqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhmaixnaiksZ2p8PWQ7WWkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gZGooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO1RnKGIsZSk7Yz1YaChhLGIsYyxkLGYsZSk7ZD1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtUZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlqaihhLGIpLHBoKGIsYyxkKSxyaChiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1WZyhsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmcWgoYixnLGQsbCk7JGc9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtoKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD0kZ3x8b2goYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7YmgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1WZyhrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmcWgoYixnLGQsayk7JGc9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKGtoKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD0kZ3x8b2goYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGtqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGtqKGEsYixjLGQsZSxmKXtoaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSwkaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtYaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9QmgoYixudWxsLGgsZikpOllpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbGooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7SWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbWooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtZaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbmo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBvaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBwaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1NLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTSxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cWooZyxkLDAsbnVsbCksYT1BaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihjKSxiLm1lbW9pemVkU3RhdGU9bmosYSk6cmooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gc2ooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPXdoKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9d2goaCxmKTooZj1BaChmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP29qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD13aChmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiByaihhLGIpe2I9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHRqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtCaChiLGEuY2hpbGQsbnVsbCxjKTthPXJqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBzaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUxpKEVycm9yKHAoNDIyKSkpLHRqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1BaChmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJkJoKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihnKTtiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHRqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9TGkoZixkLHZvaWQgMCk7cmV0dXJuIHRqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoVWd8fGgpe2Q9UjtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLFpnKGEsZSksbWgoZCxhLGUsLTEpKX11aigpO2Q9TGkoRXJyb3IocCg0MjEpKSk7cmV0dXJuIHRqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXZqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1yaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gd2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtTZyhhLnJldHVybixiLGMpfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHlqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WWkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmd2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl3aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTSxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09TWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt4aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PU1oKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX14aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp4aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBqaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiAkaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aGh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXdoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz13aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gemooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6SWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhNLE0uY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gcGooYSxiLGMpO0coTSxNLmN1cnJlbnQmMSk7YT0kaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHlqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKE0sTS5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZWooYSxiLGMpfXJldHVybiAkaShhLGIsYyl9dmFyIEFqLEJqLENqLERqO1xuQWo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JqPWZ1bmN0aW9uKCl7fTtcbkNqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtIaChFaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RGo9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBFaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0poKCk7RShXZik7RShIKTtPaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpKTtCaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkxoKGIpO3ZhciBlPUhoKEdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO0FqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1IaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihHaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTS5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp1aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxcbkJqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTSk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClFaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9TWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtFaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5IaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPU1oKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRWooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkhqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1NLmN1cnJlbnQsRyhNLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGdqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBKaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmgoKSxFKFdmKSxFKEgpLE9oKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksbnVsbDtjYXNlIDEzOkUoTSk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBLaj0hMSxVPSExLExqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTmooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBPaj0hMTtcbmZ1bmN0aW9uIFBqKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6TGcoYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1PajtPaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk5qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFJqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFRqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBWaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxVaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihYaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVhqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFlqPSExO2Z1bmN0aW9uIFpqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylhayhhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBhayhhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fE1qKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1ZajtYPW51bGw7WmooYSxiLGMpO1g9ZDtZaj1lO251bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WWo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO1xuWmooYSxiLGMpO1g9ZDtZaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TmooYyxiLGcpOjAhPT0oZiY0KSYmTmooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKE1qKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpaaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFpqKGEsYixjKSxVPWQpOlpqKGEsYixjKTticmVhaztkZWZhdWx0OlpqKGEsYixjKX19ZnVuY3Rpb24gYmsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgTGopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1jay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1lqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7YWsoZixnLGUpO1g9bnVsbDtZaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWVrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBlayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7dHJ5e1FqKDMsYSxhLnJldHVybiksUmooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1FqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6ZGsoYixhKTtmayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6ZGsoYixhKTtmayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6ZGsoYixhKTtmayhhKTticmVhaztjYXNlIDEzOmRrKGIsYSk7ZmsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChnaz1CKCkpKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxkayhiLGEpLFU9bCk6ZGsoYixhKTtmayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TWoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpNaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2hrKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmhrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6ZGsoYixhKTtmayhhKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLFxuYSksZmsoYSl9fWZ1bmN0aW9uIGZrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVWooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VmooYSk7WGooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVZqKGEpO1dqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGlrKGEsYixjKXtWPWE7amsoYSxiLGMpfVxuZnVuY3Rpb24gamsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEtqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9S2o7dmFyIGw9VTtLaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/a2soZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTprayhlKTtmb3IoO251bGwhPT1mOylWPWYsamsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtLaj1oO1U9bH1sayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmxrKGEsYixjKX19XG5mdW5jdGlvbiBsayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFJqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6TGcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmaWgoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfWloKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZTaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UmooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbWs9TWF0aC5jZWlsLG5rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsb2s9dWEuUmVhY3RDdXJyZW50T3duZXIscGs9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFI9bnVsbCxZPW51bGwsWj0wLGdqPTAsZmo9VWYoMCksVD0wLHFrPW51bGwsaGg9MCxyaz0wLHNrPTAsdGs9bnVsbCx1az1udWxsLGdrPTAsSGo9SW5maW5pdHksdms9bnVsbCxQaT0hMSxRaT1udWxsLFNpPW51bGwsd2s9ITEseGs9bnVsbCx5az0wLHprPTAsQWs9bnVsbCxCaz0tMSxDaz0wO2Z1bmN0aW9uIEwoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUJrP0JrOkJrPUIoKX1cbmZ1bmN0aW9uIGxoKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1DayYmKENrPXljKCkpLENrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBtaChhLGIsYyxkKXtpZig1MDx6ayl0aHJvdyB6az0wLEFrPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09UilhPT09UiYmKDA9PT0oSyYyKSYmKHJrfD1jKSw0PT09VCYmRGsoYSxaKSksRWsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBFayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhGay5iaW5kKG51bGwsYSkpOmhnKEZrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUdrKGMsSGsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEhrKGEsYil7Qms9LTE7Q2s9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihJaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1KayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLEhqPUIoKSs1MDAsTGsoYSxiKTtkbyB0cnl7TWsoKTticmVha31jYXRjaChoKXtOayhhLGgpfXdoaWxlKDEpO1FnKCk7bmsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFI9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9T2soYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2lmKDY9PT1iKURrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhUGsoZSkmJihiPUprKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9T2soYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlFrKGEsdWssdmspO2JyZWFrO2Nhc2UgMzpEayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1nays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtMKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksYik7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA0OkRrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbWsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGQpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNTpRayhhLHVrLHZrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RWsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/SGsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBPayhhLGIpe3ZhciBjPXRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKExrKGEsYikuZmxhZ3N8PTI1Nik7YT1KayhhLGIpOzIhPT1hJiYoYj11ayx1az1jLG51bGwhPT1iJiZHaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gR2ooYSl7bnVsbD09PXVrP3VrPWE6dWsucHVzaC5hcHBseSh1ayxhKX1cbmZ1bmN0aW9uIFBrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBEayhhLGIpe2ImPX5zaztiJj1+cms7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRmsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRWsoYSxCKCkpLG51bGw7dmFyIGM9SmsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU9rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGIpLEVrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtRayhhLHVrLHZrKTtFayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihIaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gU2soYSl7bnVsbCE9PXhrJiYwPT09eGsudGFnJiYwPT09KEsmNikmJklrKCk7dmFyIGI9SztLfD0xO3ZhciBjPXBrLnRyYW5zaXRpb24sZD1DO3RyeXtpZihway50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxway50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSWooKXtnaj1mai5jdXJyZW50O0UoZmopfVxuZnVuY3Rpb24gTGsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpfWM9Yy5yZXR1cm59Uj1hO1k9YT13aChhLmN1cnJlbnQsbnVsbCk7Wj1naj1iO1Q9MDtxaz1udWxsO3NrPXJrPWhoPTA7dWs9dGs9bnVsbDtpZihudWxsIT09V2cpe2ZvcihiPVxuMDtiPFdnLmxlbmd0aDtiKyspaWYoYz1XZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1XZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTmsoYSxiKXtkb3t2YXIgYz1ZO3RyeXtRZygpO1BoLmN1cnJlbnQ9YWk7aWYoU2gpe2Zvcih2YXIgZD1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVNoPSExfVJoPTA7UD1PPU49bnVsbDtUaD0hMTtVaD0wO29rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cWs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7V2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmVGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtUaShmLGwsYik7dWooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1dpKEosZyxoLGYsYik7SmcoS2koayxoKSk7YnJlYWsgYX19Zj1rPUtpKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT10az90az1bZl06dGsucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU9pKGYsayxiKTtmaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UmkoZixoLGIpO2ZoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9VGsoYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBLaygpe3ZhciBhPW5rLmN1cnJlbnQ7bmsuY3VycmVudD1haTtyZXR1cm4gbnVsbD09PWE/YWk6YX1cbmZ1bmN0aW9uIHVqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVJ8fDA9PT0oaGgmMjY4NDM1NDU1KSYmMD09PShyayYyNjg0MzU0NTUpfHxEayhSLFopfWZ1bmN0aW9uIEprKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsTGsoYSxiKTtkbyB0cnl7VWsoKTticmVha31jYXRjaChlKXtOayhhLGUpfXdoaWxlKDEpO1FnKCk7Sz1jO25rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1I9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVWsoKXtmb3IoO251bGwhPT1ZOylWayhZKX1mdW5jdGlvbiBNaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylWayhZKX1mdW5jdGlvbiBWayhhKXt2YXIgYj1XayhhLmFsdGVybmF0ZSxhLGdqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/VGsoYSk6WT1iO29rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUZqKGMsYixnaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1KaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFFrKGEsYixjKXt2YXIgZD1DLGU9cGsudHJhbnNpdGlvbjt0cnl7cGsudHJhbnNpdGlvbj1udWxsLEM9MSxYayhhLGIsYyxkKX1maW5hbGx5e3BrLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBYayhhLGIsYyxkKXtkbyBJaygpO3doaWxlKG51bGwhPT14ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1SJiYoWT1SPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHdrfHwod2s9ITAsR2soaGMsZnVuY3Rpb24oKXtJaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1way50cmFuc2l0aW9uO3BrLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtvay5jdXJyZW50PW51bGw7UGooYSxjKTtlayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aWsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztway50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt3ayYmKHdrPSExLHhrPWEseWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFNpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0VrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihQaSl0aHJvdyBQaT0hMSxhPVFpLFFpPW51bGwsYTswIT09KHlrJjEpJiYwIT09YS50YWcmJklrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PUFrP3prKys6KHprPTAsQWs9YSk6ems9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSWsoKXtpZihudWxsIT09eGspe3ZhciBhPURjKHlrKSxiPXBrLnRyYW5zaXRpb24sYz1DO3RyeXtway50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXhrKXZhciBkPSExO2Vsc2V7YT14azt4az1udWxsO3lrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1RqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UmooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMscGsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBZayhhLGIsYyl7Yj1LaShjLGIpO2I9T2koYSxiLDEpO2E9ZGgoYSxiLDEpO2I9TCgpO251bGwhPT1hJiYoQWMoYSwxLGIpLEVrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVlrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1lrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKGQpKSl7YT1LaShjLGEpO2E9UmkoYixhLDEpO2I9ZGgoYixhLDEpO2E9TCgpO251bGwhPT1iJiYoQWMoYiwxLGEpLEVrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1MKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1I9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWdrP0xrKGEsMCk6c2t8PWMpO0VrKGEsYil9ZnVuY3Rpb24gWmsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1MKCk7YT1aZyhhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLEVrKGEsYykpfWZ1bmN0aW9uIHZqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtaayhhLGMpfVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WmsoYSxjKX12YXIgV2s7XG5Xaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpVWc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBVZz0hMSx6aihhLGIsYyk7VWc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBVZz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO1RnKGIsYyk7ZT1YaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9YmkoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGFoKGIpLGUudXBkYXRlcj1uaCxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIscmgoYixkLGEsYyksYj1raihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxZaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9JGsoZCk7YT1MZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1kaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aWoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFqKG51bGwsYixkLExnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxkaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxpaihhLGIsZCxlLGMpO2Nhc2UgMzphOntsaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7YmgoYSxiKTtnaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1LaShFcnJvcihwKDQyMykpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9S2koRXJyb3IocCg0MjQpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9Q2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj0kaShhLGIsYyk7YnJlYWsgYX1ZaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmhqKGEsYiksWWkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUJoKGIsbnVsbCxkLGMpOllpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxaaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj0kaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1jaCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7U2coZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7U2coZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVlpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sVGcoYixjKSxlPVZnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFlpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUxnKGQsYi5wZW5kaW5nUHJvcHMpLGU9TGcoZC50eXBlLGUpLGFqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGpqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxUZyhiLGMpLHBoKGIsZCxlKSxyaChiLGQsZSxjKSxraihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHlqKGEsYixjKTtjYXNlIDIyOnJldHVybiBlaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEdrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiBhbChhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3IGFsKGEsYixjLGQpfWZ1bmN0aW9uIGJqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiAkayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24geWgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBBaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcWooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBBaChhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBxaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIHhoKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHpoKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYmwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gY2woYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGJsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTthaChmKTtyZXR1cm4gYX1mdW5jdGlvbiBkbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZWwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBmbChhLGIsYyxkLGUsZixnLGgsayl7YT1jbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1lbChudWxsKTtjPWEuY3VycmVudDtkPUwoKTtlPWxoKGMpO2Y9Y2goZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtkaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0VrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2woYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TCgpLGc9bGgoZSk7Yz1lbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWNoKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9ZGgoZSxiLGcpO251bGwhPT1hJiYobWgoYSxlLGcsZiksZWgoYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGhsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaWwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGpsKGEsYil7aWwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmlsKGEsYil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gbnVsbH12YXIgbGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnJlbmRlcj1tbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2dsKGEsYixudWxsLG51bGwpfTtubC5wcm90b3R5cGUudW5tb3VudD1tbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1NrKGZ1bmN0aW9uKCl7Z2wobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBwbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcWwoKXt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtmLmNhbGwoYSl9fXZhciBnPWZsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChrKTtoLmNhbGwoYSl9fXZhciBrPWNsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTayhmdW5jdGlvbigpe2dsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBzbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtoLmNhbGwoYSl9fWdsKGIsZyxhLGUpfWVsc2UgZz1ybChjLGIsYSxlLGQpO3JldHVybiBobChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxFayhiLEIoKSksMD09PShLJjYpJiYoSGo9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpTayhmdW5jdGlvbigpe3ZhciBiPVpnKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMSxjKX19KSxqbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1aZyhhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMTM0MjE3NzI4LGMpfWpsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxoKGEpLGM9WmcoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9TCgpO21oKGMsYSxiLGQpfWpsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVJrO0hiPVNrO1xudmFyIHRsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixSa119LHVsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdmw9e2J1bmRsZVR5cGU6dWwuYnVuZGxlVHlwZSx2ZXJzaW9uOnVsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp1bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnVsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxua2wsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHdsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighd2wuaXNEaXNhYmxlZCYmd2wuc3VwcG9ydHNGaWJlcil0cnl7a2M9d2wuaW5qZWN0KHZsKSxsYz13bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBkbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9bGw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWNsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBtbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gU2soYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9bGw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWZsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG5sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXBsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhTayhmdW5jdGlvbigpe3NsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVJrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcGwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHNsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGM9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxkPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxlPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxmPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxnPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxoPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LnNlcnZlcl9jb250ZXh0XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLG09U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikscD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSx1O3U9U3ltYm9sLmZvcihcInJlYWN0Lm1vZHVsZS5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiB2KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciByPWEuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBtOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgaDpjYXNlIGw6Y2FzZSBxOmNhc2UgcDpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gcn19Y2FzZSBjOnJldHVybiByfX19ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1nO2V4cG9ydHMuRWxlbWVudD1iO2V4cG9ydHMuRm9yd2FyZFJlZj1sO2V4cG9ydHMuRnJhZ21lbnQ9ZDtleHBvcnRzLkxhenk9cTtleHBvcnRzLk1lbW89cDtleHBvcnRzLlBvcnRhbD1jO2V4cG9ydHMuUHJvZmlsZXI9ZjtleHBvcnRzLlN0cmljdE1vZGU9ZTtleHBvcnRzLlN1c3BlbnNlPW07XG5leHBvcnRzLlN1c3BlbnNlTGlzdD1uO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bH07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1xfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXB9O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bX07ZXhwb3J0cy5pc1N1c3BlbnNlTGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09ZXx8YT09PW18fGE9PT1ufHxhPT09dHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09bHx8YS4kJHR5cGVvZj09PXV8fHZvaWQgMCE9PWEuZ2V0TW9kdWxlSWQpPyEwOiExfTtleHBvcnRzLnR5cGVPZj12O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuNC40XG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzLCBSb3V0ZXIsIHVzZUhyZWYsIHVzZVJlc29sdmVkUGF0aCwgdXNlTG9jYXRpb24sIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIHVzZU5hdmlnYXRlLCBjcmVhdGVQYXRoLCBVTlNBRkVfUm91dGVDb250ZXh0LCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0aW9uLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0LCBVTlNBRkVfRGF0YVN0YXRpY1JvdXRlckNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgVU5TQUZFX2VuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IGNyZWF0ZVJvdXRlciwgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBFcnJvclJlc3BvbnNlLCBpbnZhcmlhbnQsIGpvaW5QYXRocyB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgZGVmYXVsdE1ldGhvZCA9IFwiZ2V0XCI7XG5jb25zdCBkZWZhdWx0RW5jVHlwZSA9IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCI7XG5mdW5jdGlvbiBpc0h0bWxFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgdHlwZW9mIG9iamVjdC50YWdOYW1lID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNCdXR0b25FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5mdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZm9ybVwiO1xufVxuZnVuY3Rpb24gaXNJbnB1dEVsZW1lbnQob2JqZWN0KSB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICA7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cbmZ1bmN0aW9uIGdldFNlYXJjaFBhcmFtc0ZvckxvY2F0aW9uKGxvY2F0aW9uU2VhcmNoLCBkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjcmVhdGVTZWFyY2hQYXJhbXMobG9jYXRpb25TZWFyY2gpO1xuXG4gIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKSkge1xuICAgIGlmICghc2VhcmNoUGFyYW1zLmhhcyhrZXkpKSB7XG4gICAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbn1cbmZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGRlZmF1bHRBY3Rpb24sIG9wdGlvbnMpIHtcbiAgbGV0IG1ldGhvZDtcbiAgbGV0IGFjdGlvbjtcbiAgbGV0IGVuY1R5cGU7XG4gIGxldCBmb3JtRGF0YTtcblxuICBpZiAoaXNGb3JtRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgbGV0IHN1Ym1pc3Npb25UcmlnZ2VyID0gb3B0aW9ucy5zdWJtaXNzaW9uVHJpZ2dlcjtcbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKSB8fCBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTtcblxuICAgIGlmIChzdWJtaXNzaW9uVHJpZ2dlciAmJiBzdWJtaXNzaW9uVHJpZ2dlci5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoc3VibWlzc2lvblRyaWdnZXIubmFtZSwgc3VibWlzc2lvblRyaWdnZXIudmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0J1dHRvbkVsZW1lbnQodGFyZ2V0KSB8fCBpc0lucHV0RWxlbWVudCh0YXJnZXQpICYmICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSkge1xuICAgIGxldCBmb3JtID0gdGFyZ2V0LmZvcm07XG5cbiAgICBpZiAoZm9ybSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGEgPGJ1dHRvbj4gb3IgPGlucHV0IHR5cGU9XFxcInN1Ym1pdFxcXCI+IHdpdGhvdXQgYSA8Zm9ybT5cIik7XG4gICAgfSAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cblxuXG4gICAgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHwgZm9ybS5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWFjdGlvblwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKSB8fCBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPSBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1lbmN0eXBlXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTsgLy8gSW5jbHVkZSBuYW1lICsgdmFsdWUgZnJvbSBhIDxidXR0b24+LCBhcHBlbmRpbmcgaW4gY2FzZSB0aGUgYnV0dG9uIG5hbWVcbiAgICAvLyBtYXRjaGVzIGFuIGV4aXN0aW5nIGlucHV0IG5hbWVcblxuICAgIGlmICh0YXJnZXQubmFtZSkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHRhcmdldC5uYW1lLCB0YXJnZXQudmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0h0bWxFbGVtZW50KHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgXCIgKyBcIjxpbnB1dCB0eXBlPVxcXCJzdWJtaXR8aW1hZ2VcXFwiPlwiKTtcbiAgfSBlbHNlIHtcbiAgICBtZXRob2QgPSBvcHRpb25zLm1ldGhvZCB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9IG9wdGlvbnMuYWN0aW9uIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9IG9wdGlvbnMuZW5jVHlwZSB8fCBkZWZhdWx0RW5jVHlwZTtcblxuICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgZm9ybURhdGEgPSB0YXJnZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG5cbiAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMpIHtcbiAgICAgICAgZm9yIChsZXQgW25hbWUsIHZhbHVlXSBvZiB0YXJnZXQpIHtcbiAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IG5hbWUgb2YgT2JqZWN0LmtleXModGFyZ2V0KSkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB0YXJnZXRbbmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHtcbiAgICBwcm90b2NvbCxcbiAgICBob3N0XG4gIH0gPSB3aW5kb3cubG9jYXRpb247XG4gIGxldCB1cmwgPSBuZXcgVVJMKGFjdGlvbiwgcHJvdG9jb2wgKyBcIi8vXCIgKyBob3N0KTtcbiAgcmV0dXJuIHtcbiAgICB1cmwsXG4gICAgbWV0aG9kLFxuICAgIGVuY1R5cGUsXG4gICAgZm9ybURhdGFcbiAgfTtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbGF0aXZlXCIsIFwicmVsb2FkRG9jdW1lbnRcIiwgXCJyZXBsYWNlXCIsIFwic3RhdGVcIiwgXCJ0YXJnZXRcIiwgXCJ0b1wiLCBcInByZXZlbnRTY3JvbGxSZXNldFwiXSxcbiAgICAgIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImNoaWxkcmVuXCJdLFxuICAgICAgX2V4Y2x1ZGVkMyA9IFtcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwiZmV0Y2hlcktleVwiLCBcInJvdXRlSWRcIiwgXCJyZWxhdGl2ZVwiXTtcbi8vI3JlZ2lvbiBSb3V0ZXJzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzOiBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZXMpXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiAob3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhKSB8fCBwYXJzZUh5ZHJhdGlvbkRhdGEoKSxcbiAgICByb3V0ZXM6IFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUh5ZHJhdGlvbkRhdGEoKSB7XG4gIHZhciBfd2luZG93O1xuXG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG5cbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuXG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZSh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3csXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCBmb3IgdXNlIGluIHdlYiBicm93c2Vycy4gU3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB0aGUgaGFzaFxuICogcG9ydGlvbiBvZiB0aGUgVVJMIHNvIGl0IGlzIG5vdCBzZW50IHRvIHRoZSBzZXJ2ZXIuXG4gKi9cblxuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuXG5mdW5jdGlvbiBIaXN0b3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaGlzdG9yeVxuICB9ID0gX3JlZjM7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBIaXN0b3J5Um91dGVyLmRpc3BsYXlOYW1lID0gXCJ1bnN0YWJsZV9IaXN0b3J5Um91dGVyXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjQsIHJlZikge1xuICBsZXQge1xuICAgIG9uQ2xpY2ssXG4gICAgcmVsYXRpdmUsXG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgdG8sXG4gICAgcHJldmVudFNjcm9sbFJlc2V0XG4gIH0gPSBfcmVmNCxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNCwgX2V4Y2x1ZGVkKTtcblxuICBsZXQgaHJlZiA9IHVzZUhyZWYodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHRhcmdldCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICAvKiNfX1BVUkVfXyovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgb25DbGljazogcmVsb2FkRG9jdW1lbnQgPyBvbkNsaWNrIDogaGFuZGxlQ2xpY2ssXG4gICAgICByZWY6IHJlZixcbiAgICAgIHRhcmdldDogdGFyZ2V0XG4gICAgfSkpXG4gICk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG59XG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5cblxuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY1LCByZWYpIHtcbiAgbGV0IHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFByb3AgPSBcInBhZ2VcIixcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICBlbmQgPSBmYWxzZSxcbiAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgIHRvLFxuICAgIGNoaWxkcmVuXG4gIH0gPSBfcmVmNSxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNSwgX2V4Y2x1ZGVkMik7XG5cbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlclN0YXRlID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKHBhdGgpLnBhdGhuYW1lIDogcGF0aC5wYXRobmFtZTtcbiAgbGV0IGxvY2F0aW9uUGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID0gcm91dGVyU3RhdGUgJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbiAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uID8gcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbi5wYXRobmFtZSA6IG51bGw7XG5cbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGxldCBpc0FjdGl2ZSA9IGxvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHwgIWVuZCAmJiBsb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIjtcbiAgbGV0IGlzUGVuZGluZyA9IG5leHRMb2NhdGlvblBhdGhuYW1lICE9IG51bGwgJiYgKG5leHRMb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBuZXh0TG9jYXRpb25QYXRobmFtZS5jaGFyQXQodG9QYXRobmFtZS5sZW5ndGgpID09PSBcIi9cIik7XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZSxcbiAgICAgIGlzUGVuZGluZ1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbCwgaXNQZW5kaW5nID8gXCJwZW5kaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cblxuICBsZXQgc3R5bGUgPSB0eXBlb2Ygc3R5bGVQcm9wID09PSBcImZ1bmN0aW9uXCIgPyBzdHlsZVByb3Aoe1xuICAgIGlzQWN0aXZlLFxuICAgIGlzUGVuZGluZ1xuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nXG4gIH0pIDogY2hpbGRyZW4pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xufVxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5cblxuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtSW1wbCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgcmVmOiByZWZcbiAgfSkpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybS5kaXNwbGF5TmFtZSA9IFwiRm9ybVwiO1xufVxuXG5jb25zdCBGb3JtSW1wbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmNiwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgcmVwbGFjZSxcbiAgICBtZXRob2QgPSBkZWZhdWx0TWV0aG9kLFxuICAgIGFjdGlvbixcbiAgICBvblN1Ym1pdCxcbiAgICBmZXRjaGVyS2V5LFxuICAgIHJvdXRlSWQsXG4gICAgcmVsYXRpdmVcbiAgfSA9IF9yZWY2LFxuICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNiwgX2V4Y2x1ZGVkMyk7XG5cbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gIGxldCBmb3JtTWV0aG9kID0gbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gIGxldCBmb3JtQWN0aW9uID0gdXNlRm9ybUFjdGlvbihhY3Rpb24sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcblxuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBtZXRob2QsXG4gICAgICByZXBsYWNlLFxuICAgICAgcmVsYXRpdmVcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIsIF9leHRlbmRzKHtcbiAgICByZWY6IGZvcndhcmRlZFJlZixcbiAgICBtZXRob2Q6IGZvcm1NZXRob2QsXG4gICAgYWN0aW9uOiBmb3JtQWN0aW9uLFxuICAgIG9uU3VibWl0OiByZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlclxuICB9LCBwcm9wcykpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRm9ybUltcGwuZGlzcGxheU5hbWUgPSBcIkZvcm1JbXBsXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIFNjcm9sbFJlc3RvcmF0aW9uKF9yZWY3KSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWY3O1xuICB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFNjcm9sbFJlc3RvcmF0aW9uLmRpc3BsYXlOYW1lID0gXCJTY3JvbGxSZXN0b3JhdGlvblwiO1xufSAvLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxudmFyIERhdGFSb3V0ZXJIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0SW1wbFwiXSA9IFwidXNlU3VibWl0SW1wbFwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZUZldGNoZXJcIl0gPSBcInVzZUZldGNoZXJcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG5cbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUZldGNoZXJzXCJdID0gXCJ1c2VGZXRjaGVyc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG59KShEYXRhUm91dGVyU3RhdGVIb29rIHx8IChEYXRhUm91dGVyU3RhdGVIb29rID0ge30pKTtcblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZW4vbWFpbi9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuXCI7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5cblxuZnVuY3Rpb24gdXNlTGlua0NsaWNrSGFuZGxlcih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICB0YXJnZXQsXG4gICAgcmVwbGFjZTogcmVwbGFjZVByb3AsXG4gICAgc3RhdGUsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGV2ZW50ID0+IHtcbiAgICBpZiAoc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhldmVudCwgdGFyZ2V0KSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcblxuICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUHJvcCAhPT0gdW5kZWZpbmVkID8gcmVwbGFjZVByb3AgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcbiAgICAgIG5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHJlcGxhY2UsXG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIHJlbGF0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtsb2NhdGlvbiwgbmF2aWdhdGUsIHBhdGgsIHJlcGxhY2VQcm9wLCBzdGF0ZSwgdGFyZ2V0LCB0bywgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZV0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5cbmZ1bmN0aW9uIHVzZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkge1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09IFwidW5kZWZpbmVkXCIsIFwiWW91IGNhbm5vdCB1c2UgdGhlIGB1c2VTZWFyY2hQYXJhbXNgIGhvb2sgaW4gYSBicm93c2VyIHRoYXQgZG9lcyBub3QgXCIgKyBcInN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgXCIgKyBcIkV4cGxvcmVyIDExLCB3ZSByZWNvbW1lbmQgeW91IGxvYWQgYSBwb2x5ZmlsbCBzdWNoIGFzIFwiICsgXCJodHRwczovL2dpdGh1Yi5jb20vdW5nYXAvdXJsLXNlYXJjaC1wYXJhbXNcXG5cXG5cIiArIFwiSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IFwiICsgXCJodHRwczovL3BvbHlmaWxsLmlvL3YzLyB3aGljaCBwcm92aWRlcyBzb21lIHJlY29tbWVuZGF0aW9ucyBhYm91dCBob3cgXCIgKyBcInRvIGxvYWQgcG9seWZpbGxzIG9ubHkgZm9yIHVzZXJzIHRoYXQgbmVlZCB0aGVtLCBpbnN0ZWFkIG9mIGZvciBldmVyeSBcIiArIFwidXNlci5cIikgOiB2b2lkIDA7XG4gIGxldCBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmID0gUmVhY3QudXNlUmVmKGNyZWF0ZVNlYXJjaFBhcmFtcyhkZWZhdWx0SW5pdCkpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PiBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbihsb2NhdGlvbi5zZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCksIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgY29uc3QgbmV3U2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHR5cGVvZiBuZXh0SW5pdCA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEluaXQoc2VhcmNoUGFyYW1zKSA6IG5leHRJbml0KTtcbiAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgfSwgW25hdmlnYXRlLCBzZWFyY2hQYXJhbXNdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc3VibWl0IGEgZm9ybSAob3JcbiAqIHNvbWUgYXJiaXRyYXJ5IGRhdGEpIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cblxuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICByZXR1cm4gdXNlU3VibWl0SW1wbCgpO1xufVxuXG5mdW5jdGlvbiB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXJcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVN1Ym1pdEltcGwpO1xuICBsZXQgZGVmYXVsdEFjdGlvbiA9IHVzZUZvcm1BY3Rpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICsgXCJUcnkgY2FsbGluZyBzdWJtaXQgd2l0aGluIGEgYHVzZUVmZmVjdGAgb3IgY2FsbGJhY2sgaW5zdGVhZC5cIik7XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGVuY1R5cGUsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIHVybFxuICAgIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8odGFyZ2V0LCBkZWZhdWx0QWN0aW9uLCBvcHRpb25zKTtcbiAgICBsZXQgaHJlZiA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgbGV0IG9wdHMgPSB7XG4gICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICBmb3JtRGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IG1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlOiBlbmNUeXBlXG4gICAgfTtcblxuICAgIGlmIChmZXRjaGVyS2V5KSB7XG4gICAgICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiTm8gcm91dGVJZCBhdmFpbGFibGUgZm9yIHVzZUZldGNoZXIoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByb3V0ZXIuZmV0Y2goZmV0Y2hlcktleSwgcm91dGVJZCwgaHJlZiwgb3B0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShocmVmLCBvcHRzKTtcbiAgICB9XG4gIH0sIFtkZWZhdWx0QWN0aW9uLCByb3V0ZXIsIGZldGNoZXJLZXksIHJvdXRlSWRdKTtcbn1cblxuZnVuY3Rpb24gdXNlRm9ybUFjdGlvbihhY3Rpb24sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9Sb3V0ZUNvbnRleHQpO1xuICAhcm91dGVDb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZUZvcm1BY3Rpb24gbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dFwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICBsZXQgcmVzb2x2ZWRBY3Rpb24gPSBhY3Rpb24gIT0gbnVsbCA/IGFjdGlvbiA6IFwiLlwiOyAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG5cbiAgbGV0IHBhdGggPSBfZXh0ZW5kcyh7fSwgdXNlUmVzb2x2ZWRQYXRoKHJlc29sdmVkQWN0aW9uLCB7XG4gICAgcmVsYXRpdmVcbiAgfSkpOyAvLyBQcmV2aW91c2x5IHdlIHNldCB0aGUgZGVmYXVsdCBhY3Rpb24gdG8gXCIuXCIuIFRoZSBwcm9ibGVtIHdpdGggdGhpcyBpcyB0aGF0XG4gIC8vIGB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpYCBleGNsdWRlcyBzZWFyY2ggcGFyYW1zIGFuZCB0aGUgaGFzaCBvZiB0aGUgcmVzb2x2ZWRcbiAgLy8gVVJMLiBUaGlzIGlzIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuIFwiLlwiIGlzIHNwZWNpZmljYWxseSBwcm92aWRlZCBhc1xuICAvLyB0aGUgZm9ybSBhY3Rpb24sIGJ1dCBpbmNvbnNpc3RlbnQgdy8gYnJvd3NlcnMgd2hlbiB0aGUgYWN0aW9uIGlzIG9taXR0ZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuXG5cbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcblxuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoZXNlIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICAvLyBvciBoYXNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDsgLy8gV2hlbiBncmFiYmluZyBzZWFyY2ggcGFyYW1zIGZyb20gdGhlIFVSTCwgcmVtb3ZlIHRoZSBhdXRvbWF0aWNhbGx5XG4gICAgLy8gaW5zZXJ0ZWQgP2luZGV4IHBhcmFtIHNvIHdlIG1hdGNoIHRoZSB1c2VSZXNvbHZlZFBhdGggc2VhcmNoIGJlaGF2aW9yXG4gICAgLy8gd2hpY2ggd291bGQgbm90IGluY2x1ZGUgP2luZGV4XG5cbiAgICBpZiAobWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICAgIGxldCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhdGguc2VhcmNoKTtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoID8gcGF0aC5zZWFyY2gucmVwbGFjZSgvXlxcPy8sIFwiP2luZGV4JlwiKSA6IFwiP2luZGV4XCI7XG4gIH0gLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgZm9ybSBhY3Rpb24uICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlXG4gIC8vIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZVxuICAvLyBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgYWN0aW9uc1xuXG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVBhdGgocGF0aCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZldGNoZXJGb3JtKGZldGNoZXJLZXksIHJvdXRlSWQpIHtcbiAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9ybUltcGwsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiByZWYsXG4gICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgcm91dGVJZDogcm91dGVJZFxuICAgIH0pKTtcbiAgfSk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuXG4gIHJldHVybiBGZXRjaGVyRm9ybTtcbn1cblxubGV0IGZldGNoZXJJZCA9IDA7XG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5cbmZ1bmN0aW9uIHVzZUZldGNoZXIoKSB7XG4gIHZhciBfcm91dGUkbWF0Y2hlcztcblxuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VGZXRjaGVyIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgcm91dGVJZCA9IChfcm91dGUkbWF0Y2hlcyA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZSRtYXRjaGVzLnJvdXRlLmlkO1xuICAhKHJvdXRlSWQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbZmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytmZXRjaGVySWQpKTtcbiAgbGV0IFtGb3JtXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5Gb3JtKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgfSk7XG4gIGxldCBbbG9hZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBocmVmID0+IHtcbiAgICAhcm91dGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlciBhdmFpbGFibGUgZm9yIGZldGNoZXIubG9hZCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhcm91dGVJZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmKTtcbiAgfSk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXksIHJvdXRlSWQpO1xuICBsZXQgZmV0Y2hlciA9IHJvdXRlci5nZXRGZXRjaGVyKGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybSxcbiAgICBzdWJtaXQsXG4gICAgbG9hZFxuICB9LCBmZXRjaGVyKSwgW2ZldGNoZXIsIEZvcm0sIHN1Ym1pdCwgbG9hZF0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIElzIHRoaXMgYnVzdGVkIHdoZW4gdGhlIFJlYWN0IHRlYW0gZ2V0cyByZWFsIHdlaXJkIGFuZCBjYWxscyBlZmZlY3RzXG4gICAgLy8gdHdpY2Ugb24gbW91bnQ/ICBXZSByZWFsbHkganVzdCBuZWVkIHRvIGdhcmJhZ2UgY29sbGVjdCBoZXJlIHdoZW4gdGhpc1xuICAgIC8vIGZldGNoZXIgaXMgbm8gbG9uZ2VyIGFyb3VuZC5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFyb3V0ZXIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiTm8gZmV0Y2hlciBhdmFpbGFibGUgdG8gY2xlYW4gdXAgZnJvbSB1c2VGZXRjaGVyKClcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhbGwgZmV0Y2hlcnMgY3VycmVudGx5IG9uIHRoZSBwYWdlLiBVc2VmdWwgZm9yIGxheW91dHMgYW5kIHBhcmVudFxuICogcm91dGVzIHRoYXQgbmVlZCB0byBwcm92aWRlIHBlbmRpbmcvb3B0aW1pc3RpYyBVSSByZWdhcmRpbmcgdGhlIGZldGNoLlxuICovXG5cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBbLi4uc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCldO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cblxuZnVuY3Rpb24gdXNlU2Nyb2xsUmVzdG9yYXRpb24oX3RlbXAzKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VTY3JvbGxSZXN0b3JhdGlvbik7XG4gIGxldCB7XG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldFxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7IC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJtYW51YWxcIjtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9O1xuICB9LCBbXSk7IC8vIFNhdmUgcG9zaXRpb25zIG9uIHVubG9hZFxuXG4gIHVzZUJlZm9yZVVubG9hZChSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuXG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpKTtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pKTsgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSk7XG5cbiAgICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7Ly8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgIH1cbiAgfSwgW3N0b3JhZ2VLZXldKTsgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyID09IG51bGwgPyB2b2lkIDAgOiByb3V0ZXIuZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24oc2F2ZWRTY3JvbGxQb3NpdGlvbnMsICgpID0+IHdpbmRvdy5zY3JvbGxZLCBnZXRLZXkpO1xuICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gIH0sIFtyb3V0ZXIsIGdldEtleV0pOyAvLyBSZXN0b3JlIHNjcm9sbGluZyB3aGVuIHN0YXRlLnJlc3RvcmVTY3JvbGxQb3NpdGlvbiBjaGFuZ2VzXG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuXG5cbiAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyB0cnkgdG8gc2Nyb2xsIHRvIHRoZSBoYXNoXG5cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBsZXQgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2NhdGlvbi5oYXNoLnNsaWNlKDEpKTtcblxuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IC8vIE9wdCBvdXQgb2Ygc2Nyb2xsIHJlc2V0IGlmIHRoaXMgbGluayByZXF1ZXN0ZWQgaXRcblxuXG4gICAgaWYgKHByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuXG5cbiAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbn1cblxuZnVuY3Rpb24gdXNlQmVmb3JlVW5sb2FkKGNhbGxiYWNrKSB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2spO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrXSk7XG59IC8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVdGlsc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufSAvLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgRm9ybSwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgU2Nyb2xsUmVzdG9yYXRpb24sIGNyZWF0ZUJyb3dzZXJSb3V0ZXIsIGNyZWF0ZUhhc2hSb3V0ZXIsIGNyZWF0ZVNlYXJjaFBhcmFtcywgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyLCB1c2VGZXRjaGVyLCB1c2VGZXRjaGVycywgdXNlRm9ybUFjdGlvbiwgdXNlTGlua0NsaWNrSGFuZGxlciwgdXNlU2VhcmNoUGFyYW1zLCB1c2VTdWJtaXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuNC40XG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IGludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcywgd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBzdHJpcEJhc2VuYW1lLCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cblxuZnVuY3Rpb24gaXNQb2x5ZmlsbCh4LCB5KSB7XG4gIHJldHVybiB4ID09PSB5ICYmICh4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSkgfHwgeCAhPT0geCAmJiB5ICE9PSB5IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIDtcbn1cblxuY29uc3QgaXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSBcImZ1bmN0aW9uXCIgPyBPYmplY3QuaXMgOiBpc1BvbHlmaWxsOyAvLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBuYW1lZCBpbXBvcnRzIGJlY2F1c2UgUm9sbHVwIHVzZXMgZHluYW1pY1xuLy8gZGlzcGF0Y2ggZm9yIENvbW1vbkpTIGludGVyb3AgbmFtZWQgaW1wb3J0cy5cblxuY29uc3Qge1xuICB1c2VTdGF0ZSxcbiAgdXNlRWZmZWN0LFxuICB1c2VMYXlvdXRFZmZlY3QsXG4gIHVzZURlYnVnVmFsdWVcbn0gPSBSZWFjdDtcbmxldCBkaWRXYXJuT2xkMThBbHBoYSA9IGZhbHNlO1xubGV0IGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gZmFsc2U7IC8vIERpc2NsYWltZXI6IFRoaXMgc2hpbSBicmVha3MgbWFueSBvZiB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzXG4vLyBiZWNhdXNlIG9mIGEgdmVyeSBwYXJ0aWN1bGFyIHNldCBvZiBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGFuZCBhc3N1bXB0aW9uc1xuLy8gLS0gY2hhbmdlIGFueSBvbmUgb2YgdGhlbSBhbmQgaXQgd2lsbCBicmVhay4gVGhlIG1vc3QgaW1wb3J0YW50IGFzc3VtcHRpb25cbi8vIGlzIHRoYXQgdXBkYXRlcyBhcmUgYWx3YXlzIHN5bmNocm9ub3VzLCBiZWNhdXNlIGNvbmN1cnJlbnQgcmVuZGVyaW5nIGlzXG4vLyBvbmx5IGF2YWlsYWJsZSBpbiB2ZXJzaW9ucyBvZiBSZWFjdCB0aGF0IGFsc28gaGF2ZSBhIGJ1aWx0LWluXG4vLyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBBUEkuIEFuZCB3ZSBvbmx5IHVzZSB0aGlzIHNoaW0gd2hlbiB0aGUgYnVpbHQtaW4gQVBJXG4vLyBkb2VzIG5vdCBleGlzdC5cbi8vXG4vLyBEbyBub3QgYXNzdW1lIHRoYXQgdGhlIGNsZXZlciBoYWNrcyB1c2VkIGJ5IHRoaXMgaG9vayBhbHNvIHdvcmsgaW4gZ2VuZXJhbC5cbi8vIFRoZSBwb2ludCBvZiB0aGlzIHNoaW0gaXMgdG8gcmVwbGFjZSB0aGUgbmVlZCBmb3IgaGFja3MgYnkgb3RoZXIgbGlicmFyaWVzLlxuXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQyKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2Zcbi8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuLy8gd2lsbCBuZWVkIHRvIHRyYWNrIHRoYXQgdGhlbXNlbHZlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlXG4vLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG5nZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFkaWRXYXJuT2xkMThBbHBoYSkge1xuICAgICAgaWYgKFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QpIHtcbiAgICAgICAgZGlkV2Fybk9sZDE4QWxwaGEgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiWW91IGFyZSB1c2luZyBhbiBvdXRkYXRlZCwgcHJlLXJlbGVhc2UgYWxwaGEgb2YgUmVhY3QgMTggdGhhdCBcIiArIFwiZG9lcyBub3Qgc3VwcG9ydCB1c2VTeW5jRXh0ZXJuYWxTdG9yZS4gVGhlIFwiICsgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICsgXCJ0byBhIG5ld2VyIHByZS1yZWxlYXNlLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUmVhZCB0aGUgY3VycmVudCBzbmFwc2hvdCBmcm9tIHRoZSBzdG9yZSBvbiBldmVyeSByZW5kZXIuIEFnYWluLCB0aGlzXG4gIC8vIGJyZWFrcyB0aGUgcnVsZXMgb2YgUmVhY3QsIGFuZCBvbmx5IHdvcmtzIGhlcmUgYmVjYXVzZSBvZiBzcGVjaWZpY1xuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzLCBtb3N0IGltcG9ydGFudGx5IHRoYXQgdXBkYXRlcyBhcmVcbiAgLy8gYWx3YXlzIHN5bmNocm9ub3VzLlxuXG5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICBjb25zdCBjYWNoZWRWYWx1ZSA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIik7XG4gICAgICAgIGRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG5cblxuICBjb25zdCBbe1xuICAgIGluc3RcbiAgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoe1xuICAgIGluc3Q6IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZ2V0U25hcHNob3RcbiAgICB9XG4gIH0pOyAvLyBUcmFjayB0aGUgbGF0ZXN0IGdldFNuYXBzaG90IGZ1bmN0aW9uIHdpdGggYSByZWYuIFRoaXMgbmVlZHMgdG8gYmUgdXBkYXRlZFxuICAvLyBpbiB0aGUgbGF5b3V0IHBoYXNlIHNvIHdlIGNhbiBhY2Nlc3MgaXQgZHVyaW5nIHRoZSB0ZWFyaW5nIGNoZWNrIHRoYXRcbiAgLy8gaGFwcGVucyBvbiBzdWJzY3JpYmUuXG5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90OyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgICAvLyBjb21taXQgcGhhc2UgaWYgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIG11dGF0aW9uLiBJbiBjb25jdXJyZW50IG1vZGVcbiAgICAvLyB0aGlzIGNhbiBoYXBwZW4gYWxsIHRoZSB0aW1lLCBidXQgZXZlbiBpbiBzeW5jaHJvbm91cyBtb2RlLCBhbiBlYXJsaWVyXG4gICAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gICAgaWYgKGNoZWNrSWZTbmFwc2hvdENoYW5nZWQoaW5zdCkpIHtcbiAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICBpbnN0XG4gICAgICB9KTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcblxuICB9LCBbc3Vic2NyaWJlLCB2YWx1ZSwgZ2V0U25hcHNob3RdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHtcbiAgICAgICAgaW5zdFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuICAgICAgLy8gVGhlIHN0b3JlIGNoYW5nZWQuIENoZWNrIGlmIHRoZSBzbmFwc2hvdCBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2VcbiAgICAgIC8vIHJlYWQgZnJvbSB0aGUgc3RvcmUuXG4gICAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgICAgZm9yY2VVcGRhdGUoe1xuICAgICAgICAgIGluc3RcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICAgIHJldHVybiBzdWJzY3JpYmUoaGFuZGxlU3RvcmVDaGFuZ2UpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcbiAgdXNlRGVidWdWYWx1ZSh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIGNvbnN0IGxhdGVzdEdldFNuYXBzaG90ID0gaW5zdC5nZXRTbmFwc2hvdDtcbiAgY29uc3QgcHJldlZhbHVlID0gaW5zdC52YWx1ZTtcblxuICB0cnkge1xuICAgIGNvbnN0IG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFpcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZSQxKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gIC8vIE5vdGU6IFRoZSBzaGltIGRvZXMgbm90IHVzZSBnZXRTZXJ2ZXJTbmFwc2hvdCwgYmVjYXVzZSBwcmUtMTggdmVyc2lvbnMgb2ZcbiAgLy8gUmVhY3QgZG8gbm90IGV4cG9zZSBhIHdheSB0byBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcuIFNvIHVzZXJzIG9mIHRoZSBzaGltXG4gIC8vIHdpbGwgbmVlZCB0byB0cmFjayB0aGF0IHRoZW1zZWx2ZXMgYW5kIHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZVxuICAvLyBmcm9tIGBnZXRTbmFwc2hvdGAuXG4gIHJldHVybiBnZXRTbmFwc2hvdCgpO1xufVxuXG4vKipcbiAqIElubGluZWQgaW50byB0aGUgcmVhY3Qtcm91dGVyIHJlcG8gc2luY2UgdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUgZG9lcyBub3RcbiAqIHByb3ZpZGUgYSBVTUQtY29tcGF0aWJsZSBwYWNrYWdlLCBzbyB3ZSBuZWVkIHRoaXMgdG8gYmUgYWJsZSB0byBkaXN0cmlidXRlXG4gKiBVTUQgcmVhY3Qtcm91dGVyIGJ1bmRsZXNcbiAqL1xuY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIik7XG5jb25zdCBpc1NlcnZlckVudmlyb25tZW50ID0gIWNhblVzZURPTTtcbmNvbnN0IHNoaW0gPSBpc1NlcnZlckVudmlyb25tZW50ID8gdXNlU3luY0V4dGVybmFsU3RvcmUkMSA6IHVzZVN5bmNFeHRlcm5hbFN0b3JlJDI7XG5jb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdCA/IChtb2R1bGUgPT4gbW9kdWxlLnVzZVN5bmNFeHRlcm5hbFN0b3JlKShSZWFjdCkgOiBzaGltO1xuXG4vLyBDb250ZXh0cyBmb3IgZGF0YSByb3V0ZXJzXG5jb25zdCBEYXRhU3RhdGljUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFTdGF0aWNSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhU3RhdGljUm91dGVyQ29udGV4dFwiO1xufVxuXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5cbmNvbnN0IERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cblxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5cbmNvbnN0IExvY2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cblxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdXG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmNvbnN0IFJvdXRlRXJyb3JDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1ocmVmXG4gKi9cblxuZnVuY3Rpb24gdXNlSHJlZih0bywgX3RlbXApIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IuY3JlYXRlSHJlZih7XG4gICAgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLFxuICAgIHNlYXJjaCxcbiAgICBoYXNoXG4gIH0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgPFJvdXRlcj4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZUluUm91dGVyQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KSAhPSBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLWxvY2F0aW9uXG4gKi9cblxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5sb2NhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW5hdmlnYXRpb24tdHlwZVxuICovXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgUGF0aE1hdGNoIG9iamVjdCBpZiB0aGUgZ2l2ZW4gcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW1hdGNoXG4gKi9cblxuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgcGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSksIFtwYXRobmFtZSwgcGF0dGVybl0pO1xufVxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGltcGVyYXRpdmUgbWV0aG9kIGZvciBjaGFuZ2luZyB0aGUgbG9jYXRpb24uIFVzZWQgYnkgPExpbms+cywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1uYXZpZ2F0ZVxuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiKSA6IHZvaWQgMDtcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTsgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkuICBJZiB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIHdlXG4gICAgLy8gbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbFxuICAgIC8vIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICB9XG5cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlT3V0bGV0Q29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgPE91dGxldD4gdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLW91dGxldFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldChjb250ZXh0KSB7XG4gIGxldCBvdXRsZXQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCkub3V0bGV0O1xuXG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG5cbiAgcmV0dXJuIG91dGxldDtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvaG9va3MvdXNlLXJlc29sdmVkLXBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKS5tYXAobWF0Y2ggPT4gbWF0Y2gucGF0aG5hbWVCYXNlKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2hvb2tzL3VzZS1yb3V0ZXNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBkYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gcGFyZW50TWF0Y2hlc1twYXJlbnRNYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBsZXQgcGFyZW50UGFyYW1zID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG4gIGxldCBwYXJlbnRQYXRobmFtZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lIDogXCIvXCI7XG4gIGxldCBwYXJlbnRQYXRobmFtZUJhc2UgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZUJhc2UgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFJvdXRlID0gcm91dGVNYXRjaCAmJiByb3V0ZU1hdGNoLnJvdXRlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG5cbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgdmFyIF9wYXJzZWRMb2NhdGlvbkFyZyRwYTtcblxuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIGA8Um91dGVzIGxvY2F0aW9uPmAgb3IgYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKWAsIFwiICsgXCJ0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgXCIgKyAoXCJtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFxcXCJcIiArIHBhcmVudFBhdGhuYW1lQmFzZSArIFwiXFxcIiBcIikgKyAoXCJidXQgcGF0aG5hbWUgXFxcIlwiICsgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUgKyBcIlxcXCIgd2FzIGdpdmVuIGluIHRoZSBgbG9jYXRpb25gIHByb3AuXCIpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbG9jYXRpb24gPSBwYXJzZWRMb2NhdGlvbkFyZztcbiAgfSBlbHNlIHtcbiAgICBsb2NhdGlvbiA9IGxvY2F0aW9uRnJvbUNvbnRleHQ7XG4gIH1cblxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UocGFyZW50UGF0aG5hbWVCYXNlLmxlbmd0aCkgfHwgXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCB7XG4gICAgcGF0aG5hbWU6IHJlbWFpbmluZ1BhdGhuYW1lXG4gIH0pO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHBhcmVudFJvdXRlIHx8IG1hdGNoZXMgIT0gbnVsbCwgXCJObyByb3V0ZXMgbWF0Y2hlZCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobWF0Y2hlcyA9PSBudWxsIHx8IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQsIFwiTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFxcXCJcIiArIGxvY2F0aW9uLnBhdGhuYW1lICsgbG9jYXRpb24uc2VhcmNoICsgbG9jYXRpb24uaGFzaCArIFwiXFxcIiBkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQuIFwiICsgXCJUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIG51bGwgdmFsdWUgYnkgZGVmYXVsdCByZXN1bHRpbmcgaW4gYW4gXFxcImVtcHR5XFxcIiBwYWdlLlwiKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzICYmIG1hdGNoZXMubWFwKG1hdGNoID0+IE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZSkucGF0aG5hbWUgOiBtYXRjaC5wYXRobmFtZV0pLFxuICAgIHBhdGhuYW1lQmFzZTogbWF0Y2gucGF0aG5hbWVCYXNlID09PSBcIi9cIiA/IHBhcmVudFBhdGhuYW1lQmFzZSA6IGpvaW5QYXRocyhbcGFyZW50UGF0aG5hbWVCYXNlLCAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGVDb250ZXh0IHx8IHVuZGVmaW5lZCk7IC8vIFdoZW4gYSB1c2VyIHBhc3NlcyBpbiBhIGBsb2NhdGlvbkFyZ2AsIHRoZSBhc3NvY2lhdGVkIHJvdXRlcyBuZWVkIHRvXG4gIC8vIGJlIHdyYXBwZWQgaW4gYSBuZXcgYExvY2F0aW9uQ29udGV4dC5Qcm92aWRlcmAgaW4gb3JkZXIgZm9yIGB1c2VMb2NhdGlvbmBcbiAgLy8gdG8gdXNlIHRoZSBzY29wZWQgbG9jYXRpb24gaW5zdGVhZCBvZiB0aGUgZ2xvYmFsIGxvY2F0aW9uLlxuXG5cbiAgaWYgKGxvY2F0aW9uQXJnICYmIHJlbmRlcmVkTWF0Y2hlcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIGxvY2F0aW9uOiBfZXh0ZW5kcyh7XG4gICAgICAgICAgcGF0aG5hbWU6IFwiL1wiLFxuICAgICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgIHN0YXRlOiBudWxsLFxuICAgICAgICAgIGtleTogXCJkZWZhdWx0XCJcbiAgICAgICAgfSwgbG9jYXRpb24pLFxuICAgICAgICBuYXZpZ2F0aW9uVHlwZTogQWN0aW9uLlBvcFxuICAgICAgfVxuICAgIH0sIHJlbmRlcmVkTWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzO1xufVxuXG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JFbGVtZW50KCkge1xuICBsZXQgZXJyb3IgPSB1c2VSb3V0ZUVycm9yKCk7XG4gIGxldCBtZXNzYWdlID0gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpID8gZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0IDogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBKU09OLnN0cmluZ2lmeShlcnJvcik7XG4gIGxldCBzdGFjayA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IG51bGw7XG4gIGxldCBsaWdodGdyZXkgPSBcInJnYmEoMjAwLDIwMCwyMDAsIDAuNSlcIjtcbiAgbGV0IHByZVN0eWxlcyA9IHtcbiAgICBwYWRkaW5nOiBcIjAuNXJlbVwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIGxldCBjb2RlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMnB4IDRweFwiLFxuICAgIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuaGFuZGxlZCBUaHJvd24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJcXHVEODNEXFx1RENCRiBIZXkgZGV2ZWxvcGVyIFxcdUQ4M0RcXHVEQzRCXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwgbnVsbCwgXCJZb3UgY2FuIHByb3ZpZGUgYSB3YXkgYmV0dGVyIFVYIHRoYW4gdGhpcyB3aGVuIHlvdXIgYXBwIHRocm93cyBlcnJvcnMgYnkgcHJvdmlkaW5nIHlvdXIgb3duXFx4QTBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICBzdHlsZTogY29kZVN0eWxlc1xuICB9LCBcImVycm9yRWxlbWVudFwiKSwgXCIgcHJvcHMgb25cXHhBMFwiLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwge1xuICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gIH0sIFwiPFJvdXRlPlwiKSkpO1xufVxuXG5jbGFzcyBSZW5kZXJFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5sb2NhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBlcnJvclxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHByb3BzLCBzdGF0ZSkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uXG4gICAgICB9O1xuICAgIH0gLy8gSWYgd2UncmUgbm90IGNoYW5naW5nIGxvY2F0aW9ucywgcHJlc2VydmUgdGhlIGxvY2F0aW9uIGJ1dCBzdGlsbCBzdXJmYWNlXG4gICAgLy8gYW55IG5ldyBlcnJvcnMgdGhhdCBtYXkgY29tZSB0aHJvdWdoLiBXZSByZXRhaW4gdGhlIGV4aXN0aW5nIGVycm9yLCB3ZSBkb1xuICAgIC8vIHRoaXMgYmVjYXVzZSB0aGUgZXJyb3IgcHJvdmlkZWQgZnJvbSB0aGUgYXBwIHN0YXRlIG1heSBiZSBjbGVhcmVkIHdpdGhvdXRcbiAgICAvLyB0aGUgbG9jYXRpb24gY2hhbmdpbmcuXG5cblxuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogcHJvcHMuZXJyb3IgfHwgc3RhdGUuZXJyb3IsXG4gICAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3IsIGVycm9ySW5mbykge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJSZWFjdCBSb3V0ZXIgY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlRXJyb3JDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5lcnJvcixcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNvbXBvbmVudFxuICAgIH0pIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxuXG59XG5cbmZ1bmN0aW9uIFJlbmRlcmVkUm91dGUoX3JlZikge1xuICBsZXQge1xuICAgIHJvdXRlQ29udGV4dCxcbiAgICBtYXRjaCxcbiAgICBjaGlsZHJlblxuICB9ID0gX3JlZjtcbiAgbGV0IGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhU3RhdGljUm91dGVyQ29udGV4dCk7IC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG5cbiAgaWYgKGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0ICYmIG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgIGRhdGFTdGF0aWNSb3V0ZXJDb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkID0gbWF0Y2gucm91dGUuaWQ7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHJvdXRlQ29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSkge1xuICBpZiAocGFyZW50TWF0Y2hlcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50TWF0Y2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgIT0gbnVsbCAmJiBkYXRhUm91dGVyU3RhdGUuZXJyb3JzKSB7XG4gICAgICAvLyBEb24ndCBiYWlsIGlmIHdlIGhhdmUgZGF0YSByb3V0ZXIgZXJyb3JzIHNvIHdlIGNhbiByZW5kZXIgdGhlbSBpbiB0aGVcbiAgICAgIC8vIGJvdW5kYXJ5LiAgVXNlIHRoZSBwcmUtbWF0Y2hlZCAob3Igc2hpbW1lZCkgbWF0Y2hlc1xuICAgICAgbWF0Y2hlcyA9IGRhdGFSb3V0ZXJTdGF0ZS5tYXRjaGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsZXQgcmVuZGVyZWRNYXRjaGVzID0gbWF0Y2hlczsgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG5cbiAgbGV0IGVycm9ycyA9IGRhdGFSb3V0ZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogZGF0YVJvdXRlclN0YXRlLmVycm9ycztcblxuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciB0aGUgY3VycmVudCBlcnJvcnM6IFwiICsgZXJyb3JzKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGxldCBlcnJvciA9IG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzID09IG51bGwgPyB2b2lkIDAgOiBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogbnVsbDsgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9yc1xuXG4gICAgbGV0IGVycm9yRWxlbWVudCA9IGRhdGFSb3V0ZXJTdGF0ZSA/IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JFbGVtZW50LCBudWxsKSA6IG51bGw7XG5cbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0LFxuICAgICAgICBtYXRjaGVzOiBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSlcbiAgICAgIH1cbiAgICB9LCBlcnJvciA/IGVycm9yRWxlbWVudCA6IG1hdGNoLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCA/IG1hdGNoLnJvdXRlLmVsZW1lbnQgOiBvdXRsZXQpOyAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG5cblxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBpbmRleCA9PT0gMCkgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJFcnJvckJvdW5kYXJ5LCB7XG4gICAgICBsb2NhdGlvbjogZGF0YVJvdXRlclN0YXRlLmxvY2F0aW9uLFxuICAgICAgY29tcG9uZW50OiBlcnJvckVsZW1lbnQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBjaGlsZHJlbjogZ2V0Q2hpbGRyZW4oKVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2s7XG5cbihmdW5jdGlvbiAoRGF0YVJvdXRlckhvb2spIHtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG5cbnZhciBEYXRhUm91dGVyU3RhdGVIb29rO1xuXG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUxvYWRlckRhdGFcIl0gPSBcInVzZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZUFjdGlvbkRhdGFcIl0gPSBcInVzZUFjdGlvbkRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlRXJyb3JcIl0gPSBcInVzZVJvdXRlRXJyb3JcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU5hdmlnYXRpb25cIl0gPSBcInVzZU5hdmlnYXRpb25cIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlTG9hZGVyRGF0YVwiXSA9IFwidXNlUm91dGVMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VNYXRjaGVzXCJdID0gXCJ1c2VNYXRjaGVzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuXG5mdW5jdGlvbiBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSB7XG4gIHJldHVybiBob29rTmFtZSArIFwiIG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9lbi9tYWluL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXZhbGlkYXRvcigpIHtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIHJldHVybiB7XG4gICAgcmV2YWxpZGF0ZTogZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsXG4gICAgc3RhdGU6IHN0YXRlLnJldmFsaWRhdGlvblxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3RpdmUgcm91dGUgbWF0Y2hlcywgdXNlZnVsIGZvciBhY2Nlc3NpbmcgbG9hZGVyRGF0YSBmb3JcbiAqIHBhcmVudC9jaGlsZCByb3V0ZXMgb3IgdGhlIHJvdXRlIFwiaGFuZGxlXCIgcHJvcGVydHlcbiAqL1xuXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG1hdGNoID0+IHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gbWF0Y2g7IC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaFxuICAgIC8vIGluIHRoZSBAcmVtaXgtcnVuL3JvdXRlciAsIHNvIGlmIHlvdSBjaGFuZ2UgdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2VcbiAgICAvLyB0aGF0IDopICBFdmVudHVhbGx5IHdlJ2xsIERSWSB0aGlzIHVwXG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG1hdGNoLnJvdXRlLmlkLFxuICAgICAgcGF0aG5hbWUsXG4gICAgICBwYXJhbXMsXG4gICAgICBkYXRhOiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSxcbiAgICAgIGhhbmRsZTogbWF0Y2gucm91dGUuaGFuZGxlXG4gICAgfTtcbiAgfSksIFttYXRjaGVzLCBsb2FkZXJEYXRhXSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2FkZXJEYXRhKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwidXNlTG9hZGVyRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgIXRoaXNSb3V0ZS5yb3V0ZS5pZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VMb2FkZXJEYXRhIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHN0YXRlLmxvYWRlckRhdGFbdGhpc1JvdXRlLnJvdXRlLmlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbG9hZGVyRGF0YSBmb3IgdGhlIGdpdmVuIHJvdXRlSWRcbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aW9uIGRhdGEgZm9yIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGFjdGlvblxuICovXG5cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VBY3Rpb25EYXRhIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcygoc3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmFjdGlvbkRhdGEpIHx8IHt9KVswXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBlcnJvciwgd2hpY2ggY291bGQgYmUgYSBsb2FkZXIvYWN0aW9uXG4gKiBlcnJvciBvciBhIHJlbmRlciBlcnJvci4gIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgY2FsbGVkIGZyb20geW91clxuICogZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuXG5mdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCkge1xuICB2YXIgX3N0YXRlJGVycm9ycztcblxuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHRoaXNSb3V0ZSA9IHJvdXRlLm1hdGNoZXNbcm91dGUubWF0Y2hlcy5sZW5ndGggLSAxXTsgLy8gSWYgdGhpcyB3YXMgYSByZW5kZXIgZXJyb3IsIHdlIHB1dCBpdCBpbiBhIFJvdXRlRXJyb3IgY29udGV4dCBpbnNpZGVcbiAgLy8gb2YgUmVuZGVyRXJyb3JCb3VuZGFyeVxuXG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJ1c2VSb3V0ZUVycm9yIG11c3QgYmUgdXNlZCBpbnNpZGUgYSBSb3V0ZUNvbnRleHRcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcInVzZVJvdXRlRXJyb3IgY2FuIG9ubHkgYmUgdXNlZCBvbiByb3V0ZXMgdGhhdCBjb250YWluIGEgdW5pcXVlIFxcXCJpZFxcXCJcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwOyAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG5cbiAgcmV0dXJuIChfc3RhdGUkZXJyb3JzID0gc3RhdGUuZXJyb3JzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGVycm9yc1t0aGlzUm91dGUucm91dGUuaWRdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBoYXBweS1wYXRoIGRhdGEgZnJvbSB0aGUgbmVhcmVzdCBhbmNlc3RvciA8QXdhaXQgLz4gdmFsdWVcbiAqL1xuXG5mdW5jdGlvbiB1c2VBc3luY1ZhbHVlKCkge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuX2RhdGE7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcblxuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyXG4gIH0gPSBfcmVmO1xuICAvLyBTeW5jIHJvdXRlciBzdGF0ZSB0byBvdXIgY29tcG9uZW50IHN0YXRlIHRvIGZvcmNlIHJlLXJlbmRlcnNcbiAgbGV0IHN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmUocm91dGVyLnN1YnNjcmliZSwgKCkgPT4gcm91dGVyLnN0YXRlLCAvLyBXZSBoYXZlIHRvIHByb3ZpZGUgdGhpcyBzbyBSZWFjdEAxOCBkb2Vzbid0IGNvbXBsYWluIGR1cmluZyBoeWRyYXRpb24sXG4gIC8vIGJ1dCB3ZSBwYXNzIG91ciBzZXJpYWxpemVkIGh5ZHJhdGlvbiBkYXRhIGludG8gdGhlIHJvdXRlciBzbyBzdGF0ZSBoZXJlXG4gIC8vIGlzIGFscmVhZHkgc3luY2VkIHdpdGggd2hhdCB0aGUgc2VydmVyIHNhd1xuICAoKSA9PiByb3V0ZXIuc3RhdGUpO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB7XG4gICAgICByb3V0ZXIsXG4gICAgICBuYXZpZ2F0b3IsXG4gICAgICBzdGF0aWM6IGZhbHNlLFxuICAgICAgLy8gRG8gd2UgbmVlZCB0aGlzP1xuICAgICAgYmFzZW5hbWVcbiAgICB9XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IHJvdXRlci5iYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogcm91dGVyLnN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiByb3V0ZXIuc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvclxuICB9LCByb3V0ZXIuc3RhdGUuaW5pdGlhbGl6ZWQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXMsIG51bGwpIDogZmFsbGJhY2tFbGVtZW50KSkpO1xufVxuXG4vKipcbiAqIEEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgYWxsIGVudHJpZXMgaW4gbWVtb3J5LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9yb3V0ZXJzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4XG4gIH0gPSBfcmVmMjtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5XG4gIH0pO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjMpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmMztcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCBkYXRhUm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIEF2b2lkIGtpY2tpbmcgb2ZmIG11bHRpcGxlIG5hdmlnYXRpb25zIGlmIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYVxuICAgIC8vIGRhdGEtcm91dGVyIG5hdmlnYXRpb24sIHNpbmNlIGNvbXBvbmVudHMgZ2V0IHJlLXJlbmRlcmVkIHdoZW4gd2UgZW50ZXJcbiAgICAvLyBhIHN1Ym1pdHRpbmcvbG9hZGluZyBzdGF0ZVxuICAgIGlmIChkYXRhUm91dGVyU3RhdGUgJiYgZGF0YVJvdXRlclN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmF2aWdhdGUodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2NvbXBvbmVudHMvcm91dGVcbiAqL1xuZnVuY3Rpb24gUm91dGUoX3Byb3BzKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogaW52YXJpYW50KGZhbHNlKSA7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSA8Um91dGVyPiBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIDxCcm93c2VyUm91dGVyPlxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgPFN0YXRpY1JvdXRlcj4gZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L3JvdXRlcnMvcm91dGVyXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcihfcmVmNCkge1xuICBsZXQge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgICBjaGlsZHJlbiA9IG51bGwsXG4gICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICBuYXZpZ2F0aW9uVHlwZSA9IEFjdGlvbi5Qb3AsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCA9IGZhbHNlXG4gIH0gPSBfcmVmNDtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDsgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3BcbiAgfSksIFtiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWNQcm9wXSk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb24gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgIH07XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCwgc3RhdGUsIGtleV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uICE9IG51bGwsIFwiPFJvdXRlciBiYXNlbmFtZT1cXFwiXCIgKyBiYXNlbmFtZSArIFwiXFxcIj4gaXMgbm90IGFibGUgdG8gbWF0Y2ggdGhlIFVSTCBcIiArIChcIlxcXCJcIiArIHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaCArIFwiXFxcIiBiZWNhdXNlIGl0IGRvZXMgbm90IHN0YXJ0IHdpdGggdGhlIFwiKSArIFwiYmFzZW5hbWUsIHNvIHRoZSA8Um91dGVyPiB3b24ndCByZW5kZXIgYW55dGhpbmcuXCIpIDogdm9pZCAwO1xuXG4gIGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogbmF2aWdhdGlvbkNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHZhbHVlOiB7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfVxuICB9KSk7XG59XG5cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgPFJvdXRlPiBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNSkge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNTtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7IC8vIFdoZW4gaW4gYSBEYXRhUm91dGVyQ29udGV4dCBfd2l0aG91dF8gY2hpbGRyZW4sIHdlIHVzZSB0aGUgcm91dGVyIHJvdXRlc1xuICAvLyBkaXJlY3RseS4gIElmIHdlIGhhdmUgY2hpbGRyZW4sIHRoZW4gd2UncmUgaW4gYSBkZXNjZW5kYW50IHRyZWUgYW5kIHdlXG4gIC8vIG5lZWQgdG8gdXNlIGNoaWxkIHJvdXRlcy5cblxuICBsZXQgcm91dGVzID0gZGF0YVJvdXRlckNvbnRleHQgJiYgIWNoaWxkcmVuID8gZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJvdXRlcyA6IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbik7XG4gIHJldHVybiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbik7XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBBd2FpdChfcmVmNikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGVycm9yRWxlbWVudCxcbiAgICByZXNvbHZlXG4gIH0gPSBfcmVmNjtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEF3YWl0RXJyb3JCb3VuZGFyeSwge1xuICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgZXJyb3JFbGVtZW50OiBlcnJvckVsZW1lbnRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVzb2x2ZUF3YWl0LCBudWxsLCBjaGlsZHJlbikpO1xufVxudmFyIEF3YWl0UmVuZGVyU3RhdHVzO1xuXG4oZnVuY3Rpb24gKEF3YWl0UmVuZGVyU3RhdHVzKSB7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wicGVuZGluZ1wiXSA9IDBdID0gXCJwZW5kaW5nXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wic3VjY2Vzc1wiXSA9IDFdID0gXCJzdWNjZXNzXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wiZXJyb3JcIl0gPSAyXSA9IFwiZXJyb3JcIjtcbn0pKEF3YWl0UmVuZGVyU3RhdHVzIHx8IChBd2FpdFJlbmRlclN0YXR1cyA9IHt9KSk7XG5cbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5cbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiPEF3YWl0PiBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7XG4gICAgICBjaGlsZHJlbixcbiAgICAgIGVycm9yRWxlbWVudCxcbiAgICAgIHJlc29sdmVcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBsZXQgcHJvbWlzZSA9IG51bGw7XG4gICAgbGV0IHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG5cbiAgICBpZiAoIShyZXNvbHZlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIC8vIERpZG4ndCBnZXQgYSBwcm9taXNlIC0gcHJvdmlkZSBhcyBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3M7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICAvLyBDYXVnaHQgYSByZW5kZXIgZXJyb3IsIHByb3ZpZGUgaXQgYXMgYSByZWplY3RlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcjtcbiAgICAgIGxldCByZW5kZXJFcnJvciA9IHRoaXMuc3RhdGUuZXJyb3I7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QoKS5jYXRjaCgoKSA9PiB7fSk7IC8vIEF2b2lkIHVuaGFuZGxlZCByZWplY3Rpb24gd2FybmluZ3NcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZW5kZXJFcnJvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9IHByb21pc2UuX2Vycm9yICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciA6IHByb21pc2UuX2RhdGEgIT09IHVuZGVmaW5lZCA/IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MgOiBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSYXcgKHVudHJhY2tlZCkgcHJvbWlzZSAtIHRyYWNrIGl0XG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmUudGhlbihkYXRhID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgICB9KSwgZXJyb3IgPT4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmIHByb21pc2UuX2Vycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIC8vIEZyZWV6ZSB0aGUgVUkgYnkgdGhyb3dpbmcgYSBuZXZlciByZXNvbHZlZCBwcm9taXNlXG4gICAgICB0aHJvdyBuZXZlclNldHRsZWRQcm9taXNlO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yKSB7XG4gICAgICAvLyBSZW5kZXIgdmlhIG91ciBlcnJvckVsZW1lbnRcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBlcnJvckVsZW1lbnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgIH0pO1xuICAgIH0gLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG5cblxuICAgIHRocm93IHByb21pc2U7XG4gIH1cblxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICogSW5kaXJlY3Rpb24gdG8gbGV2ZXJhZ2UgdXNlQXN5bmNWYWx1ZSBmb3IgYSByZW5kZXItcHJvcCBBUEkgb24gPEF3YWl0PlxuICovXG5cblxuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY3KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY3O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcblxuICBpZiAodHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gY2hpbGRyZW4oZGF0YSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIGNoaWxkcmVuKTtcbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni91dGlscy9jcmVhdGUtcm91dGVzLWZyb20tY2hpbGRyZW5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG5cbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCAoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUmVhY3QuRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgcGFyZW50UGF0aCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgISghZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgcm91dGUgPSB7XG4gICAgICBpZDogZWxlbWVudC5wcm9wcy5pZCB8fCB0cmVlUGF0aC5qb2luKFwiLVwiKSxcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGVsZW1lbnQucHJvcHMuY2FzZVNlbnNpdGl2ZSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZWxlbWVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGVcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuICByZXR1cm4gcm91dGVzO1xufVxuLyoqXG4gKiBSZW5kZXJzIHRoZSByZXN1bHQgb2YgYG1hdGNoUm91dGVzKClgIGludG8gYSBSZWFjdCBlbGVtZW50LlxuICovXG5cbmZ1bmN0aW9uIHJlbmRlck1hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKiBXYWxrIHRoZSByb3V0ZSB0cmVlIGFuZCBhZGQgaGFzRXJyb3JCb3VuZGFyeSBpZiBpdCdzIG5vdCBwcm92aWRlZCwgc28gdGhhdFxuICogdXNlcnMgcHJvdmlkaW5nIG1hbnVhbCByb3V0ZSBhcnJheXMgY2FuIGp1c3Qgc3BlY2lmeSBlcnJvckVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcykge1xuICByZXR1cm4gcm91dGVzLm1hcChyb3V0ZSA9PiB7XG4gICAgbGV0IHJvdXRlQ2xvbmUgPSBfZXh0ZW5kcyh7fSwgcm91dGUpO1xuXG4gICAgaWYgKHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9PSBudWxsKSB7XG4gICAgICByb3V0ZUNsb25lLmhhc0Vycm9yQm91bmRhcnkgPSByb3V0ZUNsb25lLmVycm9yRWxlbWVudCAhPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZUNsb25lLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZUNsb25lLmNoaWxkcmVuID0gZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhyb3V0ZUNsb25lLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm91dGVDbG9uZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgaGlzdG9yeTogY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllczogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5pbml0aWFsSW5kZXhcbiAgICB9KSxcbiAgICBoeWRyYXRpb25EYXRhOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEsXG4gICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcylcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgRGF0YVN0YXRpY1JvdXRlckNvbnRleHQgYXMgVU5TQUZFX0RhdGFTdGF0aWNSb3V0ZXJDb250ZXh0LCBMb2NhdGlvbkNvbnRleHQgYXMgVU5TQUZFX0xvY2F0aW9uQ29udGV4dCwgTmF2aWdhdGlvbkNvbnRleHQgYXMgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCBSb3V0ZUNvbnRleHQgYXMgVU5TQUZFX1JvdXRlQ29udGV4dCwgZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyBhcyBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cywgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfZXh0ZW5kcywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufSIsImltcG9ydCB0b1Byb3BlcnR5S2V5IGZyb20gXCIuL3RvUHJvcGVydHlLZXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCIuL3R5cGVvZi5qc1wiO1xuaW1wb3J0IHRvUHJpbWl0aXZlIGZyb20gXCIuL3RvUHJpbWl0aXZlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IHRvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7XG4gIHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTtcbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiLi90eXBlb2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkge1xuICBpZiAoX3R5cGVvZihpbnB1dCkgIT09IFwib2JqZWN0XCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDtcbiAgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmFsdGZsb3cuanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiB1bmRlZmluZWQ7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiLi9cIjsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rYWx0Zmxvd191aVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmthbHRmbG93X3VpXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgdXNlVGhlbWVQcm9wcyBmcm9tICcuLi9zdHlsZXMvdXNlVGhlbWVQcm9wcyc7XG5pbXBvcnQgR2xvYmFsU3R5bGVzIGZyb20gJy4uL0dsb2JhbFN0eWxlcyc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGNvbnN0IGh0bWwgPSAodGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lKSA9PiBfZXh0ZW5kcyh7XG4gIFdlYmtpdEZvbnRTbW9vdGhpbmc6ICdhbnRpYWxpYXNlZCcsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgTW96T3N4Rm9udFNtb290aGluZzogJ2dyYXlzY2FsZScsXG4gIC8vIEFudGlhbGlhc2luZy5cbiAgLy8gQ2hhbmdlIGZyb20gYGJveC1zaXppbmc6IGNvbnRlbnQtYm94YCBzbyB0aGF0IGB3aWR0aGBcbiAgLy8gaXMgbm90IGFmZmVjdGVkIGJ5IGBwYWRkaW5nYCBvciBgYm9yZGVyYC5cbiAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gIC8vIEZpeCBmb250IHJlc2l6ZSBwcm9ibGVtIGluIGlPU1xuICBXZWJraXRUZXh0U2l6ZUFkanVzdDogJzEwMCUnXG59LCBlbmFibGVDb2xvclNjaGVtZSAmJiAhdGhlbWUudmFycyAmJiB7XG4gIGNvbG9yU2NoZW1lOiB0aGVtZS5wYWxldHRlLm1vZGVcbn0pO1xuZXhwb3J0IGNvbnN0IGJvZHkgPSB0aGVtZSA9PiBfZXh0ZW5kcyh7XG4gIGNvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS50ZXh0LnByaW1hcnlcbn0sIHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsIHtcbiAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHQsXG4gICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgLy8gU2F2ZSBwcmludGVyIGluay5cbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICh0aGVtZS52YXJzIHx8IHRoZW1lKS5wYWxldHRlLmNvbW1vbi53aGl0ZVxuICB9XG59KTtcbmV4cG9ydCBjb25zdCBzdHlsZXMgPSAodGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lID0gZmFsc2UpID0+IHtcbiAgdmFyIF90aGVtZSRjb21wb25lbnRzLCBfdGhlbWUkY29tcG9uZW50cyRNdWk7XG4gIGNvbnN0IGNvbG9yU2NoZW1lU3R5bGVzID0ge307XG4gIGlmIChlbmFibGVDb2xvclNjaGVtZSAmJiB0aGVtZS5jb2xvclNjaGVtZXMpIHtcbiAgICBPYmplY3QuZW50cmllcyh0aGVtZS5jb2xvclNjaGVtZXMpLmZvckVhY2goKFtrZXksIHNjaGVtZV0pID0+IHtcbiAgICAgIHZhciBfc2NoZW1lJHBhbGV0dGU7XG4gICAgICBjb2xvclNjaGVtZVN0eWxlc1t0aGVtZS5nZXRDb2xvclNjaGVtZVNlbGVjdG9yKGtleSkucmVwbGFjZSgvXFxzKiYvLCAnJyldID0ge1xuICAgICAgICBjb2xvclNjaGVtZTogKF9zY2hlbWUkcGFsZXR0ZSA9IHNjaGVtZS5wYWxldHRlKSA9PSBudWxsID8gdm9pZCAwIDogX3NjaGVtZSRwYWxldHRlLm1vZGVcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgbGV0IGRlZmF1bHRTdHlsZXMgPSBfZXh0ZW5kcyh7XG4gICAgaHRtbDogaHRtbCh0aGVtZSwgZW5hYmxlQ29sb3JTY2hlbWUpLFxuICAgICcqLCAqOjpiZWZvcmUsICo6OmFmdGVyJzoge1xuICAgICAgYm94U2l6aW5nOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgICdzdHJvbmcsIGInOiB7XG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRCb2xkXG4gICAgfSxcbiAgICBib2R5OiBfZXh0ZW5kcyh7XG4gICAgICBtYXJnaW46IDBcbiAgICB9LCBib2R5KHRoZW1lKSwge1xuICAgICAgLy8gQWRkIHN1cHBvcnQgZm9yIGRvY3VtZW50LmJvZHkucmVxdWVzdEZ1bGxTY3JlZW4oKS5cbiAgICAgIC8vIE90aGVyIGVsZW1lbnRzLCBpZiBiYWNrZ3JvdW5kIHRyYW5zcGFyZW50LCBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICcmOjpiYWNrZHJvcCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAodGhlbWUudmFycyB8fCB0aGVtZSkucGFsZXR0ZS5iYWNrZ3JvdW5kLmRlZmF1bHRcbiAgICAgIH1cbiAgICB9KVxuICB9LCBjb2xvclNjaGVtZVN0eWxlcyk7XG4gIGNvbnN0IHRoZW1lT3ZlcnJpZGVzID0gKF90aGVtZSRjb21wb25lbnRzID0gdGhlbWUuY29tcG9uZW50cykgPT0gbnVsbCA/IHZvaWQgMCA6IChfdGhlbWUkY29tcG9uZW50cyRNdWkgPSBfdGhlbWUkY29tcG9uZW50cy5NdWlDc3NCYXNlbGluZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGVtZSRjb21wb25lbnRzJE11aS5zdHlsZU92ZXJyaWRlcztcbiAgaWYgKHRoZW1lT3ZlcnJpZGVzKSB7XG4gICAgZGVmYXVsdFN0eWxlcyA9IFtkZWZhdWx0U3R5bGVzLCB0aGVtZU92ZXJyaWRlc107XG4gIH1cbiAgcmV0dXJuIGRlZmF1bHRTdHlsZXM7XG59O1xuXG4vKipcbiAqIEtpY2tzdGFydCBhbiBlbGVnYW50LCBjb25zaXN0ZW50LCBhbmQgc2ltcGxlIGJhc2VsaW5lIHRvIGJ1aWxkIHVwb24uXG4gKi9cbmZ1bmN0aW9uIENzc0Jhc2VsaW5lKGluUHJvcHMpIHtcbiAgY29uc3QgcHJvcHMgPSB1c2VUaGVtZVByb3BzKHtcbiAgICBwcm9wczogaW5Qcm9wcyxcbiAgICBuYW1lOiAnTXVpQ3NzQmFzZWxpbmUnXG4gIH0pO1xuICBjb25zdCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZW5hYmxlQ29sb3JTY2hlbWUgPSBmYWxzZVxuICB9ID0gcHJvcHM7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeHMoUmVhY3QuRnJhZ21lbnQsIHtcbiAgICBjaGlsZHJlbjogWy8qI19fUFVSRV9fKi9fanN4KEdsb2JhbFN0eWxlcywge1xuICAgICAgc3R5bGVzOiB0aGVtZSA9PiBzdHlsZXModGhlbWUsIGVuYWJsZUNvbG9yU2NoZW1lKVxuICAgIH0pLCBjaGlsZHJlbl1cbiAgfSk7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBDc3NCYXNlbGluZS5wcm9wVHlwZXMgLyogcmVtb3ZlLXByb3B0eXBlcyAqLyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBZb3UgY2FuIHdyYXAgYSBub2RlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAvKipcbiAgICogRW5hYmxlIGBjb2xvci1zY2hlbWVgIENTUyBwcm9wZXJ0eSB0byB1c2UgYHRoZW1lLnBhbGV0dGUubW9kZWAuXG4gICAqIEZvciBtb3JlIGRldGFpbHMsIGNoZWNrIG91dCBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvY29sb3Itc2NoZW1lXG4gICAqIEZvciBicm93c2VyIHN1cHBvcnQsIGNoZWNrIG91dCBodHRwczovL2Nhbml1c2UuY29tLz9zZWFyY2g9Y29sb3Itc2NoZW1lXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlbmFibGVDb2xvclNjaGVtZTogUHJvcFR5cGVzLmJvb2xcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBDc3NCYXNlbGluZTsiLCJpbXBvcnQgeyBCb3ggfSBmcm9tICdAbXVpL21hdGVyaWFsJ1xuaW1wb3J0IExvZ1JvY2tldCBmcm9tICdsb2dyb2NrZXQnXG5pbXBvcnQgRmxvd0VtYmVkIGZyb20gJ3BhZ2VzL2VtYmVkL0Zsb3dFbWJlZCdcbmltcG9ydCBSZWFjdCwgeyBsYXp5IH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFJFQUNUX0FQUF9MT0dfUk9DS0VUX0lEID0gcHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX0xPR19ST0NLRVRfSUQgfHwgJydcblxuY29uc3QgRmxvd0VtYmVkTGF6eSA9IGxhenkoKCkgPT4gaW1wb3J0KCcuL3BhZ2VzL2VtYmVkL0Zsb3dFbWJlZCcpKVxuY29uc3QgRW1iZWRBcHAgPSAoKSA9PiB7XG4gIGlmIChSRUFDVF9BUFBfTE9HX1JPQ0tFVF9JRD8ubGVuZ3RoKSBMb2dSb2NrZXQuaW5pdChSRUFDVF9BUFBfTE9HX1JPQ0tFVF9JRClcbiAgLy8gY29uc3Qgc2x1ZyA9ICd1bi1hdXRoLWVtYmVkJyAvLyAnYWx0Zmxvdy1pbnRybycgLy8gJ3VuLWF1dGgtZW1iZWQnIC8vIGZsb3cvdW4tYXV0aC1lbWJlZFxuICBjb25zdCBzbHVnID1cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWx0ZmxvdycpPy5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmxvdycpIHx8ICd1bmtub3duJ1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7LyogPE5hdiAvPiAqL31cbiAgICAgIDxCb3ggc3g9e3sgcHg6IDAgfX0+XG4gICAgICAgIHsvKiA8Rmxvd0VtYmVkIHNsdWc9e3NsdWd9IC8+ICovfVxuICAgICAgICA8Rmxvd0VtYmVkTGF6eSBzbHVnPXtzbHVnfSAvPlxuICAgICAgICB7LyogPFJvdXRlcz5cbiAgICAgICAgICA8Um91dGUgcGF0aD17Jy9hbHRmbG93LzpzbHVnJ30gZWxlbWVudD17PEZsb3dFbWJlZCBzbHVnPXtzbHVnfSAvPn0gLz5cbiAgICAgICAgPC9Sb3V0ZXM+ICovfVxuICAgICAgPC9Cb3g+XG4gICAgPC8+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgRW1iZWRBcHBcbiIsImltcG9ydCB7IFRoZW1lUHJvdmlkZXIgfSBmcm9tICdAbXVpL21hdGVyaWFsJ1xuaW1wb3J0IENzc0Jhc2VsaW5lIGZyb20gJ0BtdWkvbWF0ZXJpYWwvQ3NzQmFzZWxpbmUnXG5pbXBvcnQgZmxhZ3NtaXRoIGZyb20gJ2ZsYWdzbWl0aCdcbmltcG9ydCB7IEZsYWdzbWl0aFByb3ZpZGVyIH0gZnJvbSAnZmxhZ3NtaXRoL3JlYWN0J1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnXG5pbXBvcnQgeyBIYXNoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSdcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnc3R5bGUnXG5pbXBvcnQgRW1iZWRBcHAgZnJvbSAnLi9FbWJlZEFwcCdcblxuY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FsdGZsb3cnKVxuY29uc3Qgcm9vdCA9IGNyZWF0ZVJvb3QoY29udGFpbmVyKSAvLyBjcmVhdGVSb290KGNvbnRhaW5lciEpIGlmIHlvdSB1c2UgVHlwZVNjcmlwdFxucm9vdC5yZW5kZXIoXG4gIDxUaGVtZVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgPENzc0Jhc2VsaW5lIC8+XG4gICAgPEZsYWdzbWl0aFByb3ZpZGVyXG4gICAgICBvcHRpb25zPXt7XG4gICAgICAgIGVudmlyb25tZW50SUQ6IHByb2Nlc3MuZW52LlJFQUNUX0FQUF9GTEFHU01JVEhfSUQgYXMgc3RyaW5nXG4gICAgICB9fVxuICAgICAgZmxhZ3NtaXRoPXtmbGFnc21pdGh9PlxuICAgICAgPEhhc2hSb3V0ZXI+XG4gICAgICAgIDxFbWJlZEFwcCAvPlxuICAgICAgPC9IYXNoUm91dGVyPlxuICAgIDwvRmxhZ3NtaXRoUHJvdmlkZXI+XG4gIDwvVGhlbWVQcm92aWRlcj5cbilcblxuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnbGFuZycsICdlbi1VUycpXG4iXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIlN0eWxlU2hlZXQiLCJvcHRpb25zIiwiX3RoaXMiLCJ0aGlzIiwiX2luc2VydFRhZyIsInRhZyIsImJlZm9yZSIsInRhZ3MiLCJsZW5ndGgiLCJpbnNlcnRpb25Qb2ludCIsIm5leHRTaWJsaW5nIiwicHJlcGVuZCIsImNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJpbnNlcnRCZWZvcmUiLCJwdXNoIiwiaXNTcGVlZHkiLCJ1bmRlZmluZWQiLCJzcGVlZHkiLCJjdHIiLCJub25jZSIsImtleSIsIl9wcm90byIsInByb3RvdHlwZSIsImh5ZHJhdGUiLCJub2RlcyIsImZvckVhY2giLCJpbnNlcnQiLCJydWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInNoZWV0IiwiaSIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJlIiwiZmx1c2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhYnMiLCJNYXRoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiT2JqZWN0IiwiYXNzaWduIiwidHJpbSIsInZhbHVlIiwicGF0dGVybiIsInJlcGxhY2VtZW50IiwicmVwbGFjZSIsImluZGV4b2YiLCJzZWFyY2giLCJpbmRleE9mIiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiYmVnaW4iLCJlbmQiLCJzbGljZSIsImFycmF5IiwibGluZSIsImNvbHVtbiIsInBvc2l0aW9uIiwiY2hhcmFjdGVyIiwiY2hhcmFjdGVycyIsIm5vZGUiLCJyb290IiwicGFyZW50IiwidHlwZSIsInByb3BzIiwiY2hpbGRyZW4iLCJyZXR1cm4iLCJwcmV2IiwibmV4dCIsInBlZWsiLCJjYXJldCIsInRva2VuIiwiYWxsb2MiLCJkZWFsbG9jIiwiZGVsaW1pdCIsImRlbGltaXRlciIsIndoaXRlc3BhY2UiLCJlc2NhcGluZyIsImNvdW50IiwiY29tbWVudGVyIiwiaWRlbnRpZmllciIsIkNPTU1FTlQiLCJjYWxsYmFjayIsIm91dHB1dCIsInN0cmluZ2lmeSIsImVsZW1lbnQiLCJqb2luIiwiY29tcGlsZSIsInBhcnNlIiwicnVsZXMiLCJydWxlc2V0cyIsInBzZXVkbyIsInBvaW50cyIsImRlY2xhcmF0aW9ucyIsIm9mZnNldCIsImF0cnVsZSIsInByb3BlcnR5IiwicHJldmlvdXMiLCJ2YXJpYWJsZSIsInNjYW5uaW5nIiwiYW1wZXJzYW5kIiwicmVmZXJlbmNlIiwiY29tbWVudCIsImRlY2xhcmF0aW9uIiwicnVsZXNldCIsInBvc3QiLCJzaXplIiwiaiIsImsiLCJ4IiwieSIsInoiLCJpZGVudGlmaWVyV2l0aFBvaW50VHJhY2tpbmciLCJmaXhlZEVsZW1lbnRzIiwiV2Vha01hcCIsImNvbXBhdCIsImlzSW1wbGljaXRSdWxlIiwiZ2V0Iiwic2V0IiwicGFyc2VkIiwidG9SdWxlcyIsImdldFJ1bGVzIiwicGFyZW50UnVsZXMiLCJyZW1vdmVMYWJlbCIsImhhc2giLCJkZWZhdWx0U3R5bGlzUGx1Z2lucyIsIm1hcCIsImV4ZWMiLCJzc3JTdHlsZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQXJyYXkiLCJjYWxsIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsIl9pbnNlcnQiLCJzdHlsaXNQbHVnaW5zIiwiaW5zZXJ0ZWQiLCJub2Rlc1RvSHlkcmF0ZSIsImF0dHJpYiIsInNwbGl0IiwiY3VycmVudFNoZWV0IiwiY29sbGVjdGlvbiIsImZpbmFsaXppbmdQbHVnaW5zIiwic2VyaWFsaXplciIsImNvbmNhdCIsInNlbGVjdG9yIiwic2VyaWFsaXplZCIsInNob3VsZENhY2hlIiwic3R5bGVzIiwiY2FjaGUiLCJuYW1lIiwicmVnaXN0ZXJlZCIsImZuIiwiY3JlYXRlIiwiYXJnIiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJIVE1MRWxlbWVudCIsIkNhY2hlUHJvdmlkZXIiLCJQcm92aWRlciIsIndpdGhFbW90aW9uQ2FjaGUiLCJmdW5jIiwiZm9yd2FyZFJlZiIsInJlZiIsInVzZUNvbnRleHQiLCJUaGVtZUNvbnRleHQiLCJHbG9iYWwiLCJ3IiwiVCIsInNoZWV0UmVmIiwidXNlUmVmIiwiY29uc3RydWN0b3IiLCJyZWh5ZHJhdGluZyIsInF1ZXJ5U2VsZWN0b3IiLCJjdXJyZW50Iiwic2hlZXRSZWZDdXJyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY3NzIiwiX2xlbiIsImFyZ3VtZW50cyIsImFyZ3MiLCJfa2V5Iiwia2V5ZnJhbWVzIiwiaW5zZXJ0YWJsZSIsImFwcGx5IiwiYW5pbSIsInRvU3RyaW5nIiwic3RyIiwiaCIsImxlbiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiV2Via2l0TGluZUNsYW1wIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwiaHlwaGVuYXRlUmVnZXgiLCJhbmltYXRpb25SZWdleCIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc1Byb2Nlc3NhYmxlVmFsdWUiLCJwcm9jZXNzU3R5bGVOYW1lIiwic3R5bGVOYW1lIiwidG9Mb3dlckNhc2UiLCJwcm9jZXNzU3R5bGVWYWx1ZSIsIm1hdGNoIiwicDEiLCJwMiIsImN1cnNvciIsImhhbmRsZUludGVycG9sYXRpb24iLCJtZXJnZWRQcm9wcyIsImludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwib2JqIiwic3RyaW5nIiwiaXNBcnJheSIsImludGVycG9sYXRlZCIsIl9pIiwiY3JlYXRlU3RyaW5nRnJvbU9iamVjdCIsInByZXZpb3VzQ3Vyc29yIiwicmVzdWx0IiwiY2FjaGVkIiwibGFiZWxQYXR0ZXJuIiwic2VyaWFsaXplU3R5bGVzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUluc2VydGlvbkVmZmVjdEFsd2F5c1dpdGhTeW5jRmFsbGJhY2siLCJ1c2VJbnNlcnRpb25FZmZlY3RXaXRoTGF5b3V0RmFsbGJhY2siLCJ1c2VMYXlvdXRFZmZlY3QiLCJnZXRSZWdpc3RlcmVkU3R5bGVzIiwicmVnaXN0ZXJlZFN0eWxlcyIsImNsYXNzTmFtZXMiLCJyYXdDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJyZWdpc3RlclN0eWxlcyIsImlzU3RyaW5nVGFnIiwiaW5zZXJ0U3R5bGVzIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImJsYWNrIiwid2hpdGUiLCJkZWZhdWx0VGhlbWUiLCJkZWZhdWx0Q2xhc3NOYW1lIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfZXhjbHVkZWQiLCJsaWdodCIsInRleHQiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiZGlzYWJsZWQiLCJkaXZpZGVyIiwiYmFja2dyb3VuZCIsInBhcGVyIiwiZGVmYXVsdCIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50IiwiZGlyZWN0aW9uIiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJoYXNPd25Qcm9wZXJ0eSIsIm1haW4iLCJjYXNlQWxsQ2FwcyIsInRleHRUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9udEZhbWlseSIsImNyZWF0ZVR5cG9ncmFwaHkiLCJwYWxldHRlIiwidHlwb2dyYXBoeSIsIl9yZWYiLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0TGlnaHQiLCJmb250V2VpZ2h0UmVndWxhciIsImZvbnRXZWlnaHRNZWRpdW0iLCJmb250V2VpZ2h0Qm9sZCIsImh0bWxGb250U2l6ZSIsImFsbFZhcmlhbnRzIiwicHhUb1JlbSIsInB4VG9SZW0yIiwib3RoZXIiLCJjb2VmIiwiYnVpbGRWYXJpYW50IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInJvdW5kIiwidmFyaWFudHMiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiYnV0dG9uIiwiY2FwdGlvbiIsIm92ZXJsaW5lIiwiZGVlcG1lcmdlIiwiY2xvbmUiLCJjcmVhdGVTaGFkb3ciLCJweCIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImdldEF1dG9IZWlnaHREdXJhdGlvbiIsImhlaWdodCIsImNvbnN0YW50IiwiY3JlYXRlVHJhbnNpdGlvbnMiLCJpbnB1dFRyYW5zaXRpb25zIiwibWVyZ2VkRWFzaW5nIiwibWVyZ2VkRHVyYXRpb24iLCJkdXJhdGlvbk9wdGlvbiIsImVhc2luZ09wdGlvbiIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwibW9iaWxlU3RlcHBlciIsImZhYiIsInNwZWVkRGlhbCIsImFwcEJhciIsImRyYXdlciIsIm1vZGFsIiwic25hY2tiYXIiLCJ0b29sdGlwIiwibWl4aW5zIiwibWl4aW5zSW5wdXQiLCJwYWxldHRlSW5wdXQiLCJ0cmFuc2l0aW9ucyIsInRyYW5zaXRpb25zSW5wdXQiLCJ0eXBvZ3JhcGh5SW5wdXQiLCJ2YXJzIiwiRXJyb3IiLCJtb2RlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJnZXREZWZhdWx0UHJpbWFyeSIsImdldERlZmF1bHRTZWNvbmRhcnkiLCJlcnJvciIsImdldERlZmF1bHRFcnJvciIsImluZm8iLCJnZXREZWZhdWx0SW5mbyIsInN1Y2Nlc3MiLCJnZXREZWZhdWx0U3VjY2VzcyIsIndhcm5pbmciLCJnZXREZWZhdWx0V2FybmluZyIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsImNvbG9yIiwibWFpblNoYWRlIiwibGlnaHRTaGFkZSIsImRhcmtTaGFkZSIsIkpTT04iLCJjb250cmFzdFRleHQiLCJtb2RlcyIsImNvbW1vbiIsImdyZXkiLCJjcmVhdGVQYWxldHRlIiwic3lzdGVtVGhlbWUiLCJtdWlUaGVtZSIsImJyZWFrcG9pbnRzIiwidG9vbGJhciIsIm1pbkhlaWdodCIsInVwIiwic2hhZG93cyIsInJlZHVjZSIsImFjYyIsImFyZ3VtZW50IiwidXNlVGhlbWVQcm9wcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZXh0ZW5kczIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZTIiLCJfYmx1ZSIsIl9wdXJwbGUiLCJfcmVkIiwiX2xpZ2h0Qmx1ZSIsIl9ncmVlbiIsIl9vcmFuZ2UiLCJfc3lzdGVtIiwiZ2V0Q29udHJhc3RSYXRpbyIsIl91dGlscyIsImZvcm1hdE11aUVycm9yTWVzc2FnZSIsIl9jb21tb24iLCJfZ3JleSIsImxpZ2h0ZW4iLCJkYXJrZW4iLCJfY3JlYXRlTWl4aW5zIiwiX2NyZWF0ZVBhbGV0dGUiLCJfY3JlYXRlVHlwb2dyYXBoeSIsIl9zaGFkb3dzIiwiX2NyZWF0ZVRyYW5zaXRpb25zIiwiX3pJbmRleCIsIl9kZWZhdWx0IiwiY3JlYXRlVGhlbWUiLCJ1c2VUaGVtZSIsIkdsb2JhbFN0eWxlcyIsImdsb2JhbFN0eWxlcyIsInRoZW1lSW5wdXQiLCJrZXlzIiwicmVhY3RQcm9wc1JlZ2V4IiwicHJvcCIsInRlc3QiLCJ0ZXN0T21pdFByb3BzT25TdHJpbmdUYWciLCJ0ZXN0T21pdFByb3BzT25Db21wb25lbnQiLCJnZXREZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb3NlU2hvdWxkRm9yd2FyZFByb3BzIiwiaXNSZWFsIiwic2hvdWxkRm9yd2FyZFByb3AiLCJvcHRpb25zU2hvdWxkRm9yd2FyZFByb3AiLCJfX2Vtb3Rpb25fZm9yd2FyZFByb3AiLCJwcm9wTmFtZSIsIkluc2VydGlvbiIsIm5ld1N0eWxlZCIsImNyZWF0ZVN0eWxlZCIsInRhcmdldENsYXNzTmFtZSIsIl9fZW1vdGlvbl9yZWFsIiwiYmFzZVRhZyIsIl9fZW1vdGlvbl9iYXNlIiwibGFiZWwiLCJ0YXJnZXQiLCJkZWZhdWx0U2hvdWxkRm9yd2FyZFByb3AiLCJzaG91bGRVc2VBcyIsIlN0eWxlZCIsIkZpbmFsVGFnIiwiYXMiLCJjbGFzc0ludGVycG9sYXRpb25zIiwidGhlbWUiLCJmaW5hbFNob3VsZEZvcndhcmRQcm9wIiwibmV3UHJvcHMiLCJGcmFnbWVudCIsImRpc3BsYXlOYW1lIiwiZGVmYXVsdFByb3BzIiwid2l0aENvbXBvbmVudCIsIm5leHRUYWciLCJuZXh0T3B0aW9ucyIsInRhZ05hbWUiLCJzdHlsZWQiLCJpbnRlcm5hbF9wcm9jZXNzU3R5bGVzIiwicHJvY2Vzc29yIiwiU3ltYm9sIiwiZm9yIiwibG9jYWxUaGVtZSIsIm91dGVyVGhlbWUiLCJtZXJnZU91dGVyTG9jYWxUaGVtZSIsIm5lc3RlZCIsIkVNUFRZX1RIRU1FIiwiSW5uZXJUaGVtZVByb3ZpZGVyIiwiZ2V0Qm9yZGVyIiwiYm9yZGVyIiwidGhlbWVLZXkiLCJ0cmFuc2Zvcm0iLCJib3JkZXJUb3AiLCJib3JkZXJSaWdodCIsImJvcmRlckJvdHRvbSIsImJvcmRlckxlZnQiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmFkaXVzIiwidHJhbnNmb3JtZXIiLCJzdHlsZUZyb21Qcm9wVmFsdWUiLCJwcm9wVmFsdWUiLCJwcm9wVHlwZXMiLCJmaWx0ZXJQcm9wcyIsInZhbHVlcyIsInhzIiwic20iLCJtZCIsImxnIiwieGwiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJoYW5kbGVCcmVha3BvaW50cyIsInRoZW1lQnJlYWtwb2ludHMiLCJpdGVtIiwiYnJlYWtwb2ludCIsImNzc0tleSIsImNyZWF0ZUVtcHR5QnJlYWtwb2ludE9iamVjdCIsImJyZWFrcG9pbnRzSW5wdXQiLCJfYnJlYWtwb2ludHNJbnB1dCRrZXkiLCJyZW1vdmVVbnVzZWRCcmVha3BvaW50cyIsImJyZWFrcG9pbnRLZXlzIiwic3R5bGUiLCJicmVha3BvaW50T3V0cHV0IiwibWVyZ2VCcmVha3BvaW50c0luT3JkZXIiLCJlbXB0eUJyZWFrcG9pbnRzIiwibWVyZ2VkT3V0cHV0IiwicmVzb2x2ZUJyZWFrcG9pbnRWYWx1ZXMiLCJicmVha3BvaW50VmFsdWVzIiwiYmFzZSIsImN1c3RvbUJhc2UiLCJicmVha3BvaW50c0tleXMiLCJjb21wdXRlQnJlYWtwb2ludHNCYXNlIiwic3R5bGVGdW5jdGlvbiIsIm5ld1N0eWxlRnVuY3Rpb24iLCJleHRlbmRlZCIsImNsYW1wIiwibWluIiwibWF4IiwiaGV4VG9SZ2IiLCJyZSIsIlJlZ0V4cCIsImNvbG9ycyIsIm4iLCJwYXJzZUludCIsImRlY29tcG9zZUNvbG9yIiwiY2hhckF0IiwibWFya2VyIiwic3Vic3RyaW5nIiwiY29sb3JTcGFjZSIsInNoaWZ0IiwicGFyc2VGbG9hdCIsImNvbG9yQ2hhbm5lbCIsImRlY29tcG9zZWRDb2xvciIsInZhbCIsImlkeCIsInJlY29tcG9zZUNvbG9yIiwicmdiVG9IZXgiLCJpbnQiLCJoZXgiLCJpbnRUb0hleCIsImhzbFRvUmdiIiwicyIsImwiLCJhIiwiZiIsInJnYiIsImdldEx1bWluYW5jZSIsIk51bWJlciIsInRvRml4ZWQiLCJmb3JlZ3JvdW5kIiwibHVtQSIsImx1bUIiLCJhbHBoYSIsImNvZWZmaWNpZW50IiwiZW1waGFzaXplIiwiaGFuZGxlcnMiLCJjcmVhdGVCb3giLCJzdHlsZUZ1bmN0aW9uU3giLCJCb3hSb290IiwiaW5Qcm9wcyIsIl9leHRlbmRTeFByb3AiLCJjb21wb25lbnQiLCJpc0VtcHR5IiwicHJvcHNUb0NsYXNzS2V5IiwidmFyaWFudCIsImNsYXNzS2V5Iiwic29ydCIsImNhcGl0YWxpemUiLCJfZXhjbHVkZWQyIiwiX2V4Y2x1ZGVkMyIsInN5c3RlbURlZmF1bHRUaGVtZSIsImlucHV0Iiwicm9vdFNob3VsZEZvcndhcmRQcm9wIiwic2xvdFNob3VsZEZvcndhcmRQcm9wIiwic3lzdGVtU3giLCJfX211aV9zeXN0ZW1TeCIsImlucHV0T3B0aW9ucyIsImZpbHRlciIsImNvbXBvbmVudE5hbWUiLCJzbG90IiwiY29tcG9uZW50U2xvdCIsInNraXBWYXJpYW50c1Jlc29sdmVyIiwiaW5wdXRTa2lwVmFyaWFudHNSZXNvbHZlciIsInNraXBTeCIsImlucHV0U2tpcFN4Iiwib3ZlcnJpZGVzUmVzb2x2ZXIiLCJzaG91bGRGb3J3YXJkUHJvcE9wdGlvbiIsImRlZmF1bHRTdHlsZWRSZXNvbHZlciIsIm11aVN0eWxlZFJlc29sdmVyIiwic3R5bGVBcmciLCJleHByZXNzaW9ucyIsImV4cHJlc3Npb25zV2l0aERlZmF1bHRUaGVtZSIsInN0eWxlc0FyZyIsInRyYW5zZm9ybWVkU3R5bGVBcmciLCJzdHlsZU92ZXJyaWRlcyIsImNvbXBvbmVudHMiLCJnZXRTdHlsZU92ZXJyaWRlcyIsInJlc29sdmVkU3R5bGVPdmVycmlkZXMiLCJlbnRyaWVzIiwic2xvdEtleSIsInNsb3RTdHlsZSIsIl90aGVtZSRjb21wb25lbnRzIiwiX3RoZW1lJGNvbXBvbmVudHMkbmFtIiwib3duZXJTdGF0ZSIsInZhcmlhbnRzU3R5bGVzIiwidGhlbWVWYXJpYW50cyIsInRoZW1lVmFyaWFudCIsImlzTWF0Y2giLCJ2YXJpYW50c1Jlc29sdmVyIiwiZGVmaW5pdGlvbiIsImdldFZhcmlhbnRTdHlsZXMiLCJudW1PZkN1c3RvbUZuc0FwcGxpZWQiLCJwbGFjZWhvbGRlcnMiLCJmaWxsIiwiX3JlZjIiLCJ3aXRoQ29uZmlnIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJ1bml0Iiwic3RlcCIsInNvcnRlZFZhbHVlcyIsImJyZWFrcG9pbnRzQXNBcnJheSIsImJyZWFrcG9pbnQxIiwiYnJlYWtwb2ludDIiLCJzb3J0QnJlYWtwb2ludHNWYWx1ZXMiLCJkb3duIiwiYmV0d2VlbiIsInN0YXJ0IiwiZW5kSW5kZXgiLCJvbmx5Iiwibm90Iiwia2V5SW5kZXgiLCJjcmVhdGVTcGFjaW5nIiwic3BhY2luZ0lucHV0IiwibXVpIiwic3BhY2luZyIsImFyZ3NJbnB1dCIsInNoYXBlIiwic2hhcGVJbnB1dCIsImdhcCIsImNvbHVtbkdhcCIsInJvd0dhcCIsImdyaWRBdXRvRmxvdyIsImdyaWRBdXRvQ29sdW1ucyIsImdyaWRBdXRvUm93cyIsImdyaWRUZW1wbGF0ZUNvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwiZ3JpZFRlbXBsYXRlQXJlYXMiLCJncmlkQXJlYSIsImRpc3BsYXlQcmludCIsImNzc1Byb3BlcnR5IiwiZGlzcGxheSIsImRpc3BsYXlSYXciLCJvdmVyZmxvdyIsInRleHRPdmVyZmxvdyIsInZpc2liaWxpdHkiLCJ3aGl0ZVNwYWNlIiwiZmxleEJhc2lzIiwiZmxleERpcmVjdGlvbiIsImZsZXhXcmFwIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiYWxpZ25Db250ZW50IiwiYWxpZ25TZWxmIiwianVzdGlmeUl0ZW1zIiwianVzdGlmeVNlbGYiLCJmaWx0ZXJQcm9wc01hcHBpbmciLCJib3JkZXJzIiwiZmxleGJveCIsImdyaWQiLCJwb3NpdGlvbnMiLCJzaXppbmciLCJzdHlsZUZ1bmN0aW9uTWFwcGluZyIsInByb3BUb1N0eWxlRnVuY3Rpb24iLCJzdHlsZUZuTmFtZSIsImlucHV0UHJvcHMiLCJTdHlsZWRFbmdpbmVQcm92aWRlciIsImluamVjdEZpcnN0IiwiQyIsInN4IiwiZ2V0Q3NzVmFsdWUiLCJzb21lIiwiaW5jbHVkZXMiLCJjc3NWYXJzUGFyc2VyIiwicHJlZml4Iiwic2hvdWxkU2tpcEdlbmVyYXRpbmdWYXIiLCJzaG91bGRTa2lwUGF0aHMiLCJhcnJheUtleXMiLCJjc3NWYXIiLCJ0ZW1wIiwiYXNzaWduTmVzdGVkS2V5cyIsInJlY3Vyc2UiLCJvYmplY3QiLCJwYXJlbnRLZXlzIiwiREVGQVVMVF9NT0RFX1NUT1JBR0VfS0VZIiwiREVGQVVMVF9DT0xPUl9TQ0hFTUVfU1RPUkFHRV9LRVkiLCJERUZBVUxUX0FUVFJJQlVURSIsImdldFN5c3RlbU1vZGUiLCJ3aW5kb3ciLCJtYXRjaE1lZGlhIiwibWF0Y2hlcyIsInByb2Nlc3NTdGF0ZSIsInN0YXRlIiwic3lzdGVtTW9kZSIsImluaXRpYWxpemVWYWx1ZSIsImRlZmF1bHRWYWx1ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwiY3JlYXRlQ3NzVmFyc1Byb3ZpZGVyIiwiYXR0cmlidXRlIiwiZGVmYXVsdEF0dHJpYnV0ZSIsIm1vZGVTdG9yYWdlS2V5IiwiZGVmYXVsdE1vZGVTdG9yYWdlS2V5IiwiY29sb3JTY2hlbWVTdG9yYWdlS2V5IiwiZGVmYXVsdENvbG9yU2NoZW1lU3RvcmFnZUtleSIsImRlZmF1bHRNb2RlIiwiZGVzaWduU3lzdGVtTW9kZSIsImRlZmF1bHRDb2xvclNjaGVtZSIsImRlc2lnblN5c3RlbUNvbG9yU2NoZW1lIiwiZGlzYWJsZVRyYW5zaXRpb25PbkNoYW5nZSIsImRlc2lnblN5c3RlbVRyYW5zaXRpb25PbkNoYW5nZSIsImRlc2lnblN5c3RlbVNob3VsZFNraXBHZW5lcmF0aW5nVmFyIiwicmVzb2x2ZVRoZW1lIiwiZXhjbHVkZVZhcmlhYmxlc0Zyb21Sb290IiwiY29sb3JTY2hlbWVzIiwiY29uc29sZSIsIkNvbG9yU2NoZW1lQ29udGV4dCIsImRlZmF1bHRMaWdodENvbG9yU2NoZW1lIiwiZGVmYXVsdERhcmtDb2xvclNjaGVtZSIsIkNzc1ZhcnNQcm92aWRlciIsInRoZW1lUHJvcCIsInN0b3JhZ2VXaW5kb3ciLCJkb2N1bWVudE5vZGUiLCJjb2xvclNjaGVtZU5vZGUiLCJkb2N1bWVudEVsZW1lbnQiLCJjb2xvclNjaGVtZVNlbGVjdG9yIiwiaGFzTW91bnRlZCIsImNzc1ZhclByZWZpeCIsInJlc3RUaGVtZVByb3AiLCJhbGxDb2xvclNjaGVtZXMiLCJzZXRNb2RlIiwibGlnaHRDb2xvclNjaGVtZSIsImRhcmtDb2xvclNjaGVtZSIsImNvbG9yU2NoZW1lIiwic2V0Q29sb3JTY2hlbWUiLCJzdXBwb3J0ZWRDb2xvclNjaGVtZXMiLCJqb2luZWRDb2xvclNjaGVtZXMiLCJzZXRTdGF0ZSIsImluaXRpYWxNb2RlIiwiZ2V0Q29sb3JTY2hlbWUiLCJjdXJyZW50U3RhdGUiLCJuZXdNb2RlIiwibmV3U3RhdGUiLCJuZXdMaWdodENvbG9yU2NoZW1lIiwibmV3RGFya0NvbG9yU2NoZW1lIiwiaGFuZGxlTWVkaWFRdWVyeSIsIm1lZGlhTGlzdGVuZXIiLCJoYW5kbGVyIiwibWVkaWEiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaGFuZGxlU3RvcmFnZSIsImV2ZW50IiwibmV3VmFsdWUiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVzZUN1cnJlbnRDb2xvclNjaGVtZSIsImNhbGN1bGF0ZWRDb2xvclNjaGVtZSIsInJvb3RDc3MiLCJyb290VmFycyIsImdldENvbG9yU2NoZW1lU2VsZWN0b3IiLCJ0YXJnZXRDb2xvclNjaGVtZSIsImRlZmF1bHRDb2xvclNjaGVtZVN0eWxlU2hlZXQiLCJvdGhlckNvbG9yU2NoZW1lc1N0eWxlU2hlZXQiLCJzY2hlbWUiLCJzY2hlbWVLZXkiLCJleGNsdWRlZFZhcmlhYmxlcyIsInRpbWVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImJvZHkiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY29udGV4dFZhbHVlIiwiVGhlbWVQcm92aWRlciIsInVzZUNvbG9yU2NoZW1lIiwiZ2V0SW5pdENvbG9yU2NoZW1lU2NyaXB0IiwicGFyYW1zIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJjcmVhdGVHZXRDc3NWYXIiLCJhcHBlbmRWYXIiLCJmaWVsZCIsImZhbGxiYWNrcyIsImRlZmF1bHRDcmVhdGVTdHlsZWRDb21wb25lbnQiLCJtYXhXaWR0aCIsImZpeGVkIiwiZGlzYWJsZUd1dHRlcnMiLCJ1c2VUaGVtZVByb3BzRGVmYXVsdCIsImNyZWF0ZUNvbnRhaW5lciIsImNyZWF0ZVN0eWxlZENvbXBvbmVudCIsIkNvbnRhaW5lclJvb3QiLCJ3aWR0aCIsIm1hcmdpbkxlZnQiLCJib3hTaXppbmciLCJtYXJnaW5SaWdodCIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYnJlYWtwb2ludFZhbHVlS2V5IiwiQ29udGFpbmVyIiwiY2xhc3NlcyIsInNsb3RzIiwiY29tcG9zZUNsYXNzZXMiLCJnZW5lcmF0ZVV0aWxpdHlDbGFzcyIsInVzZVV0aWxpdHlDbGFzc2VzIiwiZ2V0Q29udGFpbmVyVXRpbGl0eUNsYXNzIiwiZ2VuZXJhdGVVdGlsaXR5Q2xhc3NlcyIsInRyYXZlcnNlQnJlYWtwb2ludHMiLCJyZXNwb25zaXZlIiwiaXRlcmF0b3IiLCJzbWFsbGVzdEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlS2V5cyIsImJyZWFrcG9pbnRWYWx1ZSIsInJlc3BvbnNpdmVTdHlsZXMiLCJnZW5lcmF0ZUdyaWRTaXplU3R5bGVzIiwiZ3JpZFNpemUiLCJhcHBlbmRTdHlsZSIsImdlbmVyYXRlR3JpZE9mZnNldFN0eWxlcyIsImdyaWRPZmZzZXQiLCJnZW5lcmF0ZUdyaWRDb2x1bW5zU3R5bGVzIiwiZ2VuZXJhdGVHcmlkUm93U3BhY2luZ1N0eWxlcyIsInJvd1NwYWNpbmciLCJfdGhlbWUkc3BhY2luZyIsImdlbmVyYXRlR3JpZENvbHVtblNwYWNpbmdTdHlsZXMiLCJjb2x1bW5TcGFjaW5nIiwiX3RoZW1lJHNwYWNpbmcyIiwiZ2VuZXJhdGVHcmlkRGlyZWN0aW9uU3R5bGVzIiwiZ2VuZXJhdGVHcmlkU3R5bGVzIiwibWluV2lkdGgiLCJ3cmFwIiwibWFyZ2luIiwiZGlzYWJsZUVxdWFsT3ZlcmZsb3ciLCJwYWRkaW5nIiwicGFyZW50RGlzYWJsZUVxdWFsT3ZlcmZsb3ciLCJnZW5lcmF0ZVNpemVDbGFzc05hbWVzIiwiZ2VuZXJhdGVTcGFjaW5nQ2xhc3NOYW1lcyIsImlzVmFsaWRTcGFjaW5nIiwiaXNOYU4iLCJnZW5lcmF0ZURpcmVjdGlvbkNsYXNzZXMiLCJjcmVhdGVHcmlkIiwiTmVzdGVkQ29udGV4dCIsIk92ZXJmbG93Q29udGV4dCIsIkdyaWRSb290IiwiR3JpZCIsIl9pblByb3BzJGNvbHVtbnMiLCJfaW5Qcm9wcyRzcGFjaW5nIiwiX2luUHJvcHMkcm93U3BhY2luZyIsIl9pblByb3BzJGNvbHVtblNwYWNpbiIsIl9yZWYzIiwiX2Rpc2FibGVFcXVhbE92ZXJmbG93IiwidGhlbWVQcm9wcyIsImV4dGVuZFN4UHJvcCIsImNvbHVtbnNQcm9wIiwic3BhY2luZ1Byb3AiLCJyb3dTcGFjaW5nUHJvcCIsImNvbHVtblNwYWNpbmdQcm9wIiwidGhlbWVEaXNhYmxlRXF1YWxPdmVyZmxvdyIsInJlc3QiLCJnZXRHcmlkVXRpbGl0eUNsYXNzIiwiR1JJRF9TSVpFUyIsImdyaWRDbGFzc2VzIiwiam9pbkNoaWxkcmVuIiwic2VwYXJhdG9yIiwiY2hpbGRyZW5BcnJheSIsIkJvb2xlYW4iLCJjaGlsZCIsImRpcmVjdGlvblZhbHVlcyIsInNwYWNpbmdWYWx1ZXMiLCJwcmV2aW91c0RpcmVjdGlvblZhbHVlIiwicm93IiwiY3JlYXRlU3RhY2siLCJTdGFja1Jvb3QiLCJTdGFjayIsImdldFN0YWNrVXRpbGl0eUNsYXNzIiwidXNlclZhbHVlIiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIl9wcm9wcyR0aGVtZSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaSIsIl9wcm9wcyR0aGVtZSRicmVha3BvaTIiLCJtYXhIZWlnaHQiLCJzaXplV2lkdGgiLCJzaXplSGVpZ2h0IiwicHJvcGVydGllcyIsIm0iLCJwIiwiZGlyZWN0aW9ucyIsInQiLCJyIiwiYiIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwiZGlyIiwibWVtb2l6ZSIsIm1hcmdpbktleXMiLCJwYWRkaW5nS2V5cyIsInNwYWNpbmdLZXlzIiwiY3JlYXRlVW5hcnlVbml0IiwiX2dldFBhdGgiLCJ0aGVtZVNwYWNpbmciLCJjcmVhdGVVbmFyeVNwYWNpbmciLCJnZXRWYWx1ZSIsInRyYW5zZm9ybWVkIiwiZ2V0U3R5bGVGcm9tUHJvcFZhbHVlIiwiY3NzUHJvcGVydGllcyIsInJlc29sdmVDc3NQcm9wZXJ0eSIsIm1lcmdlIiwiZ2V0UGF0aCIsInBhdGgiLCJjaGVja1ZhcnMiLCJnZXRTdHlsZVZhbHVlIiwidGhlbWVNYXBwaW5nIiwicHJvcFZhbHVlRmluYWwiLCJpblN4Iiwic3lzdGVtUHJvcHMiLCJvdGhlclByb3BzIiwic3BsaXRQcm9wcyIsImZpbmFsU3giLCJ1bnN0YWJsZV9jcmVhdGVTdHlsZUZ1bmN0aW9uU3giLCJnZXRUaGVtZVZhbHVlIiwidHJhdmVyc2UiLCJzeElucHV0Iiwic3hPYmplY3QiLCJzdHlsZUtleSIsIm1heWJlRm4iLCJicmVha3BvaW50c1ZhbHVlcyIsIm9iamVjdHMiLCJhbGxLZXlzIiwidW5pb24iLCJTZXQiLCJldmVyeSIsIm9iamVjdHNIYXZlU2FtZUtleXMiLCJmb250U3R5bGUiLCJ0ZXh0QWxpZ24iLCJ0eXBvZ3JhcGh5VmFyaWFudCIsImdldFRoZW1lUHJvcHMiLCJjb250ZXh0VGhlbWUiLCJkZWZhdWx0R2VuZXJhdG9yIiwiZ2VuZXJhdGUiLCJjb25maWd1cmUiLCJnZW5lcmF0b3IiLCJyZXNldCIsImNyZWF0ZUNsYXNzTmFtZUdlbmVyYXRvciIsInRvVXBwZXJDYXNlIiwiZ2V0VXRpbGl0eUNsYXNzIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJkZWJvdW5jZSIsIndhaXQiLCJ0aW1lb3V0IiwiZGVib3VuY2VkIiwiY2xlYXIiLCJpc1BsYWluT2JqZWN0Iiwic291cmNlIiwiY29kZSIsInVybCIsImVuY29kZVVSSUNvbXBvbmVudCIsImdsb2JhbFN0YXRlQ2xhc3Nlc01hcHBpbmciLCJjaGVja2VkIiwiY29tcGxldGVkIiwiZXhwYW5kZWQiLCJmb2N1c2VkIiwiZm9jdXNWaXNpYmxlIiwicmVxdWlyZWQiLCJnbG9iYWxTdGF0ZVByZWZpeCIsImdsb2JhbFN0YXRlQ2xhc3MiLCJnZXRTY3JvbGxiYXJTaXplIiwiZG9jIiwiZG9jdW1lbnRXaWR0aCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsImNoYWluUHJvcFR5cGVzIiwicHJvcFR5cGUxIiwicHJvcFR5cGUyIiwiZWxlbWVudEFjY2VwdGluZ1JlZiIsImlzUmVxdWlyZWQiLCJleGFjdFByb3AiLCJmbk5hbWVNYXRjaFJlZ2V4IiwiZ2V0RnVuY3Rpb25Db21wb25lbnROYW1lIiwiQ29tcG9uZW50IiwiZmFsbGJhY2siLCJnZXRGdW5jdGlvbk5hbWUiLCJnZXRXcmFwcGVkTmFtZSIsIm91dGVyVHlwZSIsImlubmVyVHlwZSIsIndyYXBwZXJOYW1lIiwiZnVuY3Rpb25OYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCIkJHR5cGVvZiIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiSFRNTEVsZW1lbnRUeXBlIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWxmIiwiRnVuY3Rpb24iLCJkZXByZWNhdGVkUHJvcFR5cGUiLCJ2YWxpZGF0b3IiLCJyZWFzb24iLCJyZXF1aXJlUHJvcEZhY3RvcnkiLCJjb21wb25lbnROYW1lSW5FcnJvciIsInVuc3VwcG9ydGVkUHJvcCIsImNhY2hlZFR5cGUiLCJkZXRlY3RTY3JvbGxUeXBlIiwiZHVtbXkiLCJzY3JvbGxMZWZ0IiwiZ2V0Tm9ybWFsaXplZFNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsInZhbGlkYXRvck5vb3AiLCJpc0ludGVnZXIiLCJpc011aUVsZW1lbnQiLCJtdWlOYW1lcyIsIm11aU5hbWUiLCJvd25lckRvY3VtZW50Iiwib3duZXJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInJlc29sdmVQcm9wcyIsInNldFJlZiIsInVzZUNvbnRyb2xsZWQiLCJjb250cm9sbGVkIiwiZGVmYXVsdFByb3AiLCJpc0NvbnRyb2xsZWQiLCJ2YWx1ZVN0YXRlIiwic2V0VmFsdWUiLCJ1c2VFdmVudENhbGxiYWNrIiwidXNlRm9ya1JlZiIsInJlZnMiLCJpbnN0YW5jZSIsImdsb2JhbElkIiwibWF5YmVSZWFjdFVzZUlkIiwidXNlSWQiLCJpZE92ZXJyaWRlIiwicmVhY3RJZCIsImRlZmF1bHRJZCIsInNldERlZmF1bHRJZCIsImlkIiwidXNlR2xvYmFsSWQiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJpbnB1dFR5cGVzV2hpdGVsaXN0IiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJoYW5kbGVLZXlEb3duIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVZpc2liaWxpdHlDaGFuZ2UiLCJ2aXNpYmlsaXR5U3RhdGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsImlzRm9jdXNWaXNpYmxlUmVmIiwib25Gb2N1cyIsInJlYWRPbmx5IiwiaXNDb250ZW50RWRpdGFibGUiLCJmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eSIsImlzRm9jdXNWaXNpYmxlIiwib25CbHVyIiwiY2xpcCIsIl9leHRlbmRzIiwiYmluZCIsIkFjdGlvbiIsIlBvcFN0YXRlRXZlbnRUeXBlIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJnZXRMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJ2YWxpZGF0ZUxvY2F0aW9uIiwidjVDb21wYXQiLCJnbG9iYWxIaXN0b3J5IiwiaGlzdG9yeSIsIlBvcCIsImxpc3RlbmVyIiwiaGFuZGxlUG9wIiwibGlzdGVuIiwidG8iLCJlbmNvZGVMb2NhdGlvbiIsImNyZWF0ZVVSTCIsImNyZWF0ZVBhdGgiLCJwYXRobmFtZSIsIlB1c2giLCJjcmVhdGVMb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsImdldEhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJyZXBsYWNlU3RhdGUiLCJnbyIsImdldFVybEJhc2VkSGlzdG9yeSIsInBhcnNlUGF0aCIsInN1YnN0ciIsInVzciIsImhyZWYiLCJoYXNoSW5kZXgiLCJjb25kIiwibWVzc2FnZSIsIndhcm4iLCJ3YXJuaW5nJDEiLCJyYW5kb20iLCJwYXJzZWRQYXRoIiwic2VhcmNoSW5kZXgiLCJvcmlnaW4iLCJVUkwiLCJSZXN1bHRUeXBlIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNjb3JlIiwiY29tcGFyZUluZGV4ZXMiLCJyb3V0ZXNNZXRhIiwibWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJzYWZlbHlEZWNvZGVVUkkiLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJpbnZhcmlhbnQiLCJqb2luUGF0aHMiLCJjb21wdXRlU2NvcmUiLCJwYXJhbVJlIiwiaXNTcGxhdCIsInNlZ21lbnRzIiwiaW5pdGlhbFNjb3JlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJyZW1haW5pbmdQYXRobmFtZSIsIm1hdGNoUGF0aCIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwibWF0Y2hlciIsInBhcmFtTmFtZXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInNwbGF0VmFsdWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUkkiLCJzdGFydEluZGV4IiwibmV4dENoYXIiLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiY2hhciIsImRlc3QiLCJnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsInJlc29sdmVUbyIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJmcm9tIiwiaXNFbXB0eVBhdGgiLCJ0b1BhdGhuYW1lIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsImZyb21QYXRobmFtZSIsInBvcCIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicGF0aHMiLCJBYm9ydGVkRGVmZXJyZWRFcnJvciIsIkVycm9yUmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJ2YWxpZEFjdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwiZmllbGRIb3ZlclN0eWxlIiwiRFJBV0VSX1dJRFRIIiwicmF3VGhlbWUiLCJmb250SGVhZGVyIiwiTXVpQXBwQmFyIiwiYm94U2hhZG93IiwiTXVpQ2FyZCIsIk11aUNhcmRIZWFkZXIiLCJNdWlDYXJkQ29udGVudCIsIk11aUNhcmRBY3Rpb25zIiwiTXVpQnV0dG9uIiwiTXVpSWNvbkJ1dHRvbiIsIk11aUlucHV0QmFzZSIsInJlc2l6ZSIsIk11aUxpc3RTdWJoZWFkZXIiLCJwbGFjZWhvbGRlciIsIm11bHRpR2V0IiwidGhlbiIsImNhdGNoIiwibXVsdGlTZXQiLCJnZXRBbGxLZXlzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZW1vdmVJdGVtIiwibXVsdGlSZW1vdmUiLCJvIiwiZG9uZSIsIlR5cGVFcnJvciIsImZsdXNoR2V0UmVxdWVzdHMiLCJ1IiwiZmxhZ3MiLCJ2YWx1ZU9mIiwiYyIsImciLCJ2IiwiZCIsImV2ZW50U291cmNlIiwiZ2V0SlNPTiIsImVudmlyb25tZW50SUQiLCJoZWFkZXJzIiwibWV0aG9kIiwibG9nIiwicmVqZWN0IiwiZ2V0RmxhZ3MiLCJvbkNoYW5nZSIsIm9uRXJyb3IiLCJpZGVudGl0eSIsImFwaSIsInRyYWl0cyIsIndpdGhUcmFpdHMiLCJmZWF0dXJlIiwiZW5hYmxlZCIsImZlYXR1cmVfc3RhdGVfdmFsdWUiLCJ0cmFpdF9rZXkiLCJ0cmFpdF92YWx1ZSIsIm9sZEZsYWdzIiwidXBkYXRlU3RvcmFnZSIsImR0cnVtIiwiamF2YURvdWJsZSIsInNob3J0U3RyaW5nIiwiamF2YUxvbmdPck9iamVjdCIsImhhc0ZlYXR1cmUiLCJnZXRUcmFpdCIsInNlbmRTZXNzaW9uUHJvcGVydGllcyIsInRyaWdnZXIiLCJpc0Zyb21TZXJ2ZXIiLCJmbGFnc0NoYW5nZWQiLCJ0cmFpdHNDaGFuZ2VkIiwiYWxsIiwiYW5hbHl0aWNzRmxhZ3MiLCJldmFsdWF0aW9uRXZlbnQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0U3RhdGUiLCJ1cGRhdGVFdmVudFN0b3JhZ2UiLCJjYW5Vc2VTdG9yYWdlIiwiYW5hbHl0aWNzSW50ZXJ2YWwiLCJjYWNoZUZsYWdzIiwidHMiLCJlbmFibGVBbmFseXRpY3MiLCJlbmFibGVMb2dzIiwiZ2V0RmxhZ0ludGVydmFsIiwiaW5pdGlhbGlzZWQiLCJ0aWNrcyIsImNhY2hlT3B0aW9ucyIsInR0bCIsInNraXBBUEkiLCJldmFsdWF0ZUZsYWciLCJqc29uIiwiZ2V0QWxsVHJhaXRzIiwic2V0VHJhaXQiLCJzZXRUcmFpdHMiLCJmZXRjaCIsImJyb3dzZXJsZXNzU3RvcmFnZSIsIkFzeW5jU3RvcmFnZSIsImluaXQiLCJkZWZhdWx0RmxhZ3MiLCJwcmV2ZW50RmV0Y2giLCJTIiwiZW5hYmxlRHluYXRyYWNlIiwicmVhbHRpbWUiLCJFIiwiZXZlbnRTb3VyY2VVcmwiLCJJIiwiTyIsIkYiLCJfdHJpZ2dlciIsIlAiLCJBIiwiYW5ndWxhckh0dHBDbGllbnQiLCJEYXRlIiwic3Vic2NyaWJlIiwib2siLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJnZXRBbGxGbGFncyIsImlkZW50aWZ5IiwibG9nb3V0Iiwic3RhcnRMaXN0ZW5pbmciLCJzdG9wTGlzdGVuaW5nIiwiZ2V0U2VnbWVudHMiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkNPTk5FQ1RJTkciLCJPUEVOIiwiQ0xPU0VEIiwiX2NvbmZpZ3VyYXRpb24iLCJ3aXRoQ3JlZGVudGlhbHMiLCJfZXZlbnRTb3VyY2UiLCJfbGFzdEV2ZW50SWQiLCJfdGltZXIiLCJfbGlzdGVuZXJzIiwib3BlbiIsInJlYWR5U3RhdGUiLCJtYXhfcmV0cnlfdGltZSIsImV2ZW50U291cmNlQ2xhc3MiLCJnbG9iYWxUaGlzIiwiRXZlbnRTb3VyY2UiLCJsYXN0RXZlbnRJZCIsIl9vbmV2ZW50X3dyYXBwZWQiLCJfb25ldmVudCIsIl9zdGFydCIsImRpc3BhdGNoRXZlbnQiLCJvbm9wZW4iLCJfb25vcGVuIiwib25lcnJvciIsIl9vbmVycm9yIiwib25tZXNzYWdlIiwiY2xvc2UiLCJNZXNzYWdlRXZlbnQiLCJYTUxIdHRwUmVxdWVzdCIsInJlc3BvbnNlVVJMIiwicmVzcG9uc2VUZXh0IiwiYmxvYiIsIkJsb2IiLCJyZXNwb25zZSIsImhhcyIsIm9ubG9hZCIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsImNyZWRlbnRpYWxzIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJmbGFnc21pdGgiLCJjcmVhdGVGbGFnc21pdGhJbnN0YW5jZSIsIm9uIiwiY3R4Iiwib25jZSIsIm9mZiIsImVtaXQiLCJUaW55RW1pdHRlciIsIkZsYWdzbWl0aENvbnRleHQiLCJGbGFnc21pdGhQcm92aWRlciIsInNlcnZlclN0YXRlIiwidXNlRmxhZ3MiLCJ1c2VTdGF0ZSIsInVzZUNhbGxiYWNrIiwidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZUZsYWdzbWl0aCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiaXNNZW1vIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJtb2R1bGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsInEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJmYWN0b3J5IiwibW9kdWxlcyIsImluc3RhbGxlZE1vZHVsZXMiLCJtb2R1bGVJZCIsImdldHRlciIsImVudW1lcmFibGUiLCJ0b1N0cmluZ1RhZyIsIl9fZXNNb2R1bGUiLCJucyIsImFyciIsImFycjIiLCJhcnJheUxpa2VUb0FycmF5IiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3R5cGVvZiIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZGVzYyIsIml0ZXIiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwiYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyYWJsZVRvQXJyYXkiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm5vbkl0ZXJhYmxlU3ByZWFkIiwibWluTGVuIiwibG9nZ2VyIiwidW5zdWJGdW5jdGlvbnMiLCJfZW5oYW5jZUZ1bmMiLCJhZGRFdmVudCIsImNvbnNvbGVPcHRpb25zIiwiaXNFbmFibGVkIiwiX3R5cGVvZjIiLCJzaG91bGRBZ2dyZWdhdGVDb25zb2xlRXJyb3JzIiwiX2V4Y2VwdGlvbnMiLCJDYXB0dXJlIiwiY2FwdHVyZU1lc3NhZ2UiLCJsb2dMZXZlbCIsInVuc3ViRnVuY3Rpb24iLCJtZXNzYWdlQXJncyIsImlzQ29uc29sZSIsImV4Y2VwdGlvblR5cGUiLCJicm93c2VySHJlZiIsInNjcnViIiwiY2FwdHVyZUV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsInByZXBwZWRUcmFjZSIsInRyYWNlIiwiX1RyYWNlS2l0IiwiY29tcHV0ZVN0YWNrVHJhY2UiLCJlcnJvclR5cGUiLCJhZGRFdmVudE9wdGlvbnMiLCJfc3RhY2tUcmFjZSIsIl9zdGFja1RyYWNlRnJvbUVycm9yIiwiaXNTY2FsYXIiLCJfb3B0aW9uYWxTY2FsYXJzIiwiX2kyIiwiX29wdGlvbmFsTWFwcyIsIl9maWVsZCIsImRpcnR5Iiwic2NydWJiZWQiLCJfaTMiLCJfT2JqZWN0JGtleXMiLCJfdmFsdWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9yZWdpc3RlckV4Y2VwdGlvbnMiLCJnbG9iYWwiLCJfY2xhc3NDYWxsQ2hlY2syIiwiX2NyZWF0ZUNsYXNzMiIsImlzRnVuY3Rpb24iLCJ3aGF0IiwidHJhY2siLCJvcmlnIiwiX3dpbmRvdyIsIkhhbmRsZXIiLCJfZXJyb3JIYW5kbGVyIiwiX2lnbm9yZU9uRXJyb3IiLCJfd3JhcHBlZEJ1aWx0SW5zIiwicmVwb3J0IiwiX2luc3RydW1lbnRUcnlDYXRjaCIsImJ1aWx0aW4iLCJ1bnN1YnNjcmliZSIsIl9iZWZvcmUiLCJfX2xyX18iLCJfX2xyX3dyYXBwZXJfXyIsImlzRXh0ZW5zaWJsZSIsIndyYXBwZWQiLCJkZWVwIiwiX2lnbm9yZU5leHRPbkVycm9yIiwiX19pbm5lcl9fIiwid3JhcHBlZEJ1aWx0SW5zIiwid3JhcFRpbWVGbiIsIm9yaWdpbmFsQ2FsbGJhY2siLCJ3cmFwRXZlbnRUYXJnZXQiLCJwcm90byIsImV2dE5hbWUiLCJjYXB0dXJlIiwic2VjdXJlIiwiaGFuZGxlRXZlbnQiLCJlcnIiLCJldnQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYiIsImV2ZW50VGFyZ2V0cyIsIiQiLCJqUXVlcnkiLCJyZWFkeSIsInJhdmVuIiwiX3JhdmVuIiwiZXJyb3JSZXBvcnQiLCJyZWplY3Rpb25IYW5kbGVyIiwidW5pbnN0YWxsIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1ha2VOb3ROdWxsIiwic3RhY2siLCJmcmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJmaWxlTmFtZSIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJfcmVnaXN0ZXJYSFIiLCJpbnRlcmNlcHRvcnMiLCJtYWtlSW50ZXJjZXB0b3IiLCJmZXRjaElkIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInByb21pc2UiLCJyZXF1ZXN0IiwicmVxdWVzdEVycm9yIiwicmVzIiwic2V0QWN0aXZlIiwiX2VyciIsInJlc3BvbnNlRXJyb3IiLCJkaWRBdHRhY2giLCJyZWdpc3RlciIsImVudiIsImlzUG9seWZpbGwiLCJwb2x5ZmlsbCIsIl9sZW4yIiwiX2tleTIiLCJhdHRhY2giLCJzcGxpY2UiLCJjb25maWciLCJpc1JlYWN0TmF0aXZlIiwic2hvdWxkQXVnbWVudE5QUyIsInNob3VsZFBhcnNlWEhSQmxvYiIsImlnbm9yZWROZXR3b3JrIiwidHJ1bmNhdGUiLCJiZWdpbm5pbmciLCJhZGRSZXF1ZXN0IiwicmVxSWQiLCJfcmVmJGlzRW5hYmxlZCIsIl9yZWYkcmVxdWVzdFNhbml0aXplciIsInJlcXVlc3RTYW5pdGl6ZXIiLCJzYW5pdGl6ZWQiLCJfb2JqZWN0U3ByZWFkIiwiX21hcFZhbHVlcyIsImhlYWRlclZhbHVlIiwicmVmZXJyZXIiLCJhZGRSZXNwb25zZSIsIl9yZWYyJGlzRW5hYmxlZCIsIl9yZWYyJHJlc3BvbnNlU2FuaXRpeiIsInJlc3BvbnNlU2FuaXRpemVyIiwiaXNJZ25vcmVkIiwiaXNEaXNhYmxlZCIsInVuc3ViRmV0Y2giLCJfcmVnaXN0ZXJGZXRjaCIsInVuc3ViWEhSIiwidW5zdWJOZXR3b3JrSW5mb3JtYXRpb24iLCJfcmVnaXN0ZXJOZXR3b3JrSW5mb3JtYXRpb24iLCJfZGVmaW5lUHJvcGVydHkyIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiTE9HUk9DS0VUX0ZFVENIX0xBQkVMIiwiZmV0Y2hNZXRob2RNYXAiLCJ1bnJlZ2lzdGVyIiwiX2ZldGNoSW50ZXJjZXB0IiwiUmVxdWVzdCIsImNsb25lZFRleHQiLCJwbHVja0ZldGNoRmllbGRzIiwicmVxIiwiX3Jlc3BvbnNlIiwicmVzcG9uc2VDbG9uZSIsInJlc3BvbnNlVGV4dFByb21pc2UiLCJyZXNwb25zZUhhc2giLCJzdHJpbmdpZnlIZWFkZXJzIiwiVGV4dERlY29kZXIiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJ1dGY4RGVjb2RlciIsImJvZHlDb250ZW50cyIsInJlYWQiLCJyZWFkUmVzcG9uc2VCb2R5IiwiY2h1bmsiLCJkZWNvZGUiLCJzdHJlYW0iLCJET01FeGNlcHRpb24iLCJtYWtlT2JqZWN0RnJvbUhlYWRlcnMiLCJsYXN0U3RhdHVzIiwic2VuZE5ldHdvcmtJbmZvcm1hdGlvbiIsIm5ld1N0YXR1cyIsIm9ubGluZSIsIm5hdmlnYXRvciIsIm9uTGluZSIsImVmZmVjdGl2ZVR5cGUiLCJjb25uZWN0aW9uIiwiRUZGRUNUSVZFX1RZUEVfVkFMUyIsInNob3VsZEJlQWN0aXZlIiwiaXNBY3RpdmUiLCJfcmVmJHNob3VsZEF1Z21lbnROUFMiLCJfcmVmJHNob3VsZFBhcnNlWEhSQmwiLCJfWEhSIiwieGhyTWFwIiwidW5zdWJzY3JpYmVkRnJvbVhociIsIkxPR1JPQ0tFVF9YSFJfTEFCRUwiLCJfbHJYTUxIdHRwUmVxdWVzdCIsIm1vekFub24iLCJtb3pTeXN0ZW0iLCJ4aHJPYmplY3QiLCJ4aHJJZCIsImN1cnJlbnRYSFJJZCIsIm9wZW5PcmlnaW5hbCIsInNlbmRPcmlnaW5hbCIsIl9ucHMiLCJXT09UUklDX1JFU1BPTlNFU19SRUdFWCIsImxvZ3JvY2tldFNlc3Npb25VUkwiLCJyZWNvcmRpbmdVUkwiLCJzZWFyY2hQYXJhbXMiLCJ1cmxPYmoiLCJmZWVkYmFjayIsImN1cnJlbnRYSFIiLCJERUxJR0hURURfUkVTUE9OU0VTX1JFR0VYIiwiREVMSUdIVEVEX0ZFRURCQUNLX1BSRUZJWCIsImRhdGFTdHJpbmciLCJfc3RhcnRzV2l0aCIsImhlYWRlclZhbHVlcyIsImhlYWRlciIsInhockxpc3RlbmVycyIsInJlYWR5c3RhdGVjaGFuZ2UiLCJoZWFkZXJQYXJ0cyIsInJlc3BvbnNlVHlwZSIsIl9zaG91bGRDbG9uZVJlc3BvbnNlIiwicmVzcG9uc2VYTUwiLCJibG9iUmVhZGVyIiwiRmlsZVJlYWRlciIsInJlYWRBc1RleHQiLCJfdW51c2VkIiwiZGF0ZU5vdyIsIm5vdyIsImxvYWRUaW1lIiwicGVyZm9ybWFuY2UiLCJfcmVmJHN0YXRlU2FuaXRpemVyIiwic3RhdGVTYW5pdGl6ZXIiLCJfcmVmJGFjdGlvblNhbml0aXplciIsImFjdGlvblNhbml0aXplciIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsImluaXRpYWxTdGF0ZSIsImVuaGFuY2VyIiwic3RvcmUiLCJvcmlnaW5hbERpc3BhdGNoIiwiZGlzcGF0Y2giLCJzdG9yZUlkIiwic3RvcmVJZENvdW50ZXIiLCJzYW5pdGl6ZWRTdGF0ZSIsIl9ub3ciLCJzYW5pdGl6ZWRBY3Rpb24iLCJzdGF0ZURlbHRhIiwiX2NyZWF0ZUVuaGFuY2VyIiwiX2NyZWF0ZU1pZGRsZXdhcmUiLCJUcmFjZUtpdCIsImNvbGxlY3RXaW5kb3dFcnJvcnMiLCJkZWJ1ZyIsIl9zbGljZSIsIlVOS05PV05fRlVOQ1RJT04iLCJFUlJPUl9UWVBFU19SRSIsImdldExvY2F0aW9uSHJlZiIsIl9vbGRPbmVycm9ySGFuZGxlciIsIl9vbkVycm9ySGFuZGxlckluc3RhbGxlZCIsImxhc3RBcmdzIiwibGFzdEV4Y2VwdGlvbiIsImxhc3RFeGNlcHRpb25TdGFjayIsIm5vdGlmeUhhbmRsZXJzIiwiaXNXaW5kb3dFcnJvciIsImlubmVyIiwidHJhY2VLaXRXaW5kb3dPbkVycm9yIiwibGluZU5vIiwiY29sTm8iLCJleCIsImF1Z21lbnRTdGFja1RyYWNlV2l0aEluaXRpYWxFbGVtZW50IiwicHJvY2Vzc0xhc3RFeGNlcHRpb24iLCJncm91cHMiLCJtc2ciLCJfbGFzdEV4Y2VwdGlvblN0YWNrIiwiX2xhc3RBcmdzIiwicmV0aHJvdyIsImluY29tcGxldGUiLCJjb21wdXRlU3RhY2tUcmFjZUZyb21TdGFja1Byb3AiLCJwYXJ0cyIsImNocm9tZSIsImdlY2tvIiwid2luanMiLCJsaW5lcyIsImlzTmF0aXZlIiwic3RhY2tJbmZvIiwiaW5pdGlhbCIsInVuc2hpZnQiLCJwYXJ0aWFsIiwiY29tcHV0ZVN0YWNrVHJhY2VCeVdhbGtpbmdDYWxsZXJDaGFpbiIsImRlcHRoIiwicmVjdXJzaW9uIiwiY3VyciIsInNvdXJjZVVSTCIsImRlc2NyaXB0aW9uIiwib3JpZ2luYWwiLCJwb3MiLCJNQVhfUVVFVUVfU0laRSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJfbmV0d29yayIsIl9jb25zb2xlIiwiX3JlZHV4IiwiY29uc2lkZXJJbmdlc3RTZXJ2ZXJPcHRpb24iLCJpbmdlc3RTZXJ2ZXIiLCJzZXJ2ZXJVUkwiLCJzdGF0c1VSTCIsIkxvZ1JvY2tldCIsIl9idWZmZXIiLCJzaG91bGRDYXB0dXJlU3RhY2tUcmFjZSIsIl9pc0luaXRpYWxpemVkIiwiX2luc3RhbGxlZCIsIl9scl9zdXJsX2NiIiwiZ2V0U2Vzc2lvblVSTCIsImdldE1lc3NhZ2UiLCJvcHRzIiwiX3J1biIsInRpbWVPdmVycmlkZSIsIl9sb2dnZXIiLCJfaXNEaXNhYmxlZCIsImFwcElEIiwiX29wdHMkc2hvdWxkQXVnbWVudE5QIiwiX29wdHMkc2hvdWxkUGFyc2VYSFJCIiwicmVnaXN0ZXJFeGNlcHRpb25zIiwic3RhcnROZXdTZXNzaW9uIiwiY3VzdG9tRXZlbnROYW1lIiwiZXZlbnRQcm9wZXJ0aWVzIiwidmVyc2lvbiIsInJlY29yZGluZ0lEIiwidGhyZWFkSUQiLCJ0YWJJRCIsImNyZWF0ZUVuaGFuY2VyIiwiY3JlYXRlTWlkZGxld2FyZSIsImdldExvZ2dlciIsInByb2R1Y3QiLCJSRUFDVF9OQVRJVkVfTk9USUNFIiwiX2Rpc2FibGVMb2dSb2NrZXQiLCJtYWtlTm9vcFBvbHlmaWxsIiwiTXV0YXRpb25PYnNlcnZlciIsIl9sck11dGF0aW9uT2JzZXJ2ZXIiLCJfTG9nUm9ja2V0IiwicmVkdXhFbmhhbmNlciIsInJlZHV4TWlkZGxld2FyZSIsImdldFZlcnNpb24iLCJvbkxvZ2dlciIsInNldENsb2NrIiwic2NyaXB0SW5nZXN0IiwiZW50ZXJwcmlzZVNlcnZlciIsIl9yZWYkc2RrVmVyc2lvbiIsInNka1ZlcnNpb24iLCJzY3JpcHRPcmlnaW4iLCJzY3JpcHRUYWciLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0SG9zdG5hbWUiLCJDRE5fU0VSVkVSX01BUCIsInNka1NlcnZlciIsIl9tYWtlTG9nUm9ja2V0Iiwic2NyaXB0IiwiX19TREtDT05GSUdfXyIsImxvZ2dlclVSTCIsIl9sckFzeW5jU2NyaXB0IiwiYXN5bmMiLCJfTFJMb2dnZXIiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYmlnaW50IiwiYm9vbCIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsImFhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInJhIiwic2EiLCJ0YSIsInBhIiwicWEiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiUGEiLCJRYSIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInBiIiwiYXNwZWN0UmF0aW8iLCJsaW5lQ2xhbXAiLCJxYiIsInJiIiwic2IiLCJzZXRQcm9wZXJ0eSIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsInBhcmFtIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsInNpYmxpbmciLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsInJhbmdlIiwibWUiLCJuZSIsIm9lIiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsInNjcm9sbFRvcCIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsIkQiLCJvZiIsInBmIiwicWYiLCJyZiIsInNmIiwicGFzc2l2ZSIsIkoiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJrZSIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiSGYiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRyIsIlZmIiwiSCIsIldmIiwiWGYiLCJZZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJ6ZyIsIkFnIiwiQmciLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJoaCIsImloIiwiamgiLCJraCIsIm5oIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiTCIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwidXBkYXRlciIsInFoIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwicmgiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNoIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInRoIiwidWgiLCJ2aCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJOIiwiU2giLCJUaCIsIlVoIiwiVmgiLCJRIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImJhc2VRdWV1ZSIsInF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VSZWR1Y2VyIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwiZGlnZXN0IiwiTGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJDaiIsIkRqIiwibmoiLCJvaiIsInBqIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiRmoiLCJHaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsIkhqIiwiSWoiLCJKaiIsIktqIiwiVSIsIkxqIiwiV2Vha1NldCIsIlYiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiV2siLCJtayIsImNlaWwiLCJuayIsInBrIiwiWSIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJlbCIsImZsIiwiZ2wiLCJobCIsImlsIiwiamwiLCJ6aiIsIiRrIiwibGwiLCJyZXBvcnRFcnJvciIsIm1sIiwiX2ludGVybmFsUm9vdCIsIm5sIiwib2wiLCJwbCIsInFsIiwic2wiLCJybCIsInVubW91bnQiLCJ1bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiIsImZvcm0iLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlUm9vdCIsImh5ZHJhdGVkU291cmNlcyIsIl9nZXRWZXJzaW9uIiwiX3NvdXJjZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJEYXRhUm91dGVySG9vayIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJjcmVhdGVTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJIYXNoUm91dGVyIiwiaGlzdG9yeVJlZiIsIm5hdmlnYXRpb25UeXBlIiwidXNlU2VhcmNoUGFyYW1zIiwiZGVmYXVsdEluaXQiLCJkZWZhdWx0U2VhcmNoUGFyYW1zUmVmIiwibG9jYXRpb25TZWFyY2giLCJkZWZhdWx0U2VhcmNoUGFyYW1zIiwiZ2V0QWxsIiwiYXBwZW5kIiwiZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24iLCJuYXZpZ2F0ZSIsInNldFNlYXJjaFBhcmFtcyIsIm5leHRJbml0IiwibmF2aWdhdGVPcHRpb25zIiwibmV3U2VhcmNoUGFyYW1zIiwiRGF0YVN0YXRpY1JvdXRlckNvbnRleHQiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlTG9jYXRpb24iLCJ1c2VOYXZpZ2F0ZSIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImFjdGl2ZVJlZiIsInJlbGF0aXZlIiwidXNlUGFyYW1zIiwicm91dGVNYXRjaCIsIkRlZmF1bHRFcnJvckVsZW1lbnQiLCJfc3RhdGUkZXJyb3JzIiwiaG9va05hbWUiLCJ1c2VEYXRhUm91dGVyU3RhdGUiLCJVc2VSb3V0ZUVycm9yIiwidGhpc1JvdXRlIiwiZXJyb3JzIiwidXNlUm91dGVFcnJvciIsImxpZ2h0Z3JleSIsInByZVN0eWxlcyIsImNvZGVTdHlsZXMiLCJSZW5kZXJFcnJvckJvdW5kYXJ5Iiwic3VwZXIiLCJzdGF0aWMiLCJlcnJvckluZm8iLCJSZW5kZXJlZFJvdXRlIiwicm91dGVDb250ZXh0IiwiZGF0YVN0YXRpY1JvdXRlckNvbnRleHQiLCJlcnJvckVsZW1lbnQiLCJfZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCIsIkF3YWl0UmVuZGVyU3RhdHVzIiwiUm91dGUiLCJfcHJvcHMiLCJSb3V0ZXIiLCJfcmVmNCIsImJhc2VuYW1lUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJfcmVmNSIsImRhdGFSb3V0ZXJDb250ZXh0IiwiZGF0YVJvdXRlclN0YXRlQ29udGV4dCIsInBhcmVudE1hdGNoZXMiLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZW5kZXJlZE1hdGNoZXMiLCJkYXRhUm91dGVyU3RhdGUiLCJlcnJvckluZGV4IiwiZmluZEluZGV4IiwicmVkdWNlUmlnaHQiLCJnZXRDaGlsZHJlbiIsIl9yZW5kZXJNYXRjaGVzIiwidXNlUm91dGVzIiwicm91dGVyIiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwiQXdhaXRFcnJvckJvdW5kYXJ5IiwicmVuZGVyRXJyb3IiLCJfdHJhY2tlZCIsIl9lcnJvciIsIl9kYXRhIiwibmV2ZXJTZXR0bGVkUHJvbWlzZSIsIlJlYWN0IiwiQXdhaXRDb250ZXh0IiwidHJlZVBhdGgiLCJsb2FkZXIiLCJoYXNFcnJvckJvdW5kYXJ5Iiwic2hvdWxkUmV2YWxpZGF0ZSIsImhhbmRsZSIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4IiwianN4cyIsImZvcmNlVXBkYXRlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJDb25zdW1lciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwiX2RlZmluZVByb3BlcnR5IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZiIsImNodW5rSWQiLCJwcm9taXNlcyIsIm1pbmlDc3NGIiwibmVlZEF0dGFjaCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNoYXJzZXQiLCJuYyIsIm9uU2NyaXB0Q29tcGxldGUiLCJkb25lRm5zIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicmVhbFNyYyIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsImh0bWwiLCJlbmFibGVDb2xvclNjaGVtZSIsIldlYmtpdEZvbnRTbW9vdGhpbmciLCJNb3pPc3hGb250U21vb3RoaW5nIiwiV2Via2l0VGV4dFNpemVBZGp1c3QiLCJfdGhlbWUkY29tcG9uZW50cyRNdWkiLCJjb2xvclNjaGVtZVN0eWxlcyIsIl9zY2hlbWUkcGFsZXR0ZSIsImRlZmF1bHRTdHlsZXMiLCJ0aGVtZU92ZXJyaWRlcyIsIk11aUNzc0Jhc2VsaW5lIiwiUkVBQ1RfQVBQX0xPR19ST0NLRVRfSUQiLCJwcm9jZXNzIiwiRmxvd0VtYmVkTGF6eSIsInNsdWciLCJnZXRFbGVtZW50QnlJZCIsIkJveCJdLCJzb3VyY2VSb290IjoiIn0=